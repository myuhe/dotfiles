これは $s、  $s より makeinfo バージョン  $s によって作成されました。



   This manual is for GNU Autoconf (version 2.59, 5 November 2003), a
package for creating scripts to configure source code packages using
templates and an M4 macro package.

   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
2002, 2003 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."
   
INFO-DIR-SECTION Software development
START-INFO-DIR-ENTRY
* Autoconf(ja): (autoconf-ja).         Create source code configuration scripts.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION Individual utilities
START-INFO-DIR-ENTRY
* autoscan(ja): (autoconf-ja)autoscan Invocation.
                                Semi-automatic `configure.ac' writing
* ifnames(ja): (autoconf-ja)ifnames Invocation.
                                Listing conditionals in source.
* autoconf(ja): (autoconf-ja)autoconf Invocation.
                                How to create configuration scripts
* autoreconf(ja): (autoconf-ja)autoreconf Invocation.
                                Remaking multiple `configure' scripts
* autoheader(ja): (autoconf-ja)autoheader Invocation.
                                How to create configuration templates
* autom4te(ja): (autoconf-ja)autom4te Invocation.
                                The Autoconf executables backbone
* configure(ja): (autoconf-ja)configure Invocation.
                                Configuring a package.
* autoupdate(ja): (autoconf-ja)autoupdate Invocation.
                                Automatic update of `configure.ac'
* config.status(ja): (autoconf-ja)config.status Invocation.
                                Recreating configurations.
* testsuite(ja): (autoconf-ja)testsuite Invocation.
                                Running an Autotest test suite.
END-INFO-DIR-ENTRY


File: autoconf-ja.info,  Node: Top,  Next: Introduction,  Up: (dir)

Autoconf
********



   This manual is for GNU Autoconf (version 2.59, 5 November 2003), a
package for creating scripts to configure source code packages using
templates and an M4 macro package.

   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,
2002, 2003 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."
   
* Menu:

* Introduction::                Autoconf's purpose, strengths, and weaknesses
* The GNU Build System::        A set of tools for portable software packages
* Making configure Scripts::    How to organize and produce Autoconf scripts
* Setup::                       Initialization and output
* Existing Tests::              Macros that check for particular features
* Writing Tests::               How to write new feature checks
* Results::                     What to do with results from feature checks
* Programming in M4::           Layers on top of which Autoconf is written
* Writing Autoconf Macros::     Adding new macros to Autoconf
* Portable Shell::              Shell script portability pitfalls
* Manual Configuration::        Selecting features that can't be guessed
* Site Configuration::          Local defaults for `configure'
* Running configure Scripts::   How to use the Autoconf output
* config.status Invocation::    Recreating a configuration
* Obsolete Constructs::         Kept for backward compatibility
* Using Autotest::              Creating portable test suites
* FAQ::                         Frequent Autoconf Questions, with answers
* History::                     History of Autoconf
* Copying This Manual::         How to make copies of this manual
* Indices::                     Indices of symbols, concepts, etc.

 --- 詳細なノードリスト ---

GNUビルドシステム

* Automake::                    Escaping Makefile hell
* Libtool::                     Building libraries portably
* Pointers::                    More info on the GNU build system

`configure'スクリプトの作成

* Writing configure.ac::        What to put in an Autoconf input file
* autoscan Invocation::         Semi-automatic `configure.ac' writing
* ifnames Invocation::          Listing the conditionals in source code
* autoconf Invocation::         How to create configuration scripts
* autoreconf Invocation::       Remaking multiple `configure' scripts

`configure.ac'を書く

* Shell Script Compiler::       Autoconf as solution of a problem
* Autoconf Language::           Programming in Autoconf
* configure.ac Layout::         Standard organization of `configure.ac'

初期化と出力ファイル

* Initializing configure::      Option processing etc.
* Notices::                     Copyright, version numbers in `configure'
* Input::                       Where Autoconf should find files
* Output::                      Outputting results from the configuration
* Configuration Actions::       Preparing the output based on results
* Configuration Files::         Creating output files
* Makefile Substitutions::      Using output variables in `Makefile's
* Configuration Headers::       Creating a configuration header file
* Configuration Commands::      Running arbitrary instantiation commands
* Configuration Links::         Links depending on the configuration
* Subdirectories::              Configuring independent packages together
* Default Prefix::              Changing the default installation prefix

Makefileへの代入

* Preset Output Variables::     Output variables that are always set
* Installation Directory Variables::  Other preset output variables
* Build Directories::           Supporting multiple concurrent compiles
* Automatic Remaking::          Makefile rules for configuring

ヘッダファイルのコンフィグレーション

* Header Templates::            Input for the configuration headers
* autoheader Invocation::       How to create configuration templates
* Autoheader Macros::           How to specify CPP templates

存在の調査

* Common Behavior::             Macros' standard schemes
* Alternative Programs::        Selecting between alternative programs
* Files::                       Checking for the existence of files
* Libraries::                   Library archives that might be missing
* Library Functions::           C library functions that might be missing
* Header Files::                Header files that might be missing
* Declarations::                Declarations that may be missing
* Structures::                  Structures or members that might be missing
* Types::                       Types that might be missing
* Compilers and Preprocessors::  Checking for compiling programs
* System Services::             Operating system services
* UNIX Variants::               Special kludges for specific UNIX variants

共通の動作

* Standard Symbols::            Symbols defined by the macros
* Default Includes::            Includes used by the generic macros

プログラムの選択

* Particular Programs::         Special handling to find certain programs
* Generic Programs::            How to find other programs

ライブラリ関数

* Function Portability::        Pitfalls with usual functions
* Particular Functions::        Special handling to find certain functions
* Generic Functions::           How to find other functions

ヘッダファイル

* Header Portability::          Collected knowledge on common headers
* Particular Headers::          Special handling to find certain headers
* Generic Headers::             How to find other headers

宣言

* Particular Declarations::     Macros to check for certain declarations
* Generic Declarations::        How to find other declarations

構造体

* Particular Structures::       Macros to check for certain structure members
* Generic Structures::          How to find other structure members

型

* Particular Types::            Special handling to find certain types
* Generic Types::               How to find other types

コンパイラとプリプロセッサ

* Specific Compiler Characteristics::  Some portability issues
* Generic Compiler Characteristics::  Language independent tests and features
* C Compiler::                  Checking its characteristics
* C++ Compiler::                Likewise
* Fortran Compiler::            Likewise

テストを書く

* Language Choice::             Selecting which language to use for testing
* Writing Test Programs::       Forging source files for compilers
* Running the Preprocessor::    Detecting preprocessor symbols
* Running the Compiler::        Detecting language or header features
* Running the Linker::          Detecting library features
* Run Time::                    Testing for run-time features
* Systemology::                 A zoology of operating systems
* Multiple Cases::              Tests for several possible values

テストプログラムを書く

* Guidelines::                  General rules for writing test programs
* Test Functions::              Avoiding pitfalls in test programs
* Generating Sources::          Source program boilerplate

テストの結果

* Defining Symbols::            Defining C preprocessor symbols
* Setting Output Variables::    Replacing variables in output files
* Caching Results::             Speeding up subsequent `configure' runs
* Printing Messages::           Notifying `configure' users

結果のキャッシュ

* Cache Variable Names::        Shell variables used in caches
* Cache Files::                 Files `configure' uses for caching
* Cache Checkpointing::         Loading and saving the cache file

M4でのプログラム

* M4 Quotation::                Protecting macros from unwanted expansion
* Using autom4te::              The Autoconf executables backbone
* Programming in M4sugar::      Convenient pure M4 macros
* Programming in M4sh::         Common shell Constructs

M4の引用符

* Active Characters::           Characters that change the behavior of M4
* One Macro Call::              Quotation and one macro call
* Quotation and Nested Macros::  Macros calling macros
* Changequote is Evil::         Worse than INTERCAL: M4 + changequote
* Quadrigraphs::                Another way to escape special characters
* Quotation Rule Of Thumb::     One parenthesis, one quote

`autom4te'の使用

* autom4te Invocation::         A GNU M4 wrapper
* Customizing autom4te::        Customizing the Autoconf package

M4sugarでのプログラム

* Redefined M4 Macros::         M4 builtins changed in M4sugar
* Evaluation Macros::           More quotation and evaluation control
* Forbidden Patterns::          Catching unexpanded macros

Autoconfマクロを書く

* Macro Definitions::           Basic format of an Autoconf macro
* Macro Names::                 What to call your new macros
* Reporting Messages::          Notifying `autoconf' users
* Dependencies Between Macros::  What to do when macros depend on other macros
* Obsoleting Macros::           Warning about old ways of doing things
* Coding Style::                Writing Autoconf macros a` la Autoconf

マクロ間の依存性

* Prerequisite Macros::         Ensuring required information
* Suggested Ordering::          Warning about possible ordering problems

移植性のあるシェルプログラム

* Shellology::                  A zoology of shells
* Here-Documents::              Quirks and tricks
* File Descriptors::            FDs and redirections
* File System Conventions::     File- and pathnames
* Shell Substitutions::         Variable and command expansions
* Assignments::                 Varying side effects of assignments
* Parentheses::                 Parentheses in shell scripts
* Special Shell Variables::     Variables you should not change
* Limitations of Builtins::     Portable use of not so portable /bin/sh
* Limitations of Usual Tools::  Portable use of portable tools
* Limitations of Make::         Portable Makefiles

手動のコンフィグレーション

* Specifying Names::            Specifying the system type
* Canonicalizing::              Getting the canonical system type
* Using System Type::           What to do with the system type

サイトコンフィグレーション

* External Software::           Working with other optional software
* Package Options::             Selecting optional features
* Pretty Help Strings::         Formatting help string
* Site Details::                Configuring site details
* Transforming Names::          Changing program names when installing
* Site Defaults::               Giving `configure' local defaults

インストール時のプログラム名の変換

* Transformation Options::      `configure' options to transform names
* Transformation Examples::     Sample uses of transforming names
* Transformation Rules::        `Makefile' uses of transforming names

`configure'スクリプトの実行

* Basic Installation::          Instructions for typical cases
* Compilers and Options::       Selecting compilers and optimization
* Multiple Architectures::      Compiling for multiple architectures at once
* Installation Names::          Installing in different directories
* Optional Features::           Selecting optional features
* System Type::                 Specifying the system type
* Sharing Defaults::            Setting site-wide defaults for `configure'
* Defining Variables::          Specifying the compiler etc.
* configure Invocation::        Changing how `configure' runs

時代遅れの構成物

* Obsolete config.status Use::  Different calling convention
* acconfig.h::                  Additional entries in `config.h.in'
* autoupdate Invocation::       Automatic update of `configure.ac'
* Obsolete Macros::             Backward compatibility macros
* Autoconf 1::                  Tips for upgrading your files
* Autoconf 2.13::               Some fresher tips

バージョン1からの更新

* Changed File Names::          Files you might rename
* Changed Makefiles::           New things to put in `Makefile.in'
* Changed Macros::              Macro calls you might replace
* Changed Results::             Changes in how to check test results
* Changed Macro Writing::       Better ways to write your own macros

バージョン2.13からの更新

* Changed Quotation::           Broken code which used to work
* New Macros::                  Interaction with foreign macros
* Hosts and Cross-Compilation::  Bugward compatibility kludges
* AC_LIBOBJ vs LIBOBJS::        LIBOBJS is a forbidden token
* AC_FOO_IFELSE vs AC_TRY_FOO::  A more generic scheme for testing sources

Autotestを用いてテストスイートを生成する

* Using an Autotest Test Suite::  Autotest and the user
* Writing testsuite.at::        Autotest macros
* testsuite Invocation::        Running `testsuite' scripts
* Making testsuite Scripts::    Using autom4te to create `testsuite'

Autotestテストスイートの使用

* testsuite Scripts::           The concepts of Autotest
* Autotest Logs::               Their contents

よくある質問とその回答

* Distributing::                Distributing `configure' scripts
* Why GNU m4::                  Why not use the standard M4?
* Bootstrapping::               Autoconf and GNU M4 require each other?
* Why Not Imake::               Why GNU uses `configure' instead of Imake
* Defining Directories::        Passing `datadir' to program
* autom4te.cache::              What is it?  Can I remove it?
* Present But Cannot Be Compiled::  Compiler and Preprocessor Disagree

Autoconfの歴史

* Genesis::                     Prehistory and naming of `configure'
* Exodus::                      The plagues of M4 and Perl
* Leviticus::                   The priestly code of portability arrives
* Numbers::                     Growth and contributors
* Deuteronomy::                 Approaching the promises of easy configuration

このマニュアルのコピー条件

* GNU Free Documentation License::  License for copying this manual

索引

* Environment Variable Index::  Index of environment variables used
* Output Variable Index::       Index of variables set in output files
* Preprocessor Symbol Index::   Index of C preprocessor symbols defined
* Autoconf Macro Index::        Index of Autoconf macros
* M4 Macro Index::              Index of M4, M4sugar, and M4sh macros
* Autotest Macro Index::        Index of Autotest macros
* Program & Function Index::    Index of those with portability problems
* Concept Index::               General index


File: autoconf-ja.info,  Node: Introduction,  Next: The GNU Build System,  Prev: Top,  Up: Top

はじめに
********

                       物理学者，エンジニア，そしてコンピュータ科学者が
                         神の性質を論じていました．"確かに物理学者だ"と
                    物理学者が言いました．"なぜなら，創造の早いうちに，
           神が光を作ったからだ．ご存じのように，マックスウェル方程式，
              電磁波の二重の性質，相対論者の結果..." "エンジニアだ！"と
                    エンジニアは言いました．"なぜなら，光を作る前に神は
     カオスを土地と水に分けたからだ．それには大量のエンジニアが必要で，
                       大量の泥を処理し，液体から固体を正しく分離し..."
                        コンピュータ科学者は叫びました．"そしてカオス，
                      それはいったいどこからきたと思いますか，う〜ん？"

                                                         --詠み人知らず

   Autoconfは，何種類ものUNIXライクのシステムに適合させるために，ソフ
トウェアソースコードパッケージを自動的にコンフィグレーションするシェルス
クリプトを生成するツールです．Autoconfで生成されたコンフィギュレーション
スクリプトは，実行時にはAutoconfに依存しないので，ユーザがAutoconfを持っ
ている必要がありません．

Autoconfで生成されたコンフィギュレーションスクリプトは，実行時にユーザの
手動の介入を必要としません．通常，システムタイプを指定する引数さえも必要
としません．その代わりに，ソフトウェアパッケージが必要とするそれぞれの機
能が存在するかどうか個別に調査します．(それぞれの調査の前に，調査してい
ることに関する一行のメッセージを出力し，そのため，ユーザはスクリプトが終
わるまで待っている間，そんなに退屈しません．) 結果として，それらは，一般
的なUNIXの変形から混成されたりカスタマイズされたりしているシステム
でうまく動作します．それぞれのUNIXの変形の，それぞれのリリースによっ
てサポートされている特徴をリストアップするファイルを保守する必要はありま
せん．

Autoconfが使用されているそれぞれのソフトウェアパッケージに対し，パッケー
ジが必要とする，または使用可能なシステムの特徴をリストアップしているテン
プレートファイルから，コンフィギュレーションスクリプトを作成します．シス
テムの特徴を認識して応答するシェルコードが書かれた後，使用可能な(または
必要な)機能を多くのパッケージで共有することが，Autoconfで可能になります．
理由があって，シェルコードの調整の必要性が後になって発覚した場合，ただ一ヵ
所だけ変更する必要があります．すべてのコンフィギュレーションスクリプトは，
更新されたコードを利用するため自動的に再生することが可能です．

MetaconfigパッケージはAutoconfの目的に似ていますが，それが生成するスクリ
プトは手動でユーザが介入する必要があり，大きなソースツリーをコンフィグレー
ションするときは全く不便です．Metaconfigスクリプトと異なり，注意して書い
てさえいれば，Autoconfスクリプトはクロスコンパイルもサポート可能です．

Autoconfは，移植性のあるソフトウェアパッケージに関連するすべての問題を解
決しているわけではありません -- より完全に解決するために，Automakeと
Libtoolのような，その他のGNUビルドツールと連係して使用すべきで
す．これらのツールは，すべての標準ターゲットを含んでいる，移植性のある再
帰的な`Makefile'の作成，共有ライブラリのリンクなどの作業を請け負い
ます．詳細は*Note The GNU Build System::.

   Autoconfは，Cプログラムの`#if'で使用するマクロ名に，多少制限を与え
ます(*note Preprocessor Symbol Index::)．

   Autoconfは，スクリプトを生成するためにGNU M4が必要です．
UNIXバージョンのM4が持っていない機能を使用していて，それには GNU M4
1.3も含まれます．バージョン1.4以降のGNU M4 を 使用する必要があります．

   バージョン1からの更新についての情報は，*Note Autoconf 1::.
Autoconfの開 発の物語については，*Note History::.
Autoconfについての一般的な質問へ回 答は，*Note FAQ::.

更新情報，メーリングリストの詳細，既知のバグリストへのポインタなどは，
Autoconf web page(1)を参照してください．

   Autoconfに関する提案は the Autoconf mailing list
<autoconf@gnu.org>にメールして下さい．

   バグの報告は，できれば Autoconf Gnats database(2)へ提出するか，the
Autoconf Bugs mailing list
<bug-autoconf@gnu.org>へ送付してください．できれば最初に，現在の開
発バージョンでバグが既に解決されていないことと，まだ報告されていないこと
を調査してください．すべての必要な情報と問題を立証する短い
`configure.ac'を確実に同封してください．

   Autoconfの開発ツリーは，CVSでアクセス可能です．詳細は，
Autoconfのウェブページを参照してください． CVSweb interface to the
Autoconf development tree(3)もあります．
現在のCVSバージョンに関連するパッチは，レビューするために Autoconf
Patches mailing list <autoconf-patches@gnu.org>に送付す
ることが可能です．

その作業のため，Autoconfは既に有用性が立証されている，よく使用されるマ
クロだけを含めています．それでも，マクロを共有したい，または既存のもの
を探したい場合，Peter Simons <simons@computer.org>の好意で作成
されているAutoconf Macro Archive(4)を参照してください．

   ---------- Footnotes ----------

   (1) Autoconf web page,
<http://www.gnu.org/software/autoconf/autoconf.html>.

   (2) Autoconf Gnats database,
<http://bugs.gnu.org/cgi-bin/gnatsweb.pl?database=autoconf>.

   (3) CVSweb interface to the Autoconf development tree,
<http://subversions.gnu.org/cgi-bin/cvsweb/autoconf/>.

   (4) Autoconf Macro Archive,
<http://www.gnu.org/software/ac-archive/>.


File: autoconf-ja.info,  Node: The GNU Build System,  Next: Making configure Scripts,  Prev: Introduction,  Up: Top

GNUビルドシステム
*****************

   Autoconfは重要な問題を解決します --
それはシステム特有の，ビルドと実行 時に見つけた信頼できる情報になります
-- しかし，これは移植性のあるソフ
トウエアを開発するためのパズルの一つの部品に過ぎません．このために，
GNUプロジェクトは，Autoconfが開始した仕事を完了するためのユー
ティリティの，統合された組み合わせ(スイート)を開発してきました．
GNUビルドシステムの最も重要な構成要素は，Autoconf，Automake，
そしてLibtoolです．この章で，我々はこれらのツールを紹介し，より多くの情
報源を提示し，そして，ソフトウェアに対してGNUビルドシステム全
体を便利に使用するように説得してみたいと思います．

* Menu:

* Automake::                    Escaping Makefile hell
* Libtool::                     Building libraries portably
* Pointers::                    More info on the GNU build system


File: autoconf-ja.info,  Node: Automake,  Next: Libtool,  Up: The GNU Build System

Automake
========

   `make'の偏在とは，`Makefile'はソフトウェアの自動的なビルド
ルールを配布するほとんど唯一の現実的な方法だということを意味しているので
すが，すぐに`make'の多くの限界にぶつかります．それには，自動的な
依存性の追跡に対するサポート，サブディレクトリでの再帰的なビルド，(例え
ば，ネットワークファイルシステムに対する)信頼できるタイムスタンプなどが
足りないので，開発者はそれぞれのプロジェクトに対し，辛い(そして間違うこ
とが多い)車輪の再開発が必要になっています．多くのシステムの
`make'の癖のために，移植性は些細な問題ではなくなっています．なに
よりも，ユーザが期待する多くの標準的なターゲット(`make install'， `make
distclean'，`make uninstall'など)を手作業で実装する必要
があることがあげられます．もちろん，Autoconfを使用しているので，
`@CC@'，`@CFLAGS@'，そして`configure'で提供される
その他の置換式を認識するように，`Makefile.in'に対応するコードを挿入
しているでしょう．この乱雑な状況は"Automake"で処理しましょう．

   Automakeは，プレーンの`Makefile'の方法と比較して，非常に簡単でより
強力な構文で，ビルドが必要とするものを`Makefile.am'ファイルで指定す
ることを可能とし，Autoconfで使用するための移植性の高い`Makefile.in'
を生成します．例えば，単純な"Hello world"プログラムをビルドしインストー
ルするための`Makefile.am'は以下のようになります．

     bin_PROGRAMS = hello
     hello_SOURCES = hello.c

結果として得られる`Makefile.in'(約400行)は，自動的に，すべての標準
的なターゲット，Autoconfが提供する置換式，自動的な依存性追跡，
`VPATH'のビルドなどをサポートします．`make'で`hello'
プログラムをビルドし，`make install'でそれを`/usr/local/bin'
(または`/usr/local'でないときは`configure'で与えたプレフィ
クス)にインストールします．

Automakeの利点は，パッケージが大きければ大きい(特にサブディレクトリがあ
るもの)ほど有利になりますが，小さなプログラムに対しても重要な利便性と移
植性を追加します．そして，それだけがすべてではありません....


File: autoconf-ja.info,  Node: Libtool,  Next: Pointers,  Prev: Automake,  Up: The GNU Build System

Libtool
=======

他のプログラムでも，これまでの作業の成果から利益を得ることを可能にするた
め，プログラムだけでなくライブラリをビルドしたいことも頻繁にあるでしょう．
理想的には，_共有_(動的にリンクされる)ライブラリを生成したいと考え，
それは，複数のプログラムからディスクやメモリに同じものを複製せずに使用す
ることが可能で，リンクされているプログラムに依存せずに更新可能だからです．
しかし，移植性の高い共有ライブラリは悪夢の元です -- それぞれのシステム
は，独自の互換性のないツール，コンパイラフラグ，そして魔法の呪文がありま
す．幸いにもGNUは解決方法を提供しています．それは， "Libtool"です．

Libtoolは，共有ライブラリのビルドに関するすべての要求を処理し，現時点で
は，移植性を扱うための_唯一の_方法だと思われます．また，以下のよう
な頭痛の種も扱います．それは，共有ライブラリの様々な接尾子を扱う
`Makefile'ルールの相互作用，以前にスーパーユーザによってインストー
ルされた共有ライブラリとの信頼できるリンク，そして，整合性の高いバージョ
ン管理システムの提供です(それは，ライブラリの異なるバージョンを，バイナ
リ互換性を壊さないようにインストールし更新することを可能にするためのもの
です)．しかしLibtoolは，Autoconf同様に，単独で使用することは可能ですが，
ほとんどは単純にAutomakeと組み合わせて利用されます -- そこで，Libtool
は共有ライブラリが必要なときに自動的に使用され，そして使用者はその構文を
知っている必要はありません．


File: autoconf-ja.info,  Node: Pointers,  Prev: Libtool,  Up: The GNU Build System

参考文献
========

   単一のシステムでの小さなプロジェクトに対して，簡単な`make'を使用
している開発者は，AutomakeとAutoconfを使用するために学習する見通しを立て
ると圧倒されるかもしれません．しかし，ソフトウェアはより多くのユーザに配
布されるので，GNUビルドツールが提供するサービスを再発明するた
めに多くの努力を費やしていることと，一度犯して解決した過ちを繰り返してい
ることがすぐに分かるでしょう．(また，既にAutoconfを学んでいるので，
Automakeは朝飯前でしょう．)

   GNUビルドツールの詳細な情報を得るために，訪問する場所はたくさ
んあります．

   - Web

     Autoconf(1)， Automake(2)，そして Libtool(3)のホームページ．

   - Automakeのマニュアル

     Automakeの詳細は，*Note Automake: (automake)Top.

   - 書籍

     書籍`GNU Autoconf, Automake and
     Libtool'(4)では，完全なGNUビルド環境が記述されてい ます．"The Goat
     Book" home page(5)では，オンラインで本全体を見ることも可能です．

   - チュートリアルと例

     Autoconf Developer Page(6)では，
     Autoconf/Automakeのオンラインのチュートリアルと， Autoconf Macro
     Archive(7) のリンクも管理しています．


   ---------- Footnotes ----------

   (1) Autoconf, <http://www.gnu.org/software/autoconf/>.

   (2) Automake, <http://www.gnu.org/software/automake/>.

   (3) Libtool, <http://www.gnu.org/software/libtool/>.

   (4) `GNU Autoconf, Automake and Libtool', by G. V. Vaughan, B.
Elliston, T. Tromey, and I. L. Taylor. New Riders, 2000, ISBN
1578701902.

   (5) "The Goat Book" home page, <http://sources.redhat.com/autobook/>.

   (6) Autoconf Developer Page, <http://sources.redhat.com/autoconf/>.

   (7) Autoconf Macro Archive,
<http://www.gnu.org/software/ac-archive/>.


File: autoconf-ja.info,  Node: Making configure Scripts,  Next: Setup,  Prev: The GNU Build System,  Up: Top

`configure'スクリプトの作成
***************************

   Autoconfが生成するコンフィギュレーションスクリプトは，慣習的に
`configure'と呼ばれます．実行時に，`configure'はいくつか
のファイルを作成し，そこで，コンフィギュレーションパラメータを適切な値に
置換します．`configure'が作成するファイルは以下の通りです．

   - 一つ以上の`Makefile'で，通常はパッケージのそれぞれのサブディレクト
     リに一つずつあります(*note Makefile Substitutions::)．

   -
     オプションのCヘッダファイルで，それはコンフィグレーション可能な名前で，
     `#define'ディレクティブを含んでいます(*note Configuration
     Headers::)．

   - `config.status'という名のシェルスクリプトで，それは実行時に上記でリ
     ストアップされているファイルを再生成します(*note config.status
     Invocation::)．

   - (`configure --config-cache'が使用されるときに作成される)
     `config.cache'という名のオプションのシェルスクリプトで，それは多く
     のテストの実行結果を保存しています(*note Cache Files::)．

   - `config.log'という名のコンパイラが生成する全てのメッセージを含んで
     いるファイルで，`configure'が失敗した場合はデバッグの助けとなり
     ます．

   Autoconfを用いて`configure'スクリプトを作成するために，Autoconf
の入力ファイル`configure.ac'(または`configure.in')を書き，
`autoconf'をそこで実行する必要があります．Autoconfでもたらされた
ものを補うために独自の機能テストを書く場合，`aclocal.m4'と
`acsite.m4'という名のファイルも書くことになるでしょう．
`#define'ディレクティブを含むCヘッダファイルを使用する場合，
`autoheader'も実行し，パッケージで生成されるファイル
`config.h.in'を配布することになるでしょう．

コンフィギュレーションで使用可能なファイルを生成する方法は，以下で示す図
の用になります．実行するプログラムには，`*'が付いています．オプショ
ンのファイルは角カッコ(`[]')で囲っています．`autoconf'と
`autoheader'は，Autoconfでインストールされる(`autoconf.m4'
が読む)マクロファイルも読み込みます．

ソフトウェアパッケージを配布する準備で使用されるファイルは，以下のように
なっています．
     your source files --> [autoscan*] --> [configure.scan] --> configure.ac
     
     configure.ac --.
                    |   .------> autoconf* -----> configure
     [aclocal.m4] --+---+
                    |   `-----> [autoheader*] --> [config.h.in]
     [acsite.m4] ---'
     
     Makefile.in -------------------------------> Makefile.in

ソフトウェアパッケージのコンフィグレーションで使用されるファイルは，以下
のようになっています．
                            .-------------> [config.cache]
     configure* ------------+-------------> config.log
                            |
     [config.h.in] -.       v            .-> [config.h] -.
                    +--> config.status* -+               +--> make*
     Makefile.in ---'                    `-> Makefile ---'

* Menu:

* Writing configure.ac::        What to put in an Autoconf input file
* autoscan Invocation::         Semi-automatic `configure.ac' writing
* ifnames Invocation::          Listing the conditionals in source code
* autoconf Invocation::         How to create configuration scripts
* autoreconf Invocation::       Remaking multiple `configure' scripts


File: autoconf-ja.info,  Node: Writing configure.ac,  Next: autoscan Invocation,  Up: Making configure Scripts

`configure.ac'を書く
====================

   ソフトウェアパッケージの`configure'スクリプトを生成するため，パッ
ケージが必要とする，または利用可能なシステムの特徴をテストするAutoconfマ
クロの呼び出しを含んでいる，`configure.ac'と呼ばれるファイルを作成
してください．Autoconfマクロには，多くの特徴を調査するものはすでに存在し
ています．それら関する記述は，*Note Existing
Tests::を参照してください．ほ
とんどのその他の特徴に対しては，カスタムチェックを生成するAutoconfのテン
プレートマクロを使用することが可能です．それらに関する詳細は， *Note
Writing Tests::を参照してください．特にトリッキーな，または専門的な
特徴に対して，`configure.ac'に，若干の手作りのシェルコマンドを含め
る必要もあるでしょう．`autoscan'プログラムは`configure.ac'
を書くための良いきっかけ与えてくれます．(詳細は，*note autoscan
Invocation::)．

   Autoconfのこれまでのバージョンでは，名前`configure.in'を勧めていま
したが，それは曖昧で(このファイルを処理するために必要なツールは，拡張子
では分かりません)，`config.h.in'などで(`.in'は
"`configure'で生成される"という意味では)ちょっと混乱していまし
た．現在では，`configure.ac'の使用が好まれます．

* Menu:

* Shell Script Compiler::       Autoconf as solution of a problem
* Autoconf Language::           Programming in Autoconf
* configure.ac Layout::         Standard organization of `configure.ac'


File: autoconf-ja.info,  Node: Shell Script Compiler,  Next: Autoconf Language,  Up: Writing configure.ac

シェルスクリプトコンパイラ
--------------------------

   他のコンピュータ言語に対して，Autoconfで`configure.ac'を正しくプロ
グラムするために，言語が解決しようとする問題が_何_で，そうするため
に_どうする_のかを理解する必要があります．

Autoconfが解決する問題は，世界が混乱しているということです．結局，全ての
異なる種類のシステムでパッケージのコンパイルを簡単にするためにAutoconfを
使用しますが，それを極端に嫌う人も中にはいます．Autoconf自身は，これらの
差を価値あるものとして扱います．`configure'をこれらの全てのシス
テムで実行する必要があり，そのため，`configure' には，機能的にそ
れらの最小公倍数に制限する必要があります．

   通常，シェルスクリプトを考えるでしょう．`autoconf'が必要でしょう
か？正しく書かれたシェル関数の組み合わせで，手で`configure'スク
リプトを書くことを十分に簡単にします．ああ！残念ながら，シェル関数は最小
公倍数ではありません．そのため，関数を定義しそれを十回使用したいところで，
その本体を十回コピーする必要があるでしょう．

   そのため，本当に必要なものは，コンパイラのようなもの，すなわち
`autoconf'，Autoconfプログラムが受け入れるもの，すなわち
`configure.ac'，そして，それを移植性の高いシェルスクリプト
`configure'に変換するものです．

   どのようにして，`autoconf'がこの作業を実行するのでしょう？

可能性としては明らかに二つあります．新しい言語を作成すること，または既存
のものを拡張することです．前者は非常に魅力的です．あらゆる最適化が簡単に
実装可能で，Autoconfプログラムで厳密なチェックを実行することが可能です
(例えば，移植性のないあらゆる構成物は除外します)．あるいは，
`sh'(Bourne shell) 言語のように，既存の言語を拡張することが可能です．

   Autoconfは後者の方法で行なっています．それは`sh'の最上位層です．そ
のため，マクロを展開するものとして`autoconf'を実装することが最も
便利になっています．マクロ呼び出しをマクロの本体で置換し，最終的にピュア
な`sh'スクリプトを生成しながら，テキスト入力で"マクロ展開(macro
expansion)"を繰り返し実行するプログラムです．Autoconfマクロの展開に専念
して実装する代わりに，M4のような既存の一般的な目的を持つマクロ言語を使用
し，M4マクロの組み合わせとして拡張部分を実装する方が自然です．


File: autoconf-ja.info,  Node: Autoconf Language,  Next: configure.ac Layout,  Prev: Shell Script Compiler,  Up: Writing configure.ac

Autoconf言語
------------

Autoconf言語は，プレーンテキスト同様に実際のコードを扱うので，多くの他の
コンピュータ言語と全く異なります．例えばCでは，データと命令は全く異なる
構文上のステータスとなりますが，Autoconfでは，それらのステータスは厳密に
同じです．このため，我々はリテラル文字列を展開されたテキストと区別する手
段が必要です．それは引用符です．

引数があるマクロを呼び出すとき，マクロ名と開いているカッコの間に空白があっ
てはなりません．引数は，M4の引用符文字`['と`]'で囲み，カンマで
分けるべきです．引数が単純なテキストのときは，引用符がなくても大丈夫かも
しれませんが，他のマクロの呼び出しのような複雑な引数は，_常に_引用
符で囲んでください．この規則は，他のマクロからの呼び出しを含め，全てのマ
クロ呼び出しで再帰的に適用されます．

   例えば，以下のようにします．

     AC_CHECK_HEADER([stdio.h],
                     [AC_DEFINE([HAVE_STDIO_H])],
                     [AC_MSG_ERROR([Sorry, can't do anything for you])])

これは，正しく引用符で囲まれます．その引用を以下のように単純にしても大丈
夫かもしれません．

     AC_CHECK_HEADER(stdio.h,
                     [AC_DEFINE(HAVE_STDIO_H)],
                     [AC_MSG_ERROR([Sorry, can't do anything for you])])

`AC_MSG_ERROR'の引数は，引用符で囲まれたままだということに注意して
ください．そうしない場合は，カンマは引数を分離するものとして解釈されるで
しょう．

   以下の例は，引用符で囲まれていないので，間違っていて危険です．

     AC_CHECK_HEADER(stdio.h,
                     AC_DEFINE(HAVE_STDIO_H),
                     AC_MSG_ERROR([Sorry, can't do anything for you]))

場合によっては，マクロ呼び出しのようなテキストを使用する必要があるかもし
れません．マクロ引数として渡されないときでもテキストは引用符で囲む必要が
あります．

     echo "Hard rock was here!  --[AC_DC]"

結果として以下のようになります．

     echo "Hard rock was here!  --AC_DC"

同じテキストをマクロ引数で使用するときは，そのために余分な引用符レベルを
追加する必要があります(一つはマクロ置換で削除されるためです)．従って一般
的に，_全てのリテラル文字列の引数に対して二重に引用符を使用すること_
は良い考えです．

     AC_MSG_WARN([[AC_DC stinks  --Iron Maiden]])

絶えず誤解されていたAutoconfの構成物の一つを，今では理解できるでしょう
....第一の規則は，_マクロ展開が予測されるところでは，引用符の
展開を予測してください_ということです．すなわち，引用符のレベルの一つが
失われるということです．例えば，以下のようにします．

     AC_COMPILE_IFELSE([char b[10];],, [AC_MSG_ERROR([you lose])])

これは正しいものです．ここで，`AC_COMPILE_IFELSE'最初の引数は， `char
b[10];'で，一度展開されて，結果として`char b10;'になりま
す．(M4の`changequote'プリミティブを用いてこの問題を解決することが，
一般的な慣習として以前のAutoconfにありましたが，それを使用しないでくださ
い！)さて，より詳しく見てみましょう．もう一方では，第一引数はリテラルと
して理解され，そのためそれは引用符で二重に囲む必要があります．

     AC_COMPILE_IFELSE([[char b[10];]],, [AC_MSG_ERROR([you lose])])

Voila`，今回は実際に`char b[10];'を生成しているのです！

   注意深く読んでいると，これらのガイドラインによれば，上記の例の
`AC_CHECK_HEADER'で引用符で"正しく"囲まれているものは，実際には三
組の引用符が足りないことに気付くでしょう！それにもかかわらず，可読性のた
め，リテラルを二重に引用符で囲むことは，このマニュアルでは必要なところで
のみ使用されます．

オプションの引数を受け入れるマクロもあり，それはこのドキュメントでは(引
用符の文字を使用して混乱しないように)，[ARG]として表現します．空の
ままにしたり，明示的に引数を空にするために`[]'を使用したり，単純に
後置されるカンマを省略したりすることが可能です．以下の三行は等価となりま
す．

     AC_CHECK_HEADERS(stdio.h, [], [], [])
     AC_CHECK_HEADERS(stdio.h,,,)
     AC_CHECK_HEADERS(stdio.h)

   `configure.ac'では，単独行にそれぞれのマクロ呼び出しを書くことが最
善です．ほとんどのマクロは，余分な改行を加えません．それらは，コマンドを
終端するためのマクロ呼び出しの後の改行に依存しています．このアプローチで
は，生成された`configure'スクリプトを，多くの空白行を挿入するこ
となく，若干読みやすくします．シェルは，改行に干渉されることなく割り当て
ることが可能なので，シェル変数をマクロ呼び出しと同じ行で設定すると，通常
は安全です．

   `configure.ac'ファイルに`#'で始まるコメントを含めることも可能
です．例えば，以下のような行を`configure.ac'ファイルの最初に書くと
役に立つでしょう．

     # Process this file with autoconf to produce a configure script.


File: autoconf-ja.info,  Node: configure.ac Layout,  Prev: Autoconf Language,  Up: Writing configure.ac

標準的な`configure.ac'のレイアウト
----------------------------------

   `configure.ac'でAutoconfマクロを呼び出す順番は，いくつか例外があり
ますが重要ではありません．すべての`configure.ac'では，調査の前の
`AC_INIT'の呼び出しと，最後の`AC_OUTPUT'の呼び出しを含める必要
があります(*note Output::)．さらに，いくつかの変数については，何を行なう
かを決定するため，前もって設定されている値を調査できるように，他のマクロ
が最初に呼ばれることに依存するマクロもあります．これらのマクロはそれぞれ
の説明で書かれていて(*note Existing Tests::)，`configure'が作成
されているとき，間違った順番で呼び出されている場合は警告されます．

整合性を促進するため，Autoconfマクロを呼び出す順番をここで提案します．一
般的に言って，このリストの終わり近くのものは，その前のものに依存します．
例えば，ライブラリ関数は型とライブラリの影響があります．

     Autoconfの必要条件
     `AC_INIT(PACKAGE, VERSION, BUG-REPORT-ADDRESS)'
     パッケージの情報
     プログラムの調査
     ライブラリの調査
     ヘッダファイルの調査
     型の調査
     構造体の調査
     コンパイラの特徴の調査
     ライブラリ関数の調査
     システムサービスの調査
     `AC_CONFIG_FILES([FILE...])'
     `AC_OUTPUT'


File: autoconf-ja.info,  Node: autoscan Invocation,  Next: ifnames Invocation,  Prev: Writing configure.ac,  Up: Making configure Scripts

`configure.ac'を作成するために`autoscan'を使用する
==================================================

   `autoscan'プログラムは，ソフトウェアパッケージに対する
`configure.ac'ファイルの作成と/または管理に役に立ちます．
`autoscan'は，コマンドライン引数で与えられたディレクトリをルート
とするディレクトリツリー，または，与えられていない場合はカレントディレク
トリでソースファイルを調査します．それは，ソースファイルの一般的な移植性
の問題を検索して，パッケージに対する`configure.ac'の準備となるファ
イル`configure.scan'を作成し，あるいは存在している
`configure.ac'の完全性を調査します．

   `configure.ac'を作成するために`autoscan'を使用するとき，
`configure.scan'を`configure.ac'に改名する前に，手作業でそれを
調査する必要があります．恐らくなんらかの調整が必要です．時折
`autoscan'は，`autoconf'が警告を出すような，関連するマク
ロに対して間違った順序でマクロを出力する場合もあります．手作業でそのよう
なマクロを移動する必要があります．また，パッケージでコンフィギュレーショ
ンヘッダファイルを使用する場合も，`AC_CONFIG_HEADER'の呼び出しを加
える必要があります(*note Configuration Headers::)．また，Autoconfで動作
するように，プログラムの`#if'ディレクティブを変更したり加えたりする
必要があります(そのような仕事に役に立つプログラムの情報は， *note
ifnames Invocation::)．

   `configure.ac'を管理するために`autoscan'を使用しているとき，
単純にそれが追加した提案を検討してください．ファイル`autoscan.log'
には，マクロが要求される理由に関する詳細な情報が含まれています．

   `autoscan'は，パッケージのソースファイルで特定のシンボルを見つけ
たときに出力するマクロを決定するため，(Autoconfと一緒にインストールされ
ている)データファイルも使用します．これらのデータファイルはすべて同じ書
式です．それぞれの行は，シンボル，空白スペース，そしてそのシンボルがある
場合に出力するAutoconfマクロから成り立っています．`#'で始まる行はコ
メントです．

   `autoscan'は以下のオプションを受け入れます．

`--help'
`-h'
     コマンドラインオプションの概要を出力して終了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力して終了します．

`--verbose'
`-v'
     調査しているファイルと，その中で見つかった興味深いものとなる可能性のある
     シンボル名を出力します．この出力は大量になるはずです．

`--include=DIR'
`-I DIR'
     DIRをインクルードパスの後に追加します．複数回の呼び出しで累積され
     ます．

`--prepend-include=DIR'

`-B DIR'
     DIRをインクルードパスの前に追加します．複数回の呼び出しで累積され
     ます．


File: autoconf-ja.info,  Node: ifnames Invocation,  Next: autoconf Invocation,  Prev: autoscan Invocation,  Up: Making configure Scripts

条件をリストアップするため`ifnames'を使用する
=============================================

   `ifnames'は，ソフトウェアパッケージに対する`configure.ac'
を書くとき役に立つはずです．それは，Cプリプロセッサの条件式でパッケージ
が既に使用している識別子を出力します．パッケージが既に移植性に対して準備
されている場合，`ifnames'は`configure'で調査することが必
要なものを理解することに役く立つはずです．それは`autoscan'が生成
した`configure.ac'とのギャップを埋める役に立つかもしれません (*note
autoscan Invocation::)．

   `ifnames'は，コマンドラインで指名されたすべてのCソースファイルを
(無い場合は標準入力から)走査し，これらのファイルに現れる`#if'，
`#elif'，`#ifdef'，または`#ifndef'ディレクティブの，すべ
ての識別子をソートしたリストを標準出力に書き出します．それは，識別子があ
るファイルの空白で分離されたリストに続いて，一行にぞれぞれの識別子を出力
します．

`ifnames'は以下のオプションを受け入れます．

`--help'
`-h'
     コマンドラインオプションの概要を出力して終了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力して終了します．


File: autoconf-ja.info,  Node: autoconf Invocation,  Next: autoreconf Invocation,  Prev: ifnames Invocation,  Up: Making configure Scripts

`configure'を作成するため`autoconf'を使用する
=============================================

   `configure.ac'から`configure'を作成するために，
`autoconf'プログラムを引数無しで実行してください．
`autoconf'は，Autoconfマクロを使用しながら，M4マクロプロセッサを
用いて`configure.ac'を処理します．`autoconf'に引数を与えて
いる場合，`configure.ac'の代わりにそのファイルを読み，
`configure'の代わりに，標準出力にコンフィグレーションスクリプト
を書き出します．`autoconf'に引数`-'を与えた場合，
`configure.ac'の代わりに標準入力から読み込み，標準出力にコンフィグ
レーションスクリプトを書き出します．

Autoconfマクロは，複数のファイルで定義されています．ファイルにはAutoconf
と一緒に配布される物もあります．`autoconf'は最初にそれを読み込み
ます．オプションのファイル`acsite.m4'を，配布されたAutoconfマクロファ
イルを含むディレクトリで探し，オプションのファイル`aclocal.m4'はカ
レントディレクトリで探します．これらのファイルは，サイトやパッケージの
Autoconfマクロ定義を含めることが可能です(詳細は，*note Writing Autoconf
Macros::)．一つ以上のファイルで定義されているマクロを`autoconf'が
読み込む場合，最後の定義がそれ以前の定義に優先します．

   `autoconf'は以下のオプションを受け入れます．

`--help'
`-h'
     コマンドラインオプションの概要を出力して終了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力して終了します．

`--verbose'
`-v'
     処理しているステップを報告します．

`--debug'
`-d'
     一時的なファイルを削除しません．

`--force'
`-f'
     入力ファイルより`configure'が新しい場合でも，それを再生成します．

`--include=DIR'
`-I DIR'
     DIRをインクルードパスの後に追加します．複数回の呼び出しで累積され
     ます．

`--prepend-include=DIR'

`-B DIR'
     DIRをインクルードパスの前に追加します．複数回の呼び出しで累積され
     ます．

`--output=FILE'
`-o FILE'
     (出力や追跡の)出力をFILEに保存します．ファイル`-'は標準出力
     に対するものです．

`--warnings=CATEGORY'
`-W CATEGORY'
     (実際にはカンマで分けたリストが可能な)CATEGORYに関連する警告を報告
     します．カテゴリの総合的なリストは，マクロ`AC_DIAGNOSE'と *Note
     Reporting Messages::.  特別な値には，以下のものが含まれています．

    `all'
          全ての警告を報告します．

    `none'
          何も報告しません．

    `error'
          警告をエラーとして扱います．

    `no-CATEGORY'
          CATEGORYに分類される警告を利用不可能にします．

     `syntax'に関する警告はデフォルトで利用可能で，カンマで分けられたカ
     テゴリリストの環境変数`WARNINGS'は尊重されます．`-W
     CATEGORY'を渡すことで，
     `--warnings=syntax,$WARNINGS,CATEGORY'が渡されたかのように動
     作します．デフォルトと`WARNINGS'を利用不可能にしたいが，(例えば) 時
     代遅れの構成物についての警告は利用可能にしたい場合，`-W
     none,obsolete'を使用してください．

     `autoconf'はバックグラウンドで`autom4te'を使用するので，
     それはエラーのバックトレースを表示しますが，警告については行ないません．
     そうしたい場合，`-W error'のみを渡してください．いくつかの例は，
     *Note autom4te Invocation::.

`--trace=MACRO[:FORMAT]'
`-t MACRO[:FORMAT]'
     `configure'スクリプトを作成しませんが，FORMATでマクロの呼
     び出しをリストアップします．複数の`--trace'の引数は，複数のマクロ
     をリストアップするために使用可能です．単一のマクロに対する複数の
     `--trace'の引数は，累積的ではありません．その代わりにFORMAT
     を必要なものにすべきです．

     FORMATは，必要な場合は改行をともなう通常の文字列と，いくつかの特殊
     なエスケープコードです．デフォルトは`$f:$l:$n:$%'です．FORMAT
     の詳細は，*Note autom4te Invocation::を参照してください．

`--initialization'
`-i'
     デフォルトで，`--trace'はAutoconfマクロ(特に`AC_DEFUN'の定義)
     の初期化を追跡しません．これで顕著に高速化されますが，このオプションで利
     用不可能にすることができます．

   `configure.ac'ファイルの内容を調査する必要があることもよくあります
が，自分で解析することは，非常に脆くエラーを起こしやすいものです．
`configure.ac'をスキャンするために，`--trace'を信頼してみて
ください．例えば，置換される変数のリストを見つけるため，以下のようにして
みてください．

     $ autoconf -t AC_SUBST
     configure.ac:2:AC_SUBST:ECHO_C
     configure.ac:2:AC_SUBST:ECHO_N
     configure.ac:2:AC_SUBST:ECHO_T
     More traces deleted

以下の例では，`$@'，`$*'と*$%*の違いを強調しています．

     $ cat configure.ac
     AC_DEFINE(This, is, [an
     [example]])
     $ autoconf -t 'AC_DEFINE:@: $@
     *: $*
     $: $%'
     @: [This],[is],[an
     [example]]
     *: This,is,an
     [example]
     $: This:is:an [example]

FORMATは，柔軟にできます．

     $ autoconf -t 'AC_SUBST:$$ac_subst{"$1"} = "$f:$l";'
     $ac_subst{"ECHO_C"} = "configure.ac:2";
     $ac_subst{"ECHO_N"} = "configure.ac:2";
     $ac_subst{"ECHO_T"} = "configure.ac:2";
     More traces deleted

長いSEPARATORは，複雑な構想の可読性を改善したり，解析を簡単にする
ために使用可能です(例えば，分離文字に適した単一文字が無いときです)．

     $ autoconf -t 'AM_MISSING_PROG:${|:::::|}*'
     ACLOCAL|:::::|aclocal|:::::|$missing_dir
     AUTOCONF|:::::|autoconf|:::::|$missing_dir
     AUTOMAKE|:::::|automake|:::::|$missing_dir
     More traces deleted


File: autoconf-ja.info,  Node: autoreconf Invocation,  Prev: autoconf Invocation,  Up: Making configure Scripts

`configure'スクリプトを更新するため`autoreconf'を使用する
=========================================================

   GNUビルドシステムの様々なコンポーネントをインストールすること
は退屈なものです．それは，Gettextに対する`autopoint'，
`Makefile.in'や`automake'等を，それぞれのディレクトリで実行
することを意味します．`automake'のようなツールが更新されたり，
`configure.ac'のようなソースが更新されたり，ただ単純にGNU
ビルドシステムを新しいツリーにインストールするためだけでも，そうすること
が必要になるかもしれません．

   `autoreconf'は，指定されたディレクトリとそのサブディレクトリ (*note
Subdirectories::)で，GNUビルドシステムを更新するために，
`autoconf'，`autoheader'，`aclocal'，
`automake'，`libtoolize'，そして(適切なときは)
`autopoint'を繰り返し実行します．デフォルトで，ソースファイルよ
り古いファイルだけが再生成されます．

   新しいバージョンのツールをインストールした場合，`autoreconf'に
`--force'オプションを与えることで，_すべての_ファイルを再生
成することが可能です．

   ソースファイルを変更したとき，`configure'スクリプトを自動的に再
生成する`Makefile'ルールについては，*Note Automatic Remaking::.  そ
の方法は，コンフィギュレーションヘッダテンプレートのタイムスタンプを正確
に処理しますが，`--autoconf-dir=DIR'や `--localdir=DIR'を渡しません．

`autoreconf'は以下のオプションを受け入れます．

`--help'
`-h'
     コマンドラインオプションの概要を出力して終了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力して終了します．

`--verbose'
     `autoreconf'が`autoconf'(と適切な場合は
     `autoheader')を実行している，それぞれのディレクトリ名を出力しま
     す．

`--debug'
`-d'
     一時ファイルを削除しません．

`--force'
`-f'
     `configure'スクリプトとコンフィグレーションヘッダが入力ファイル
     (`configure.ac'と，存在する場合は`aclocal.m4')より新しくても更
     新します．

`--install'
`-i'
     パッケージの足りない補助ファイルをインストールします．デフォルトで，ファ
     イルはコピーされます．`--symlink'で変更することも可能です．

     このオプションは，`automake --add-missing'，`libtoolize'，
     `autopoint'等を呼び出すきっかけにもなります．

`--symlink'
`-s'
     `--install'とともに使用されるとき，足りない補助ファイルをコピーす
     る代わりに，シンボリックリンクを配置します．

`--make'
`-m'
     ディレクトリがコンフィグレーションされるとき，`./config.status
     --recheck &&
     ./config.status'を実行してコンフィグレーションを更新し，
     `make'を実行します．

`--include=DIR'
`-I DIR'
     DIRをインクルードパスの後に追加します．複数回の呼び出しで累積され
     ます．

`--prepend-include=DIR'

`-B DIR'
     DIRをインクルードパスの前に追加します．複数回の呼び出しで累積され
     ます．

`--warnings=CATEGORY'
`-W CATEGORY'
     (実際にはカンマで分離されているリストになっている)CATEGORYに関連す
     る警告を報告します．

    `cross'
          クロスコンパイルの問題に関連するもの．

    `obsolete'
          時代遅れの構成物の使用を報告．

    `portability'
          移植性の問題．

    `syntax'
          曖昧な構文の構成物．

    `all'
          すべての警告を報告．

    `none'
          何も報告しない．

    `error'
          警告をエラーとして処理．

    `no-CATEGORY'
          CATEGORYに分類される警告を利用不可能にする．

     `syntax'の警告はデフォルトで利用可能で，カンマでカテゴリを分離した
     リストとなっている環境変数`WARNINGS'は尊重されます．`-W
     CATEGORY'を渡すと，実際には
     `--warnings=syntax,$WARNINGS,CATEGORY'を渡したかのように動作
     します．デフォルトのものと`WARNINGS'を利用不可能にし，(例えば) 時代
     遅れの構成物に関する警告を利用可能にしたい場合`-W none,obsolete'
     を使用してください．


File: autoconf-ja.info,  Node: Setup,  Next: Existing Tests,  Prev: Making configure Scripts,  Up: Top

出力ファイルの初期化
********************

   Autoconfが生成した`configure'スクリプトは，パッケージのソースファ
イルの見つけ方，そして，生成する出力ファイルといった，初期化の方法の情報
を必要とします．以下のセクションで，初期化と出力ファイルの作成について述
べます．

* Menu:

* Initializing configure::      Option processing etc.
* Notices::                     Copyright, version numbers in `configure'
* Input::                       Where Autoconf should find files
* Output::                      Outputting results from the configuration
* Configuration Actions::       Preparing the output based on results
* Configuration Files::         Creating output files
* Makefile Substitutions::      Using output variables in `Makefile's
* Configuration Headers::       Creating a configuration header file
* Configuration Commands::      Running arbitrary instantiation commands
* Configuration Links::         Links depending on the configuration
* Subdirectories::              Configuring independent packages together
* Default Prefix::              Changing the default installation prefix


File: autoconf-ja.info,  Node: Initializing configure,  Next: Notices,  Up: Setup

`configure'の初期化
===================

   すべての`configure'スクリプトファイルでは，他の何よりも前に，
`AC_INIT'を呼び出す必要があります．そのほかに必要なマクロは
`AC_OUTPUT'だけです(*note Output::)．

 - マクロ: AC_INIT (PACKAGE, VERSION, [BUG-REPORT], [TARNAME])
     あらゆるコマンドライン引数を処理し，様々な初期化と検証を実行します．

     PACKAGEの名前とそのVERSIONを設定します．これらは通常，
     `configure'に含まれる`--version'のサポートで使用されます．
     オプションの引数BUG-REPORT-ADDRESSは，ユーザがバグレポートを送る電
     子メールアドレスにすべきです．パッケージのTARNAMEはPACKAGEと
     は異なります．後者はパッケージの完全な名前を示します(例えば，`GNU
     Autoconf')が，前者は配布物のtar ballの名前(例えば，`autoconf')を意
     味します．デフォルトはPACKAGEから`GNU ' を取り除き，小文字に
     し，そして英数文字以外を全て`-'にしたものです．

     `AC_INIT'の引数は静的にすることが望ましく，すなわちシェルで演算して
     求めるべきではありませんが，M4で演算してもかまいません．

     以下のM4マクロ(例えば，`AC_PACKAGE_NAME')は，`AC_INIT'によって，
     出力変数(例えば，`PACKAGE_NAME')を出力し，プリプロセッサシンボル(例
     えば，`PACKAGE_NAME')を定義します．

    `AC_PACKAGE_NAME', `PACKAGE_NAME'
          そのままPACKAGEになります．

    `AC_PACKAGE_TARNAME', `PACKAGE_TARNAME'
          そのままTARNAMEになります．

    `AC_PACKAGE_VERSION', `PACKAGE_VERSION'
          そのままVERSIONになります．

    `AC_PACKAGE_STRING', `PACKAGE_STRING'
          そのまま`PACKAGE VERSION'になります．

    `AC_PACKAGE_BUGREPORT', `PACKAGE_BUGREPORT'
          そのままBUG-REPORTになります．


File: autoconf-ja.info,  Node: Notices,  Next: Input,  Prev: Initializing configure,  Up: Setup

`configure'の注意事項
=====================

   以下のマクロは，`configure'スクリプトのバージョンナンバーを管理
します．それはオプションとして使用されます．

 - マクロ: AC_PREREQ (VERSION)
     使用しているAutoconfのバージョンが十分新しいことを保証します．
     `configure'の作成に使用されるAutoconfのバージョンが，
     VERSION以前の場合，標準エラー出力にエラーメッセージを出力し，異常
     終了します(終了ステータスは63です)．例えば以下のようにします．

          AC_PREREQ(2.59)

     このマクロは，`AC_INIT'以前に使用可能な唯一のマクロですが，整合性の
     ためにはそうすべきではありません．

 - マクロ: AC_COPYRIGHT (COPYRIGHT-NOTICE)
     AutoconfマクロへのFree Software Foundationの著作権に加えて，
     `configure'についてCOPYRIGHT-NOTICEでカバーしたい部分を宣
     言してください．

     COPYRIGHT-NOTICEは，`configure'の先頭と，`configure
     --version'の両方で表示されます．

 - マクロ: AC_REVISION (REVISION-INFO)
     リビジョンスタンプREVISION-INFOを，ドル記号やダブルクォートを削除
     して`configure'スクリプトにコピーします．このマクロは，
     `configure'をチェックインしたときにRCSやCVS
     がリビジョンスタンプを変えなくても，`configure.ac'から
     `configure'にそれを書き込みます．そうすることで，特定の
     `configure'に対応する`configure.ac'のリビジョンが簡単に決定
     可能になります．

     例えば，以下の行を`configure.ac'に書いたとします．

          AC_REVISION($Revision: 1.30 $)

     これで，`configure'は以下のようになります．

          #! /bin/sh
          # From configure.ac Revision: 1.30


File: autoconf-ja.info,  Node: Input,  Next: Output,  Prev: Notices,  Up: Setup

`configure'の入力を見つける
===========================

 - マクロ: AC_CONFIG_SRCDIR (UNIQUE-FILE-IN-SOURCE-DIR)
     UNIQUE-FILE-IN-SOURCE-DIRは，パッケージのソースディレクトリにある
     ファイルです．`configure'は，伝えられたディレクトリに実際にソー
     スコードが含まれていることを確認するために，このファイルの存在を調査しま
     す．`--srcdir'で間違ったディレクトリを指定してしまう人もいます．
     これは安全性の調査です．詳細は，*Note configure Invocation::.

   手動でのコンフィグレーションや，`install'プログラムを使用するパッケー
ジは，デフォルトの位置でほとんど正しいのですが，`AC_CONFIG_AUX_DIR'
を呼び出して，他のシェルスクリプトを探す場所を`configure'に教え
る必要があるかもしれません．

 - マクロ: AC_CONFIG_AUX_DIR (DIR)
     ディレクトリDIRにある補助的なビルドツール(例えば，
     `install-sh'，`config.sub'， `config.guess'，そしてCygnus
     `configure'スクリプト)を使用します．DIRは，絶対パスまたは
     `SRCDIR'の相対パスが可能です．デフォルトは
     `SRCDIR'または`SRCDIR/..'または
     `SRCDIR/../..'で，`install-sh'を含んでいる最初にところで
     す．他のファイルは調査しないので，`AC_PROG_INSTALL'を使用することで，
     他の補助ファイルを配布する必要は自動的になくなります．また，それは
     `install.sh'も調査しますが，`make'プログラムには，
     `Makefile'が無い場合，それから`install'を作るルールを持ってい
     るものあるので，その名前は時代遅れです．

   同様に，`aclocal'を使用しているパッケージでは，ローカルマクロが
見つかる場所を`AC_CONFIG_MACRO_DIR'を使用して宣言すべきです．

 - マクロ: AC_CONFIG_MACRO_DIR (DIR)
     将来のバージョンの`autopoint'，`libtoolize'，
     `aclocal'，そして`autoreconf'は，ディレクトリDIRを，
     追加のローカルなAutoconfマクロがある場所として使用します．このマクロを，
     `aclocal'に対してインストールされているマクロがあるツールで，
     `--trace'が安全に呼び出される前に宣言が見つかるように，直接
     `configure.ac'から確実に呼び出して下さい．


File: autoconf-ja.info,  Node: Output,  Next: Configuration Actions,  Prev: Input,  Up: Setup

出力ファイルを生成する
======================

   すべてのAutoconfスクリプト，例えば`configure.ac'は，
`AC_OUTPUT'の呼び出しで終えるべきです．それは，コンフィグレーション
の結果生成される`Makefile'とその他のファイルを生成する，
`config.status'を生成し実行するマクロです．`AC_INIT'以外で唯一
必要とされるマクロです(*note Input::)．

 - マクロ: AC_OUTPUT
     `config.status'を生成し，その実行を開始します．`configure.ac'
     の最後にこのマクロを一度呼び出してください．

     `config.status'は，全てのコンフィグレーション作業を実行します．全て
     の出力ファイル(*Note Configuration
     Files::とマクロ`AC_CONFIG_FILES'を
     参照してください)，ヘッダファイル(*Note Configuration
     Commands::とマクロ
     `AC_CONFIG_COMMANDS'を参照してください)，コマンド (*Note
     Configuration Commands::とマクロ`AC_CONFIG_COMMANDS'を参照して
     ください)，リンク(*Note Configuration Links::とマクロ
     `AC_CONFIG_LINKS'を参照してください)，サブディレクトリ (*Note
     Configuration Links::とマクロ`AC_CONFIG_LINKS'を参照してくださ
     い)が尊重されます．

     `AC_OUTPUT'を呼び出す場所が，コンフィグレーションの実行をする場所に
     なります．それ以降のコードは，`config.status'が実行された後に，
     `configure'によって一度実行されます．動作を(`configure' が
     実行されているかどうかに依存しないように)`config.status'自身に組
     み込みたい場合，*Note Running Arbitrary Configuration Commands:
     Configuration Commandsを参照して下さい．

   歴史的には，`AC_OUTPUT'の使用はいくぶん異なっています．
`AC_OUTPUT'がサポートする引数の記述は，*Note Obsolete Macros::.

   サブディレクトリで`make'を実行する場合，`make'を変数
`MAKE'を使用して実行すべきです．たいていのバージョンの
`make'で，`MAKE'に`make'プログラムと，それに与える
あらゆるオプションを追加して設定します．(しかし，その中にコマンドライン
で設定された値を含まないものも多いので，それらは自動的に渡されません．)
古いバージョンの`make'には，変数を設定しないものもあります．以下
のマクロでそれらのバージョンでも使用可能になります．

 - マクロ: AC_PROG_MAKE_SET
     `make'がMake変数`MAKE'を前もって定義している場合，出力変数
     `SET_MAKE'は空で定義されます．それ以外では，`SET_MAKE'は
     `MAKE=make'を含みます．`SET_MAKE'に対して`AC_SUBST'を呼び
     出して下さい．

   このマクロを使用する場合，`MAKE'を実行する他のディレクトリのそれぞ
れの`Makefile.in'に以下の行を書き込んで下さい．

     @SET_MAKE@


File: autoconf-ja.info,  Node: Configuration Actions,  Next: Configuration Files,  Prev: Output,  Up: Setup

コンフィグレーション作業の実行
==============================

   `configure'は，自分が行なっていることが全部分かるように設計されてい
ますが，隠されている従属物も実際にはあります．それは，
`config.status'です．`configure'はシステムの調査を担当していま
すが，`configure'の結果を基に適切な動作を実際に引き受けるのは，
`config.status'です．`config.status'のほとんどの典型的な作業は，
ファイルを_実際に作成する_ことです．

このセクションでは，実際に何かを作成する基本的な四つのマクロの一般的な動
作を説明します．それらは，`AC_CONFIG_FILES'，
`AC_CONFIG_HEADERS'，`AC_CONFIG_COMMANDS'，そして
`AC_CONFIG_LINKS'です．それらは全て以下のものが原型となっています．

     AC_CONFIG_FOOS(TAG..., [COMMANDS], [INIT-CMDS])

ここでの引数は，以下のとおりです．

TAG...
     空白で分けられたタグのリストで，それらは通常，実際に作成されるファイル名
     です．

     TAGSとして，リテラルを使用することを勧めます．特に，以下は避けた方
     が良いでしょう．

          ... && my_foos="$my_foos fooo"
          ... && my_foos="$my_foos foooo"
          AC_CONFIG_FOOS($my_foos)

     この代わりに以下のようにしてください．

          ... && AC_CONFIG_FOOS(fooo)
          ... && AC_CONFIG_FOOS(foooo)

     マクロ`AC_CONFIG_FILES'と`AC_CONFIG_HEADERS'は，特別な
     TAGを使用します．それらは，`OUTPUT'や
     `OUTPUT:INPUTS'にすることが可能です．ファイル
     OUTPUTは，そのテンプレートINPUTSから実際に作成されます(デフォ
     ルトは`OUTPUT.in')．

     例えば，`AC_CONFIG_FILES(Makefile:boiler/top.mk:boiler/bot.mk)'は，
     `boiler/top.mk'と`boiler/bot.mk'を繋げたものに，出力変数を展開
     した`Makefile'を作成するよう要求します．

     特殊な値`-'は，OUTPUTで使用されているときは標準出力を，
     INPUTSで使用されているときは標準入力を示すために使用されます．おそ
     らく`configure.ac'でこれを使用する必要はほとんど無いと思いますが，
     `./config.status'のコマンドラインインターフェースを使用しているとき
     は便利でしょう．詳細は，*Note config.status
     Invocation::,を参照してくださ い．

     INPUTSは，絶対パスまたは相対パスを用いたファイル名が可能です．後者
     の場合，それは最初にビルドツリーで探され，その後でソースツリーで探されま
     す．

COMMANDS
     `config.status'にそのまま出力されるシェルコマンドで，実行するコマン
     ドを`config.status'に伝えるためにユーザが使用することが可能な
     TAGに関連付けされています．TAGの要求が`config.status'
     に与えられるたびにコマンドが実行され，通常はファイル`TAG'が作
     成されるたびになります．

     `configure'の実行中に設定される変数は，ここでは利用_不可能_
     です．それらを最初にINIT-CMDSで設定する必要があります．それにもか
     かわらず，以下の変数は前もって求められます．

    `srcdir'
          ビルドディレクトリのトップからソースディレクトリのトップへのパスです．こ
          れは，`configure'のオプション`--srcdir'で設定されるもので す．

    `ac_top_srcdir'
          現在のビルドディレクトリからソースディレクトリのトップへのパスです．

    `ac_top_builddir'
          現在のビルドディレクトリからビルドディレクトリのトップへのパスです．連結
          できるように，それを空にしたり，スラッシュで終えることが可能です．

    `ac_srcdir'
          現在のビルドディレクトリから対応するソースディレクトリへのパスです．

     "現在の(current)"ディレクトリは，TAGSの一部の入力が含まれるディ
     レクトリ(または疑似ディレクトリ)を参照します．例えば以下を実行したとしま
     す．

          AC_CONFIG_COMMANDS([deep/dir/out:in/in.in], [...], [...])

     `--srcdir=../package'を用いると，以下の値が生成されます．

          # Argument of --srcdir
          srcdir='../package'
          # Reversing deep/dir
          ac_top_builddir='../../'
          # Concatenation of $ac_top_builddir and srcdir
          ac_top_srcdir='../../../package'
          # Concatenation of $ac_top_srcdir and deep/dir
          ac_srcdir='../../../package/deep/dir'

     `in/in.in'とは無関係です．

INIT-CMDS
     `config.status'の先頭付近に_引用符で囲まれることなく_出力され
     るシェルコマンドで，`config.status'が実行されるたびに(TAG に
     関係なく)実行されます．引用符で囲まれていないので，例えば，`$var'は
     `var'の値として出力されます．INIT-CMDSは通常，COMMANDS
     を実行するために必要な同じ変数を`config.status'に与えるために，
     `configure'で使用されます．

     変数名では特に注意すべきです．すべてのINIT-CMDSは同じ名前空間を共
     有し，それぞれ予測できない方法で上書きされるかもしれません．残念です
     ....

   当然ですが，すべてのこれらのマクロは，異なるTAGを用いると，何回で
も呼び出すことが可能です！


File: autoconf-ja.info,  Node: Configuration Files,  Next: Makefile Substitutions,  Prev: Configuration Actions,  Up: Setup

コンフィグレーションファイルの作成
==================================

   きちんとこの前の章を読んでくださいね，*Note Configuration Actions::．

 - マクロ: AC_CONFIG_FILES (FILE..., [CMDS], [INIT-CMDS])
     出力変数の値を置換しながら入力ファイル(デフォルトは`FILE.in')
     をコピーすることで，`AC_OUTPUT'でそれぞれの`FILE'を作成
     するようにします．
     このマクロは，実際に何かを作成するマクロの一つです．*Note
     Configuration
     Actions::を参照してください．出力変数を使用することの詳細な情報は，
     *Note Makefile Substitutions::.
     それらを作成するための詳細な情報は， *Note Setting Output
     Variables::.  これらのマクロは，存在しない場合はファ
     イルを配置するディレクトリを作成します．通常，`Makefile'はこの方法
     で作成されますが，`.gdbinit'のようなそれ以外のファイルは，指定され
     ていることもあります．

     一般的な`AC_CONFIG_FILES'の呼び出しは，以下のようになります．

          AC_CONFIG_FILES([Makefile src/Makefile man/Makefile X/Imakefile])
          AC_CONFIG_FILES([autoconf], [chmod +x autoconf])

     コロンで分離されている入力ファイルFILEのリストを入力ファイルに追加
     することで，優先可能です．例えば以下のようにします．

          AC_CONFIG_FILES([Makefile:boiler/top.mk:boiler/bot.mk]
                          [lib/Makefile:boiler/lib.mk])

     こうすることで，ファイル名をMS-DOSが受け入れ可能なままにしたり，ファイル
     に常套句を前置したり後置したりすることが可能となります．


File: autoconf-ja.info,  Node: Makefile Substitutions,  Next: Configuration Headers,  Prev: Configuration Files,  Up: Setup

Makefileへの代入
================

コンパイルされたりインストールされたりするものを含んでいる，配布物のそれ
ぞれのサブディレクトリには，`configure'がそのディレクトリに
`Makefile'を作成するためのファイル`Makefile.in'を配置すべきで
す．`Makefile'を作成するために，`Makefile.in'の
`@VARIABLE@'を`configure'が決定したその変数の値に置
換しながら，`configure'は単純な変数の代入を行います．このように
して出力ファイルに代入される変数は，"出力変数(output variable)"と呼
ばれます．それらは`configure'で設定される普通のシェル変数です．
`configure'が特定の変数を出力ファイルに代入するように，変数名を
引数として`AC_SUBST'マクロを呼び出す必要があります．他の変数に対す
る`@VARIABLE@'が変化することはありません．`AC_SUBST'を
用いた出力変数の作成方法の詳細は，*Note Setting Output Variables::.

   `configure'スクリプトを使用しているソフトウェアパッケージは，ファ
イル`Makefile.in'と一緒に配布すべきですが，`Makefile'は配布す
べきではありません．つまり，ユーザはコンパイルする前にローカルシステムに
対して，正しくパッケージをコンフィグレーションする必要があります．

   `Makefile'に書くものの詳細は*Note Makefile Conventions:
(standards)Makefile Conventions.

* Menu:

* Preset Output Variables::     Output variables that are always set
* Installation Directory Variables::  Other preset output variables
* Build Directories::           Supporting multiple concurrent compiles
* Automatic Remaking::          Makefile rules for configuring


File: autoconf-ja.info,  Node: Preset Output Variables,  Next: Installation Directory Variables,  Up: Makefile Substitutions

出力変数のプリセット
--------------------

Autoconfマクロが前もって設定する出力変数もあります．追加の出力変数を設定
するAutoconfマクロもあり，それは，それらのマクロの記述で言及されています．
出力変数の完全なリストは，*Note Output Variable Index::.
以下はそれぞれ，
それ以外のプリセットされたもののリストです．それらは全て大切な値です
(*note Setting Output Variables::, `AC_ARG_VAR')．

 - 変数: CFLAGS
     Cコンパイラに対する，デバッグと最適化のオプションです．
     `configure'を実行するときに環境変数で設定されていない場合，
     `AC_PROG_CC'を呼び出すときにデフォルト値が設定されます(そうでない場
     合は空になります)．Cの特徴をテストするためのプログラムをコンパイルすると
     き，`configure'はこの変数を使用します．

 - 変数: configure_input
     `configure'によって自動的に生成されるファイルを告げ，入力ファイ
     ル名を与えるコメントです．`AC_OUTPUT'は，それが作成するすべての
     `Makefile'の最初に，この変数を含むコメント行を加えます．それ以外の
     ファイルは，それぞれの入力ファイルの最初のコメントで，この変数を参照すべ
     きです．例えば，入力シェルスクリプトの最初は以下のようにすべきです．

          #! /bin/sh
          # @configure_input@

     またその行の存在で，ファイルを編集している人は，`configure'を使
     用して処理する必要があることを思い出します．

 - 変数: CPPFLAGS
     ヘッダファイルを探すディレクトリ(`-IDIR')と，Cプリプロセッサ
     とCコンパイラに対する，その他の雑多なオプションです．`configure'
     を実行するときに環境変数で設定されていない場合，デフォルト値は空になりま
     す． `configure'は，Cの特徴をテストするプログラムのコンパイルや
     プリプロセス時にこの変数を使用します．

 - 変数: CXXFLAGS
     C++コンパイラの，デバッグと最適化のオプションです．`configure'
     を実行するときに環境変数で設定されていない場合，`AC_PROG_CXX'を呼び
     出したときにデフォルト値に設定されます(そうでない場合は空になります)．
     `configure'は，C++の特徴をテストするプログラムのコンパイル時に，
     この変数を使用します．

 - 変数: DEFS
     Cコンパイラに渡す`-D'オプションです．`AC_CONFIG_HEADER'が呼び
     出されている場合，`configure'は`@DEFS@'の代わりに
     `-DHAVE_CONFIG_H'に置換します(*note Configuration Headers::)．この
     変数は，`configure'がテストを実行している間は定義されず，出力ファ
     イルを作成するときだけ定義されます．前のテストの結果を調査する方法は，
     *Note Setting Output Variables::.

 - 変数: ECHO_C
 - 変数: ECHO_N
 - 変数: ECHO_T
     質問と回答のメッセージの組に対して，`echo'に後置される改行を抑制す
     る方法は？これらの変数は，その方法を提供します．

          echo $ECHO_N "And the winner is... $ECHO_C"
          sleep 100000000000
          echo "${ECHO_T}dead."

     古く一般的でない`echo'の実装では，これを達成する意味が無いものもあ
     り，その場合，`ECHO_T'はタブをに設定されます．そうしたくないかもし
     れません．

 - 変数: FCFLAGS
     Fortranコンパイラに対するデバッグと最適化のオプションです．
     `configure'の実行時に環境変数で設定されていない場合，
     `AC_PROG_FC'の予備出し時デフォルト値が設定されます(またはそうなけれ
     ば空になります)．`configure'は，Fortranの特徴を調査するプログラ
     ムをコンパイルするとき，この変数を使用します．

 - 変数: FFLAGS
     Fortran 77コンパイラの，デバッグと最適化オプションです．
     `configure'を実行するときに環境変数で設定されていない場合，
     `AC_PROG_F77'を呼び出したときデフォルト値に設定されます(そうでない
     場合は空になります)．`configure'は，Fortran 77の特徴をテストする
     プログラムのコンパイル時に，この変数を使用します．

 - 変数: LDFLAGS
     strip(`-s')，パス(`-L')，その他のあらゆる雑多なリンカに対す
     るオプションです．`configure'を実行するときに環境変数で設定され
     ていない場合，デフォルト値は空になります．`configure'は，C，C++，
     そしてFortranの特徴をテストするプログラムのリンク時に，この変数を使用し
     ます．

 - 変数: LIBS
     リンカに渡す`-l'オプションです．デフォルト値は空ですが，ライブラリ
     が見つかり，必要な関数を提供する場合，Autoconfマクロはこの変数に追加のラ
     イブラリを前置するかもしれません．*Note
     Libraries::を参照してください．
     `configure'は，C，C++，そしてFortranの特徴をテストするプログラム
     のリンク時に，この変数を使用します．

 - 変数: builddir
     `.'と厳密に等価です．対称性のために追加されました．

 - 変数: abs_builddir
     `builddir'の絶対パスです．

 - 変数: top_builddir
     現在のビルドツリーのトップレベルへの相対パスです．トップレベルのディレク
     トリは，ここでは`builddir'と同じです．

 - 変数: abs_top_builddir
     `top_builddir'の絶対パスです．

 - 変数: srcdir
     `Makefile'に対するソースコードを含んでいるディレクトリへの相対パス
     です．

 - 変数: abs_srcdir
     `srcdir'の絶対パスです．

 - 変数: top_srcdir
     パッケージのためのソースコードのトップレベルのディレクトリへの相対パスで
     す．トップレベルのディレクトリは，ここでは`srcdir'と同じです．

 - 変数: abs_top_srcdir
     `top_srcdir'の絶対パスです．


File: autoconf-ja.info,  Node: Installation Directory Variables,  Next: Build Directories,  Prev: Preset Output Variables,  Up: Makefile Substitutions

インストールディレクトリの変数
------------------------------

以下の変数は，パッケージがインストールされる場所を指定します．詳細は，
*Note Variables for Installation Directories: (standards)Directory
Variablesを参照してください．これら
の変数を使用するときとその方法の詳細は，このセクションの終りを参照してく
ださい．

 - 変数: bindir
     ユーザが実行する実行形式をインストールするディレクトリです．

 - 変数: datadir
     読み込み専用のアーキテクチャに依存しないデータをインストールするディレク
     トリです．

 - 変数: exec_prefix
     アーキテクチャに依存するファイルをインストールするプレフィクスです．デフォ
     ルトはPREFIXと同じです．EXEC_PREFIXにいろいろなものを直接イ
     ンストールすることは避けた方が良いでしょう．しかし，アーキテクチャに依存
     するファイルを含むディレクトリに対するデフォルト値は，EXEC_PREFIX
     から相対的なものにすべきです．

 - 変数: includedir
     Cヘッダファイルをインストールするディレクトリです．

 - 変数: infodir
     Info形式のドキュメントをインストールするディレクトリです．

 - 変数: libdir
     オブジェクトコードライブラリをインストールするディレクトリです．

 - 変数: libexecdir
     他のプログラムが実行する，実行可能なプログラムをインストールするディレク
     トリです．

 - 変数: localstatedir
     修正可能なシングルマシンのデータをインストールするディレクトリです．

 - 変数: mandir
     man形式のドキュメントをインストールするトップレベルのディレクトリです．

 - 変数: oldincludedir
     GCCコンパイラ以外のためのCヘッダファイルをインストールするディレクトリで
     す．

 - 変数: prefix
     全てのファイルに対する共通のインストールプレフィクスです．
     EXEC_PREFIXが異なる値で定義されている場合，PREFIXはアーキテ
     クチャ非依存ファイルに対してのみ使用されます．

 - 変数: sbindir
     システム管理者が実行する実行形式をインストールするディレクトリです．

 - 変数: sharedstatedir
     修正可能な，アーキテクチャに依存しないデータをインストールするディレクト
     リです．

 - 変数: sysconfdir
     読み込み専用の，シングルマシンのデータをインストールするディレクトリです．

   これらの変数のほとんどは，`prefix'や`exec_prefix'に依存する値
になります．ディレクトリ変数の出力値が展開されないように考慮されています．
典型的な例として，`@datadir@'は，`/usr/local/share' ではなく
`${prefix}/share'に置換されます．

   以下の動作は，GNU coding standardsで示されれていて，ユーザが実
行時にそうなるようになっています．

`make'
     `configure'に指定されるものとは異なるプレフィクスを指定すること
     がまだ可能で，その場合に必要があれば，パッケージはmakeで指定されているプ
     レフィクスに対応するように依存性がハードコード化されます．

`make install'
     異なるインストール位置を指定することが可能で，その場合，パッケージはコン
     パイルで指定した場所に，まだ依存している_はず_です(すなわち，
     `make
     install'を実行するときは再コンパイルされません)．お互いにグルー
     プ化された全てのファイルを，インストール時に決定する人も多いので，これは
     非常に重要な特徴で，そこからインストール後に最終的な場所にリンクが張られ
     ます．

   これらの機能をサポートするために，`datadir'が`prefix'の現在の
値に依存する`${prefix}/share'として定義されたままになっていること
が重要です．

   当然のことですが，これらの変数を`Makefiles'で使用すべきではありませ
ん．例えば，`configure'で`datadir'を評価する代わりに，
`Makefile'で，例えば`AC_DEFINE_UNQUOTED(DATADIR, "$datadir")'
としてハードコードする場合は，`-DDATADIR="$(datadir)"'を
`CPPFLAGS'に加えるべきです．

   同様に，`datadir'とその仲間を，シェルスクリプトやその他のファイルで
置換するために，`AC_OUTPUT_FILES'に頼るべきではなく，その代わりに
`make'にその置換を行なわせてください．例えば，Autoconfは
`.in'で終るシェルスクリプトのテンプレートを配布していて，以下のよう
な`Makefile'の一部を使用しています．

     edit = sed \
             -e 's,@datadir\@,$(pkgdatadir),g' \
             -e 's,@prefix\@,$(prefix),g'
     
     autoconf: Makefile $(srcdir)/autoconf.in
             rm -f autoconf autoconf.tmp
             $(edit) $(srcdir)/autoconf.in >autoconf.tmp
             chmod +x autoconf.tmp
             mv autoconf.tmp autoconf
     
     autoheader: Makefile $(srcdir)/autoheader.in
             rm -f autoheader autoheader.tmp
             $(edit) $(srcdir)/autoconf.in >autoheader.tmp
             chmod +x autoheader.tmp
             mv autoheader.tmp autoheader

   注目すべきことがいくつかあります．

`@datadir\@'
     バックスラッシュで`configure'が`@datadir@'をsedの式自身に
     置換することを妨げます．

`$(pkgdatadir)'
     `@pkgdatadir@'を使用しないでください！ 代わりに，makefile変数のマッ
     チングを使用してください．

`,'
     `$(pkgdatadir)'のように`/'を含んでいる変数を使用することもある
     ので，`sed'の式で`/'を使用しないでください．

``Makefile'への依存性'
     `edit'は，コンフィグレーション特有の値(`prefix'等)に依存し，
     `VERSION'やそれの以前のものには依存しない値を使用するので，出力は
     `configure.ac'ではなく`Makefile'に依存します．

`依存性の分割と単一のサフィックスルール'
     それらを使用することは不可能です！上記の断片を，(おそらく)以下のように書
     き換えることは不可能です.

          autoconf autoheader: Makefile
          .in:
                  rm -f $@ $@.tmp
                  $(edit) $< >$@.tmp
                  chmod +x $@.tmp
                  mv $@.tmp $@

     詳細は，*Note Limitations of Make::.

``$(srcdir)''
     ソースへのパスを確実に指定し，そうしない場合はパッケージは分割ビルドをサ
     ポートしないでしょう．


File: autoconf-ja.info,  Node: Build Directories,  Next: Automatic Remaking,  Prev: Installation Directory Variables,  Up: Makefile Substitutions

ビルドディレクトリ
------------------

同じソースコードのコピーから，同時に複数のアーキテクチャに対するソフトウェ
アパッケージのコンパイルをサポートすることが可能です．それぞれのアーキテ
クチャに対するオブジェクトファイルは，それ自身のディレクトリに保存されま
す．

   これをサポートするために，`make'は，ソースディレクトリにあるファ
イルを見つけるため`VPATH'変数を使用します．GNU Makeとその
他のほとんどの最近の`make'プログラムはこうすることが可能です．もっ
と古い`make'プログラムは，`VPATH'をサポートしていません．そ
れを使用するときは，ソースコードをオブジェクトファイルと同じディレクトリ
置く必要があります．

   `VPATH'をサポートするため，それぞれの`Makefile.in'には，以下の
ような二行が必要です．

     srcdir = @srcdir@
     VPATH = @srcdir@

   `VPATH'の値に変数を代入しない`make'のバージョンもあるので，
`VPATH'に他の値，例えば`VPATH = $(srcdir)'を設定しないでくださ い．

   `configure'は`Makefile'を作成するとき，`srcdir'に正し
い値を代入します．

   暗黙のルールを期待して，(`VPATH'で見つかる)ソースディレクトリのファ
イルのパス名を展開する`make'変数の`$<'を使用しないでくださ
い．(暗黙のルールとは，`.c'ファイルから`.o'ファイルを作成する
方法を教える`.c.o'の様なものです．)暗黙のルールで`$<'を設定し
ないバージョンの`make'もあり，それは，空の値で展開します．

   その代わり，`Makefile'コマンドラインは，ソースファイルを
`$(srcdir)/'を前置して参照します．例えば以下のようにします．

     time.info: time.texinfo
             $(MAKEINFO) $(srcdir)/time.texinfo


File: autoconf-ja.info,  Node: Automatic Remaking,  Prev: Build Directories,  Up: Makefile Substitutions

自動的なリメイク
----------------

コンフィグレーションファイルを変更したとき自動的にコンフィグレーション情
報を更新するため，パッケージに対するトップレベルの`Makefile.in' に
以下のようなルールを書くことが可能でます．以下の例には，
`aclocal.m4'やそれらが関連するるコンフィグレーションヘッダファイル
のような，全てのオプションのファイルが含まれています．パッケージで使用し
ないこれらのファイルに対する`Makefile.in'ルールは削除してください．

   `${srcdir}/'プレフィクスは`VPATH'メカニズムの制限のため含ま
れています．

   `config.h.in'と`config.h'のタイムスタンプは，内容が変化しない
場合には変化しないので，`stamp-'ファイルが必要です．この機能は不必
要な再コンパイルを避けます．パッケージの配布物に`stamp-h.in' を含め
るべきで，そうすることで`make'は`config.h.in'が最新だというこ
とを考慮します．`touch' (*note Limitations of Usual Tools::)を使
用せず，代わりに`echo'を使用してください(`date'を使用す
ると不必要な差異を生じ，CVSで矛盾したりするでしょう)．

     $(srcdir)/configure: configure.ac aclocal.m4
             cd $(srcdir) && autoconf
     
     # autoheader might not change config.h.in, so touch a stamp file.
     $(srcdir)/config.h.in: stamp-h.in
     $(srcdir)/stamp-h.in: configure.ac aclocal.m4
             cd $(srcdir) && autoheader
             echo timestamp > $(srcdir)/stamp-h.in
     
     config.h: stamp-h
     stamp-h: config.h.in config.status
             ./config.status
     
     Makefile: Makefile.in config.status
             ./config.status
     
     config.status: configure
             ./config.status --recheck

この行を直接`Makefile'にコピーするときは，インデントされた行がタブ
文字で始まるように置換する必要があるので注意してください．)

   更に，`AC_CONFIG_FILES([stamp-h], [echo timestamp > stamp-h])'を使
用すべきで，そうすることで`config.status'は`config.h'が最新で
あることを確かめます．`AC_OUTPUT'の詳細は，*Note Output::.

   依存性に関係するコンフィグレーションの例は，*Note config.status
Invocation::.


File: autoconf-ja.info,  Node: Configuration Headers,  Next: Configuration Commands,  Prev: Makefile Substitutions,  Up: Setup

コンフィグレーションヘッダファイル
==================================

パッケージに二，三個以上のCプリプロセッサのシンボルのテストが含まれてい
るとき，コマンドラインでコンパイラに渡す`-D'オプションはかなり長く
なります．これは二つの問題があります．一つは，`make'の出力のエラー
を探すとき，見て分からなくなることです．更に深刻な問題は，コマンドライン
がいくつかのオペレーティングシステムの長さの制限を越えることです．コンパ
イラに`-D'オプションを渡す代わりに， `configure'スクリプト
で`#define'ディレクティブを含んでいるCヘッダファイルを作成すること
が可能です．`AC_CONFIG_HEADER'マクロで，この出力を選択します．それ
は，`AC_INIT'の直後に呼び出します．

   (例えば，`const'を再定義する場合)宣言の不一致を防ぐために，パッケー
ジでは，あらゆる他のヘッダの前で，コンフィグレーションヘッダファイルを
`#include'すべきです．`#include "config.h"'の代わりに `#include
<config.h>'を使用し，Cコンパイラに`-I.'オプション(ま
たは`-I..'．`config.h'がある方)を渡してください．そうすること
で，(おそらく配布物を作成するときに)ソースディレクトリがコンフィグレーショ
ンされても，他のビルドディレクトリは，ソースディレクトリから
`config.h'を探すことなく，コンフィグレーション可能になります．

 - マクロ: AC_CONFIG_HEADERS (HEADER ..., [CMDS], [INIT-CMDS])
     このマクロは，実際にファイルを作成するマクロの一つです． *Note
     Configuration Actions::を参照してください．`AC_OUTPUT'は，
     `#define'宣言のCプリプロセッサを含んでいるHEADERの空白で区切
     られたリストを作成し，生成されたファイルの`@DEFS@'を，`DEFS'
     の値の代わりに，`-DHAVE_CONFIG_H'で置換します．通常，HEADER
     の名前は`config.h'です．

     HEADERがすでに存在していて，その内容が`AC_OUTPUT'が書き込むも
     のと同じ場合は，そのまま残ります．こうすることで，ヘッダファイルに依存す
     るオブジェクトファイルを不必要に再コンパイルする必要がなく，コンフィグレー
     ション時に変更を行なうことが可能になります．

     通常，入力ファイルは`HEADER.in'と命名されます．しかし，入力ファ
     イルをコロンで分けた入力ファイルのリストにHEADERを加えることで優先
     可能です．例えば，以下のようにします．

          AC_CONFIG_HEADERS([config.h:config.hin])
          AC_CONFIG_HEADERS([defines.h:defs.pre:defines.h.in:defs.post])

     こうすることで，MS-DOSでアクセスできるままにしたり，常套句をファイルに前
     置したり，後置したりすることが可能になります．

   HEADERの詳細は，*Note Configuration Actions::.

* Menu:

* Header Templates::            Input for the configuration headers
* autoheader Invocation::       How to create configuration templates
* Autoheader Macros::           How to specify CPP templates


File: autoconf-ja.info,  Node: Header Templates,  Next: autoheader Invocation,  Up: Configuration Headers

コンフィグレーションヘッダのテンプレート
----------------------------------------

最終的なヘッダファイルが見つかるように，コメントとフックとして使用される
`#undef'宣言を含んでいるテンプレートファイルを，配布物に含めるべき
です．例えば，`configure.ac'で以下のように呼び出します．

     AC_CONFIG_HEADERS([conf.h])
     AC_CHECK_HEADERS([unistd.h])

`conf.h.in'で以下のようなコードを書きます．`unistd.h'があるシ
ステムでは，`configure'は`#define' `HAVE_UNISTD_H' を1
にします．それ以外のシステムでは，行全体がコメントアウトされます(そのシ
ステムの場合，シンボルは前もって定義されません)．

     /* Define as 1 if you have unistd.h.  */
     #undef HAVE_UNISTD_H

   `#undef'が最初の列にあり，`HAVE_UNISTD_H'の後に空白すらないこ
とに注意してください．その後で，プリプロセッサ命令を使用しているコンフィ
グレーションヘッダをデコードすることが可能です．

     #include <conf.h>
     
     #if HAVE_UNISTD_H
     # include <unistd.h>
     #else
     /* We are in trouble.  */
     #endif

   `#undef'の代わりに`#define'を用いている，古い形式のテンプレー
トの使用は，強く反対します．`#undef'と同じ行にコメントがある古いテ
ンプレートも同様です．とにかく，プロセッサマクロにコメントを書くのは，決
してよい考えではありません．

テンプレートヘッダを更新し続けることは退屈な作業なので，それを生成するた
めに`autoheader'してもかまいません．*Note autoheader Invocation::
を参照してください．


File: autoconf-ja.info,  Node: autoheader Invocation,  Next: Autoheader Macros,  Prev: Header Templates,  Up: Configuration Headers

`config.h.in'を生成するため`autoheader'を使用する
-------------------------------------------------

   `autoheader'プログラムは，`configure'が使用するためのC
の`#define'宣言のテンプレートファイルを作成することが可能です．
`configure.ac'で`AC_CONFIG_HEADERS(FILE)'を呼び出す場合，
`autoheader'は`FILE.in'を作成します．複数のファイルが
引数で与えられている場合，最初のファイルを使用します．それ以外の場合，
`autoheader'は`config.h.in'を作成します．

この作業を行なうために，使用する可能性がある全てのシンボルを記述すること
を`autoheader'は必要とします．すなわち，少なくとも，一つの
`AC_DEFINE'か`AC_DEFINE_UNQUOTED'が，それぞれのシンボルに対し
て三番目の引数を用いて呼び出されている必要があります(*note Defining
Symbols::)．更に，`AC_DEFINE'の最初の引数をリテラルにする必要がある
という制約があります．Autoconfの組み込みテストで定義されている全てのシン
ボルは，既に適切に記述されているということに注意してください．独自に定義
したものだけ記述する必要があります．

   `autoheader'がなぜ必要か不思議に思うかもしれません．つまり，なぜ
`configure'は，スクラッチから`config.h'を作成する代わりに，
`config.h'を生成するために`config.h.in'への"patch"を必要とす
るのでしょうか？さて，全てがロックされたとき，`autoheader'を管理
している時間が無駄になるというのが答えです．直接`config.h'を生成す
ることが，必要なことの全てです．しかし，うまくいかないときは，
`autoheader'の存在に感謝することになるでしょう．

   シンボルが記述されているという事実は，`config.h'に意味があることを
_調査する_ために重要です．`#define'される(またはされない) シン
ボルがうまく定義されているリストがあるという事実もまた，
`configure'が実行不可能な環境にパッケージを移植している人には重
要です．彼らは，_空白で埋め尽くす_必要しかありません．

   では，要点に戻りましょう．`autoheader'の呼び出し...

   引数を`autoheader'に与えた場合，`configure.ac'の代わりにそ
のファイルを使用し，`config.h.in'の代わりに標準出力にヘッダファイル
を書き出します．`-'引数を`autoheader'に与えた場合，
`configure.ac'の代わりに標準入力から読み込み，標準出力にヘッダファ
イルを書き出します．

   `autoheader'は以下のオプションを受け入れます．

`--help'
`-h'
     コマンドラインオプションの概要を出力して終了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力して終了します．

`--verbose'
`-v'
     処理しているステップを報告します．

`--debug'
`-d'
     一時的なファイルを削除しません．

`--force'
`-f'
     入力ファイルよりテンプレートファイルが新しい場合でも，それを再生成します．

`--include=DIR'
`-I DIR'
     DIRをインクルードパスの後に追加します．複数回の呼び出しで累積され
     ます．

`--prepend-include=DIR'

`-B DIR'
     DIRをインクルードパスの前に追加します．複数回の呼び出しで累積され
     ます．

`--warnings=CATEGORY'
`-W CATEGORY'
     CATEGORY(実際にはカンマで分けられたリスト)に関連する警告を報告しま
     す．現在のカテゴリには，以下のものが含まれています．

    `obsolete'
          時代遅れの構成物の使用を報告します．

    `all'
          全ての警告を報告します．

    `none'
          何も報告しません．

    `error'
          警告をエラーとして扱います．

    `no-CATEGORY'
          CATEGORYに分類されている警告を利用不可能にします．


File: autoconf-ja.info,  Node: Autoheader Macros,  Prev: autoheader Invocation,  Up: Configuration Headers

autoheaderのマクロ
------------------

   `autoheader'は`configure.ac'を調査し，定義されているCプリプ
ロセッサシンボルを判定します．それは，`AC_CHECK_HEADERS'や
`AC_CHECK_FUNCS'等が定義しているシンボルに対するテンプレートを生成
する方法は知っていますが，あらゆる追加のシンボルを`AC_DEFINE'してい
る場合，それに対するテンプレートを定義する必要があります．テンプレートが
無い場合，`autoheader'はエラーメッセージとともに失敗します．

   SYMBOLに対するテンプレートを作成する最も簡単な方法は，
`AC_DEFINE(SYMBOL)'の引数にDESCRIPTIONを与えることです． *Note Defining
Symbols::を参照してください．以下のマクロの一つを使用するこ
とも可能です．

 - マクロ: AH_VERBATIM (KEY, TEMPLATE)
     `autoheader'に，TEMPLATEをそのままヘッダテンプレートファイ
     ルに含めるよう伝えます．このTEMPLATEはKEYに関連付けされてい
     て，それは全ての異なるテンプレートを並べ替えし，それらのユニーク性を保証
     するために使用されます．それは，`AC_DEFINE'されることが可能なシンボ
     ルにすべきです．

     例えば以下のようにします．

          AH_VERBATIM([_GNU_SOURCE],
          [/* Enable GNU extensions on systems that have them.  */
          #ifndef _GNU_SOURCE
          # define _GNU_SOURCE
          #endif])

 - マクロ: AH_TEMPLATE (KEY, DESCRIPTION)
     `autoheader'に，KEYに対するテンプレートを生成するように伝
     えます．このマクロは，DESCRIPTIONが与えられたときの
     `AC_DEFINE'のような，標準的なテンプレートを生成します．

     例えば，以下のようにします．

          AH_TEMPLATE([CRAY_STACKSEG_END],
                      [Define to one of _getb67, GETB67, getb67
                       for Cray-2 and Cray-YMP systems.  This
                       function is required for alloca.c support
                       on those systems.])

     これは，適切に正当化された記述を用いて，以下のテンプレートを生成します．

          /* Define to one of _getb67, GETB67, getb67 for Cray-2 and
             Cray-YMP systems.  This function is required for alloca.c
             support on those systems.  */
          #undef CRAY_STACKSEG_END

 - マクロ: AH_TOP (TEXT)
     TEXTをヘッダテンプレートファイルの最初に含めます．

 - マクロ: AH_BOTTOM (TEXT)
     TEXTをヘッダテンプレートファイルの最後に含めます．


File: autoconf-ja.info,  Node: Configuration Commands,  Next: Configuration Links,  Prev: Configuration Headers,  Up: Setup

任意のコンフィグレーションコマンドの実行
========================================

   `config.status'の実行前，実行中，そして実行後のいずれかに任意のコマ
ンドを実行することが可能です．以下の三つのマクロは，複数回呼び出されたと
き，実行するコマンドを累積していきます．`AC_CONFIG_COMMANDS' は時代
遅れのマクロ`AC_OUTPUT_COMMANDS'の置換物です．詳細は，*Note Obsolete
Macros::を参照してください．

 - マクロ: AC_CONFIG_COMMANDS (TAG..., [CMDS], [INIT-CMDS])
     `config.status'の終りに実行するシェルコマンドと，
     `configure'からのあらゆる変数を初期化するためのシェルコマンドを
     を追加します．コマンドをTAGに関連付けます．通常，CMDSはファ
     イルを作成するので，TAGは自ずからファイル名にすべきでしょう．実際，
     TAGに書かれているディレクトリが作製されます．このマクロは，実際に
     ファイルを作成するマクロです．*Note Configuration
     Actions::を参照してくだ さい．

     非現実的な例ですが，以下のようにします．
          fubar=42
          AC_CONFIG_COMMANDS([fubar],
                             [echo this is extra $fubar, and so on.],
                             [fubar=$fubar])

     以下はましなものです．
          AC_CONFIG_COMMANDS([time-stamp], [date >time-stamp])

 - マクロ: AC_CONFIG_COMMANDS_PRE (CMDS)
     `config.status'を作成する直前にCMDSを実行します．

 - マクロ: AC_CONFIG_COMMANDS_POST (CMDS)
     `config.status'を作成した直後にCMDSを実行します．


File: autoconf-ja.info,  Node: Configuration Links,  Next: Subdirectories,  Prev: Configuration Commands,  Up: Setup

コンフィグレーションのリンクを作成する
======================================

テストの結果によって，対象物へのリンクを作成することが便利だと分かるでしょ
う．`AC_CONFIG_COMMANDS'を使用することも可能ですが，相対的なシンボ
リックリンクを作成することで，パッケージがソースディレクトリとは異なるディ
レクトリでビルドされるときに決定することが可能です．

 - マクロ: AC_CONFIG_LINKS (DEST:SOURCE..., [CMDS], [INIT-CMDS])
     `AC_OUTPUT'で，それぞれの既存のファイルSOURCEから対応するリン
     ク名DESTにリンクを作成します．可能な場合はシンボリックリンクを作成
     し，それ以外ではハードリンクを作成し，それ以外ではコピーします．
     DESTとSOURCEの名前は，ソースやビルドディレクトリのトップレベ
     ルからの相対的なものにすべきです．このマクロは，実際にファイルを作成する
     マクロの一つです．*Note Configuration Actions::を参照してください．

     例えば，以下のように呼び出します．

          AC_CONFIG_LINKS(host.h:config/$machine.h
                          object.h:config/$obj_format.h)

     これで，現在のディレクトリに`SRCDIR/config/$machine.h'へのリ
     ンク`host.h'と，`SRCDIR/config/$obj_format.h'へのリンク
     `object.h'を作成します．

     DESTに対して使用したい値`.'は有効ではありません．そうすると，
     `config.status'で作成するリンクを推定することが不可能になります．

     すると，以下のように実行できるでしょう．
          ./config.status host.h object.h

     これでリンクを作成します．


File: autoconf-ja.info,  Node: Subdirectories,  Next: Default Prefix,  Prev: Configuration Links,  Up: Setup

サブディレクトリで他のパッケージをコンフィグレーションする
==========================================================

   ほとんどの場合，`AC_OUTPUT'を呼び出すことで，サブディレクトリの
`Makefile'を作成するためには十分です．しかし，一つ以上の独立したパッ
ケージを制御する`configure'スクリプトで，サブディレクトリの他の
パッケージの`configure'スクリプトを実行するために
`AC_CONFIG_SUBDIRS'を使用することが可能です．

 - マクロ: AC_CONFIG_SUBDIRS (DIR ...)
     空白で区切られたリストで与えられているそれぞれのサブディレクトリ
     DIRで，`AC_OUTPUT'に`configure'を実行させます．それぞ
     れのDIRはリテラルにすべきです．すなわち，以下のように使用しないで
     ください．

          if test "$package_foo_enabled" = yes; then
            $my_subdirs="$my_subdirs foo"
          fi
          AC_CONFIG_SUBDIRS($my_subdirs)

     これは`./configure --help=recursive'でのパッケージ`foo'のオプ
     ション表示を妨げるためです．その代わりに以下のように書くべきです．

          if test "$package_foo_enabled" = yes; then
            AC_CONFIG_SUBDIRS(foo)
          fi

     該当するDIRが見つからない場合でもエラーを報告しません．サブディレ
     クトリがオプションの場合，以下のように書いてください．

          if test -d $srcdir/foo; then
            AC_CONFIG_SUBDIRS(foo)
          fi

     該当するDIRに`configure.gnu'が含まれている場合，
     `configure'の代わりにそれを実行します．これは，Autoconfスクリプ
     トではない`Configure'を使用しているパッケージに対するもので，大
     文字小文字を識別しないファイルシステムでは同じファイルになるので，それを
     `configure'のラッパーとして呼び出すことは不可能です．同様に，
     DIRが`configure.ac'を含んでいて`configure'が無い場合，
     `AC_CONFIG_AUXDIR'で見つかるCygnusの`configure'スクリプトが
     使用されます．

     サブディレクトリの`configure'スクリプトには，この
     `configure'スクリプトに与えられたものと同じコマンドラインオプショ
     ンが渡され，必要場合は少し変更され，変更されるものには以下のものが含まれ
     ます．

        - キャッシュファイルへの相対的なパスを調整．

        - ソースディレクトリへの相対的なパスを調整．

        -
          デフォルトの場合を含め，現在の`$prefix'の値を，トップレベルとサブディ
          レクトリの`configure'のデフォルト値が異なっている場合でも伝搬させま
          す．

     このマクロは，出力変数`subdirs'も，ディレクトリのリスト
     `DIR...'に設定します．`Makefile'のルールは，この値を
     サブディレクトリの定義に再帰的に使用することが可能です．

     このマクロは何度呼び出してもかまいません．


File: autoconf-ja.info,  Node: Default Prefix,  Prev: Subdirectories,  Up: Setup

デフォルトプレフィクス
======================

   `configure'はデフォルトで，ファイルをインストールするプレフィク
スを`/usr/local'に設定します．`configure'のユーザは，異なる
ディレクトリを，`--prefix'と`--exec-prefix'オプションで選択す
ることが可能です．デフォルトを変更する方法は二つあります．
`configure'を作成するときと，実行するときです．

   デフォルトで，`/usr/local'以外のディレクトリにインストールしたい，
ソフトウェアパッケージもあります．そうするために，
`AC_PREFIX_DEFAULT'マクロを使用してください．

 - マクロ: AC_PREFIX_DEFAULT (PREFIX)
     デフォルトのインストールプレフィクスを，`/usr/local'の代わりに
     PREFIXに設定します．

   ユーザが既にインストールしている関連するプログラムの場所から，
`configure'がインストールプレフィクスを推測すると便利かもしれま
せん．そうしたい場合，`AC_PREFIX_PROGRAM'を呼び出します．

 - マクロ: AC_PREFIX_PROGRAM (PROGRAM)
     ユーザが(`--prefix'オプションを使用して)インストールプレフィクスを
     指定しない場合，シェルが行うように，`PATH'でPROGRAMを探し，そ
     の値を推測します．PROGRAMが見つかった場合，プレフィクスを
     PROGRAMを含むディレクトリの親に設定します．そうでない場合，上記の
     もの(`/usr/local'や`AC_PREFIX_DEFAULT')がデフォルトのプレフィ
     クスになります．例えば，PROGRAMが`gcc'で，`PATH'が
     `/usr/local/gnu/bin/gcc' を含んでいる場合，プレフィクスを
     `/usr/local/gnu'に設定します．


File: autoconf-ja.info,  Node: Existing Tests,  Next: Writing Tests,  Prev: Setup,  Up: Top

存在の調査
**********

以下のマクロは，パッケージが必要とする，あるいは使用する，特定のシステム
の特徴をテストします．これらのマクロが調査しない特徴のテストが必要な場合，
適切な引数で基本のテストマクロを呼び出すことで，おそらく可能です (*note
Writing Tests::)．

これらのテストは，調査している特徴と見つかったものをユーザに伝えるメッセー
ジを出力します．将来，`configure'を実行するため，結果をキャッシュ
します(*note Caching Results::)．

これらのマクロには，出力変数を設定するものもあります．変数の取得方法は，
*Note Makefile Substitutions::.  "NAMEを定義します"という文章は，
"CプリプロセッサのシンボルNAMEの値を1に定義します" という意味を
短縮したのもとして，以下で使用します．プログラムでシンボル定義を得る方法
は， *Note Defining Symbols::.

* Menu:

* Common Behavior::             Macros' standard schemes
* Alternative Programs::        Selecting between alternative programs
* Files::                       Checking for the existence of files
* Libraries::                   Library archives that might be missing
* Library Functions::           C library functions that might be missing
* Header Files::                Header files that might be missing
* Declarations::                Declarations that may be missing
* Structures::                  Structures or members that might be missing
* Types::                       Types that might be missing
* Compilers and Preprocessors::  Checking for compiling programs
* System Services::             Operating system services
* UNIX Variants::               Special kludges for specific UNIX variants


File: autoconf-ja.info,  Node: Common Behavior,  Next: Alternative Programs,  Up: Existing Tests

共通の動作
==========

Autoconfの学習が簡単になるように努力してきました．このゴールに到達するた
めの最も明白な方法は，できるだけ例外を避けながら，単純に標準的なインタ
フェースと動作を実施することです．残念ながら，歴史と慣性のため，多くの例
外がAutoconfにはまだ存在しています．それにもかかわらず，このセクションで
は，一般的な規則を記述します．

* Menu:

* Standard Symbols::            Symbols defined by the macros
* Default Includes::            Includes used by the generic macros


File: autoconf-ja.info,  Node: Standard Symbols,  Next: Default Includes,  Up: Common Behavior

標準的なシンボル
----------------

   テストの結果，シンボルを`AC_DEFINE'する全ての一般的なマクロは，その
引数を標準的なアルファベットに変換します．最初に，ARGUMENTは大文字
に変換され，あらゆるアスタリスク(`*')は，それぞれ`P'に変換され
ます．アルファベットではない残りの全ての文字は，アンダースコアに変換され
ます．

   例えば以下のものを考えます．

     AC_CHECK_TYPES(struct $Expensive*)

これは，調査が成功した場合，シンボル`HAVE_STRUCT__EXPENSIVEP'を定義
します．


File: autoconf-ja.info,  Node: Default Includes,  Prev: Standard Symbols,  Up: Common Behavior

デフォルトのインクルード
------------------------

ヘッダファイルの設定に依存するテストもあります．これらのヘッダは例外無く
利用可能というわけではないので，テストは，以下のようなインクルードを保護
する(コードの)組を，実際に提供する必要があります．

     #if TIME_WITH_SYS_TIME
     # include <sys/time.h>
     # include <time.h>
     #else
     # if HAVE_SYS_TIME_H
     #  include <sys/time.h>
     # else
     #  include <time.h>
     # endif
     #endif

どうすれば良いか正確に知らない場合，無条件のインクルードの使用は避け，イ
ンクルードする前にヘッダの存在を調査すべきです(*note Header Files::)．

最も一般的なマクロは，以下のようなインクルードのデフォルトの組を提供する
マクロを使用しています．

 - マクロ: AC_DEFAULT_INCLUDES ([INCLUDE-DIRECTIVES])
     INCLUDE-DIRECTIVESが定義されている場合はそれを展開し，そうでなけれ
     ば以下のようになります．

          #include <stdio.h>
          #if HAVE_SYS_TYPES_H
          # include <sys/types.h>
          #endif
          #if HAVE_SYS_STAT_H
          # include <sys/stat.h>
          #endif
          #if STDC_HEADERS
          # include <stdlib.h>
          # include <stddef.h>
          #else
          # if HAVE_STDLIB_H
          #  include <stdlib.h>
          # endif
          #endif
          #if HAVE_STRING_H
          # if !STDC_HEADERS && HAVE_MEMORY_H
          #  include <memory.h>
          # endif
          # include <string.h>
          #endif
          #if HAVE_STRINGS_H
          # include <strings.h>
          #endif
          #if HAVE_INTTYPES_H
          # include <inttypes.h>
          #else
          # if HAVE_STDINT_H
          #  include <stdint.h>
          # endif
          #endif
          #if HAVE_UNISTD_H
          # include <unistd.h>
          #endif

     デフォルトのインクルードが使用される場合，これらのヘッダの存在とその互換
     性を調査します．すなわち，`AC_HEADERS_STDC'を実行する必要も，
     `stdlib.h'などを調査する必要もありません．

     これらのヘッダは，インクルードされる順番と同じ順番で調査されます．例えば，
     `string.h'と`strings.h'の両方があるシステムもありますが，競合
     しません．そこでは，`HAVE_STRING_H'は定義されますが，
     `HAVE_STRINGS_H'は定義されません．


File: autoconf-ja.info,  Node: Alternative Programs,  Next: Files,  Prev: Common Behavior,  Up: Existing Tests

プログラムの選択
================

これらのマクロは，特定のプログラムとその動作を調査します．それらは，いく
つかのプログラムからどれかを選択し，一旦選ばれると何をするのかを決定する
ために使用されます．必要なプログラムを調査するために特別に定義されている
マクロが無い場合，一般的なプログラム調査のマクロの一つを使用することが可
能です．

* Menu:

* Particular Programs::         Special handling to find certain programs
* Generic Programs::            How to find other programs


File: autoconf-ja.info,  Node: Particular Programs,  Next: Generic Programs,  Up: Alternative Programs

特定のプログラムの調査
----------------------

   以下のマクロは，特定のプログラムを調査します --
それは存在するかどうか，
そして場合によっては特定の機能をサポートするかどうかです．

 - マクロ: AC_PROG_AWK
     `gawk'，`mawk'，`nawk'，そして`awk'を，この順番で調
     査し，最初に見つかったものに出力変数`AWK'を設定します．最良の実装と
     報告されているので，最初に`gawk'を調査します．

 - マクロ: AC_PROG_EGREP
     `grep -E'と`egrep'をこの順番で調査し，最初に見つかったもので出
     力変数`EGREP'を設定します．

 - マクロ: AC_PROG_FGREP
     `grep -F'と`fgrep'をこの順番で調査し，最初に見つかったもので出
     力変数`FGREP'を設定します．

 - マクロ: AC_PROG_INSTALL
     現在の`PATH'に，BSD互換の`install'プログラムが見つかっ
     た場合，出力変数`INSTALL'をそのパスに設定します．それ以外では，
     `INSTALL'を`DIR/install-sh -c'に設定し，
     `AC_CONFIG_AUX_DIR'で指定されたディレクトリ(またはデフォルトディレ
     クトリ)を，DIRを決定するために調査します(*note Output::)．また，変
     数`INSTALL_PROGRAM'と`INSTALL_SCRIPT'を`${INSTALL}' に，
     `${INSTALL}'と`INSTALL_DATA'を`${INSTALL}-m 644'に設 定します．

     このマクロは，動作しないことが知られている`install'の様々な実例をふ
     るい落とします．それは速度のため，シェルスクリプトよりCプログラムを見付
     けようとします．`install-sh'の代わりに，`install.sh'を使用する
     ことも可能ですが，`make'プログラムには， `Makefile' が無い
     場合，それから`install'を作成するルールを持っているものもあるので，
     その名前は時代遅れです．

     使用可能な`install-sh'のコピーは，Autoconfでインストールされます．
     `AC_PROG_INSTALL'を使用する場合，配布物に`install-sh'か
     `install.sh'を含める必要があり，そうしない場合，`configure'
     は見つからない旨，エラーメッセージを出力します --
     たとえシステムに良い
     `install'があってもそうなります．この調査は，そのファイルをたまたま
     入れ忘れることを阻止する安全対策で，それはBSD互換の
     `install'プログラムが無いシステムでパッケージをインストールすること
     を妨げます．

     標準的な`install'プログラムには見当たらない特徴があるために，独自の
     インストールプログラムを使用する必要がある場合，`AC_PROG_INSTALL'を
     使用する理由はありません．`Makefile.in'ファイルにプログラムのファイ
     ル名を書き込んでください．

 - マクロ: AC_PROG_LEX
     `flex'が見つかった場合，ライブラリが標準的な場所にあれば，出力変数
     `LEX'を`flex'に，`LEXLIB'を`-lfl'に設定します．それ
     以外の場合，`LEX'を`lex'に，`LEXLIB'を`-ll'に設定し ます．

     `yytext'が`char []'ではなく`char *'の場合，
     `YYTEXT_POINTER'を定義します．また，出力変数`LEX_OUTPUT_ROOT'
     をlexerが生成するファイル名のベースに設定します．通常は`lex.yy'です
     が異なることもあります．これらは，結果として`lex'と`flex'のど
     ちらが使用されているかに依存して変化します．

     普通のLexとそれが生成するCソースを使用するより，移植性の面でより好ましい
     ので，ソースでFlexを使用することを推奨します．しかし，移植性を確実にする
     ために，関数`yywrap'を提供する，または，それを使用しない場合(例えば，
     スキャナに`#include'のような機能が無い場合)，単純にスキャナソースで
     `%noyywrap'文を含める必要があります．一旦このようにすることで，スキャ
     ナは(_あなたが_移植性の無い構成物を使用しない限り) 移植性があり，ラ
     イブラリに依存しません．この場合，そしてこの場合のみ，以下のような
     Autoconfの断片を使用することを提案します．

          AC_PROG_LEX
          if test "$LEX" != flex; then
            LEX="$SHELL $missing_dir/missing flex"
            AC_SUBST(LEX_OUTPUT_ROOT, lex.yy)
            AC_SUBST(LEXLIB, '')
          fi

     シェルスクリプト`missing'は，Automakeの配布物で見つかるはずです．

     下位互換を確実にするため，Automakeの`AM_PROG_LEX'は，(間接的に)この
     マクロを二回呼び出し，不快な"`AC_PROG_LEX' invoked multiple times"
     で始まる警告を生じます．将来のバージョンのAutomakeではこの症状は
     修正されるでしょう．それまで，このメッセージを無視してください．

 - マクロ: AC_PROG_LN_S
     現在のファイルシステムで，`ln -s'が動作する(オペレーティングシステ
     ムとファイルシステムがシンボリックリンクをサポートしている)場合，出力変
     数`LN_S'を`ln -s'に設定します．それ以外の場合は，`ln'が動
     作する場合は，`LN_S'を`ln'に設定し，そうでもなければ`cp
     -p'に設定します．

     リンクをカレントディレクトリ以外のディレクトリに作成する場合，その方法は，
     `ln'と`ln -s'のどちらが使用されるかに依存します．
     `$(LN_S)'を使用して安全にリンクを作成するため，使用する書式と正しい
     引数を理解するか，リンクが作成されるディレクトリで`ln'を常に呼び出
     すか，どちらかにしてください．

     言い替えると，以下のものは動作しません．
          $(LN_S) foo /x/bar

     その代わりに，以下のようにします．

          (cd /x && $(LN_S) foo bar)

 - マクロ: AC_PROG_RANLIB
     `ranlib'が見つかった場合，出力変数`RANLIB'を`ranlib'に設
     定し，それ以外では，`:'(何もしません)に設定します．

 - マクロ: AC_PROG_YACC
     `bison'が見つかった場合，出力変数`YACC'を`bison -y'に設定
     します．それ以外で，`byacc'が見つかる場合，`YACC'を
     `byacc'に設定します．それ以外では，`YACC'を`yacc'に設定し ます．


File: autoconf-ja.info,  Node: Generic Programs,  Prev: Particular Programs,  Up: Alternative Programs

一般的なプログラムとファイルの調査
----------------------------------

これらのマクロは，"特定の"テストマクロによってカバーされていないプログ
ラムを見つけるに使用します．プログラムの存在を確認するだけでなく，その動
作を調査する必要がある場合，そうするために独自のテストを書く必要がありま
す(*note Writing Tests::)．デフォルトで，これらのマクロは環境変数
`PATH'を使用します．ユーザの`PATH'にない可能性があるプログラム
を調査する必要がある場合，以下のようにして，パスを編集して渡すことが可能
です．

     AC_PATH_PROG([INETD], [inetd], [/usr/libexec/inetd],
                  [$PATH:/usr/libexec:/usr/sbin:/usr/etc:etc])

   `AC_CHECK_PROG'等に渡すVARIABLEを，正確に宣言することを強く推
奨します．詳細は，`AC_ARG_VAR'と*Note Setting Output Variables::.

 - マクロ: AC_CHECK_PROG (VARIABLE, PROG-TO-CHECK-FOR, VALUE-IF-FOUND,
          [VALUE-IF-NOT-FOUND], [PATH], [REJECT])
     `PATH'に，プログラムPROG-TO-CHECK-FORが存在するかどうか調査し
     ます．見つかった場合，VARIABLEをVALUE-IF-FOUNDに設定し，それ
     以外で，VALUE-IF-NOT-FOUNDが与えられている場合は，それに設定します．
     たとえREJECT(絶対パスのファイル名)が最初のサーチパスで見つかった場
     合でも，それは候補から外します．この場合，PROG-TO-CHECK-FORが見つ
     かったREJECTではない絶対パスのファイル名を使用し，VARIABLEを
     設定します．VARIABLEが既に設定されている場合，何もしません．
     VARIABLEに対して`AC_SUBST'を呼び出してください．

 - マクロ: AC_CHECK_PROGS (VARIABLE, PROGS-TO-CHECK-FOR,
          [VALUE-IF-NOT-FOUND], [PATH])
     空白で区切られたリストPROGS-TO-CHECK-FORのそれぞれのプログラムが
     `PATH'に存在するかどうかを調査します．見つかった場合，
     VARIABLEをプログラムの名前に設定します．それ以外の場合は引続き，リ
     ストの次にあるプログラムを調査します．リスト内のプログラムが全く見つから
     ない場合， VARIABLE をVALUE-IF-NOT-FOUNDに設定します．
     VALUE-IF-NOT-FOUNDが指定されていない場合，VARIABLEは変更され
     ません．VARIABLEに対して`AC_SUBST'を呼び出してください．

 - マクロ: AC_CHECK_TOOL (VARIABLE, PROG-TO-CHECK-FOR,
          [VALUE-IF-NOT-FOUND], [PATH])
     `AC_CHECK_PROG'に似ていますが，`AC_CANONICAL_HOST'で定義されて
     いるホストタイプにダッシュが続いているプレフィクスを持つ
     PROG-TO-CHECK-FORを，最初に探します(*note Canonicalizing::)．例え
     ば，ユーザが`configure --host=i386-gnu'を実行している場合，以下のよ
     うに呼び出します．
          AC_CHECK_TOOL(RANLIB, ranlib, :)

     これで，`PATH'に`i386-gnu-ranlib'というプログラムが存在する場
     合，`RANLIB'を`i386-gnu-ranlib'に設定し，それ以外で，
     `PATH'に`ranlib'というプログラムがある場合，`RANLIB'を
     `ranlib'に設定し，どちらも無い場合は `:'に設定します．

 - マクロ: AC_CHECK_TOOLS (VARIABLE, PROGS-TO-CHECK-FOR,
          [VALUE-IF-NOT-FOUND], [PATH])
     `AC_CHECK_TOOL'に似ていて，PROGS-TO-CHECK-FORでリストアップさ
     れているそれぞれのツールは，`AC_CANONICAL_HOST'で決定されたホストタ
     イプを前置し，それにダッシュを続けたものを用いて調査されます
     (*note
     Canonicalizing::)．プレフィクスを用いているツールが見つからない場
     合，最初にプレフィクス無しのものが使用されます．ツールが見つかった場合，
     VARIABLEをそのプログラム名に設定します．リストのツールが全く見つか
     らない場合，VARIABLEをVALUE-IF-NOT-FOUNDに設定します．
     VALUE-IF-NOT-FOUNDが指定されていない場合，VARIABLEの値は変更
     されません．VARIABLEに対して`AC_SUBST'を呼び出してください．

 - マクロ: AC_PATH_PROG (VARIABLE, PROG-TO-CHECK-FOR,
          [VALUE-IF-NOT-FOUND], [PATH])
     `AC_CHECK_PROG'に似ていますが，見つかった場合，VARIABLEを
     PROG-TO-CHECK-FORの完全なパスに設定します．

 - マクロ: AC_PATH_PROGS (VARIABLE, PROGS-TO-CHECK-FOR,
          [VALUE-IF-NOT-FOUND], [PATH])
     `AC_CHECK_PROGS'に似ていますが，PROGS-TO-CHECK-FORのどれかが
     見つかった場合，VARIABLEをプログラムが見つかった完全なパスに設定し
     ます．

 - マクロ: AC_PATH_TOOL (VARIABLE, PROG-TO-CHECK-FOR,
          [VALUE-IF-NOT-FOUND], [PATH])
     `AC_CHECK_TOOL'に似ていますが，見つかった場合，VARIABLEをプロ
     グラムが見つかった完全なパスに設定します．


File: autoconf-ja.info,  Node: Files,  Next: Libraries,  Prev: Alternative Programs,  Up: Existing Tests

ファイル
========

ファイルの存在を調査する必要もあるでしょう．以下のマクロを使用する前に，
実行時の調査がより良い解決ではないかどうか自問してください．ほとんどの
Autoconfマクロのように，それらはホストマシンの機能を調査するため，クロス
コンパイルでは意味が無いことを知っておいてください．

 - マクロ: AC_CHECK_FILE (FILE, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     ネイティブシステムにFILEが存在するかどうか調査します．見つかった場
     合，ACTION-IF-FOUNDを実行し，それ以外では，与えられていれば
     ACTION-IF-NOT-FOUNDを実行します．

 - マクロ: AC_CHECK_FILES (FILES, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     FILESでリストアップされているそれぞれのファイルに対し，
     `AC_CHECK_FILE'を一度実行します．さらに，見つかったそれぞれのファイ
     ルに対して`HAVEFILE'を定義します(*note Standard Symbols::)．


File: autoconf-ja.info,  Node: Libraries,  Next: Library Functions,  Prev: Files,  Up: Existing Tests

ライブラリファイル
==================

以下のマクロは，C，C++やFortranのライブラリアーカイブファイルの存在を調
査します．

 - マクロ: AC_CHECK_LIB (LIBRARY, FUNCTION, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [OTHER-LIBRARIES])
     現在の言語に依存して(*note Language
     Choice::)，テストプログラムが関数利
     用に必要なライブラリLIBRARYとリンク可能かどうかを調査することで，C，
     C++やFortranの関数FUNCTIONが利用可能であることを確認します．
     LIBRARYは，ライブラリのベース名です．例えば，`-lmp'を調査する
     ために，LIBRARYの引数として`mp'を使用します．

     ACTION-IF-FOUNDは，ライブラリとのリンクが成功した場合に実行するシェ
     ルコマンドのリストです．ACTION-IF-NOT-FOUNDは，リンクが失敗した場
     合に実行するシェルコマンドのリストです．ACTION-IF-FOUNDが指定され
     ていない場合，デフォルトで`-lLIBRARY'を`LIBS' に加え，
     `HAVE_LIBLIBRARY'を(全て大文字で)定義します．このマクロは，ラ
     イブラリの依存が連続的なテストの自然な副作用で十分になるように，右から左
     (最小依存から最大依存)の方法で`LIBS'のビルドサポートを試みます．ラ
     イブラリの順序に注意が必要なリンカもあるので，`LIBS'が生成される順
     序は，ライブラリの信頼できる検出にとって重要です．

     LIBRARYとのリンクの結果が，追加のライブラリとのリンクで解決される
     未解決のシンボルとなる場合，これらのライブラリを，`-lXt -lX11' のよ
     うに，スペースで区切られたOTHER-LIBRARIES引数で与えてください．そ
     うしない場合，テストプログラムとのリンクが未解決のシンボルで常に失敗する
     ので，このマクロはLIBRARYの存在の検出に失敗します．
     OTHER-LIBRARIES引数は，まだ`LIBS'に無い，その他のライブラリの
     一つを調査することが望ましい場合は制限があります．

 - マクロ: AC_SEARCH_LIBS (FUNCTION, SEARCH-LIBS, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [OTHER-LIBRARIES])
     まだ利用可能ではない，FUNCTIONを定義しているライブラリを探します．
     これは，最初にライブラリ無しで，その後でそれぞれのライブラリを
     SEARCH-LIBSにリストアップしている
     `AC_LINK_IFELSE([AC_LANG_CALL([], [FUNCTION])])'の呼び出しと
     等価です．

     FUNCTIONが含まれている最初のライブラリに対して，
     `-lLIBRARY'を`LIBS'に追加し，ACTION-IF-FOUNDを実
     行します．関数が見つからない場合，ACTION-IF-NOT-FOUNDを実行します．

     LIBRARYとのリンクの結果が，未解決のシンボルで，追加のライブラリと
     のリンクで解決できる場合，これらのライブラリを，`-lXt
     -lX11'の様に，
     スペースで区切られたOTHER-LIBRARIES引数で与えてください．そうしな
     ければ，テストプログラムとのリンクが，常に未解決のシンボルで失敗するので，
     このマクロはLIBRARYの存在の調査に失敗します．


File: autoconf-ja.info,  Node: Library Functions,  Next: Header Files,  Prev: Libraries,  Up: Existing Tests

ライブラリ関数
==============

以下のマクロは，特定のCライブラリ関数を調査します．必要な関数を調査する
ための特別に定義されたマクロがなく，その特別な特性を調査する必要がない場
合，一般的な関数調査のマクロを使用することが可能です．

* Menu:

* Function Portability::        Pitfalls with usual functions
* Particular Functions::        Special handling to find certain functions
* Generic Functions::           How to find other functions


File: autoconf-ja.info,  Node: Function Portability,  Next: Particular Functions,  Up: Library Functions

C関数の移植性
-------------

ほとんどの通常の関数は，足りない，またはバグがある，またはアーキテクチャ
によって制限があるはずです．このセクションでは，これらの移植性の問題を目
録にしようと思います．定義からすると，このリストは常に追加が必要です．で
きるだけ完全なものを保つために，我々への手助けをお願いします．

`exit'
     古いホストでは，`exit'が`int'を返すものがあることを御存知です
     か？これは，`exit'のほうが`void'より時代が古く，`int' を
     返すという伝統が長い間あったためです．

`putenv'
     POSIXでは，`putenv'は与えられた文字列を直接`environ'に書き込む
     ように指定していますが，システムによってはその代わりにコピーするものもあ
     ります(例えば，glibc 2.0やBSD)．そして，コピーが作成されたとき，
     `unsetenv'はそれを解放し，メモリリークの原因になります(例えば，
     FreeBSD 4がそうです)．

     POSIXでは，`putenv("FOO")'は`FOO'を環境変数から削除するように
     指定していますが，システムによっては(例えばFreeBSD
     4)，こうならないので， 代わりに`unsetenv'を使用して下さい．

     MINGWでは，`putenv("FOO=")'の呼び出しで，空の値を挿入する代わりに，
     `FOO'を環境変数から削除します．

`signal'ハンドラ
     通常，`signal'は`void'の型を返す関数へのハンドルを受け取ります
     が，古いシステムには，代わりに`int'を要求するものもあります．実際に
     返される`int'の値を利用しませんが，これは関数のプロトタイプの要求が
     異なるだけです．

     現在知っているシステムはすべて`void'を受け取ります．おそらく，
     `int'がK&R Cでサポートされていたのですが，もちろん`void'は利用
     可能ではありませんでした．`AC_TYPE_SIGNAL' (*note Particular
     Types::)は，すべての状況で正しい型を構築するために使用することが可能です．

`snprintf'
     ISO
     C99標準では，出力配列があまり大きくなくその他のエラーが無い場合，
     `snprintf'と`vsnprintf'は出力を切捨て，生成された出力が必要と
     するバイト数を返すことになっています．古いシステムでは切り捨てられた長さ
     を返したり(例えば，GNU Cライブラリ2.0.xやIRIX 6.5)，負の
     値を返したり(例えば，より古いバージョンのGNU Cライブラリ)，切
     り捨てられなかったバッファの長さを返したり(例えば32ビットのSolaris
     7)し
     ます．また，バグの多い古いシステムにはバッファの長さとオーバーランを無視
     するもの(例えば64ビットのSoraris 7)もあります．

`sprintf'
     ISO Cの標準では，`sprintf'と`vsprintf'は書き込まれたバイト数を
     返すことになっていますが，古いシステム(例えばSunOS
     4)ではその代わりにバッ ファへのポインタを返すものもあります．

`sscanf'
     様々な古いシステム，例えばHP-UX 9では，`sscanf'は入力文字列が(たと
     えそれが実際には変更されなくても)書き込み可能であることを要求します．こ
     れは，`gcc'は通常，固定文字列を読み込み専用のメモリに書き込むの
     で(*note Incompatibilities of GCC:
     (gcc)Incompatibilities.)，それを使用するとき問題
     になるはずです．場合によっては，フォーマット文字列が明らかに読み込み専用
     であっても問題になるはずです．

`strnlen'
     AIX 4.3は，以下の結果を生成する壊れたバージョンを提供していま す．

          strnlen ("foobar", 0) = 0
          strnlen ("foobar", 1) = 3
          strnlen ("foobar", 2) = 2
          strnlen ("foobar", 3) = 1
          strnlen ("foobar", 4) = 0
          strnlen ("foobar", 5) = 6
          strnlen ("foobar", 6) = 6
          strnlen ("foobar", 7) = 6
          strnlen ("foobar", 8) = 6
          strnlen ("foobar", 9) = 6

`sysconf'
     `_SC_PAGESIZE'は標準ですが，古いシステム(例えばHP-UX 9)には，代わり
     に`_SC_PAGE_SIZE'が存在します．これは`#ifdef'でテスト可能です．

`unlink'
     POSIXの仕様では，`unlink'は開かれているファイルへのハンド
     ルがなくなった後でファイルを削除するように述べられています．全てのOS
     が
     この動作をサポートしているわけではありません．そのため，システムが
     `unlink'を提供している場合でも，開いているファイルに対して呼び出し
     ても大丈夫だと仮定した移植は不可能です．例えば，Windows
     9xとMEでは，その
     ような呼び出しは失敗します．DOSは可能ですが，OSが削除した後に
     ファイルへの書き込みが終了するので，ファイルシステムが駄目になります．

`unsetenv'
     MINGWでは，`unsetenv'が利用不可能ですが，`putenv'で上述したよ
     うに，変数`FOO'は`putenv("FOO=")'の呼び出しで削除可能です．

`va_copy'
     ISO C99標準では，`va_list'をコピーするため`va_copy'を提供して
     います．古い環境でも利用可能かもしれませんが，おそらくは
     `__va_copy'(例えば厳密なC89モード)でしょう．これらは`#ifdef'
     でテスト可能です．`memcpy (&dst, &src, sizeof(va_list))'で代替する
     ことで最大の移植性となるでしょう．

`va_list'
     `va_list'はポインタである必要はありません．`struct'(例えば
     Alphaの`gcc')にすることが可能で，それは`NULL'では移植性が無
     いことを意味します．配列(例えばPowerPCでコンフィグレーションされた
     `gcc')も可能で，それは関数のパラメータとして効果的に参照呼び出し
     が可能であり，ライブラリルーチンで呼び出しが返す値を修正する可能性がある
     (例えばGNU Cライブラリ2.1の`vsnprintf')ことを意味します．

符合付の`>>'
     通常，Cの符号付きの右シフト`>>'はハイビットを複製し，いわゆる"算術"
     シフトになります．しかし，ISO
     Cの標準ではその動作を要求していないので，
     注意すべきです．ネイティブの算術シフトが無いプロセッサ(例えばCrayベクター
     システム)では，符号無しのシフトと同様に，ゼロビットがシフトインされる可
     能性があります．


File: autoconf-ja.info,  Node: Particular Functions,  Next: Generic Functions,  Prev: Function Portability,  Up: Library Functions

特定の関数の調査
----------------

   これらのマクロは -- その存在にかかわらず -- 特定のC関数を調査し，場合
によっては，特定の引数が与えられたときの反応を調査します．

 - マクロ: AC_FUNC_ALLOCA
     `alloca'を使用する方法を調査します．`alloca.h'や，前もって定義
     されているCプリプロセッサマクロの`__GNUC__'と`_AIX'を調査する
     ことで，組み込みバージョンを取得しようとします．このマクロが
     `alloca.h'を見つけた場合，`HAVE_ALLOCA_H'を定義します．

     その試みが失敗する場合，標準Cライブラリで関数を探します．それらの手法の
     いずれかが成功した場合，それは`HAVE_ALLOCA'を定義します．それ以外の
     場合は，出力変数の`ALLOCA'を`alloca.o'に設定し，
     `C_ALLOCA'を定義します(それで，プログラムがガーベージコレクションの
     ため定期的に`alloca(0)'を呼び出すことが可能になります．この変数は，
     `LIBOBJS'とは別物なので，実際にライブラリを作成しなくても複数のプロ
     グラムで`ALLOCA'の値を共有することが可能ですが，`LIBOBJS'で使
     用する場合もわずかにあります．

     このマクロは，System V R3 の`libPW'やSystem V R4の`libucb'の
     `alloca'の使用を試みません．なぜなら，それらのライブラリには互換性
     がない関数があり問題が生じるためです．`alloca'を含まないものやバグ
     だらけのバージョンもあります．それでも，その`alloca'を使用したい場
     合，`alloca.c'をコンパイルする代わりに，ライブラリから
     `alloca.o'を抽出するため，`ar'を使用してください．

     `alloca'を使用するソースファイルでは，正確に宣言するために，以下の
     ようなコードで始めるべきです．AIXのバージョンによっては，
     `alloca'の宣言を，コメントとプリプロセッサディレクティブ以外の，全
     ての行の前に書く必要があります．`#pragma'ディレクティブは， ANSI
     C以前のコンパイラが停止するのではなく無視するように，字下
     げを行います．

          /* AIX requires this to be the first thing in the file.  */
          #ifndef __GNUC__
          # if HAVE_ALLOCA_H
          #  include <alloca.h>
          # else
          #  ifdef _AIX
           #pragma alloca
          #  else
          #   ifndef alloca /* predefined by HP cc +Olibcalls */
          char *alloca ();
          #   endif
          #  endif
          # endif
          #endif

 - マクロ: AC_FUNC_CHOWN
     `chown'関数が利用可能で動作する場合(特に，`uid'と`gid' に
     対する`-1'を受け入れるべきです)，`HAVE_CHOWN'を定義します．

 - マクロ: AC_FUNC_CLOSEDIR_VOID
     `closedir'関数が意味のある値を返さない場合，`CLOSEDIR_VOID' を
     定義します．それ以外では，呼び出し側で，エラーを示す戻り値を調査する必要
     があります．

 - マクロ: AC_FUNC_ERROR_AT_LINE
     `error_at_line'関数が見つからない場合，`AC_LIBOBJ'が
     `error'で置換されることを要求します．

 - マクロ: AC_FUNC_FNMATCH
     `fnmatch'関数がPOSIX準拠の場合，`HAVE_FNMATCH'を定義
     します．例えば，Solaris
     2.4のバグのような，一般的な実装上のバグを検出し ます．

     歴史的な理由のため，それ以外の`AC_FUNC'マクロとは反対に，
     `AC_FUNC_FNMATCH'は壊れていたり見つからなかったりする`fnmatch'
     を置換しません．以下の`AC_REPLACE_FNMATCH'を参照してください．

 - マクロ: AC_FUNC_FNMATCH_GNU
     `AC_REPLACE_FNMATCH'(_置換_)のように動作しますが，
     `fnmatch'がGNUの拡張をサポートするかどうかも調査します．
     例えば，GNU Cライブラリ2.1のバグのような，一般的な実装上のバ
     グを検出します．

 - マクロ: AC_FUNC_FORK
     このマクロは，`fork'と`vfork'関数を調査します．動作する
     `fork'が見つかった場合，`HAVE_WORKING_FORK'を定義します．この
     マクロは，`fork'がスタブかどうかを実行してみることで調査します．

     `vfork.h'が見つかった場合，`HAVE_VFORK_H'を定義します．動作す
     る`vfork'が見つかった場合，`HAVE_WORKING_VFORK'を定義します．
     それ以外の場合，以前のバージョンの`autoconf'に対する下位互換のた
     め，`vfork'を`fork'と定義します．このマクロは，`vfork'の
     実装のいくつかの既知のエラーを調査し，そのエラーのいずれかを検出した場合，
     システムには動作する`vfork'が無いと考えます．子プロセスは，シグナル
     ハンドラを変えることがめったにないので，子プロセスの`signal'の呼び
     出しが，親プロセスのシグナルハンドラを変更する場合，実装エラーだとは考え
     られません．

     このマクロは，以前のバージョンの`autoconf'への下位互換性のためだ
     けに`vfork'を定義するので，コード内で独自に定義することを推奨します．
          #if !HAVE_WORKING_VFORK
          # define vfork fork
          #endif

 - マクロ: AC_FUNC_FSEEKO
     `fseeko'関数が利用可能な場合，`HAVE_FSEEKO'を定義します．必要
     があれば，プロトタイプがいくつかのシステム上で(例えばglibc
     2.2)見て分か
     るように，`_LARGEFILE_SOURCE'を定義します．それ以外では，
     `AC_SYS_LARGEFILE'を用いてコンパイルするとき，`off_t'がデフォ
     ルトで64bitになっていないラージファイルに問題があるシステム上で，リンク
     の問題が発生する可能性があります．

 - マクロ: AC_FUNC_GETGROUPS
     `getgroups'関数が利用可能で，(`getgroups (0, 0)'が常に失敗する
     Ultrix 4.3と異なり)動作する場合，`HAVE_GETGROUPS'を定義します．
     `GETGROUPS_LIBS'をその関数の使用に必要な全てのライブラリに定義しま
     す．このマクロは，`AC_TYPE_GETGROUPS'を実行します．

 - マクロ: AC_FUNC_GETLOADAVG
     システムのロードアベレージを取得する方法を調査します．適切に調査を実行す
     るため，このマクロはファイル`getloadavg.c'が必要です．このため，適
     切な置換ディレクトリを`AC_LIBOBJ'で確実に設定してください (*Note
     Generic Functions::と，`AC_CONFIG_LIBOBJ_DIR'を参照してくださ い)．

     システムに`getloadavg'関数がある場合，`HAVE_GETLOADAVG'を定義
     し，その関数の使用に必要な全てのライブラリを`GETLOADAVG_LIBS'に設定
     します．また，`GETLOADAVG_LIBS'を`LIBS'に加えます．それ以外の
     場合，`AC_LIBOBJ'で`getloadavg'を`DIR/getloadavg.c'
     のソースコードで置換することを要求し，おそらく以下のようないくつかのCプ
     リプロセッサのマクロと出力変数を定義します．

       1. `C_GETLOADAVG'を定義します．

       2. システムが，`SVR4'，`DGUX'，`UMAX'，または`UMAX4_3'
          の場合，それを定義します．

       3. `nlist.h'が見つかる場合，`HAVE_NLIST_H'を定義します．

       4. `struct nlist'が`n_un'メンバーを持つ場合，
          `HAVE_STRUCT_NLIST_N_UN_N_NAME'を定義します．時代遅れのシンボル
          `NLIST_NAME_UNION'も定義しますが，それに依存しないようにしてくださ
          い．

       5.
          プログラムによっては，`getloadavg'が動作するために，setgid(または
          setuid)がインストールされていることを必要とするかもしれません．この場合，
          `GETLOADAVG_PRIVILEGED'を定義し，出力変数`NEED_SETGID'を
          `true'に(それ以外では`false'に)設定し，そして`KMEM_GROUP'
          をインストールされているプログラムを所有するグループの名前に設定します．

 - マクロ: AC_FUNC_GETMNTENT
     IRIX 4，PTXと，Unixwareに対し，`sun'，`seq'，そして `gen'
     のライブラリ内の`getmntent'をそれぞれ調査します．
     `getmntent'が利用可能な場合，`HAVE_GETMNTENT'を定義します．

 - マクロ: AC_FUNC_GETPGRP
     `getpgrp'に0を渡すとエラーになる場合，`GETPGRP_VOID'を定義しま
     す．これはPOSIXの動作です．古いBSDシステムでは，それ
     は引数をとりPOSIXの`getpgid'のように動作するので，
     `getpgrp'に0を渡す必要があります．

          #if GETPGRP_VOID
            pid = getpgrp ();
          #else
            pid = getpgrp (0);
          #endif

     このマクロは`getpgrp'が存在するかどうかを全く調査しません．そのよう
     な状況で動作する必要がある場合，`getpgrp'に対して最初に
     `AC_CHECK_FUNC'を呼び出してください．

 - マクロ: AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
     `link'がシンボリックリンクの場合，`lstat'は`link/'を
     `link/.'と同じものとして扱います．しかし，多くの古い`lstat' の
     実装では，後置されているスラッシュを間違って無視します．

     `lstat'が後置されているスラッシュを間違って無視する場合，それ以外の
     `unlink'のようなsymbolic-link-aware関数も後置されているスラッシュを
     間違って無視すると仮定した方が確実です．

     `lstat'が正しく動作する場合，`LSTAT_FOLLOWS_SLASHED_SYMLINK'
     を定義し，それ以外の場合は，`AC_LIBOBJ'を`lstat'で置換するよう
     要求します．

 - マクロ: AC_FUNC_MALLOC
     `malloc'関数がGNU Cライブラリの`malloc'と互換性があ
     る場合，(すなわち`malloc (0)'が有効なポインタを返す)場合，
     `HAVE_MALLOC'を1に定義します．それ以外では，`HAVE_MALLOC'を0
     に定義し，`AC_LIBOBJ'で`malloc'を置換し，ネイティブの
     `malloc'が中心的なプロジェクトで使用されないように`malloc'を
     `rpl_malloc'で定義するかどうかを尋ねます．

     通常，ファイル`malloc.c'の置換は以下のようになります(`#undef
     malloc'に注意してください)．


     #if HAVE_CONFIG_H
     # include <config.h>
     #endif
     #undef malloc
     
     #include <sys/types.h>
     
     void *malloc ();
     
     /* Allocate an N-byte block of memory from the heap.
        If N is zero, allocate a 1-byte block.  */
     
     void *
     rpl_malloc (size_t n)
     {
       if (n == 0)
         n = 1;
       return malloc (n);
     }

 - マクロ: AC_FUNC_MEMCMP
     `memcmp'関数が利用不可能，または(SunOS 4.1.3のように)8ビットデータ
     で動作しない，または(NeXT x86
     OpenStepのように)16バイトかそれ以上で少な
     くとも一つのバッファが4バイト境界で始まらないものの比較時に失敗する場合，
     `AC_LIBOBJ'で`memcmp'を置換することを要求します．

 - マクロ: AC_FUNC_MBRTOWC
     関数`mbrtowc'と型`mbstate_t'が正しく宣言されている場合，
     `HAVE_MBRTOWC'を1に設定します．

 - マクロ: AC_FUNC_MKTIME
     `mktime'関数が利用不可能，または正しく動作しない場合，
     `AC_LIBOBJ'で`mktime'を置換することを要求します．このテストの
     目的に対して，`mktime'はPOSIXに準拠すべきで，
     `localtime'の反対になっているべきです．

 - マクロ: AC_FUNC_MMAP
     `mmap'関数が存在して正しく動作する場合，`HAVE_MMAP'を定義しま
     す．すでにマップされたメモリの，プライベートな固定したマッピングのみ調査
     します．

 - マクロ: AC_FUNC_OBSTACK
     obstackが見つかった場合，`HAVE_OBSTACK'を定義し，そうでない場合は
     `AC_LIBOBJ'で`obstack'を置換することを要求します．

 - マクロ: AC_FUNC_REALLOC
     `realloc'関数がGNU Cライブラリの`realloc'と互換性が
     ある場合，(すなわち`realloc (0, 0)'が有効なポインタを返す)場合，
     `HAVE_REALLOC'を1に定義します．それ以外では，`HAVE_REALLOC' を
     0に定義し，`AC_LIBOBJ'で`realloc'を置換し，ネイティブの
     `realloc'が中心的なプロジェクトで使用されないように`realloc'
     を`rpl_realloc'で定義するかどうかを尋ねます．詳細は
     `AC_FUNC_MALLOC'を参照してください．

 - マクロ: AC_FUNC_SELECT_ARGTYPES
     `select'関数の引数それぞれに渡される正しい型を決定し，それらの型を
     `SELECT_TYPE_ARG1'，`SELECT_TYPE_ARG234'，そして
     `SELECT_TYPE_ARG5'にそれぞれ定義します．`SELECT_TYPE_ARG1'のデ
     フォルトは`int'で，`SELECT_TYPE_ARG234'のデフォルトは`int
     *'で，そして`SELECT_TYPE_ARG5'のデフォルトは`struct timeval *'
     です．

 - マクロ: AC_FUNC_SETPGRP
     `setpgrp'が引数を持たない(POSIXバージョンの)場合，
     `SETPGRP_VOID'を定義します．それ以外では，BSDバージョンで，
     二つのプロセスIDを引数とします．このマクロは`setpgrp'の存在を全く調
     査しません．その状況で動作する必要がある場合，`setpgrp'に対して最初
     に`AC_CHECK_FUNC'を呼び出してください．

 - マクロ: AC_FUNC_STAT
 - マクロ: AC_FUNC_LSTAT
     `stat'や`lstat'に，長さが0のファイル名を引数で与えたときに成功
     するというバグがあるかどうかを決定します．SunOS
     4.1.4とHurd(1998-11-01) の`stat'と`lstat'ではこうなります．

     その場合，`HAVE_STAT_EMPTY_STRING_BUG'(または
     `HAVE_LSTAT_EMPTY_STRING_BUG')を定義し，`AC_LIBOBJ'でそれを置
     換することを要求します．

 - マクロ: AC_FUNC_SETVBUF_REVERSED
     `setvbuf'が他とは異なり，第二引数でバッファの型，第三引数でバッファ
     ポインタをとる場合，`SETVBUF_REVERSED'を定義します．

 - マクロ: AC_FUNC_STRCOLL
     `strcoll'関数が存在して，正しく動作する場合，`HAVE_STRCOLL' を
     定義します．使用すべきではない`strcoll'の間違った定義を持つシステム
     もあるので，`AC_CHECK_FUNCS(strcoll)'より多少ましです．

 - マクロ: AC_FUNC_STRTOD
     `strtod'関数が存在していない，または正しく動作しない場合，
     `AC_LIBOBJ'で`strtod'を置換するよう要求します．この場合，
     `strtod.c'は`pow'を必要とすることもあり得るので，出力変数
     `POW_LIB'を必要な外部ライブラリに設定します．

 - マクロ: AC_FUNC_STRERROR_R
     `strerror_r'が利用可能な場合は`HAVE_STRERROR_R'を定義し，それ
     が宣言されている場合，`HAVE_DECL_STRERROR_R'を定義します．それが
     `char *'のメッセージを返す場合，`STRERROR_R_CHAR_P'を定義しま
     す．それ以外では`int'のエラーナンバーを返します．POSIXで
     は`strerror_r'が`int'を返すように要求していますが，多くのシス
     テムのスレッドセーフな関数のオプション(例えばGNU Cライブラリの
     バージョン2.2.4を含む)は，バッファ引数に等しい必要が無い`char *' の
     値を返します．

 - マクロ: AC_FUNC_STRFTIME
     `intl'ライブラリ内で，SCO UNIXに対する`strftime'を調査し
     ます．`strftime'が利用可能な場合，`HAVE_STRFTIME'を定義します．

 - マクロ: AC_FUNC_STRNLEN
     `strnlen'が利用不可能な場合や(AIX 4.3のように)バグが多い
     場合，`AC_LIBOBJ'で置換することを要求します．

 - マクロ: AC_FUNC_UTIME_NULL
     `utime(FILE, NULL)'がFILEのタイムスタンプを現在のものに
     設定する場合，`HAVE_UTIME_NULL'を定義します．

 - マクロ: AC_FUNC_VPRINTF
     `vprintf'が見つかった場合，`HAVE_VPRINTF'を定義します．それ以
     外で，`_doprnt'が見つかった場合，`HAVE_DOPRNT'を定義します．
     (`vprintf'が利用可能な場合，`vfprintf'と`vsprintf'も利用
     可能だと仮定できるでしょう．)

 - マクロ: AC_REPLACE_FNMATCH
     `fnmatch'関数がPOSIX準拠でない場合(`AC_FUNC_FNMATCH'
     を参照してください)，それを`AC_LIBOBJ'で置換するかどうかを尋ねます．

     `AC_LIBOBJ'の置換用ディレクトリのファイル`fnmatch.c'，
     `fnmatch_loop.c'，そして`fnmatch_.h'が，GNU
     `fnmatch'のソースコードをのコピーを含んでいると想定されます．必要な
     場合，このソースコードは`AC_LIBOBJ'での置換物としてコンパイルされ，
     システムの`<fnmatch.h>'でインクルードできるように，
     `fnmatch_.h'が`fnmatch.h'にリンクされます．


File: autoconf-ja.info,  Node: Generic Functions,  Prev: Particular Functions,  Up: Library Functions

一般の関数の調査
----------------

これらのマクロは，"特定の"テストマクロによってカバーていない関数を見つ
けるために使用されます．関数が，デフォルトのCライブラリ以外のライブラリ
にある場合，最初にそれらのライブラリに対して`AC_CHECK_LIB'を呼び出
してください．存在の確認だけでなく動作も調査したい場合，独自のテストを書
く必要があります(*note Writing Tests::)．

 - マクロ: AC_CHECK_FUNC (FUNCTION, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     Cの関数FUNCTIONが利用可能な場合，シェルコマンド
     ACTION-IF-FOUNDを，それ以外ではACTION-IF-NOT-FOUNDを実行しま
     す．関数が利用可能な場合にシンボルを定義したいだけならば，代わりに
     `AC_CHECK_FUNCS'を使用してください．このマクロは， CのほうがC++より
     標準化されているので，`AC_LANG_CPLUSPLUS'が呼び出された場合でも，C
     にリンクされる関数を調査します．(言語の選択の調査ついての詳細は，
     *note Language Choice::．)

 - マクロ: AC_CHECK_FUNCS (FUNCTION..., [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     空白で区切られた引数のリストで与えられているそれぞれのFUNCTIONに対
     し，利用可能な場合は`HAVE_FUNCTION'を(全て大文字で)定義します．
     ACTION-IF-FOUNDが与えられている場合，関数の一つが見つかったとき実
     行する，追加のシェルコードになります．最初に一致したループでブレイクする
     ためには，`break'を与えることで可能になります．
     ACTION-IF-NOT-FOUNDが与えられている場合，それは関数が一つでも見つ
     からないときに実行されます．


Autoconfは，移植性について苦心してきた人々によって，何年もかけて形作られ
てきた哲学に従います．特定のファイルの移植性の問題と，POSIX環
境にいるかのような問題とは別物です．関数によっては，無いものがあったり修
正不可能だったりするものもあり，パッケージではそれらを置き換える準備が必
要になります．

 - マクロ: AC_LIBOBJ (FUNCTION)
     無かったり壊れたりしているFUNCTIONの実装を置換するために，実行形式
     に含める必要がある`FUNCTION.c'を指定します．

     技術的には，それは`FUNCTION.$ac_objext'を，それがまだ無い場合
     は出力変数`LIBOBJS'に追加し，`FUNCTION.c'に対し
     `AC_LIBSOURCE'を呼び出します．`LIBOBJS'は追跡不可能なので，直
     接`LIBOBJS'を変更すべきではありません．

 - マクロ: AC_LIBSOURCE (FILE)
     プロジェクトをコンパイルするために必要になるFILEを指定します．
     `configure.ac'で必要になるファイルを知る必要がある場合，
     `AC_LIBSOURCE'を追跡調査してください．FILEはリテラルにする必
     要があります．

     このマクロは，自動的に`AC_LIBOBJ'から呼び出されますが，シェル変数に
     `AC_LIBOBJ'を渡す場合，明示的に指定する必要があります．この場合，シェ
     ル変数は静的な追跡調査ができないので，`AC_LIBOBJ'を生成するために必
     要になりそうなあらゆるシェル変数を，`AC_LIBSOURCE'に渡す必要があり
     ます．例えば，`"foo"'または`"bar"'を保持している
     `AC_LIBOBJ'に変数`$foo_or_bar'を渡したい場合は，以下のようにす
     べきでしょう．

          AC_LIBSOURCE(foo.c)
          AC_LIBSOURCE(bar.c)
          AC_LIBOBJ($foo_or_bar)

     しかし，これを避ける一般的な方法もあり，それには単純にリテラルの引数で
     `AC_LIBOBJ'を呼び出すことを推奨します．

     このマクロは，時代遅れの`AC_LIBOBJ_DECL'を若干異なる意味で置換する
     ことに注意してください．古いマクロは，ファイル名ではなく関数名，例えば
     `foo'を引数としてとります．

 - マクロ: AC_LIBSOURCES (FILES)
     `AC_LIBSOURCE'に似ていますが，カンマで分けられているM4リストに，一
     つ以上のFILESを受け入れます．このため，上記の例は以下のように書き
     換えられるでしょう．

          AC_LIBSOURCES([foo.c, bar.c])
          AC_LIBOBJ($foo_or_bar)

 - マクロ: AC_CONFIG_LIBOBJ_DIR (DIRECTORY)
     `AC_LIBOBJ'で置換するファイルがDIRECTORYで見つかるように，ソー
     スツリーのトップレベルから始まる相対パスを指定します．置換ディレクトリの
     デフォルトはトップレベルディレクトリの`.'で，最も一般的な値は
     `lib'で，`AC_CONFIG_LIBOBJ_DIR(lib)'で対応します．

     `configure'は以下の理由で，置換ディレクトリを知る必要がないかも
     しれません．(i)置換ファイルを使用する調査もあります．(ii)置換ヘッダのリ
     ンクを導入することで，壊れたシステムヘッダをバイパスするマクロもあります．
     等々．


   `AC_LIBOBJ'が無い場合，単に関数の存在を調査し，置換するかどうか尋ね
るだけのことは一般的です．以下のマクロは，便利で手短なものです．

 - マクロ: AC_REPLACE_FUNCS (FUNCTION...)
     `AC_CHECK_FUNCS'に似ていますが，ACTION-IF-NOT-FOUND として
     `AC_LIBOBJ(FUNCTION)'を使用します．`#if
     !HAVE_FUNCTION'にプロトタイプを含めることで，置換する関数を宣言す
     ることが可能です．システムに関数が存在する場合，おそらくインクルードして
     いるヘッダファイルで宣言されているので，宣言が衝突しないように，それを再
     定義すべきではありません．


File: autoconf-ja.info,  Node: Header Files,  Next: Declarations,  Prev: Library Functions,  Up: Existing Tests

ヘッダファイル
==============

以下のマクロは，ある特定のCヘッダファイルの存在を調査します．必要として
いるヘッダファイルを調査するために特に定義されたマクロがなく，その特別な
特性を調査する必要がない場合，一般的なヘッダファイルチェックマクロの一つ
を使用することが可能です．

* Menu:

* Header Portability::          Collected knowledge on common headers
* Particular Headers::          Special handling to find certain headers
* Generic Headers::             How to find other headers


File: autoconf-ja.info,  Node: Header Portability,  Next: Particular Headers,  Up: Header Files

ヘッダの移植性
--------------

このセクションでは，一般的なヘッダとそれらの問題に関する知識を正しくして
みたいと思います．定義上，以下のリストは常なる追加を必要とします．可能な
限り完全に保つ手助けをお願いします．

`inttypes.h'対`stdint.h'
     Paul Eggertのメモ：ISO C 1999では，`inttypes.h'は`stdint.h' を
     インクルードするので，標準的な環境では`stdint.h'を個別にインクルー
     ドする必要な無いことになっています．多くの実装では，`inttypes.h'は
     ありますが`stdint.h'はありませんし(例えば，Solaris 7)，
     `stdint.h'があって`inttypes.h'が無いと言う実装は知りません．ま
     た，`stdint.h'をインクルードしているフリーソフトウェアも知りません．
     `stdint.h'は，委員会で作成されたようです．

`linux/irda.h'
     それは，`linux/types.h'と`sys/socket.h'を要求します．

`linux/random.h'
     それは，`linux/types.h'を要求します．

`net/if.h'
     Darwin上では，このファイルは`sys/socket.h'がそれ以前にインクルード
     されていることを要求します．以下のように実行すべきです．

          AC_CHECK_HEADERS([sys/socket.h])
          AC_CHECK_HEADERS([net/if.h], [], [],
          [#include <stdio.h>
          #if STDC_HEADERS
          # include <stdlib.h>
          # include <stddef.h>
          #else
          # if HAVE_STDLIB_H
          #  include <stdlib.h>
          # endif
          #endif
          #if HAVE_SYS_SOCKET_H
          # include <sys/socket.h>
          #endif
          ])

`netinet/if_ether.h'
     Darwin上では，このファイルは`stdio.h'と`sys/socket.h'がそれ以
     前にインクルードされていることを要求します．以下のように実行すべきです．

          AC_CHECK_HEADERS([sys/socket.h])
          AC_CHECK_HEADERS([netinet/if_ether.h], [], [],
          [#include <stdio.h>
          #if STDC_HEADERS
          # include <stdlib.h>
          # include <stddef.h>
          #else
          # if HAVE_STDLIB_H
          #  include <stdlib.h>
          # endif
          #endif
          #if HAVE_SYS_SOCKET_H
          # include <sys/socket.h>
          #endif
          ])

`stdint.h'
     上記の`inttypes.h'対`stdint.h'を参照して下さい．

`stdlib.h'
     多くのシステム上で(例えばDarwin)，`stdio.h'が必須になります．

`sys/mount.h'
     ia32のFreeBSD
     4.8と，gccのバージョン2.95.4を使用しているシステムでは，
     `sys/params.h'が必須になります．

`sys/socket.h'
     Darwin上では，`stdlib.h'が必須になります．

`sys/ucred.h'
     HP Tru64 5.1上では，`sys/types.h'が必須になります．

`X11/extensions/scrnsaver.h'
     XFree86を使用している場合は，このヘッダは`X11/Xlib.h'を要求し，おそ
     らくそれを探すことを考えなくても良いでしょう．

          AC_CHECK_HEADERS([X11/extensions/scrnsaver.h], [], [],
          [[#include <X11/Xlib.h>
          ]])


File: autoconf-ja.info,  Node: Particular Headers,  Next: Generic Headers,  Prev: Header Portability,  Up: Header Files

特定のヘッダの調査
------------------

   これらのマクロは，特定のシステムヘッダファイルを調査します --
それらが
存在しているか，そして場合によっては，特定のシンボルを宣言しているかを調
査します．

 - マクロ: AC_HEADER_DIRENT
     以下のヘッダファイルを調査します．最初に見つかった`DIR'を定義してい
     るものに対して，リストアップされているCプリプロセッサマクロを定義します．

     `dirent.h'     `HAVE_DIRENT_H'
     `sys/ndir.h'   `HAVE_SYS_NDIR_H'
     `sys/dir.h'    `HAVE_SYS_DIR_H'
     `ndir.h'       `HAVE_NDIR_H'

     ソースコード内のディレクトリライブラリの宣言は，以下のようにすべきでしょ
     う．

          #if HAVE_DIRENT_H
          # include <dirent.h>
          # define NAMLEN(dirent) strlen((dirent)->d_name)
          #else
          # define dirent direct
          # define NAMLEN(dirent) (dirent)->d_namlen
          # if HAVE_SYS_NDIR_H
          #  include <sys/ndir.h>
          # endif
          # if HAVE_SYS_DIR_H
          #  include <sys/dir.h>
          # endif
          # if HAVE_NDIR_H
          #  include <ndir.h>
          # endif
          #endif

     上記の宣言を使用している場合，プログラムは型を`struct direct'ではな
     く`struct dirent'として変数を宣言し，`struct dirent'へのポイン
     タを渡すことによって，`NAMLEN'マクロまでのディレクトリエントリ名の
     長さにアクセスします．

     このマクロは，SCO Xenix `dir'と`x'ライブラリも調査します．

 - マクロ: AC_HEADER_MAJOR
     `sys/types.h'が`major'，`minor'，そして`makedev'を定
     義していないが，`sys/mkdev.h'が定義している場合，
     `MAJOR_IN_MKDEV'を定義します．それ以外の場合で，
     `sys/sysmacros.h'が定義している場合は，`MAJOR_IN_SYSMACROS' を
     定義します．

 - マクロ: AC_HEADER_STAT
     `sys/stat.h'で定義されている`S_ISDIR'，`S_ISREG'等のマク
     ロが正確に動作しない(間違った正の値を返す)場合，
     `STAT_MACROS_BROKEN' を定義します．Tektronix UTekV，Amdahl UTS，そ
     してMotorola System V/88の場合がそうです．

 - マクロ: AC_HEADER_STDBOOL
     `stdbool.h'が存在し，それがC99に準拠している場合，
     `HAVE_STDBOOL_H'を1に定義します．型`_Bool'が定義されている場合，
     `HAVE__BOOL'を1に定義します．C99の要求を満たすため，`system.h'
     には以下のコードを含めるべきです．


     #if HAVE_STDBOOL_H
     # include <stdbool.h>
     #else
     # if ! HAVE__BOOL
     #  ifdef __cplusplus
     typedef bool _Bool;
     #  else
     typedef unsigned char _Bool;
     #  endif
     # endif
     # define bool _Bool
     # define false 0
     # define true 1
     # define __bool_true_false_are_defined 1
     #endif

 - マクロ: AC_HEADER_STDC
     システムにANSI Cヘッダファイルが存在する場合，
     `STDC_HEADERS'を定義します．特にこのマクロは，`stdlib.h'，
     `stdarg.h'，`string.h'，そして`float.h'を調査し，システム
     にそれらが存在している場合は，おそらくANSI Cヘッダーファイルの
     残りも存在します．同様に，このマクロは`string.h'が`memchr'を宣
     言(他の`mem'関数もおそらく存在)しているかどうか，`stdlib.h'が
     `free'を宣言(`malloc'や他の関連する関数もおそらく存在)している
     かどうか，そして，`ctype.h'マクロが，ANSI Cが要求するハイ
     ビットセット文字でも動作するかどうかを調査します．

     GCCがあるシステムの多くはANSI Cヘッダファイルが存在していない
     ので，システムにANSI対応のヘッダファイル(そして，おそらくC ラ
     イブラリ関数) が存在していることを決定するために，`__STDC__'の代わ
     りに`STDC_HEADERS'を使用してください．

     ANSI Cヘッダが無いシステムには多くの変種が存在していて，そこで
     は，システムヘッダファイルが宣言しているものを正確に理解するより，使用す
     る関数を宣言する方がより容易でしょう．ANSIとBSDの関
     数が混在しているシステムもあります．ほとんどANSIだが
     `memmove'が無いものもあります．BSD関数が`string.h'や `strings.h'
     でマクロで定義されているものもあります．BSD関 数しか持っていないが
     `string.h'が存在するものもあります．メモリ関数
     が`memory.h'で定義されていて，`string.h'でも定義されているもの
     もあります．等々いろいろなシステムがあります．一つの文字列関数と一つのメ
     モリ関数を調査すれば恐らく十分です．ライブラリにANSIバージョン
     のものが存在する場合，他のものもほとんど存在します．以下を
     `configure.ac'に書き込む場合を考えます．

          AC_HEADER_STDC
          AC_CHECK_FUNCS(strchr memcpy)

     コード内に，以下のような宣言を使用することが可能です．

          #if STDC_HEADERS
          # include <string.h>
          #else
          # if !HAVE_STRCHR
          #  define strchr index
          #  define strrchr rindex
          # endif
          char *strchr (), *strrchr ();
          # if !HAVE_MEMCPY
          #  define memcpy(d, s, n) bcopy ((s), (d), (n))
          #  define memmove(d, s, n) bcopy ((s), (d), (n))
          # endif
          #endif

     BSDとは異なる`memchr'，`memset'，`strtok'，また は
     `strspn'の様な関数を使用する場合，マクロは不十分でしょう．それぞ
     れの関数を実装する必要があります．(システムのCライブラリのものが，手動で
     最適化されているかもしれないので)必要なときだけ実装を組み込む簡単な方法
     として，例えば`memchr'を使用する場合は，それを`memchr.c'に書き
     込み，`AC_REPLACE_FUNCS(memchr)'を使用することです．

 - マクロ: AC_HEADER_SYS_WAIT
     `sys/wait.h'が存在して，POSIXと互換性がある場合，
     `HAVE_SYS_WAIT_H'を定義します．非互換性は，`sys/wait.h'が存在
     しない場合や，ステータスの値を保存するため，`int'の代わりに古い
     BSDの`union wait'使用する場合に生じます．
     `sys/wait.h'がPOSIXと互換性がない場合，それをインクルード
     する代わりに，それらの通常の解釈を用いてPOSIXのマクロを定義し
     てください．例えば以下のようにします．

          #include <sys/types.h>
          #if HAVE_SYS_WAIT_H
          # include <sys/wait.h>
          #endif
          #ifndef WEXITSTATUS
          # define WEXITSTATUS(stat_val) ((unsigned)(stat_val) >> 8)
          #endif
          #ifndef WIFEXITED
          # define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
          #endif

   `unistd.h'がPOSIXシステムに含まれている場合，
`_POSIX_VERSION'が定義されます．`unistd.h'が無い場合，明らかに
POSIXシステムではありません．しかし，`unistd.h'を持つ
POSIXではないシステムもあります．

   システムがPOSIXをサポートしているかどうか調査する方法は以下の
ようにします．

     #if HAVE_UNISTD_H
     # include <sys/types.h>
     # include <unistd.h>
     #endif
     
     #ifdef _POSIX_VERSION
     /* Code for POSIX systems.  */
     #endif

 - マクロ: AC_HEADER_TIME
     プログラムが，`time.h'と`sys/time.h'の両方をインクルードする可
     能性がある場合，`TIME_WITH_SYS_TIME'を定義します．古いシステムでは，
     `sys/time.h'が`time.h'をインクルードするものもありますが，
     `time.h'は複数回のインクルードに対して保護されていないので，プログ
     ラムで明示的に両方のファイルをインクルードすべきではありません．このマク
     ロは，例えば，`struct tm'と同様，`struct timeval'を使用するプ
     ログラムで役に立ちます． `AC_CHECK_HEADERS(sys/time.h)' を使用して
     いることを調査可能にする`HAVE_SYS_TIME_H'と一緒に使用するのが最善の
     方法です．

          #if TIME_WITH_SYS_TIME
          # include <sys/time.h>
          # include <time.h>
          #else
          # if HAVE_SYS_TIME_H
          #  include <sys/time.h>
          # else
          #  include <time.h>
          # endif
          #endif

 - マクロ: AC_HEADER_TIOCGWINSZ
     `TIOCGWINSZ'の使用が`<sys/ioctl.h>'を要求する場合，
     `GWINSZ_IN_SYS_IOCTL'を定義します．それ以外では，`TIOCGWINSZ'
     は`<termios.h>'で見つかるはずです．

     以下のようにして使用します．

          #if HAVE_TERMIOS_H
          # include <termios.h>
          #endif
          
          #if GWINSZ_IN_SYS_IOCTL
          # include <sys/ioctl.h>
          #endif


File: autoconf-ja.info,  Node: Generic Headers,  Prev: Particular Headers,  Up: Header Files

一般的なヘッダの調査
--------------------

これらのマクロは，"特定の"テストマクロでカバーされていない，システムヘッ
ダファイルを見つけるために使用されます．その存在を見つけるだけでなく，ヘッ
ダの内容を調査する必要がある場合，そのために独自のテストを書く必要があり
ます(*note Writing Tests::)．

 - マクロ: AC_CHECK_HEADER (HEADER-FILE, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `default-includes'])
     システムヘッダファイルHEADER-FILEがコンパイル可能な場合，シェルコ
     マンドACTION-IF-FOUNDを，それ以外ではACTION-IF-NOT-FOUND を
     実行します．ヘッダファイルが利用可能な場合で，シンボルを定義したいだけの
     場合は，代わりに，`AC_CHECK_HEADERS'を使用を考えてみてください．

     古いバージョンのAutoconfとの互換性の問題は，以下を読んでください．

 - マクロ: AC_CHECK_HEADERS (HEADER-FILE..., [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `default-includes'])
     空白で区切られた引数のリストで与えられているシステムヘッダファイル
     HEADER-FILEが存在しているものに対し，`HAVE_HEADER-FILE'
     を(全て大文字で)定義します．ACTION-IF-FOUNDが与えられている場合，
     それはヘッダファイルの一つが見つかったときに実行する追加のシェルコードに
     なります．最初に一致したループでブレイクするために`break'を与えるこ
     とが可能です． ACTION-IF-NOT-FOUNDが与えられている場合，ヘッダファ
     イルが一つでも見つからないとき実行されます．

     古いバージョンのAutoconfとの互換性の問題は，以下を読んでください．

以前のバージョンのAutoconfは，ヘッダがプリプロセッサに適合しているかどう
かを，単純に調査していました．古いテストは，代表的な使用に対して不適切で
あるため変更されました．ヘッダは通常コンパイルで使用され，プリプロセスで
は滅多に使用されませんし，古い動作では，コンパイル時にだめになるヘッダを
受け入れることもありました．ヘッダがプリプロセス可能かどうかを調査する必
要がある場合，`AC_PREPROC_IFELSE'を使用することが可能です (*note
Running the Preprocessor::)．

   このテストの耐性を高める手法は，HEADER-FILEの前にインクルードする
必要があるヘッダが，INCLUDESにあることも要求します(*note Default
Includes::)．`foo.h'が存在する場合，その前でインクルードされる必要が
ある`bar.h'を探す場合，以下の手法を提案します．


AC_CHECK_HEADERS([foo.h])
AC_CHECK_HEADERS([bar.h], [], [],
[#if HAVE_FOO_H
# include <foo.h>
# endif
])


File: autoconf-ja.info,  Node: Declarations,  Next: Structures,  Prev: Header Files,  Up: Existing Tests

宣言
====

以下のマクロは，変数と関数の宣言を調査します．必要なシンボルを調査するた
めに特別なマクロが定義されていない場合，一般的なマクロ(*note Generic
Declarations::を使用することが可能で，より複雑なテストに対しては，
`AC_COMPILE_IFELSE'を使用してもかまいません(*note Running the
Compiler::)．

* Menu:

* Particular Declarations::     Macros to check for certain declarations
* Generic Declarations::        How to find other declarations


File: autoconf-ja.info,  Node: Particular Declarations,  Next: Generic Declarations,  Up: Declarations

特定の宣言の調査
----------------

   宣言を調査する特別なマクロはありません．


File: autoconf-ja.info,  Node: Generic Declarations,  Prev: Particular Declarations,  Up: Declarations

一般的な宣言の調査
------------------

これらのマクロは，"特定の"テストマクロでカバーされていない宣言を調査す
るために使用します．

 - マクロ: AC_CHECK_DECL (SYMBOL, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `default-includes'])
     SYMBOL(関数や変数)がINCLUDESで定義されていなくて宣言が必要な
     場合，シェルコマンドACTION-IF-NOT-FOUNDを実行し，それ以外では
     ACTION-IF-FOUNDを実行します．INCLUDESが宣言されていない場合，
     デフォルトのインクルードが使用されます(*note Default Includes::)．

     このマクロは，必要でないときに余分な宣言を導入することを避けた方が安全な
     ので，SYMBOLがr-valueとして有効かどうかを実際にテストし，実際に宣
     言されているかどうかはテストしません．

 - マクロ: AC_CHECK_DECLS (SYMBOLS, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `default-includes'])
     それぞれの(_カンマ_で分けられているリスト)SYMBOLSに対し，
     SYMBOLが宣言されれいる場合は`HAVE_DECL_SYMBOL'を(全て大
     文字で)`1'に定義し，それ以外では`0'に定義します．
     ACTION-IF-NOT-FOUNDが与えられている場合，関数宣言の一つが必要なと
     き実行するシェルコードを追加し，それ以外ではACTION-IF-FOUNDが実行
     されます．

     このマクロは，最初の引数としてM4のリストを使用します．
          AC_CHECK_DECLS(strdup)
          AC_CHECK_DECLS([strlen])
          AC_CHECK_DECLS([malloc, realloc, calloc, free])

     他の`AC_CHECK_*S'マクロと異なり，SYMBOLが宣言されていないとき，
     `HAVE_DECL_SYMBOL'を宣言しないままにする代わりに，
     `HAVE_DECL_SYMBOL'は`0'で定義されます．調査の実行を
     _確かめている_ときは，`HAVE_DECL_SYMBOL'をAutoconfの他の
     結果と同じように，以下のように使用してください．

          #if !HAVE_DECL_SYMBOL
          extern char *symbol;
          #endif

     しかし，テストが実行されていない場合，システムのものと衝突するような宣言
     を使用するより，シンボルを宣言_しない_方が安全なので，以下のように
     使用すべきでしょう．

          #if defined HAVE_DECL_MALLOC && !HAVE_DECL_MALLOC
          void *malloc (size_t *s);
          #endif

     究極の状態でのみ二番目のカテゴリに分類されます．ファイルがコンフィグレー
     ションされずに使用されている場合か，コンフィグレーション時に使用されてい
     る場合のいずれかです．ほとんどの場合はこれまでの方法で十分です．


File: autoconf-ja.info,  Node: Structures,  Next: Types,  Prev: Declarations,  Up: Existing Tests

構造体
======

以下のマクロは，特定のCの構造体の存在を調査します．必要なメンバーの調査
するために定義されている特定のマクロが無い場合，一般的な構造体メンバーの
マクロを使用したり(*note Generic Structures::)，より複雑なテストに対して
は，`AC_COMPILE_IFELSE'を使用してもかまいません(*note Running the
Compiler::)．

* Menu:

* Particular Structures::       Macros to check for certain structure members
* Generic Structures::          How to find other structure members


File: autoconf-ja.info,  Node: Particular Structures,  Next: Generic Structures,  Up: Structures

特定の構造体の調査
------------------

   以下のマクロは，特定の構造体と構造体のメンバーを調査します．

 - マクロ: AC_STRUCT_ST_BLKSIZE
     `struct stat'が`st_blksize'メンバーを含んでいる場合，
     `HAVE_STRUCT_STAT_ST_BLKSIZE'を定義します．これまでの名前
     `HAVE_ST_BLKSIZE'は，将来サポートを中止するので避けてください．この
     マクロは時代遅れで，以下のもので置換すべきです．

          AC_CHECK_MEMBERS([struct stat.st_blksize])

 - マクロ: AC_STRUCT_ST_BLOCKS
     `struct stat'が`st_blocks'メンバーを含んでいる場合， `HAVE_STRUCT
     STAT_ST_BLOCKS'を定義します．それ以外では，出力変数
     `AC_LIBOBJS'で`fileblocks'の置換を要求します．これまでの名前
     `HAVE_ST_BLOCKS'は，将来サポートを中止するので避けてください．

 - マクロ: AC_STRUCT_ST_RDEV
     `struct stat'が`st_rdev'メンバーを含んでいる場合，
     `HAVE_STRUCT_STAT_ST_RDEV'を定義します．これまでの名前
     `HAVE_ST_RDEV'は，将来サポートを中止するので避けてください．実際に
     は新しいマクロでさえ時代遅れで，以下のもので置換すべきです．
          AC_CHECK_MEMBERS([struct stat.st_rdev])

 - マクロ: AC_STRUCT_TM
     `time.h'が`struct tm'を定義しない場合，`TM_IN_SYS_TIME'
     を定義し，それは，`sys/time.h'をインクルードすることで`struct
     tm'を定義した方が良いことを意味します．

 - マクロ: AC_STRUCT_TIMEZONE
     現在のタイムゾーンの取得法を判別します．`struct tm'に`tm_zone'
     メンバーが存在する場合，`HAVE_STRUCT_TM_TM_ZONE' (と時代遅れの
     `HAVE_TM_ZONE')を定義します．それ以外では，外部配列の`tzname'
     が見つかる場合，`HAVE_TZNAME'を定義します．


File: autoconf-ja.info,  Node: Generic Structures,  Prev: Particular Structures,  Up: Structures

一般的な構造体の調査
--------------------

これらのマクロは，"特定の"テストマクロでカバーされていない構造体のメン
バーを検索するために使用します．

 - マクロ: AC_CHECK_MEMBER (AGGREGATE.MEMBER, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `default-includes'])
     MEMBERが集合体AGGREGATEのメンバーかどうかを調査します．
     INCLUDESが指定されていない場合，デフォルトのインクルードが使用され
     ます(*note Default Includes::)．

          AC_CHECK_MEMBER(struct passwd.pw_gecos,,
                          [AC_MSG_ERROR([We need `passwd.pw_gecos'!])],
                          [#include <pwd.h>])

     このマクロはサブメンバーに対して使用可能です．

          AC_CHECK_MEMBER(struct top.middle.bot)

 - マクロ: AC_CHECK_MEMBERS (MEMBERS, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `default-includes'])
     直前のマクロで使用されているMEMBERSのそれぞれの
     `AGGREGATE.MEMBER'の存在を調査します．MEMBERが
     AGGREGATEに属しているとき， `HAVE_AGGREGATE_MEMBER'
     を(全て大文字で，スペースとドッ
     トをアンダースコアで置換しながら)定義します．ACTION-IF-FOUNDが与え
     られている場合，メンバーが見つかるたびにそれを実行します．
     ACTION-IF-NOT-FOUNDが与えられている場合，メンバーが見つからないた
     びに実行されます．

     このマクロはM4のリストを使用します．
          AC_CHECK_MEMBERS([struct stat.st_rdev, struct stat.st_blksize])


File: autoconf-ja.info,  Node: Types,  Next: Compilers and Preprocessors,  Prev: Structures,  Up: Existing Tests

型
==

以下のマクロは，組み込みまたはtypedefになっている，Cの型を調査します．必
要な型を調査するための特別に定義されたマクロがなく，その特別な特性を調査
する必要がない場合，一般的な型調査マクロを使用することが可能です．

* Menu:

* Particular Types::            Special handling to find certain types
* Generic Types::               How to find other types


File: autoconf-ja.info,  Node: Particular Types,  Next: Generic Types,  Up: Types

特定の型の調査
--------------

   これらのマクロは，`sys/types.h'，`stdlib.h'，そして存在する場
合はその他の，特定のCの型を調査します．

 - マクロ: AC_TYPE_GETGROUPS
     `gid_t'と`int'のどちらかを，`getgroups'への配列引数の基本
     の型にするため，`GETGROUPS_T'を定義します．

 - マクロ: AC_TYPE_MBSTATE_T
     `<wchar.h>'で`mbstate_t'型が宣言されている場合，
     `HAVE_MBSTATE_T'を定義します．また，`<wchar.h>'で宣言されてい
     ない場合，型として`mbstate_t'を定義します．

 - マクロ: AC_TYPE_MODE_T
     `AC_CHECK_TYPE(mode_t, int)'と同じです．

 - マクロ: AC_TYPE_OFF_T
     `AC_CHECK_TYPE(off_t, long)'と同じです．

 - マクロ: AC_TYPE_PID_T
     `AC_CHECK_TYPE(pid_t, int)'と同じです．

 - マクロ: AC_TYPE_SIGNAL
     `signal.h'が，`signal'を`void'返す関数へのポインタを返す
     ものと宣言されている場合，`RETSIGTYPE'を`void'と定義します．そ
     れ以外では`int'と定義します．

     シグナルハンドラが返す型を`RETSIGTYPE'と定義してください．

          RETSIGTYPE
          hup_handler ()
          {
          ...
          }

 - マクロ: AC_TYPE_SIZE_T
     `AC_CHECK_TYPE(size_t, unsigned)'と同じです．

 - マクロ: AC_TYPE_UID_T
     `uid_t'が定義されていない場合，`uid_t'を`int'に，そして
     `gid_t'を`int'に定義します．


File: autoconf-ja.info,  Node: Generic Types,  Prev: Particular Types,  Up: Types

一般的な型の調査
----------------

これらのマクロは，"特定の"テストマクロがカバーしない型を調査するために
使用されます．

 - マクロ: AC_CHECK_TYPE (TYPE, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `default-includes'])
     TYPEが定義されているかどうかを調査します．コンパイラ組み込みの型や，
     INCLUDES(*note Default
     Includes::)で定義されている可能性があります．

 - マクロ: AC_CHECK_TYPES (TYPES, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `default-includes'])
     定義されているTYPESのそれぞれのTYPEに対し，
     `HAVE_TYPE'を(全て大文字で)定義します．INCLUDESが定義さ
     れていない場合，デフォルトのインクルードが使用されます(*note
     Default
     Includes::)．ACTION-IF-FOUNDが与えられている場合，型の一つが見つかっ
     たときに実行する追加のシェルコードとなります．ACTION-IF-NOT-FOUND
     が与えられている場合，型の一つでも見つからないときに実行されます．

     このマクロはM4のリストを使用します．
          AC_CHECK_TYPES(ptrdiff_t)
          AC_CHECK_TYPES([unsigned long long, uintmax_t])


   2.13までのAutoconfは，設計に問題がある他のバージョンの
`AC_CHECK_TYPE'を提供するために使用されていました．単純な経験則とし
て，全体的ではないが全く安全なので，下位互換性のため，実装されました．疑
うのなら，以前の`AC_CHECK_TYPE'のドキュメントを読んでください． *Note
Obsolete Macros::を参照してください．


File: autoconf-ja.info,  Node: Compilers and Preprocessors,  Next: System Services,  Prev: Types,  Up: Existing Tests

コンパイラとプリプロセッサ
==========================

   コンパイラ(`AC_PROG_CC'，`AC_PROG_CXX'，`AC_PROG_F77') に
対する全てのテストは，コンパイラの出力のベースとなる出力変数
`EXEEXT'を定義し，通常，Unixでは空の文字列でWin32やOS/2では
`.exe'に定義されます．

   それらは，`.c'ファイルが除外された後で，コンパイラ出力のベースとな
る出力変数`OBJEXT'も定義し，通常，Unixでは`o'でWin32では
`obj'に定義されますます．

使用しているコンパイラが実行形式を生成しない場合，テストは失敗します．
実行形式が実行不可能な場合で，クロスコンパイルが利用できない場合も失敗
します．クロスコンパイルのサポートの詳細は，*Note Manual
Configuration::.

* Menu:

* Specific Compiler Characteristics::  Some portability issues
* Generic Compiler Characteristics::  Language independent tests and features
* C Compiler::                  Checking its characteristics
* C++ Compiler::                Likewise
* Fortran Compiler::            Likewise


File: autoconf-ja.info,  Node: Specific Compiler Characteristics,  Next: Generic Compiler Characteristics,  Up: Compilers and Preprocessors

特定のコンパイラの特徴
----------------------

   コンパイラによっては異なる動作を示すものもあります．

スタティック/ダイナミックな式
     Autoconfは，Cコンパイラからの情報の1ビットを抽出するトリックを信頼してい
     ます．負の配列の大きさを使用します．例えば，以下のCソースの引用で，
     `int' が4バイト長かどうかをテストする方法を説明します．

          int
          main (void)
          {
            static int test_array [sizeof (int) == 4 ? 1 : -1];
            test_array [0] = 0
            return 0;
          }

     知っている限りでは，このトリックをサポートしないコンパイラは一つです．そ
     れはHP-UX
     11.00のHPのCコンパイラです("バンドル"されているものだけでは
     なく，実際のものもそうです)．

          $ cc -c -Ae +O2 +Onolimit conftest.c
          cc: "conftest.c": error 1879: Variable-length arrays cannot \
              have static storage.

     Autoconfは，比較する前に`sizeof (int)'を`long'にキャストするこ
     とで，この問題を解決します．


File: autoconf-ja.info,  Node: Generic Compiler Characteristics,  Next: C Compiler,  Prev: Specific Compiler Characteristics,  Up: Compilers and Preprocessors

一般的なコンパイラの特徴
------------------------

 - マクロ: AC_CHECK_SIZEOF (TYPE, [UNUSED], [INCLUDES =
          `default-includes'])
     `SIZEOF_TYPE'(*note Standard Symbols::)をTYPEのバイトサ
     イズに定義します．`type'が分からない場合，そのサイズは0になります．
     INCLUDESが指定されていない場合，デフォルトのインクルードが使用され
     ます(*note Default Includes::)．INCLUDEを与える場合，このマクロを
     実行するために必要な`stdio.h'を必ずインクルードしてください．

     このマクロは，現在クロスコンパイル時にも動作します．UNUSED引数は，
     クロスコンパイル時に使用します．

     例えば，以下のように呼び出します．

          AC_CHECK_SIZEOF(int *)

     これは，DEC Alpha AXPシステムでは`SIZEOF_INT_P'を8に定義します．

 - マクロ: AC_LANG_WERROR
     通常，Autoconfはコンパイラ，リンカ，そしてプリプロセッサが生成する警告を
     無視します．このマクロが使用されている場合，現在の言語に対し，警告は重大
     なエラーとして処理されます．このマクロは，コンフィグレーションの結果が，
     予期せぬ警告が生じる場所で使用されるとき役に立ちます．例えば，プログラム
     の一部を`-Werror'オプションでビルドしている場合があてはまります．プ
     ログラム全体を`-Werror'を使用してビルドしている場合，コンパイラフラ
     グに単純に(`CFLAGS'などで)`-Werror'を追加したほうがより単純で
     しょう．


File: autoconf-ja.info,  Node: C Compiler,  Next: C++ Compiler,  Prev: Generic Compiler Characteristics,  Up: Compilers and Preprocessors

Cコンパイラの特徴
-----------------

以下のマクロは，Cコンパイラを探し使用する方法を提供します．避けたほうが
良い構成物もいくつかありますが，それらは容易に回避可能なので，調査に使用
しているなら無くしてしまうこともないでしょう．

単一のバックスラッシュを含んでいる行を使用しないでください
     それらは，HP-UX
     Cコンパイラにあるバグにはめられます(HP-UXの10.20，11.00，
     そして11iで調査しました)．以下のソースをコンパイラで実行します．

          #ifdef __STDC__
          /\
          * A comment with backslash-newlines in it. %{ %} *\
          \
          /
          char str[] = "\\
          " A string with backslash-newlines in it %{ %} \\
          "";
          char apostrophe = '\\
          \
          '\
          ';
          #endif

     以下のようになります．

          error-->cpp: "foo.c", line 13: error 4048: Non-terminating comment at end of file.
          error-->cpp: "foo.c", line 13: error 4033: Missing #endif at end of file.

     単一のバックスラッシュを用いた行を削除することで，問題を解決できます．

出力が問題になる場合，一度に複数のファイルをコンパイルしないでください
     HPのようにコンパイラには，ファイルが複数の_とき_，コンパイルしてい
     るファイル名を報告するものもあります．例えば以下のものです．

          $ cc a.c b.c
          a.c:
          b.c:

     失敗を検出するために，コンパイラの出力を観察する場合，これは問題になるは
     ずです．`cc -c a.c -o a.o; cc -c b.c -o b.o; cc a.o b.o -o c'で呼び
     出すことで問題を解決します．

正しい`#line'のサポートに依存しないで下さい
     Solaris 8上で，`c89'(Sun WorkShop 6 update 2 C 5.3 Patch 111679-08
     2002/05/09))は行番号全体で32767より大きな`#line'指示語を
     拒絶します．さらにPOSIXでは，これは有効になっていません．これは，
     Autoconfが`#line'指示語の生成を停止した理由です．

 - マクロ: AC_PROG_CC ([COMPILER-SEARCH-LIST])
     使用するCコンパイラを決定します．`CC'が環境変数で設定されていない場
     合，`gcc'と`cc'を調査し，その後で他のCコンパイラを調査します．
     出力変数`CC'を，見つかったコンパイラの名前に設定します．

     しかし，このマクロはオプションで最初の引数を用いて呼び出すことも可能で，
     それが指定されている場合，それをスペースで区切られている検索するCコンパ
     イラのリストにする必要があります．これは，別のCコンパイラの検索リストを
     指定する機会をユーザに与えます．例えば，デフォルトの順序が好きではない場
     合，以下のような`AC_PROG_CC'を呼び出すことが可能です．

          AC_PROG_CC(cl egcs gcc cc)

     CコンパイラがデフォルトでANSI Cモードでない場合，そうするため
     のオプションを出力変数`CC'に追加します．このマクロは，様々なシステ
     ムでANSI Cを選択するように，様々なオプションを試します．関数の
     プロトタイプを正しく処理する場合，コンパイラがANSI Cモードだと
     考えます．

     このマクロを呼び出した後，CコンパイラがANSI Cを受け入れるよう
     に設定されているかどうかを調査することが可能です．そうでない場合，シェル
     変数`ac_cv_prog_cc_stdc'は`no'に設定されます．ソースコードを ANSI
     Cで書いている場合，Automake附属のプログラム `ansi2knr'
     を使用して，非ANSIfiedされたコピーを作成するこ
     とが可能です．`AC_C_PROTOTYPES'以下も参照してください．

     GNU Cコンパイラを使用する場合，シェル変数の`GCC'を
     `yes'に設定します．出力変数`CFLAGS'がいまだ設定されていない場
     合，GNU Cコンパイラに対しては`-g -O2'に設定し(GCCが
     `-g'を受け入れないシステムは`-O2')，それ以外のコンパイラに対し
     ては`-g'に設定します．

 - マクロ: AC_PROG_CC_C_O
     Cコンパイラが`-c'と`-o'オプションを同時に受け入れない場合，
     `NO_MINUS_C_MINUS_O'を定義します．このマクロは，`AC_PROG_CC'
     で見つかったコンパイラと，パスの最初の`cc'がそれと異なっている場合
     はその両方を，実際にテストします．一つでも失敗した場合，テストは失敗しま
     す．このマクロは，GNU Makeがデフォルトのコンパイルルールを選択
     するように作成されました．

 - マクロ: AC_PROG_CPP
     出力変数`CPP'を，Cプリプロセッサを実行するコマンドに設定ます．
     `$CC -E'が動作しない場合，`/lib/cpp'を使用します．拡張子が
     `.c'のファイルで`CPP'を実行することは移植性のためだけです．

     プロセッサによっては，足りないインクルードファイルをエラーステータスで示
     さないものもあります．そのようなプロセッサに対する内部変数は，プリプロセッ
     サからの標準エラーを調査するための他のマクロを設定し，警告が報告された場
     合はテストに失敗したと判断します．それにもかかわらず，ほとんどのプリプロ
     セッサに対して，`AC_PROG_CPP_WERROR'も指定しない限り，警告でインク
     ルードファイルのテストは失敗します．

 - マクロ: AC_PROG_CPP_WERROR
     これは`AC_PROG_CPP'のように動作しますが，プリプロセッサからの警告を，
     プリプロセッサが成功したことを示すステータスで終了した場合でも，エラーが
     あったとして処理します．これは，推奨されない注意のような，強制的な警告を
     生成するヘッダを避けるときに役に立ちます．

以下のマクロは，Cコンパイラやマシンアーキテクチャの特徴を調査します．こ
こでリストアップされない特徴を調査するために，`AC_COMPILE_IFELSE'
(*note Running the Compiler::)や`AC_RUN_IFELSE' (*note Run Time::)
を使用してください．

 - マクロ: AC_C_BACKSLASH_A
     Cコンパイラが`\a'を理解する場合，`HAVE_C_BACKSLASH_A'を1に定義
     します．

 - マクロ: AC_C_BIGENDIAN ([ACTION-IF-TRUE], [ACTION-IF-FALSE],
          [ACTION-IF-UNKNOWN])
     (MotorolaとSPARCのCPUのように)wordが最上位バイトに最初に保存される場合，
     ACTION-IF-TRUEを実行します．(IntelとVAXのCPUのように)wordが最下位
     バイトに最初に保存される場合，ACTION-IF-FALSEを実行します．

     システムヘッダファイルからエンディアンを決定不可能な場合，このマクロはテ
     ストケースを実行します．クロスコンパイル時に，テストケースは実行されませ
     んが，いくつかのマジック変数を検索します．後者の状況でホストシステムのバ
     イト特性の決定に失敗した場合，ACTION-IF-UNKNOWNが実行されます．

     ACTION-IF-TRUEのデフォルトは`WORDS_BIGENDIAN'を定義することで
     す．ACTION-IF-FALSEのデフォルトは何もしないことです．そして最後に，
     ACTION-IF-UNKNOWNのデフォルトは，コンフィグレーションを中断し，イ
     ンストールしている人に，このテストをバイパスさせるために変数を前もって定
     義するよう伝えます．

 - マクロ: AC_C_CONST
     CコンパイラがANSI Cの修飾子`const'を完全にサポートしない 場合，
     `const'を空で定義します．`__STDC__'を定義しないCコンパ
     イラには，`const'をサポートするものもあります．`__STDC__'を定
     義するCコンパイラには，`const'を完全にサポートしないものもあります．
     全てのCコンパイラが`const'をサポートするかのように，プログラムはそ
     れを使用することができます．サポートしないもののために`Makefile'や
     コンフィグレーションヘッダファイルは，それを空で定義します．

     Cコンパイラが無いために，インストールしている人がCコードをコンパイルする
     ためにC++コンパイラを使用することもあります．CとC++は`const'を異な
     る方法で処理するので，これは`const'の問題が生じます．例えば，以下の
     ようにします．

          const int foo;

     Cでは有効ですがC++ではそうではありません．残念ながら，これらの違いを
     `const'を空で定義することで誤魔化すことは不可能です．

     `autoconf'がこの状況を検出した場合，一般的に実際問題としてより良
     い結果になるので，それは`const'のままにしておきます．しかし，C コー
     ドコンパイルするためにC++コンパイラを使用することは推奨されていませんし，
     サポートもしていません．そして，この状況で問題が生じたインストール者は，
     CコードをコンパイルするためにGCCのようなCコンパイラを入手すべきです．

 - マクロ: AC_C_RESTRICT
     Cコンパイラが`restrict'キーワードを認識する場合は何もしません．
     (`__restrict'，`__restrict__'，または`_Restrict')という，
     かわったつづりだけを認識する場合，`restrict'をそれに定義します．そ
     れ以外では，`restrict'を空で定義します．このため，プログラムでは
     `restrict'をすべてのCコンパイラがサポートしているかのように，単純に
     使用してかまいません．そうしない人は，`Makefile'やコンフィグレーショ
     ンヘッダで頑張って定義して下さい．

     C++での`restrict'キーワードサポートは要求されていませんが，いくつか
     のC++コンパイラはそのキーワードを受け入れます．このマクロは，そこでも動
     作します．

 - マクロ: AC_C_VOLATILE
     Cコンパイラがキーワード`volatile'を理解しない場合，`volatile'
     を空で定義します．プログラムでは`volatile'をサポートしているコンパ
     イラのように単純に使用することが可能です．サポートしないものに対しては，
     `Makefile'やコンフィグレーションヘッダで，それを空として定義されま
     す．

     プログラムの正当性が`volatile'の意味に依存している場合，単純に空で
     定義するとある意味ではコードが壊れます．しかし，`volatile'をサポー
     トしていないコンパイラでは，自分で何とかしてください．少なくともプログラ
     ムはコンパイルされますが，多分駄目でしょう．

     一般的に，`volatile'キーワードはANSI Cの機能なので，
     `__STDC__'が定義されているときだけ，`volatile'が利用可能だと期
     待するかもしれません．しかし，Ultrix 4.3のネイティブコンパイラは
     `volatile'をサポートとしていますが，`__STDC__'を定義しません．

 - マクロ: AC_C_INLINE
     Cコンパイラがキーワード`inline'をサポートする場合，何もしません．そ
     れ以外では，受け入れられるものによって，`inline'を`__inline__'
     や`__inline'に定義し，それ以外では`inline' を空で定義します．

 - マクロ: AC_C_CHAR_UNSIGNED
     Cの型`char'がunsignedの場合，Cコンパイラが前もって定義していない限
     り，`__CHAR_UNSIGNED__'を定義します．

 - マクロ: AC_C_LONG_DOUBLE
     Cコンパイラが，`double'の型以上の範囲で動作する`long double'
     の型をサポートしている場合，`HAVE_LONG_DOUBLE'を定義します．

 - マクロ: AC_C_STRINGIZE
     Cプリプロセッサが文字列作成オペレータをサポートする場合，
     `HAVE_STRINGIZE'を定義します．文字列作成オペレータは`#'と，以
     下のようなマクロで見つかります．

          #define x(y) #y

 - マクロ: AC_C_PROTOTYPES
     関数のプロトタイプをコンパイラが理解する場合(`AC_PROG_CC'で決定され
     ます)，`PROTOTYPES'と`__PROTOTYPES'を定義します．コンパイラが
     プロトタイプを処理しない場合，関数定義のプロトタイプを止めるために，
     Automake配布物でインストールされる`ansi2knr'を使用すべきです．関数
     のプロトタイプに対して，最初に`PARAMS'を定義すべきです．

          #ifndef PARAMS
          # if PROTOTYPES
          #  define PARAMS(protos) protos
          # else /* no PROTOTYPES */
          #  define PARAMS(protos) ()
          # endif /* no PROTOTYPES */
          #endif

     そして，以下のように使用してください．

          size_t my_strlen PARAMS ((const char *));

   このマクロは，`__PROTOTYPES'も定義します．これは，ユーザの名前空間
を侵害するマクロが使用不可能なヘッダファイルの利便性ためです．

 - マクロ: AC_PROG_GCC_TRADITIONAL
     使用しているGNU Cコンパイラと`ioctl'が，
     `-traditional'無しでは正確に動作しない場合，出力変数`CC'に
     `-traditional'を加えます．それは通常，修正されたヘッダファイルが古
     いシステムにインストールされていないときに発生します．GNU Cコ
     ンパイラの最近のバージョンは，インストール時に，自動的にヘッダファイルを
     修正するので，これはほとんど問題になりません．


File: autoconf-ja.info,  Node: C++ Compiler,  Next: Fortran Compiler,  Prev: C Compiler,  Up: Compilers and Preprocessors

C++コンパイラの特徴
-------------------

 - マクロ: AC_PROG_CXX ([COMPILER-SEARCH-LIST])
     使用するC++コンパイラを定義します．環境変数`CXX'や`CCC'が設定
     されているかどうか(この順番で)調査します．その場合，出力変数をその値に設
     定します．

     それ以外でマクロが引数無しで呼び出されている場合，以下のような名前のC++
     コンパイラを探します(最初が`g++'と`c++'その後でそれ以外の名前
     です)．これらの調査がすべて失敗した場合，最後の手段で`CXX' を
     `g++'に設定します．

     しかし，このマクロはオプション引数を用いて呼び出すことが可能で，指定する
     場合は，検索するC++コンパイラをスペースで区切ったリストにする必要があり
     ます．これで，ユーザがC++コンパイラに対する代わりの検索リストを指定する
     機会が与えられます．例えば，デフォルトの順序がいやな場合は，以下のように
     して`AC_PROG_CXX'を呼び出すことが可能です．

          AC_PROG_CXX(cl KCC CC cxx cc++ xlC aCC c++ g++ egcs gcc)

     GNU C++コンパイラを使用している場合，シェル変数`GXX'を
     `yes'に設定します．出力変数`CXXFLAGS'がまだ設定されていない
     場合，GNU C++コンパイラに対しては`-g -O2'(`-g'を
     受け入れないG++のシステムでは`-O2')を設定し，他のコンパイラでは
     `-g'を設定します．

 - マクロ: AC_PROG_CXXCPP
     出力変数`CXXCPP'を，C++プリプロセッサを実行するコマンドに設定します．
     `$CXX -E'が動作しない場合，`/lib/cpp'を使用します．`.c'，
     `.C'，または`.cc'の拡張子を持つファイルで`CXXCPP'を実行す
     るのは移植性のためだけです．

     プリプロセッサによっては，足りないインクルードファイルをエラーステータス
     で示さないものもあります．そのようなプリプロセッサに対して，内部変数は，
     プリプロセッサからの標準エラー出力を調査する他のマクロに設定され，警告が
     報告されない場合はテストに失敗したと考えます．しかし，C++に対してそのよ
     うな壊れ方をしているプリプロセッサがあるかどうかは知りません．


File: autoconf-ja.info,  Node: Fortran Compiler,  Prev: C++ Compiler,  Up: Compilers and Preprocessors

Fortranコンパイラの特徴
-----------------------

AutoconfのFortranサポートは，二つのカテゴリに分けられました．これまでの
Fortran 77マクロ(`F77')と，現在のFortramマクロ(`FC')です．前者
は伝統的なFortram 77コードを想定していて，`F77'，`FFLAGS'，そ
して`FLIBS'といった出力変数があります．後者は，より新しいFortranの
標準の元でコンパイル可能(または必須)である，より新しいプログラムを想定し
ていて，`FC'，`FCFLAGS'，そして`FCLIBS'といった出力変数が あります．

   二つの新しいマクロ`AC_FC_SRCEXT'と`AC_FC_FREEFORM'(以下を参照)
以外では，`FC'と`F77'のマクロの動作はほとんど同じなので，この
セクションでまとめて説明しています．

 - マクロ: AC_PROG_F77 ([COMPILER-SEARCH-LIST])
     使用するFortran 77コンパイラを決定します．`F77'が環境変数でまだ設定
     されていない場合，`g77'，`f77'，そしてその他の名前を調査します．
     見つかったコンパイラ名を，出力変数`F77'に設定します．

     しかし，このマクロはオプション引数を用いて呼び出すことが可能で，指定する
     場合は，検索するFortran
     77コンパイラをスペースで区切ったリストにする必要
     があります．これで，ユーザがFortran
     77コンパイラに対する代わりの検索リス
     トを指定する機会が与えられます．例えば，デフォルトの順序がいやな場合は，
     以下のようにして`AC_PROG_F77'を呼び出すことが可能です．

          AC_PROG_F77(fl32 f77 fort77 xlf g77 f90 xlf90)

     `g77'(GNU Fortran 77コンパイラ)を使用している場合，
     `AC_PROG_F77'はシェル変数`G77'を`yes'に設定します．出力変
     数`FFLAGS'が環境変数で設定されていない場合，`g77'に対して `-g
     -O2'(`-g'を受け入れない`g77'では`-O2')を設定し， 他のFortran
     77コンパイラでは`-g'を設定します．

 - マクロ: AC_PROG_FC ([COMPILER-SEARCH-LIST], [DIALECT])
     使用するFortranコンパイラを決定します．`FC'が環境変数でまだ設定され
     ていない場合，`dialect'が検索しているFortran dialect何かを示すヒン
     トになります．デフォルトとして，利用可能なdialectの最も新しいものを検索
     します．見つかったコンパイラ名を出力変数`FC'に設定します．

     デフォルトで，より新しいdialectがより古いdialectに代わって選択されますが，
     `dialect'が指定されている場合，指定されているdialectで始まる，より
     古いdialectが選択されます．`dialect'は，現在Fortran 77，Fortran
     90， またはFortran
     95が可能です．しかし，これは選択されるコンパイラの_名
     前_のヒント(例えば，`f90'または`f95')になるだけで，特定の言語
     の標準を実際にサポートしていることへの保証は試みません．このため，
     `dialect'オプションを避け，`AC_PROG_FC'だけを最も新しいFortran
     標準に互換性のあるコード対して使用した方が良いでしょう．

     また，このマクロは，最初のオプション引数を指定して呼び出される場合，それ
     は，`AC_PROG_F77'と同様に，検索するFortranコンパイラをスペースで分
     離したリストにする必要があります．

     出力変数`FCFLAGS'が環境変数で設定されていない場合，GNU `g77'に
     対してはそれを`-g -02'に(または，`g77'が`-g'を受け入
     れないところでは`-O2'に)設定します．それ以外では，すべてのFortran
     コンパイラに対し，`FCFLAGS'を`-g'に設定します．

 - マクロ: AC_PROG_F77_C_O
 - マクロ: AC_PROG_FC_C_O
     Fortranコンパイラが，オプション`-c'と`-o'を同時にを受け入れる
     かどうかテストし，そうでない場合は，それぞれ
     `F77_NO_MINUS_C_MINUS_O'または`FC_NO_MINUS_C_MINUS_O'を定義し
     ます．

以下のマクロは，Fortranコンパイラの特徴を調査します．ここでリストアップ
されていない特徴を調査するために，現在の言語(*note Language Choice::)が
Fortran 77またはFortranに設定されていることを`AC_LANG(Fortran 77)'
や`AC_LANG(Fortran)'で最初に確認し，`AC_COMPILE_IFELSE' (*note Running
the Compiler::)や`AC_RUN_IFELSE' (*note Run Time::) を使用してください．

 - マクロ: AC_F77_LIBRARY_LDFLAGS
 - マクロ: AC_FC_LIBRARY_LDFLAGS
     Fortranプログラムや共有ライブラリをうまくリンクするために必要な
     "Fortranのイントリンシックとランタイムライブラリ(Fortran intrinsic
     and run-time libraries)"に対して，リンカフラグ(例えば`-L' と
     `-l')を決定します．出力変数 `FLIBS'や`FCLIBS'には，これら
     のフラグが設定されます(それらはリンク時に`LIBS'の後に含めるべきです)．

     このマクロは，単一のプログラムや共有ライブラリに，例えば，C++とFortranの
     ソースコードを混在させる必要があるとき利用されます(*note Mixing
     Fortran 77 With C and C++: (automake)Mixing Fortran 77 With C and
     C++.)．

     例えば，C++とFortranコンパイラで生成されるオブジェクトファイルを，お互い
     にリンクする必要があるとき，リンクにはC++コンパイラ/リンカが使用されるは
     ずです(C++特有のものは，リンク時にグローバルコンストラクタ，インスタンス
     テンプレート，例外処理等を呼び出す必要が生じるためです)．

     しかし，Fortranのイントリンシックとランタイムライブラリもリンクする必要
     がありますが，C++コンパイラ/リンカは，これらのFortranライブラリを追加す
     る方法をデフォルトでは知っていません．そのため，これらのFortranライブラ
     リを決定するマクロが作成されました．

     マクロ`AC_F77_DUMMY_MAIN'/`AC_FC_DUMMY_MAIN'や
     `AC_F77_MAIN'/`AC_FC_MAIN'は，FortranでC/C++にリンクする必要が
     あるときもおそらく必要です．以下を参照してください．

 - マクロ: AC_F77_DUMMY_MAIN ([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
 - マクロ: AC_FC_DUMMY_MAIN ([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
     多くのコンパイラでは，`AC_F77_LIBRARY_LDFLAGS'や
     `AC_FC_LIBRARY_LDFLAGS'で見つかるFortranライブラリは，Fortran I/Oの
     ようなものを初期化したり，ユーザプログラムを実行するために，(いわゆる)
     `MAIN__'のような名前を持つユーザ提供のエントリー関数を呼び出す，独
     自の`main'エントリー関数を提供しています．
     `AC_F77_DUMMY_MAIN'/`AC_FC_DUMMY_MAIN'や
     `AC_F77_MAIN'/`AC_FC_MAIN'マクロは，この相互作用を扱う方法を理
     解します．

     (I/Oなどではない)純粋な数値関数のためにFortranを使用しているとき，独自の
     `main'を提供し，Fortranライブラリの初期化を停止したいこともよくあり
     ます．しかしこの場合は，いくつかのシステムでのリンクエラーを避けるため，
     ダミーの`MAIN__'ルーチンを提供する必要があるかもしれません．
     `AC_F77_DUMMY_MAIN'や`AC_FC_DUMMY_MAIN'は，そのようなルーチン
     がリンク時に_要求されている_かどうか，そしてその名前が何かを検出し
     ます．シェル変数`F77_DUMMY_MAIN'や`F77_DUMMY_MAIN'は，解決方法
     が見つからないときは`unknown'，そのようなダミーの`main'が不要
     なときは`none'という値を保持します．

     デフォルトで，必要な_場合_は，ACTION-IF-FOUNDは
     `F77_DUMMY_MAIN'や`FC_DUMMY_MAIN'をこのルーチン名(例えば
     `MAIN__')に定義します．[ACTION-IF-NOT-FOUND]はデフォルトでエラー
     で終了します．

     Fortranとリンクするために，必要な場合はダミーの`main'を定義するため
     に，userのC/C++プログラムで以下のようなコードをインクルードすべきです．

          #ifdef F77_DUMMY_MAIN
          #  ifdef __cplusplus
               extern "C"
          #  endif
             int F77_DUMMY_MAIN() { return 1; }
          #endif

     (Fortran 77ではなくFortranに対しては，`F77'を`FC'で置換して下
     さい．)

     このマクロはは`AC_F77_WRAPPERS'や`AC_FC_WRAPPERS'から自動的に
     呼び出されることに注意してください．一般的にデフォルトの動作を変更したく
     ない限り，明示的にに呼び出す必要はありません．

 - マクロ: AC_F77_MAIN
 - マクロ: AC_FC_MAIN
     上で議論したように，Fortranライブラリには，通常の`main'の代わりに，
     (いわゆる)`MAIN__'と呼ばれるエントリーポイントを提供することが可能
     なものも多く，それは，Fortran
     I/Oのようなものを初期化するために，Fortran
     ライブラリの`main'関数で呼び出されます．
     `AC_F77_MAIN'/`AC_FC_MAIN'マクロは，そのような代理の
     `main'関数の利用が_可能か_どうかを検出し，
     `F77_MAIN'/`AC_FC_MAIN'を関数の名前に定義します．(代理の
     `main'関数の名前が見つからない場合，
     `F77_MAIN'/`AC_FC_MAIN'は単純に`main'に定義します．)

     このため，Fortranルーチンが，I/Oのようなものを実行するためにCから呼び出
     されるとき，このマクロを使用し，"main"関数を`main'ではなく
     `F77_MAIN'/`FC_MAIN'の名前にすべきです．

 - マクロ: AC_F77_WRAPPERS
 - マクロ: AC_FC_WRAPPERS
     名前がmangleされる方法をFortranコンパイラで使用されているものに一致させ
     るため，mangleされているC/C++の識別子とアンダースコアが付いた識別子の名
     前が正しくなるように，Cマクロの
     `F77_FUNC(name,NAME)'/`FC_FUNC(name,NAME)'と
     `F77_FUNC_(name,NAME)'/`FC_FUNC_(name,NAME)'をそれぞれ定義しま す．

     Fortranは大文字小文字の区別が無く，このために，Fortranコンパイラは全ての
     識別子を標準的な文字と書式に変換します．CからFortranのサブルーチンを呼び
     出したり，Fortranから呼び出し可能なC関数を書いたりするために，Cプログラ
     ムではFortranコンパイラが期待する書式で，識別子を明示的に使用する必要が
     あります．こうするために，全てのC識別子を`AC_F77_WRAPPERS'や
     `AC_FC_WRAPPERS'で提供されるマクロの一つで，単純にラッパー関数にし
     ます．例えば，以下のようなFortranのサブルーチンがあるとします．

                subroutine foobar(x,y)
                double precision x, y
                y = 3.14159 * x
                return
                end

     CやC++のプロトタイプで，以下のように宣言します．

          #define FOOBAR_F77 F77_FUNC(foobar,FOOBAR)
          #ifdef __cplusplus
          extern "C"  /* prevent C++ name mangling */
          #endif
          void FOOBAR_F77(double *x, double *y);

     正しいものが選択できるように，関数名の大文字と小文字の両方のバージョンを
     `F77_FUNC'に渡していることに注意してください．また，Fortran 77
     のルー
     チンへの全てのパラメータを，ポインタとして渡していることにも注意してくだ
     さい(*note Mixing Fortran 77 With C and C++: (automake)Mixing
     Fortran 77 With C and C++.)．

     (Fortran 77の代わりに，Fortranに対しては`F77'は`FC'で置換して
     下さい．)

     AutoconfはFortranコンパイラが名前をmangleする手法を検出するために知的な
     手法で試みていますが，Fortranコンパイラはそれをまだサポートしていないか
     もしれません．この場合，上記のコードはコンパイル時にエラーとなりますが，
     それ以外の動作(例えば，Fortranに関連する機能の停止)は，
     `F77_FUNC'/`FC_FUNC'マクロが定義されているかどうかを調査するこ
     とで引き起こされます．

     さて，そのようなルーチンをCプログラムから呼び出すために，以下のようにし
     てみます．

          {
              double x = 2.7183, y;
              FOOBAR_F77(&x, &y);
          }

     Fortran 77の識別子がアンダースコアを含んでいる(例えば`foo_bar'の)
     場合，`F77_FUNC'/`FC_FUNC'の代わりに
     `F77_FUNC_'/`FC_FUNC_'を(同じ引数で)使用すべきです．これは，ア
     ンダースコアを含んでいる場合，Fortranコンパイラによっては異なる名前に
     mangleするものもあるからです．

 - マクロ: AC_F77_FUNC (NAME, [SHELLVAR])
 - マクロ: AC_FC_FUNC (NAME, [SHELLVAR])
     識別子NAMEが与えられている場合，シェル変数SHELLVARをFortran
     リンカの規則(`AC_F77_WRAPPERS'や`AC_FC_WRAPPERS'も参照してくだ
     さい)によって，mangleされるバージョンのNAMEを保持するように設定し
     ます．SHELLVARはオプションです．提供されていない場合，シェル変数は
     単純にNAMEになります．このマクロの目的は，上記のようにCプリプロセッ
     サを通じてではなく，呼び出し側に名前のmangleに関する情報にアクセスする方
     法を与えることで，例えば，C/C++以外の言語からFortranルーチンを呼び出すた
     めです．

 - マクロ: AC_FC_SRCEXT (EXT, [ACTION-IF-SUCCESS], [ACTION-IF-FAILURE])
     デフォルトで，`FC'マクロは，ソースコードファイルを`.f'の拡張子
     を使用しているテストを実行します．しかし，コンパイラによっては，適切なファ
     イル名に対してのみ，より新しい言語の機能を利用可能にし，例えば，Fortran
     90の機能は`.f90'ファイルだけになります．一方，すべてのソースファイ
     ルが`.f'で終わることを期待していて，他のファイル名の拡張子をサポー
     トするためには特殊なフラグが必要になります．`AC_FC_SRCEXT'マクロは
     両方の問題を扱います．

     `AC_FC_SRCEXT'は，拡張子EXT(すなわち，EXTにはドットは含
     まれ_ません_)で終わるファイルを受け入れる`FC'コンパイラの取得
     を試みます．こうするために特定のコンパイラフラグが必要な場合，それを出力
     変数`FCFLAGS_'EXTに保存します．この拡張子とこのフラグは
     (`AC_FC_SRCEXT'が再び呼び出されるまで)，それ以降に呼び出されるすべ
     ての`FC'で使用されます．

     例えば，機能テストで`.f90'の拡張子を用いるため，
     `AC_FC_SRCEXT(f90)'を使用し，そのようなファイルをコンパイルするため
     に必要な追加フラグがあれば，`FCFLAGS_f90'出力変数を設定します．

     `FCFLAGS_'EXTを単純に`FCFLAGS'に書き込むことは_不可
     能_で，それにはコンパイラの制限に起因する二つの理由があります．最初のも
     のは，一度に一つの`FCFLAGS_'EXTが使用可能なので，ことなる拡張
     子を持つファイルは別々にコンパイルする必要があるためです．二番目のものは，
     `FCFLAGS_'EXTはコンパイル時のソースコードのファイル名の
     _直前_に書く必要があるためです．そのため，上記の例を続けると，以下
     のコマンドを持つMakefileで`foo.f90'ファイルがコンパイルされるでしょ
     う．

          foo.o: foo.f90
               $(FC) -c $(FCFLAGS) $(FCFLAGS_f90) foo.f90

     EXTの拡張子を持つファイルのコンパイルで`AC_FC_SRCEXT'が成功す
     る場合，それは[ACTION-IF-SUCCESS](デフォルトでは何もしません)を呼び
     出します．失敗した場合と，`FC'コンパイラにそのようなファイルを受け
     入れさせる方法が見つからない場合，[ACTION-IF-FAILURE](デフォルトは
     エラーメッセージとともに終了します)を呼び出します．


 - マクロ: AC_FC_FREEFORM ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE])
     `AC_FC_FREEFORM'は，Fortranコンパイラ(`$FC')でフリーフォーマッ
     トのソースコードが可能であることの確認を試みます(逆に，Fortran
     77はより
     古い固定フォーマット形式です)．必要な場合，`FCFLAGS'に追加フラグを
     加えてもかまいません．

     デフォルトの`.f'拡張子を使用している場合，追加のフラグが提供されて
     いない限り，多くのコンパイラがこの拡張子を固定フォーマットのソースコード
     であると解釈するので，このマクロが最も重要です．`.f90'や`.f95'
     のように，異なる拡張子を`AC_FC_SRCEXT'で指定している場合，
     `AC_FC_FREEFORM'は，通常，`FCFLAGS'を編集することなく成功しま す．

     `AC_FC_FREEFORM'はフリーフォームのソースのコンパイルで成功する場合，
     それは[ACTION-IF-SUCCESS](デフォルトでは何もしません)を呼び出します．
     失敗した場合，[ACTION-IF-FAILURE](デフォルトはエラーメッセージとと
     もに終了します)を呼び出します．


File: autoconf-ja.info,  Node: System Services,  Next: UNIX Variants,  Prev: Compilers and Preprocessors,  Up: Existing Tests

システムサービス
================

   以下のマクロはオペレーティングシステムのサービスや機能を調査します．

 - マクロ: AC_PATH_X
     X Window
     Systemのインクルードファイルとライブラリの場所を調査します．ユー
     ザがコマンドラインオプションで，`--x-includes=DIR'と
     `--x-libraries=DIR'を与えている場合，そのディレクトリを使用し
     ます．どちらか一つまたは両方とも与えられない場合，`xmkmf'を平凡な
     `Imakefile'で実行し，生成された`Makefile'を調査し，足りない値
     を取得します．(`xmkmf'が存在しない等のように)失敗した場合，配置され
     ることが多いディレクトリ等でファイルを検索します．いずれかの手法で成功し
     た場合，コンパイラがデフォルトで検索するディレクトリに無い限り，シェル変
     数`x_includes'と`x_libraries'をその場所に設定します．

     両方の方法が失敗する，またはユーザがコマンドラインオプションの
     `--without-x'を与えている場合，シェル変数の`no_x'を`yes'
     に設定し，それ以外では空の文字列に設定します．

 - マクロ: AC_PATH_XTRA
     `AC_PATH_X'の拡張バージョンです．Xが必要とするCコンパイラフラグを出
     力変数`X_CFLAGS'に，Xリンカフラグを`X_LIBS'に追加します．X が
     利用可能でない場合，`X_DISPLAY_MISSING'を定義します．

     また，このマクロは，Xプログラムをコンパイルするためにシステムが必要とす
     る特別なライブラリも調査します．それは，システムが必要とするあらゆるもの
     を出力変数`X_EXTRA_LIBS'に追加します．そして，`-lX11'の前にリ
     ンクする必要がある特別なX11R6ライブラリを調査し，見つかったものは全て出
     力変数`X_PRE_LIBS'に追加します．


 - マクロ: AC_SYS_INTERPRETER
     スクリプトを使用するためのインタプリタを選択するため，`#!
     /bin/csh'の形式の行を用いたスクリプトをサポートするかどうかを調査します．
     このマクロを実行した後で，`configure.ac'のシェルコードは，シェル変
     数の `interpval'を調査することが可能になります．システムで`#!'
     がサポートされている場合は`yes'，そうでなければ`no' を設定しま す．

 - マクロ: AC_SYS_LARGEFILE
     large-file
     support(1)のために用意しています．ホストによっては，大きなファ
     イルにアクセスできるプログラムをビルドするため，特別なコンパイラオプショ
     ンが必要になります．そのようなオプションを出力変数`CC'に，全て追加
     します．必要な場合は，`_FILE_OFFSET_BITS'と`_LARGE_FILES' を定
     義します．

     大きなファイルのサポートは，`--disable-largefile'オプションを用い
     てコンフィグレーションすることで利用不可能にすることが可能です．

     このマクロを使用する場合，大きなファイルのサポートが利用可能なときは，
     `off_t'が`long'より長いときが一般的なので，それでもプログラム
     が動作するかどうかを調査してください．例えば，`printf ("%ld",
     (long) X)'で任意の`off_t'の値`X'を出力しても正しくなくなります．

     LFSは`fseeko'と`ftello'関数を，Cの`off_t'を使用していない
     `fseek'と`ftell'に相当するものを置き換えるために導入しました．
     それらの関数を使用しているときで，大きなファイルのサポートが利用可能になっ
     ているときに，利用可能なプロトタイプを作成するために
     `AC_FUNC_FSEEKO'を注意して使用して下さい．

 - マクロ: AC_SYS_LONG_FILE_NAMES
     システムが14文字より長いファイル名をサポートする場合，
     `HAVE_LONG_FILE_NAMES'を定義します．

 - マクロ: AC_SYS_POSIX_TERMIOS
     POSIX termiosヘッダと関数がシステムで利用可能かどうかを調査し
     ます．その場合は，シェル変数`ac_cv_sys_posix_termios'を`yes'に
     設定します．それ以外ではその変数を`no'に設定します．

   ---------- Footnotes ----------

   (1) large-file support,
<http://www.unix-systems.org/version2/whatsnew/lfs20mar.html>.


File: autoconf-ja.info,  Node: UNIX Variants,  Prev: System Services,  Up: Existing Tests

様々なUNIX
==========

以下のマクロは，ヘッダファイルやライブラリが例外的に特異なため，プログラ
ムに対して特別な処理が必要なオペレーティングシステムを調査します．これら
のマクロは不要なものです．利用可能にする関数や，供給する環境に基づき，よ
り規則正しい手法で置換されるでしょう．

 - マクロ: AC_AIX
     AIXの場合，`_ALL_SOURCE'を定義します．いくつかの
     BSD関数の使用を許可します．Cコンパイラを実行するあらゆるマクロ
     の前に呼び出すべきです．

 - マクロ: AC_GNU_SOURCE
     GNU Cライブラリを使用している場合，`_GNU_SOURCE'を定義し
     ます．いくつかのGNUの関数が使用可能になります．Cコンパイラを実
     行するマクロの前で呼び出すべきです．

 - マクロ: AC_ISC_POSIX
     INTERACTIVE UNIX (ISC)に対して，POSIXの機能が必
     要な場合，出力変数`LIBS'に`-lcposix'を追加します．これは
     `AC_PROG_CC'の後で，POSIXインターフェースを使用するその他
     のマクロの前で呼び出してください．INTERACTIVE UNIXはすでに販売され
     ておらず，Sunは2006-07-23でサポートを終了することを告げているので，この
     マクロは時代遅れになっています．

 - マクロ: AC_MINIX
     Minixの場合，`_MINIX'と`_POSIX_SOURCE'を定義し，
     `_POSIX_1_SOURCE'を2と定義します．これでPOSIXの機能が使用
     可能になります．Cコンパイラを実行するあらゆるマクロの前で呼び出すべきで
     す．


File: autoconf-ja.info,  Node: Writing Tests,  Next: Results,  Prev: Existing Tests,  Up: Top

テストを書く
************

既存の特徴テストでは必要なことができない場合，新しいものを書く必要があり
ます．これらのマクロはブロックの組み立てです．他のマクロで様々な特徴が利
用可能かどうか調査し結果を報告するための方法を提供します．

この章には，提案と，既存のテストが書かれている方法の理由も含まれています．
また，既存のものを見ることで，Autoconfテストの書き方について知ることが可
能です．Autoconfのテストの一つ以上がうまくいかない場合，この情報は背後で
行われていることの理解を助けるので，最善の問題解決法が分かるでしょう．

   以下のマクロは，現在の言語のコンパイラシステムの出力を調査します
(*note Language Choice::)．それらは，キャッシュ変数名を生成するために調
査している情報を十分には知らないので，将来使用するためにテスト結果をキャッ
シュしません(*note Caching Results::)．同じ理由でメッセージも出力しませ
ん．特定の種類の機能の調査では，これらのマクロを呼び出し，結果をキャッシュ
し，そして調査していることに関するメッセージを出力します．

一つ以上のソフトウェアパッケージに適用可能な特徴テストを書いているとき，
新しいマクロに要約することがベストです．その方法は，*Note Writing
Autoconf Macros::.

* Menu:

* Language Choice::             Selecting which language to use for testing
* Writing Test Programs::       Forging source files for compilers
* Running the Preprocessor::    Detecting preprocessor symbols
* Running the Compiler::        Detecting language or header features
* Running the Linker::          Detecting library features
* Run Time::                    Testing for run-time features
* Systemology::                 A zoology of operating systems
* Multiple Cases::              Tests for several possible values


File: autoconf-ja.info,  Node: Language Choice,  Next: Writing Test Programs,  Up: Writing Tests

言語の選択
==========

   Autoconfが生成した`configure'スクリプトは，Cコンパイラとその特徴
をデフォルトで調査します．他のプログラム言語を使用するパッケージ(一つ以
上で，例えば，CとC++)は，それぞれの言語のコンパイラの特徴をテストする必
要があります．以下のマクロは`configure.ac'内のそれ以降のテストで使
用されるプログラミング言語のコンパイラを決定します．

 - マクロ: AC_LANG (LANGUAGE)
     LANGUAGEで指定されている，コンパイラ，プリプロセッサ，そしてファイ
     ル拡張子をコンパイルテストで使用します．

     サポートされている言語は以下のとおりです．

    `C'
          `CC'と`CPP'を使用してコンパイルテストを行ない，テストプログラ
          ムでは`.c'の拡張子を使用します．コンパイルフラグを使用します．
          `CPP'では`CPPFLAGS'，`CC'では`CPPFLAGS'と
          `CFLAGS'の両方を使用します．

    `C++'
          `CXX'と`CXXCPP'を使用してコンパイルテストを行ない，テストプロ
          グラムでは`.C'の拡張子を使用します．コンパイルフラグを使用します．
          `CXXPP'では`CPPFLAGS'，`CXX'では`CPPFLAGS'と
          `CXXFLAGS'の両方を使用します．

    `Fortran 77'
          `F77'を使用してコンパイルテストを行ない，テストプログラムでは
          `.f'の拡張子を使用します．コンパイルフラグを使用します．
          `FFLAGS'です．

    `Fortran'
          `FC'を使用してコンパイルテストを行ない，テストプログラムでは
          `.f'の拡張子(または`AC_FC_SRCEXT'で設定されているもの)を使用し
          ます．コンパイルフラグを使用します．`FCFLAGS'です．

 - マクロ: AC_LANG_PUSH (LANGUAGE)
     現在の言語を(`AC_LANG'に設定するように)スタックに記録してから，
     LANGUAGEを選択します．このマクロと`AC_LANG_POP'を，一時的に特
     定の言語に切替える必要があるマクロで使用してください．

 - マクロ: AC_LANG_POP ([LANGUAGE])
     `AC_LANG_PUSH'で設定するように，スタックのトップに保存されている言
     語に選択し，スタックからそれを削除します．

     LANGUAGE与えられている場合，それは言語を_そのまま_指定します．
     分かっているときは，Autoconfが間違いを検出するので(case...にすべきで
     すが)，それを指定することは良い考えです．

          AC_LANG_PUSH(Fortran 77)
          # Perform some tests on Fortran 77.
          # ...
          AC_LANG_POP(Fortran 77)

 - マクロ: AC_LANG_ASSERT (LANGUAGE)
     現在の言語がLANGUAGEであることを十分に調査します．言語指定のマクロ
     で不適切な言語での呼び出しを避けるため使用すべきです．

     このマクロは，`autoconf'時のみで実行され，`configure'時
     に時間がかかることはありません．残念ながら，Autoconfは二つのレイヤーの言
     語があるため(1)，マクロの`AC_LANG_PUSH'/`AC_LANG_POP' は"最適化"
     されず，そのため，できるだけコードのラッパーを行なうために
     それらを使用することを避け，代わりに，ユーザがマクロを現在の言語で実行す
     ることを要求し，`AC_LANG_ASSERT'で調査するようにして下さい．いずれ
     にせよ，Fortran
     77コンパイラの結果を期待している，ユーザが実行している
     Fortranマクロを理解する助けとなるでしょう....

 - マクロ: AC_REQUIRE_CPP
     現在のテストに使用されるプリプロセッサが見つかることを保証します．現在の
     言語に依存して，`AC_PROG_CPP'または`AC_PROG_CXXCPP'のいずれか
     の引数を用いて，`AC_REQUIRE'(*note Prerequisite Macros::)を呼び出し
     てください．

   ---------- Footnotes ----------

   (1) M4は特別な条件文となっているShのコードに注目しない
ので，十分に良いと感じられる最適化でも，実行時の結果が間違っているものに
なる可能性があります．


File: autoconf-ja.info,  Node: Writing Test Programs,  Next: Running the Preprocessor,  Prev: Language Choice,  Up: Writing Tests

テストプログラムを書く
======================

Autoconfのテストの流れは，共通の手法です．いくつかの入力をいくつかのプロ
グラムに与え，ほとんどの場合，ソースファイルをコンパイラに与えます．この
セクションでは，これらのソースのサンプルを提供します．

* Menu:

* Guidelines::                  General rules for writing test programs
* Test Functions::              Avoiding pitfalls in test programs
* Generating Sources::          Source program boilerplate


File: autoconf-ja.info,  Node: Guidelines,  Next: Test Functions,  Up: Writing Test Programs

テストプログラムのためのガイドライン
------------------------------------

テストサンプルを書くときに従うべきもっとも重要な規則は以下のとおりです．

                          _現実を見つめる．_
このモットーは，テストサンプルが現実にかかれるプログラムと同じ厳密さで書
く必要があるということです．特に，"ショートカット"と単純にしたものは避
けるべきです．

コンパイルの準備をしたい場合，プリプロセッサだけで実行しないでください．
例えば，ヘッダが機能することを調査するために`cpp'を使用するだけ
では，`configure'が_コンパイラ_のエラーを生じるヘッダを受け
入れるかもしれません．以前にインクルードした他のヘッダ，特に必要とされる
ヘッダを用いたヘッダの調査をためらわないでください．

使用しているシンボルが，適切に定義されている，すなわち適切なヘッダをイン
クルードする代わりに，自分で関数を単純に定義していないことを確かめてくだ
さい．

テストプログラムは，標準出力に何かを書き出すべきではありません．コアダン
プや他の異常終了と簡単に区別できるように，成功した場合は0，それ以外では
ゼロ以外を返すべきです．セグメンテーション違反やその他の異常終了は，終了
ステータスでゼロ以外を生成します．`main'内の`return'の引数を無
視するシステム(少なくとも古いSun)もあるので，テストプログラムの
`main'では`return'ではなく`exit'を使用するべきです．

既に実行されたテストで定義されたプリプロセッサの値を調査するため，テスト
プログラムで`#if'や`#ifdef'を使用することが可能です．例えば，
`AC_HEADER_STDC'を呼び出す場合，`configure.ac'の後の方で，条件 付でANSI
Cヘッダファイルをインクルードするテストプログラムを使用すること
が可能です．

     #if STDC_HEADERS
     # include <stdlib.h>
     #endif

テストプログラムでデータファイルを使用したり，作成したりする必要がある場
合， `conftest.data'のような，`conftest'で始まる名前を与えてく
ださい．`configure'スクリプトは，テストプログラム終了後やスクリ
プトが中断された場合，`rm -rf conftest*'を実行しクリーンアップしま す．


File: autoconf-ja.info,  Node: Test Functions,  Next: Generating Sources,  Prev: Guidelines,  Up: Writing Test Programs

関数のテスト
------------

テストプログラムでの関数宣言には，C++に対する条件付のプロトタイプを持た
せるべきです．しかし，テストプログラムで引数をとる関数が必要になることは，
実際には滅多にありません．

     #ifdef __cplusplus
     foo (int i)
     #else
     foo (i) int i;
     #endif

   テストプログラムが宣言する関数には，`extern "C"'プロトタイプを要求
するC++に対する条件付けも行なうべきです．壊れたプロトタイプを含んでいる
ヘッダファイルをインクルードしていないことを確かめてください．

     #ifdef __cplusplus
     extern "C" void *malloc (size_t);
     #else
     void *malloc ();
     #endif

テストプログラムが(その存在の確認のためにだけ)無効なパラメータで関数を呼
び出す場合，その関数を決して呼び出さないことを保証するようにプログラムを
構成してください．決して呼び出されないそれ以外の他の関数から関数を呼び出
すことで，こうすることが可能です．GCCバージョン2は，`exit' は値を返
さず，同じブロックにあるそれ以降のコードを最適化で外してしまうことが知ら
れているので，`exit'の呼び出し以降にそれを書き込まないでください．

ヘッダファイルをインクルードする場合は，たとえ引数が0だけであっても，プ
ロトタイプで生じるコンパイルエラーを避けるため，正しい数の引数を適切にし
て関数を呼び出していることを確認してください．GCCのバージョン2は，自動的
にインライン化される関数プロトタイプ，例えば`memcpy'もあります．そ
れらを調査しているときのエラーを避けるため，正しい数の引数を与えるか，
(`char'のような)異なる戻り値で再定義してください．


File: autoconf-ja.info,  Node: Generating Sources,  Prev: Test Functions,  Up: Writing Test Programs

ソースの生成
------------

Autoconfは，テストソースファイルを生成するために使用することが可能なマク
ロの組みを提供しています．それらは，一般的な言語で書かれていて，すなわち，
それらは実際に現在の言語(*note Language Choice::)に依存して適切な出力
"フォーマット"になっています．

 - マクロ: AC_LANG_CONFTEST (SOURCE)
     現在のテストソースファイルにSOURCEのテキストを保存します．
     `conftest.EXTENSION'のEXTENSIONは現在の言語に依存します．

     通常のAutoconfマクロ引数のように，SOURCEは一度だけ評価され，そのた
     め，(i)マクロ呼び出しに渡してもかまわず，(ii)そうでなければ，必要があれ
     ば二重に引用符で囲む必要があることに注意してください．

 - マクロ: AC_LANG_SOURCE (SOURCE)
     すべての`AC_DEFINE'で実行されるこれまでの定義を用いて，SOURCE
     に展開します．

   例えば，以下を実行します(二重の引用符を守ってください！)．

     AC_INIT(Autoconf Documentation, 2.59, bug-autoconf@gnu.org)
     AC_DEFINE([HELLO_WORLD], ["Hello, World\n"])
     AC_LANG_CONFTEST(
        [AC_LANG_SOURCE([[const char hw[] = "Hello, World\n";]])])
     gcc -E -dD conftest.c -o -

結果は以下のようになります．

     # 1 "conftest.c"
     # 1169 "configure"
     
     # 1 "confdefs.h" 1
     
     #define PACKAGE_NAME "Autoconf Documentation"
     #define PACKAGE_TARNAME "autoconf-documentation"
     #define PACKAGE_VERSION "2.59"
     #define PACKAGE_STRING "Autoconf Documentation 2.59"
     #define PACKAGE_BUGREPORT "bug-autoconf@gnu.org"
     #define HELLO_WORLD "Hello, World\n"
     # 1170 "configure" 2
     
     const char hw[] = "Hello, World\n";

 - マクロ: AC_LANG_PROGRAM (PROLOGUE, BODY)
     PROLOGUEの内容と，BODYをmain関数(例えばCの`main')として
     ソースファイルに展開します．それは`AC_LANG_SOURCE'を使用するので，
     後者の機能は利用可能です．

   例えば以下のようにします．

     AC_INIT(Autoconf Documentation, 2.59, bug-autoconf@gnu.org)
     AC_DEFINE([HELLO_WORLD], ["Hello, World\n"])
     AC_LANG_CONFTEST(
     [AC_LANG_PROGRAM([[const char hw[] = "Hello, World\n";]],
                      [[fputs (hw, stdout);]])])
     gcc -E -dD conftest.c -o -

結果は以下のようになります．

     # 1 "conftest.c"
     # 1169 "configure"
     
     # 1 "confdefs.h" 1
     
     #define PACKAGE_NAME "Autoconf Documentation"
     #define PACKAGE_TARNAME "autoconf-documentation"
     #define PACKAGE_VERSION "2.59"
     #define PACKAGE_STRING "Autoconf Documentation 2.59"
     #define PACKAGE_BUGREPORT "bug-autoconf@gnu.org"
     #define HELLO_WORLD "Hello, World\n"
     # 1170 "configure" 2
     
     const char hw[] = "Hello, World\n";
     int
     main ()
     {
     fputs (hw, stdout);
       ;
       return 0;
     }

 - マクロ: AC_LANG_CALL (PROLOGUE, FUNCTION)
     PROLOGUEの内容と，FUNCTIONの呼び出しをmain関数(例えばCの
     `main')の本体としてソースファイルに展開します．それは
     `AC_LANG_SOURCE'を使用するので，後者の機能は利用可能です．

     この関数は，おそらく将来の引数指定が利用可能なバージョンで置換されます．
     このマクロは特定のシステムをひどく侵害するので，その使用は推奨しません．

 - マクロ: AC_LANG_FUNC_LINK_TRY (FUNCTION)
     main関数(例えばCでは`main')の本体として，偽のFUNCTIONを使用し
     ている内容をソースファイルに展開します．単純な(関数ポインタの)割当です．
     それは`AC_LANG_SOURCE'を使用するので，後者の機能は利用可能です．

     `AC_LANG_CALL'があるので，このマクロは，補完の意味で説明しています．
     ひどく壊れていて，(適切な型の引数を用いた)実際の関数の呼び出しに将来は変
     更しようと考えています．


File: autoconf-ja.info,  Node: Running the Preprocessor,  Next: Running the Compiler,  Prev: Writing Test Programs,  Up: Writing Tests

プリプロセッサの実行
====================

いくつかのソースファイルでプリプロセッサを実行する必要があるときもありま
す．通常はプロジェクトを_コンパイル_する必要があり，プリプロセッサ
を実行する必要があることは滅多に無いので，_そうすることは，普通は悪
い考えです_．そのため，きっとプリプロセッサではなくコンパイラを実行した
いと思うでしょう．安易な道をたどる誘惑に逆らってください．

   それにもかかわらず，プリプロセッサを実行する必要がある場合，
`AC_PREPROC_IFELSE'を使用してください．

 - マクロ: AC_PREPROC_IFELSE (INPUT, [ACTION-IF-TRUE],
          [ACTION-IF-FALSE])
     INPUTで現在の言語(*note Language
     Choice::)のプリプロセッサを実行し，
     成功したらシェルコマンドACTION-IF-TRUEを実行し，そうでなければ
     ACTION-IF-FALSEを実行します．INPUTは`AC_LANG_PROGRAM'と
     その仲間で作成することが可能です．

     このマクロは`CPPFLAGS'を使用しますが，`-g'，`-O'など
     は多くのCプリプロセッサで有効なオプションではないので，`CFLAGS' は
     使用しません．

     予期せぬ異常終了は，通常`AC_MSG_FAILURE'で報告します．

   例えば以下のようにします．

     AC_INIT(Autoconf Documentation, 2.59, bug-autoconf@gnu.org)
     AC_DEFINE([HELLO_WORLD], ["Hello, World\n"])
     AC_PREPROC_IFELSE(
        [AC_LANG_PROGRAM([[const char hw[] = "Hello, World\n";]],
                         [[fputs (hw, stdout);]])],
        [AC_MSG_RESULT([OK])],
        [AC_MSG_FAILURE([unexpected preprocessor failure])])

結果は以下のようになります．

     checking for gcc... gcc
     checking for C compiler default output... a.out
     checking whether the C compiler works... yes
     checking whether we are cross compiling... no
     checking for suffix of executables...
     checking for suffix of object files... o
     checking whether we are using the GNU C compiler... yes
     checking whether gcc accepts -g... yes
     checking for gcc option to accept ANSI C... none needed
     checking how to run the C preprocessor... gcc -E
     OK


   マクロ`AC_TRY_CPP'(*note Obsolete Macros::)は，
`AC_PREPROC_IFELSE'の役目を果たすために使用されていましたが，その引
数を二重の引用符で囲んでいるので，精巧なソースで使用することが不可能でし
た．マクロ`AC_TRY_CPP'の`AC_PREPROC_IFELSE'をような古い使い方
を取り除くことも推奨しますが，最初にコンパイラではなく_プリプロセッ
サ_を実行する必要があるのかを確かめることを推奨します．

 - マクロ: AC_EGREP_HEADER (PATTERN, HEADER-FILE, ACTION-IF-FOUND,
          [ACTION-IF-NOT-FOUND])
     システムヘッダファイルHEADER-FILEでのプリプロセッサの実行での出力
     が拡張正規表現のPATTERNにマッチする場合，シェルコマンド
     ACTION-IF-FOUNDを実行し，それ以外ではACTION-IF-NOT-FOUNDを実
     行します．

 - マクロ: AC_EGREP_CPP (PATTERN, PROGRAM, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     PROGRAMがCやC++プログラムのテキストで，そのなかではシェル変数，バッ
     ククオート，そしてバックスラッシュの代入が実行されたものになっています．
     PROGRAMでのプリプロセッサの実行での出力が拡張正規表現の
     PATTERNにマッチする場合，シェルコマンドACTION-IF-FOUNDを実行
     し，それ以外ではACTION-IF-NOT-FOUNDを実行します．


File: autoconf-ja.info,  Node: Running the Compiler,  Next: Running the Linker,  Prev: Running the Preprocessor,  Up: Writing Tests

コンパイラの実行
================

特定のキーワードを認識するかどうかといった，現在の言語のコンパイラの構文
の特徴を調査するため，また，単純にいくつかのライブラリの特徴を試すため，
それらの特徴を使用している小さなプログラムのコンパイルを試みる
`AC_COMPILE_IFELSE'を使用してください．

 - マクロ: AC_COMPILE_IFELSE (INPUT, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     現在の言語(*note Language Choice::)のコンパイラとコンパイラフラグを
     INPUTで実行し，成功したらシェルコマンドACTION-IF-TRUEを，そ
     れ以外ではACTION-IF-FALSEを実行します．INPUTは
     `AC_LANG_PROGRAM'やその仲間で作成することが可能です．

     慣習的に，予期せぬ異常終了は`AC_MSG_FAILURE'で報告します．このマク
     ロはリンクを試みません．そうする必要がある場合，`AC_LINK_IFELSE'を
     使用してください(*note Running the Linker::)．


File: autoconf-ja.info,  Node: Running the Linker,  Next: Run Time,  Prev: Running the Compiler,  Up: Writing Tests

リンカの実行
============

   ライブラリ，関数，またはグローバル変数を調査するため，Autoconfの
`configure'スクリプトは，それを使用している小さなプログラムのコ
ンパイルとリンクを試みます．これはMetaconfigとは異なり，それはデフォルト
で，C ライブラリで関数が利用可能かどうか判定するために`nm'や
`ar'を使用します．オプションと`nm'と`ar'の出力の違いと，
標準ライブラリの位置の違いを処理することを避けるので，関数とのリンクを試
みることは，通常，より信頼性が高い方法になります．クロスコンパイルのコン
フィグレーションや，必要な場合は関数の実行時の動作を調査も可能です．一方，
一度のライブラリスキャンより遅くなるはずですが，正確さは時間より重要です．

   `AC_LINK_IFELSE'は，関数とグローバル変数に対するテストのため，テス
トプログラムをコンパイルするために使用されます．ライブラリを調査する
`AC_CHECK_LIB'でも，調査しているライブラリを一時的に`LIBS'に追
加したり，小さなプログラムのリンクを試みたりすることで，使用されています
(*note Libraries::)．

 - マクロ: AC_LINK_IFELSE (INPUT, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     現在の言語(*note Language
     Choice::)のコンパイラ(とコンパイラフラグ)とリ
     ンカをINPUTで実行し，成功したらシェルコマンドの
     ACTION-IF-TRUEを，それ以外ではACTION-IF-FALSEを実行します．
     INPUTは`AC_LANG_PROGRAM'やその仲間で作成することが可能です．

     リンク時には，現在のコンパイラフラグに加えて，`LDFLAGS'と
     `LIBS'も使用されます．

     慣習的に，予期せぬ異常終了は`AC_MSG_FAILURE'で報告します．このマク
     ロはリンクを試みません．そうする必要がある場合，`AC_RUN_IFELSE'を使
     用してください(*note Run Time::)．


File: autoconf-ja.info,  Node: Run Time,  Next: Systemology,  Prev: Running the Linker,  Up: Writing Tests

実行時の動作の調査
==================

当該関数に特定の能力やバグがあるかどうかといった，実行時にシステムがどの
ような動作をするか調べる必要があることもあります．可能であれば，コンフィ
グレーション時ではなくプログラムを実行するときそのような調査をしてくださ
い．マシンのエンディアンのようなものは，プログラムの初期化時に調査するこ
とが可能です．

コンフィグレーション時に実行時の動作を調査する必要が本当にある場合，結果
を決定するテストプログラムを書き，コンパイルして`AC_RUN_IFELSE' を
使用して実行することも可能です．これは，クロスコンパイルでパッケージをコ
ンフィグレーションする人々の妨げになるので，可能であれば，テストプログラ
ムの実行は避けてください．

 - マクロ: AC_RUN_IFELSE (INPUT, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [ACTION-IF-CROSS-COMPILING])
     PROGRAMのコンパイルとリンクが正常終了し，実行時に0の終了ステータス
     が返る場合，シェルコマンドACTION-IF-TRUEを実行します．それ以外では，
     シェルコマンドACTION-IF-FALSEを実行します．

     INPUTは，`AC_LANG_PROGRAM'とその仲間で作成することが可能です．
     現在の言語(*note Language
     Choice::)のコンパイラフラグに加えて，リンク時
     には`LDFLAGS'と`LIBS'も使用します．

     使用されるコンパイラが，`configure'が実行されているシステムで実
     行する実行形式を生成しない場合，テストプログラムは実行されません．オプショ
     ンのシェルコマンドACTION-IF-CROSS-COMPILINGが与えられている場合，
     それらが変わりに実行されます．それ以外の場合，`configure'はエラー
     メッセージを出力し終了します．

     ACTION-IF-FALSEセクションでは，プログラムの終了ステータスはシェル
     変数`$?'で利用可能ですが，127未満の正の値に制限するよう十分注意して
     ください．大きな値は，PROGRAMでファイルに保存すべきです．また，こ
     の終了ステータスがPROGRAMで，またはそのコンパイルの異常終了で，生
     成されることを保証されていないことに注意してください．言い替えると，苛め
     られるのが好きな人だけこの機能を使用してください．それは，Autoconfの管理
     者が飽き飽きするほど"バグの報告"を受けとることになったので，元に戻しま
     した．

     慣習的に，予期せぬ異常終了は`AC_MSG_FAILURE'で報告します．

クロスコンパイルで実行時のテストが不可能な時は，使用する悲観的なデフォル
ト値を提供してみてください．オプションの最後の引数を`AC_RUN_IFELSE'
に渡すことでこうします．`autoconf'は，
ACTION-IF-CROSS-COMPILING引数無しで`AC_RUN_IFELSE'を呼び出す
ごとに，`configure'を生成するときに警告メッセージを出力します．
警告を無視してもかまいませんが，ユーザはクロスコンパイルでパッケージのコ
ンフィグレーションが不可能になります．Autoconfで配布されるマクロには，こ
の警告メッセージを生成するものもあります．

クロスコンパイルでコンフィグレーションするため，これらのパラメータの値を
標準的なシステム名を基に選択することも可能です(*note Manual
Configuration::)．または，テスト結果のキャッシュファイルをホストシステム
に対する正しい値で設定してください(*note Caching Results::)．

   Autoconfとともに含まれている他のマクロに埋め込まれている，
`AC_RUN_IFELSE'の呼び出しに対するデフォルトを提供するため，シェル変
数`cross_compiling'が`yes'に設定されているかどうかを調査し，マ
クロ呼び出しの代わりに結果を取得するため，代わりの手法を使用してください．


File: autoconf-ja.info,  Node: Systemology,  Next: Multiple Cases,  Prev: Run Time,  Up: Writing Tests

システム
========

このセクションは，ドキュメントへのシステムとポインタを紹介することを目的
としています．ユーザが報告する特定の問題を解決するとき役に立つでしょう．

   Rosetta Stone for Unix(1)には，様々な
Unixの興味深い相互的な情報が大量にあります．

Darwin
     DarwinはMac OS
     Xとしても知られています．ファイルシステムで大文字小文字の
     違いを保存することが_可能_ですが，大文字小文字の区別をしないことに
     注意してください．例えば，`INSTALL'ファイルがあるパッケージでインス
     トールを試みるとき，`make install'で「何もすることが無い！」のよう
     な結果が得られ，これは厄介な問題になります．

     それは，ファイルシステムがUFS(大文字小文字を区別する)かHFS+(大文字小文字
     の違いを保存する)かに依存します．デフォルトで，AppleはHFS+にOSをインストー
     ルして欲しがっています．残念ながら，本当にUFSでビルドする必要があるソフ
     トウェアもあります．DarwinをUFSとHFS+の両方で利用可能なように再構築して
     (そして/local/buildのツリーに配置して)欲しいと思います．

QNX 4.25
     QNXは，小さな組み込みシステムから百個のプロセッサを持つスーパー
     コンピュータまで幅広く利用できる，Intelアーキテクチャでまで動作するリア
     ルタイムオペレーティングシステムです．それはPOSIXであることが
     証明されていると主張しています．QNX home page(2)
     で，より多くの情報が利用可能で，そこには， QNX man
     pages(3)もあります．

Tru64
     documentation of several versions of
     Tru64(4)では，様々な書式が利用可能で す．

Unix version 7
     V7 Manual(5)でドキュ メントが利用可能です．

   ---------- Footnotes ----------

   (1) Rosetta Stone for Unix, <http://bhami.com/rosetta.html>.

   (2) QNX home page, <www.qnx.com>.

   (3) QNX man pages, <http://support.qnx.com/support/docs/qnx4/>.

   (4) documentation of several versions of Tru64,
<http://www.tru64unix.compaq.com/docs/base_doc/DOCUMENTATION/>.

   (5) V7 Manual, <http://plan9.bell-labs.com/7thEdMan/index.html>.


File: autoconf-ja.info,  Node: Multiple Cases,  Prev: Systemology,  Up: Writing Tests

複数のケース文
==============

   処理によっては，それぞれ異なるUNIXに依存して，考えられるいくつかの
方法で達成されるものもあります．それを本質的に調査するためには，"case
文"が必要です．Autoconfは直接それを提供していません．しかし，実行する処
理が見つかったかどうかの追跡を続けるため，シェル変数を使用することで簡単
にシミュレート可能です．

残っているcaseを調査する必要があるかどうかに関係なく追跡を続けるために，
シェル変数`fstype'を使用する例は，以下のようになります．

     AC_MSG_CHECKING([how to get file system type])
     fstype=no
     # The order of these tests is important.
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/statvfs.h>
     #include <sys/fstyp.h>]])],
                       [AC_DEFINE(FSTYPE_STATVFS) fstype=SVR4])
     if test $fstype = no; then
       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/statfs.h>
     #include <sys/fstyp.h>]])],
                       [AC_DEFINE(FSTYPE_USG_STATFS) fstype=SVR3])
     fi
     if test $fstype = no; then
       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/statfs.h>
     #include <sys/vmount.h>]])]),
                       [AC_DEFINE(FSTYPE_AIX_STATFS) fstype=AIX])
     fi
     # (more cases omitted here)
     AC_MSG_RESULT([$fstype])


File: autoconf-ja.info,  Node: Results,  Next: Programming in M4,  Prev: Writing Tests,  Up: Top

テストの結果
************

   一度`configure'で特徴の存在を定義すると，その情報を記録するため
に何ができるのでしょうか？そうする方法は四種類あります．Cプリプロセッサ
シンボルの定義，出力ファイルで変数を設定，`configure'実行時のキャッ
シュファイルに結果を保存，そして，テスト結果をユーザに知らせるメッセージ
の出力です．

* Menu:

* Defining Symbols::            Defining C preprocessor symbols
* Setting Output Variables::    Replacing variables in output files
* Caching Results::             Speeding up subsequent `configure' runs
* Printing Messages::           Notifying `configure' users


File: autoconf-ja.info,  Node: Defining Symbols,  Next: Setting Output Variables,  Up: Results

Cプリプロセッサシンボルの定義
=============================

特徴テストからの応答を受けとる通常の動作は，テストの結果を示すCプリプロ
セッサシンボルを定義することです．それは`AC_DEFINE'や
`AC_DEFINE_UNQUOTED'と呼ばれるもので行います．

   デフォルトで，`AC_OUTPUT'はマクロが定義したシンボルを，出力変数
`DEFS'に配置し，それはそれぞれのシンボルに対する
`-DSYMBOL=VALUE'を含んでいます．Autoconfバージョン1
と異なり，`configure'が実行中に定義する変数`DEFS'はありませ
ん．Autoconfマクロが，あるCプリプロセッサシンボルを既に定義しているかど
うか調査するため，以下の例のように，適切なキャッシュ変数の値をテストして
ください．

     AC_CHECK_FUNC(vprintf, [AC_DEFINE(HAVE_VPRINTF)])
     if test "$ac_cv_func_vprintf" != yes; then
       AC_CHECK_FUNC(_doprnt, [AC_DEFINE(HAVE_DOPRNT)])
     fi

   `AC_CONFIG_HEADERS'が呼び出された場合，`DEFS'を作成する代わり
に，`AC_OUTPUT'でテンプレートファイルに`#define'文で正しい値を
代入したヘッダファイルを作成します．この種類の出力の詳細は， *Note
Configuration Headers::.

 - マクロ: AC_DEFINE (VARIABLE, VALUE, [DESCRIPTION])
 - マクロ: AC_DEFINE (VARIABLE)
     Cプリプロセッサ変数VARIABLEをVALUEに(そのまま)定義します．
     VALUEは改行のリテラルを含むべきではなく， `AC_CONFIG_HEADERS'
     を使用しない場合，`make'が処理してしまうので，`#'文字を含め
     るべきではありません．シェル変数(M4の引用符文字`['や`]'を含む
     定義値が必要なもの)を使用するために，代わりに`AC_DEFINE_UNQUOTED'を
     使用してください．DESCRIPTIONは， `AC_CONFIG_HEADER'を使用す
     る場合だけ役に立ちます．この場合， DESCRIPTIONは，生成された
     `config.h.in'に，マクロ定義前のコメントとして書き込まれます．以下の
     例は，Cプリプロセッサ変数`EQUATION' を文字定数`"$a > $b"'と定
     義します．

          AC_DEFINE(EQUATION, "$a > $b")

     VALUEもDESCRIPTIONも与えられていない場合，VALUEのデフォ
     ルトは空の文字列ではなく1になります．これは古いバージョンのAutoconfの下
     位互換性のためですが，この使用方法は時代遅れで，Autoconfの将来のバージョ
     ンでは無くなるかもしれません．

 - マクロ: AC_DEFINE_UNQUOTED (VARIABLE, VALUE, [DESCRIPTION])
 - マクロ: AC_DEFINE_UNQUOTED (VARIABLE)
     `AC_DEFINE'に似ていますが，VARIABLEとVALUEで，三つのシェ ル展開が
     -- 一度に -- 実行されます．変数の展開(`$')，コマンドの置
     換(``')，そしてバックスラッシュエスケープ(`\')です．値の中のシ
     ングルクオートとダブルクオートの文字列，特別な意味を持ちません．
     VARIABLEや VALUEがシェル変数のときは，`AC_DEFINE'の代わ
     りにこのマクロを使用してください．以下がその例です．

          AC_DEFINE_UNQUOTED(config_machfile, "$machfile")
          AC_DEFINE_UNQUOTED(GETGROUPS_T, $ac_cv_type_getgroups)
          AC_DEFINE_UNQUOTED($ac_tr_hdr)

Bourneシェルの構文の特異性のため，他のマクロから呼び出しやシェルコードと
`AC_DEFINE'や`AC_DEFINE_UNQUOTED'を分けるために，セミコロンを
使用しないでください．そうすると，`configure'スクリプトの結果と
して構文エラーの原因となります．以下のようにします．

     AC_CHECK_HEADER(elf.h, [AC_DEFINE(SVR4) LIBS="$LIBS -lelf"])

あるいは以下のようにします．

     AC_CHECK_HEADER(elf.h,
      [AC_DEFINE(SVR4)
       LIBS="$LIBS -lelf"])

それらは以下の代わりのものです．

     AC_CHECK_HEADER(elf.h, [AC_DEFINE(SVR4); LIBS="$LIBS -lelf"])


File: autoconf-ja.info,  Node: Setting Output Variables,  Next: Caching Results,  Prev: Defining Symbols,  Up: Results

出力変数の設定
==============

   テストの結果を記録するもう一つの方法は，"出力変数(output variables)"
を設定することで，それは，`configure'が出力したファイルの中に，
シェル変数の値を代入することです．以下の二つのマクロで新しい出力変数を作
ります．利用可能な出力変数のリストは，*Note Preset Output Variables::.

 - マクロ: AC_SUBST (VARIABLE, [VALUE])
     シェル変数から出力変数を作成します．`AC_OUTPUT'は，出力ファイルの変
     数VARIABLEに代入します(通常，一つ以上の`Makefile'です)．これ
     は，`AC_OUTPUT'が呼び出されたとき，入力ファイルの
     `@VARIABLE@'のインスタンスをシェル変数VARIABLEが持つ
     値で`AC_OUTPUT'が置換することを意味します．VARIABLEのこの値は
     改行のリテラルを含むべきではありません．

     VALUEが与えられている場合，さらにそれもVARIABLEに渡されます．

 - マクロ: AC_SUBST_FILE (VARIABLE)
     シェル変数から出力ファイルを作成するもう一つの方法です．`AC_OUTPUT'
     で，シェル変数VARIABLEで名付けられたファイルの内容を出力ファイルに
     挿入します(代入ではありません)．これは，`AC_OUTPUT'が呼び出されたと
     き，シェル変数VARIABLEの名前のファイルの内容で，
     (`Makefile.in')のような出力ファイルの`@VARIABLE@'のイ
     ンスタンスを，`AC_OUTPUT'が置換することを意味します．挿入するファイ
     ルがない場合には，変数`/dev/null' に設定します．

     このマクロは，`Makefile'に特別な依存を含むフラグを挿入したり，特定
     のホストやターゲットのための`make'ディレクティブを`Makefile'に
     挿入するとき役に立ちます．例えば，`configure.ac'
     に以下を含ませます．

          AC_SUBST_FILE(host_frag)
          host_frag=$srcdir/conf/sun4.mh

     そして`Makefile.in'に以下を含ませます．

          @host_frag@

   異なる環境変数で`configure'を実行することは非常に危険です．例え
ば，ユーザが`CC=bizarre-cc ./configure'を実行した場合，キャッシュ，
`config.h'，そして多くの出力ファイルは，Cコンパイラが
`bizarre-cc'だということに依存します．理由があって，ユーザが再び
`./configure'を実行した場合や，`./config.status --recheck'
でそれが実行される場合(*Note Automatic Remaking::.  *note config.status
Invocation::)，コンフィグレーションは矛盾し，二つの異なるコンパイラに依存
した結果で構成されます．

   上記の`CC'のように，この状況に影響する環境変数は"貴重な変数
(precious variables)"と命名されていて，`AC_ARG_VAR'のようなもので宣
言することが可能です．

 - マクロ: AC_ARG_VAR (VARIABLE, DESCRIPTION)
     VARIABLEを貴重な変数として宣言し，`./configure --help'の可変
     部分にそのDESCRIPTIONを含めます．

     貴重とは，以下のことを意味します．
        - VARIABLEが`AC_SUBST'されていること．

        - `configure'が開始されたとき，VARIABLEの値は，コマンドライ
          ンで指定されておらず環境変数で指定されている場合も含めて，キャッシュに保
          存されません．実際，`configure'は`./configure
          CC=bizarre-cc'の`CC'の定義に注目できますが，`CC=bizarre-cc
          ./configure'のものには注意できません．そして，残念ながらほとんどのユーザ
          がそうしています．

          それは，保存されるVARIABLEの_初期_値ですが，
          `configure'の実行中は見つからないことを強調しておきます．実際，
          `./configure FOO=foo'と指定することと，`./configure'に
          `FOO'が`foo'だと分からせることは，かなり違った結果になるはずで
          す．

        - VARIABLEは二回の`configure'の実行の間の整合性を調査されま
          す．例えば，以下のようにします．

               $ ./configure --silent --config-cache
               $ CC=cc ./configure --silent --config-cache
               configure: error: `CC' was not set in the previous run
               configure: error: changes in the environment can compromise \
               the build
               configure: error: run `make distclean' and/or \
               `rm config.cache' and start over

          そして，それは変数を未設定にする場合や，その内容が変更される場合も似たよ
          うなものです．

        -
          VARIABLEは，自動的な再コンフィグレーションの間，コマンド引数として
          渡されているかのように保存され，キャッシュを使用していないときもそうなり
          ます．

               $ CC=/usr/bin/cc ./configure undeclared_var=raboof --silent
               $ ./config.status --recheck
               running /bin/sh ./configure undeclared_var=raboof --silent \
                 CC=/usr/bin/cc  --no-create --no-recursion


File: autoconf-ja.info,  Node: Caching Results,  Next: Printing Messages,  Prev: Setting Output Variables,  Up: Results

結果のキャッシュ
================

   様々な`configure'スクリプトで，同じ特徴を繰り返し調査する(あるい
は何度も一つのスクリプトを実行する)ことを避けるため，`configure'
は，多くの調査結果を"キャッシュファイル(cache file)"に保存します (*note
Cache Files::)．キャッシュ可能な状態で`configure' スクリ
プトを実行していてキャッシュファイルが見つかった場合，前回の実行結果を
キャッシュから読み込み，これらの調査の再実行を避けます．結果として，
`configure'は，毎回全ての調査を実行するより早くなります．

 - マクロ: AC_CACHE_VAL (CACHE-ID, COMMANDS-TO-SET-IT)
     CACHE-IDで識別した調査結果が，利用可能だということを保証します．調
     査結果が読み込まれたキャッシュファイルにあり，`configure'に，
     `--quiet'や`--silent'オプションが与えられていない場合，結果が
     キャッシュされていることを示すメッセージを出力します．それ以外では，シェ
     ルコマンドCOMMANDS-TO-SET-ITを実行します．シェルコマンドを値を決定
     するために実行する場合，`configure'が出力ファイルを作成する直前
     に，値をキャッシュファイルに保存します．CACHE-ID変数の名前を選択す
     る方法は，*Note Cache Variable Names::.

     COMMANDS-TO-SET-ITは，設定された変数CACHE-ID以外に_副作
     用がないはずです_．以下を参照してください．

 - マクロ: AC_CACHE_CHECK (MESSAGE, CACHE-ID, COMMANDS-TO-SET-IT)
     メッセージ出力に注意が必要な`AC_CACHE_VAL'のラッパーです．このマク
     ロは，これらのマクロを使用する最も一般的な方法に対して，便利な略記法を提
     供します．それは，MESSAGEに対して`AC_MSG_CHECKING'を呼び出し，
     その後で，CACHE-IDとCOMMANDS引数を伴う`AC_CACHE_VAL'と，
     CACHE-IDを伴う`AC_MSG_RESULT'を呼び出します．

     COMMANDS-TO-SET-ITは，設定された変数CACHE-ID以外に_副作
     用がないはずです_．以下を参照してください．

   COMMANDS-TO-SET-ITで`AC_DEFINE'の呼び出しを試みるため，
`AC_CACHE_VAL'や`AC_CACHE_CHECK'を使用しているバグの多いマクロ
を発見することはよくあります．その代わりに，`AC_CACHE_VAL'を呼び出
している_以下の_ようなコードでは，キャッシュ変数の値を調べることで，
`AC_DEFINE'を呼び出すべきです．例えば，以下のマクロは駄目です．

     AC_DEFUN([AC_SHELL_TRUE],
     [AC_CACHE_CHECK([whether true(1) works], [ac_cv_shell_true_works],
                     [ac_cv_shell_true_works=no
                      true && ac_cv_shell_true_works=yes
                      if test $ac_cv_shell_true_works = yes; then
                        AC_DEFINE([TRUE_WORKS], 1
                                  [Define if `true(1)' works properly.])
                      fi])
     ])

これは，キャッシュが利用可能な場合，失敗します．このマクロの二回目の実行
で，`TRUE_WORKS'は_定義されていないでしょう_．適切な実装は以下
のようになります．

     AC_DEFUN([AC_SHELL_TRUE],
     [AC_CACHE_CHECK([whether true(1) works], [ac_cv_shell_true_works],
                     [ac_cv_shell_true_works=no
                      true && ac_cv_shell_true_works=yes])
      if test $ac_cv_shell_true_works = yes; then
        AC_DEFINE([TRUE_WORKS], 1
                  [Define if `true(1)' works properly.])
      fi
     ])

   また，COMMANDS-TO-SET-ITでは，例えば`AC_MSG_CHECKING'を用いて
メッセージを出力すべきではありません．調査の結果がキャッシュから取り出さ
れるか，シェルコマンドの実行で決定されるかに依存せずメッセージが出力され
るので，`AC_CACHE_VAL'の呼び出しの前にしてください．

* Menu:

* Cache Variable Names::        Shell variables used in caches
* Cache Files::                 Files `configure' uses for caching
* Cache Checkpointing::         Loading and saving the cache file


File: autoconf-ja.info,  Node: Cache Variable Names,  Next: Cache Files,  Up: Caching Results

キャッシュ変数名
----------------

   キャッシュ変数の名前は以下の書式にすべきです．

     PACKAGE-PREFIX_cv_VALUE-TYPE_SPECIFIC-VALUE_[ADDITIONAL-OPTIONS]

例えば，`ac_cv_header_stat_broken'や
`ac_cv_prog_gcc_traditional'です．変数名の一部は以下のようにします．

PACKAGE-PREFIX
     パッケージや組織の省略です．小文字の慣習以外は，ローカルなAutoconfマクロ
     と同じプレフィクスで開始します．配布されているAutoconfマクロで使用される
     キャッシュ値に対して，この値は`ac'になっています．

`_cv_'
     シェル変数がキャッシュ値であることを示します．この文字列は，前置されるア
     ンダースコアを含め，変数名に存在する_必要があります_．

VALUE-TYPE
     合理的な命名システムを生成するため，キャッシュ値の分類のための慣習です．
     Autoconfで使用する値は，*Note Macro Names::にリストがあります．

SPECIFIC-VALUE
     このテストが適応しているキャッシュ値のクラスのメンバーです．例えば，関数
     (`alloca')，プログラム(`gcc')，または，出力変数 (`INSTALL')です．

ADDITIONAL-OPTIONS
     このテストが適応している特定のメンバーの特定の動作です．例えば，
     `broken'や`set'です．適応されない場合，名前のこの部分は省略さ
     れます．

キャッシュ変数に割り当てられた値には，改行を含めてはなりません．通常，そ
れらの値は真偽値(`yes'や`no')，あるいはファイルや関数の名前で
す．そのため，これは重要な制限ではありません．


File: autoconf-ja.info,  Node: Cache Files,  Next: Cache Checkpointing,  Prev: Cache Variable Names,  Up: Caching Results

キャッシュファイル
------------------

キャッシュファイルは，コンフィグレーションスクリプトとコンフィグレーショ
ンの実行の間で結果を共有できるように，一つのシステムでコンフィグレーショ
ンテストの結果をキャッシュしているシェルスクリプトです．他のシステムでは
役に立ちません．その内容が，何らかの理由で無効な場合，ユーザは削除したり
編集したりしてもかまいません．

デフォルトでは，古いキャッシュファイルの使用で偶然生じる問題を避けるため，
`configure'はキャッシュファイルを使用しません(技術的には，
`--cache-file=/dev/null'を使用します)．

   キャッシュを利用可能にするために，`configure'は結果をファイル
`config.cache'にキャッシュする`--config-cache'(または，
`-C')を受け入れます．代わり方法として，
`--cache-file=FILE'でFILEキャッシュファイルにを指定し
ます．`configure'がサブディレクトリの`configure'スクリプ
トを呼び出すとき，同じキャッシュファイルを共有するように，
`--cache-file'引数を使用します．`AC_CONFIG_SUBDIRS'マクロを
用いてサブディレクトリでコンフィグレーションすることの情報は， *Note
Subdirectories::.

   `config.status'は，`configure'を再実行する
`--recheck'オプションが与えられている場合のみ，キャッシュファイル
に注意を払います．

特定のシステム形式に対してキャッシュファイルを配布しようとすることは間違
いです．そうすることによるエラーに対する機会が非常に多くなり，メンテナン
ス時の管理上のオーバーヘッドが非常に多くなります．自動的に推測できない特
徴に対して，標準的なシステムの形式とリンクファイルの標準的な方法を使用し
てください (*note Manual Configuration::)．

サイトの初期化スクリプトで，通常のプログラムごとのキャッシュの代わりに，
使用するサイト全体のキャッシュファイルを指定することが可能になります．こ
の場合，キャッシュファイルは，新しい`configure'スクリプトを実行
する度に，情報がどんどん蓄積されていきます．(`configure'を実行す
ると，既存のキャッシュファイルを用いて新しい結果をマージします．)
しかし，
システムのコンフィグレーションが(例えば，ライブラリやコンパイラをインス
トールされて)変化し，古いキャッシュファイルが削除されない場合，これは問
題になるかもしれません．


File: autoconf-ja.info,  Node: Cache Checkpointing,  Prev: Cache Files,  Up: Caching Results

キャッシュのチェックポイント方法
--------------------------------

   `configure'スクリプトや`configure.ac'から呼び出されるマクロ
がコンフィグレーション処理を中断する場合，二，三回`AC_CACHE_SAVE'を
使用して，キーポイントでキャッシュのチェックポイントにすることが役に立ち
ます．そうすると，(おそらく)前に異常終了を引き起こしたエラーを修正するこ
とで，`configure'スクリプトを再実行する時間が大幅に削減されます．

 - マクロ: AC_CACHE_LOAD
     既存のキャッシュファイルから値をロードしたり，キャッシュファイルがない場
     合は新しいキャッシュファイルを作成したりします．自動的に`AC_INIT'か
     ら呼び出されます．

 - マクロ: AC_CACHE_SAVE
     キャッシュファイルに全てのキャッシュ値を書き込みます．自動的に
     `AC_OUTPUT'から呼び出されますが，`configure.ac'のキーポイント
     で`AC_CACHE_SAVE'を呼び出すことは，大変役に立つはずです．

   例えば，以下のようにします．

      ... AC_INIT, etc. ...
     # Checks for programs.
     AC_PROG_CC
     AC_PROG_GCC_TRADITIONAL
      ... more program checks ...
     AC_CACHE_SAVE
     
     # Checks for libraries.
     AC_CHECK_LIB(nsl, gethostbyname)
     AC_CHECK_LIB(socket, connect)
      ... more lib checks ...
     AC_CACHE_SAVE
     
     # Might abort...
     AM_PATH_GTK(1.0.2,, [AC_MSG_ERROR([GTK not in path])])
     AM_PATH_GTKMM(0.9.5,, [AC_MSG_ERROR([GTK not in path])])
      ... AC_OUTPUT, etc. ...


File: autoconf-ja.info,  Node: Printing Messages,  Prev: Caching Results,  Up: Results

メッセージの出力
================

   `configure'スクリプトは，それらを実行しているユーザに，何種類か
の情報を与える必要があります．以下のマクロは，それぞれの種類に対して適切
な方法でメッセージを出力します．全ての引数は，シェルのダブルクオートで囲
まれているので，シェルは変数とバッククオートの代入を実行します．

   これらのマクロは，`echo'シェルコマンドを全てラップします．
`configure'スクリプトは，ユーザに対してメッセージを出力するため，
直接`echo'を実行する必要は滅多にありません．これらのマクロを使用す
ると，出力されるそれぞれのメッセージの種類を，いつでもどのようにでも簡単
に変更できます．そのような変更にはマクロ定義の変更だけが必要で，呼び出し
側は自動的に変更されます．

   静的な問題を診断するため，例えば`autoconf'が実行されるときは， *Note
Reporting Messages::を参照してください．

 - マクロ: AC_MSG_CHECKING (FEATURE-DESCRIPTION)
     `configure'が調査している特徴を，ユーザに通知します．このマクロ
     は`checking 'で始まり`...'で終る，改行無しのメッセージを出力し
     ます．調査の結果と改行のため，`AC_MSG_RESULT'を続けて呼び出す必要が
     あります．FEATURE-DESCRIPTIONは`FortranコンパイラがC++のコメ
     ントを受け入れるかどうか(whether the Fortran compiler accepts C++
     comments)'や`c89の調査(for c89)'のようなものです．

     `configure'が`--quiet'や`--silent'オプションを用いて実
     行されている場合，このマクロは何も出力しません．

 - マクロ: AC_MSG_RESULT (RESULT-DESCRIPTION)
     調査結果をユーザに通知します．RESULT-DESCRIPTIONは，ほとんどいつも
     調査に対するキャッシュ変数の値で，普通は`yes'，`no'，またはファ
     イル名になります．このマクロは`AC_MSG_CHECKING'の呼び出しに続けるべ
     きで，RESULT-DESCRIPTIONは，`AC_MSG_CHECKING'の呼び出しで出力
     されるメッセージを完成するものにするべきです．

     `configure'が`--quiet'や`--silent'オプションで実行され
     る場合，このマクロは何も出力しません．

 - マクロ: AC_MSG_NOTICE (MESSAGE)
     MESSAGEをユーザに伝えます．特徴を調査しているグループ全体の特徴に
     ついて，例えば以下のような，一般的な記述を出力するときに主に役に立ちます．

          AC_MSG_NOTICE([checking if stack overflow is detectable])

     `configure'が`--quiet'や`--silent'オプションで実行され
     る場合，このマクロは何も出力しません．

 - マクロ: AC_MSG_ERROR (ERROR-DESCRIPTION, [EXIT-STATUS])
     `configure'の完了を妨げるエラーをユーザに通知します．このマクロ
     は，エラーメッセージを標準エラー出力に出力し，`configure'は
     EXIT-STATUS(デフォルトは1)で終了します．ERROR-DESCRIPTION は
     `\$HOMEに対し$HOMEは無効な値です(invalid value $HOME for \$HOME)'の
     ようにすべきです．

     ERROR-DESCRIPTIONは小文字で開始すべきで，"can't"より"cannot"
     のほうが好ましいでしょう．

 - マクロ: AC_MSG_FAILURE (ERROR-DESCRIPTION, [EXIT-STATUS])
     これは，`AC_MSG_ERROR'のラッパーで，`configure'が終了するの
     を妨げるエラーをユーザに告知し，_そして_詳細を`config.log' に
     追加します．これは通常，コンパイル時に異常な結果が見つかったときに使用さ
     れます．

 - マクロ: AC_MSG_WARN (PROBLEM-DESCRIPTION)
     可能性のある問題を`configure'を実行しているユーザに通知します．
     このマクロは，標準エラー出力にメッセージを出力します．
     `configure'はその後も実行を続けるので，`AC_MSG_WARN'を呼び
     出すマクロでは，警告するような状態に対してデフォルト(バックアップ)の動作
     を提供すべきです． PROBLEM-DESCRIPTIONは`ln -s はハードリンク
     されます(ln -s seems to make hard links)'のようなものにすべきです．


File: autoconf-ja.info,  Node: Programming in M4,  Next: Writing Autoconf Macros,  Prev: Results,  Up: Top

M4でのプログラミング
********************

Autoconfは，二つのレイヤーのトップに書かれています．それは，純粋なM4プロ
グラムで便利なマクロを提供している"M4sugar"と，シェルスクリプトの生
成に専念するマクロを提供する"M4sh"です．

このバージョンのAutoconfでは，二つのレイヤーはまだ実験段階で，そのインター
フェースは将来変更される可能性があります．実際問題，_文章化されてい
ないものは使用しないでください_．

* Menu:

* M4 Quotation::                Protecting macros from unwanted expansion
* Using autom4te::              The Autoconf executables backbone
* Programming in M4sugar::      Convenient pure M4 macros
* Programming in M4sh::         Common shell Constructs


File: autoconf-ja.info,  Node: M4 Quotation,  Next: Using autom4te,  Up: Programming in M4

M4の引用符
==========

既存のマクロの最も一般的な問題は，不適当な引用符です．このセクションでは，
Autoconfのユーザは飛ばすことができますが，マクロを書く人は読む_必要
があり_，最初にAutoconfで採択された引用符を利用する方法を正当化し，最後
に経験則を述べます．前者を理解すると後者で役立ちます．

* Menu:

* Active Characters::           Characters that change the behavior of M4
* One Macro Call::              Quotation and one macro call
* Quotation and Nested Macros::  Macros calling macros
* Changequote is Evil::         Worse than INTERCAL: M4 + changequote
* Quadrigraphs::                Another way to escape special characters
* Quotation Rule Of Thumb::     One parenthesis, one quote


File: autoconf-ja.info,  Node: Active Characters,  Next: One Macro Call,  Up: M4 Quotation

アクティブな文字
----------------

適切な引用符の重要性を完全に理解するため，最初にAutoconfでの特殊な文字が
何かを知る必要があります．`#'はマクロ展開が実行されない内部コメント
の導入で，`,'は引数のセパレータ，`['と`]'はそれらの引用符，
そして最後は，(M4が対の一致を試みる)`('と`)'です．

マクロ呼び出しの微妙な状況を理解するために，最初に明らかな失敗を紹介しな
ければならないでしょう．以下で"明確にされ"ていて，実生活でも見つかるで
しょうが，それらは通常ごまかしです．

ハッシュと改行まで実行することで導入されるコメントは，トップレベルへの不
明瞭なトークンです．アクティブな文字はそうではなくなり，マクロの展開もあ
りません．

     # define([def], ine)
     =># define([def], ine)

マクロの展開があるごとに，引用符も展開されます．すなわち，第一レベルの引
用符は削除されます．

     int tab[10];
     =>int tab10;
     [int tab[10];]
     =>int tab[10];

   これを覚えていなければ，読者は絶望しながらもマクロの`array'を使用し
てみるでしょう．

     define([array], [int tab[10];])
     array
     =>int tab10;
     [array]
     =>array

期待する結果を正しく出力するにはどうすれば良いでしょうか (1)？

   ---------- Footnotes ----------

   (1) `defn'を使用します．


File: autoconf-ja.info,  Node: One Macro Call,  Next: Quotation and Nested Macros,  Prev: Active Characters,  Up: M4 Quotation

一つのマクロの呼び出し
----------------------

さて，アクティブな文字と以下の単に最初の引数を返す小さなマクロを用いたマ
クロで，対話的に進めていきましょう．

     define([car], [$1])

上記の二組の引用符は`define'の引数の一部ではありません．そうではな
く，`define'の引数の検索が試みられるときに，それらはトップレベルで
理解されます．そのため，それは以下のように書くことと等価です．

     define(car, $1)

しかし，`configure.ac'が不必要な引用符を避けることは受け入れてもか
まいませんが，より強固で，完全な形式を提案する必要もあるAutoconfマクロに
とっては悪い慣習です．

トップレベルでは，二つの可能性があります．引用符で囲む，または囲まないで
の二つです．

     car(foo, bar, baz)
     =>foo
     [car(foo, bar, baz)]
     =>car(foo, bar, baz)

   特殊文字に注目してみましょう．

     car(#)
     error-->EOF in argument list

閉じカッコはコメント内に隠れてしまいます．引用符を推測することで，トップ
レベルでは以下のように理解します．

     car([#)]

適切な引用符は，もちろんこの問題を修正します．

     car([#])
     =>#

   読者は，以下の例の方が理解しやすいかもしれません．

     car(foo, bar)
     =>foo
     car([foo, bar])
     =>foo, bar
     car((foo, bar))
     =>(foo, bar)
     car([(foo], [bar)])
     =>(foo
     car([], [])
     =>
     car([[]], [[]])
     =>[]

これを覚えていると，マクロがマクロを呼び出し，マクロがマクロを呼び出し
...となっているような状況も調査することが可能です．


File: autoconf-ja.info,  Node: Quotation and Nested Macros,  Next: Changequote is Evil,  Prev: One Macro Call,  Up: M4 Quotation

引用符と入れ子状のマクロ
------------------------

   これ以降の例では，以下のマクロを使用しています．

     define([car], [$1])
     define([active], [ACT, IVE])
     define([array], [int tab[10]])

追加の埋め込まれたマクロ呼び出しは，それぞれ興味深い引用符について，その
他の可能性を導き出します．

     car(active)
     =>ACT
     car([active])
     =>ACT, IVE
     car([[active]])
     =>active

   最初の状況では，トップレベルでは`car'の引数を探し，`active' が
見つかります．M4はマクロを適用する前のその引数と等価なので，
`active'は展開され，結果として以下のようになります．

     car(ACT, IVE)
     =>ACT

二番目の状況では，トップレベルは`car'の最初で唯一の引数として
`active'を与えるので，結果として以下のようになります．

     active
     =>ACT, IVE

すなわち，マクロが呼び出された_後で_，引数が評価されます．三番目の
状況では，`car'は`[active]'を受けとり，結果として以下のように なります．

     [active]
     =>active

上記で見たものと同じですね．

   より現実的な例を適用して，上記の例に与えてみましょう．

     car(int tab[10];)
     =>int tab10;
     car([int tab[10];])
     =>int tab10;
     car([[int tab[10];]])
     =>int tab[10];

う〜ん？ 最初の状況は簡単に理解できますが，なぜ二番目が間違っていて，三
番目は正しいのでしょうか？それを理解するために，M4がマクロを展開した後，
結果として生じるテキストがすぐにマクロを展開に従って引用符が取り除かれる
ことを知っておく必要があります．これは，引用符の削除が二回行なわれること
を意味します -- 最初に引数として`car'マクロに渡されるとき，二回目
は`car'マクロが最初の引数を展開するときです．

   Autoconfマクロ`car'の作者として，ユーザが`car'の引数を二重の引
用符にする必要があることは間違っていると考えるようにし，マクロを_修
正_してください．引用符で囲まれている`car'に対して，それを
`qar'と呼ぶことにしましょう．

     define([qar], [[$1]])

そして，`qar'が適切に修正されていることを調査してみます．

     qar([int tab[10];])
     =>int tab[10];

あぁ！そうした方が良さそうですね．

しかし，自分が行なったことに注意してください．現在その引数はリテラル文字
列ですが，引数を展開した結果をユーザが使用したい場合，_引用符で囲ま
れていない_マクロを使用する必要があります．

     qar(active)
     =>ACT

`car'を用いて行なっていたことを再生成したい状況を考えます．

     car([active])
     =>ACT, IVE

まだ駄目ですね．`cpp'マクロの組を生成するマクロを使用したい状況を考
えてみましょう．

     define([my_includes], [#include <stdio.h>])
     car([my_includes])
     =>#include <stdio.h>
     qar(my_includes)
     error-->EOF in argument list

   このマクロ`qar'は，引数を二重に引用符で囲むので，ユーザはマクロの呼
び出しを引用符で囲まないままにしておくよう強制されるので，それは危険です．
カンマとその他のアクティブなシンボルは，マクロに渡される前にM4で解釈され，
それはユーザが期待している手法ではないことが多いものです．また，
`qar'は，他のマクロとは異なる動作をするので，Autoconfでは避けるべき
例外になります．


File: autoconf-ja.info,  Node: Changequote is Evil,  Next: Quadrigraphs,  Prev: Quotation and Nested Macros,  Up: M4 Quotation

`changequote'の弊害
-------------------

特に夜も遅くなると，適切な引用符をバイパスする誘惑が大きくなることも多い
ものです．そして，経験豊富なAutoconfのハッカーの多くは，最終的に暗黒の力
に支配され，最終兵器を持ち出します．それは`changequote'です．

   M4組み込みの`changequote'は，言語の構文を必要に応じて調整することを
可能にするプリミティブの組に属しています．例えば，M4では引用符としてデフォ
ルトで``'と`''を使用しますが，シェルプログラムの文脈(そして，
ほとんどの実際のプログラミング言語)では，それは利用可能なものの中での最
悪の選択です．シェルコードでの(`'this''と``that`' のような)文
字列とバッククオートされた式と，通常のプログラミング言語で使用される
(`'0''のような)リテラル文字のため，多くの対にならない``'と
`''が存在します．そのような文脈での厳密なM4の引用符が(変更)不可能な
場合は，悪夢になります．そのような文脈でM4を役立たせるため，それを設計し
た人は別の引用符の組の選択を可能にする`changequote'を装備しました．
M4sugar，M4sh，Autoconf，そしてAutotestでは，すべてのものが`['と
`]'の使用を選択しています．それらが滅多に使用されない文字という理由
だけでなく，_対にならないことも滅多に無い文字という理由もあります_．

構文形式がコメントだということを指定するため(M4がHTMLページを生成するた
めに使用されるとき，`changecom(<!--, -->)'が一般的だと分かるでしょ
う)の`changecom'と，それ以外の構文の詳細を変更するための
`changeword'と`changesyntax'(n番目の引数を示す，デフォルトで
`$'となっている文字や，引数の周りを囲むカッコなど)のような，それ以
外のマジックプリミティブもあります．

これらのプリミティブは，特定の分野に対してM4がより役に立つようにするため，
本当に意味があるものです．それらはコマンドラインオプションのように考える
べきです．それらは，`--quotes'，`--comments'，
`--words'，そして`--syntax'のようなものです．それにもかかわ
らず，M4ライブラリ自身が含まれる(追加のオプションが必要無い)ように，M4の
組み込みとして実装されています．

   そこに問題があります....


問題は，M4スクリプトの途中で，その初期化を目的としてそれを使用するときに
発生します．これは，あまり注意していない場合，甚大な影響があるはずです．
_実行の途中で言語を変更しているようなものです_．構文の変更とそれか
らの復帰が十分でないことが多いものです．その間でマクロの呼び出しを行なっ
た場合，現在の構文はおそらくマクロを実装していないので，これらのマクロは
失われることになります．


File: autoconf-ja.info,  Node: Quadrigraphs,  Next: Quotation Rule Of Thumb,  Prev: Changequote is Evil,  Up: M4 Quotation

四文字表記
----------

Autoconfマクロを書いているとき，標準的なAutoconfの引用符の規則で表現する
ことが難しい，特殊な文字を生成する必要が生じるかもしれません．例えば，
`['以外の全ての文字に一致する正規表現`[^[]'を出力する必要があ
るかもしれません．この表現は，対称ではないカッコを含んでいるので，M4 マ
クロの中に簡単に書き込むことはできません．

   以下の"四文字表記(quadrigraph)"の一つを使用することで，この問題を解
決することが可能です．

`@<:@'
     `['

`@:>@'
     `]'

`@S|@'
     `$'

`@%:@'
     `#'

`@&t@'
     何にも展開されません．

   四文字表記は，`m4'が実行された後，変換処理の終りの段階で置換され
るので，M4の引用符の邪魔になりません．例えば，文字列`[^@<:@]' は，
その引用符で囲まれている状態に依存せず，出力では`[^[]'として現れま す．

   空の四文字表記を使用することも可能です．

   - 明示的に後置されるスペースに印を付けるため

     後置される空白は`autom4te'で壊されます．これは仕様です．

   - その他の四文字表記を生成するため

     例えば，`@<@&t@:@'は`@<:@'を生成します．

   - 禁止されているパターンの_発生_をエスケープするため

     例えば，`AC_FOO'をコメントとして書きたいかもしれませんが，
     `autom4te'は展開されていない`AC_*'を確実に受けとります．そ
     のときは，`AC@&t@_FOO'と書いてください．

   `@&t@'の名前はPaul Eggertの提案です．

     私は，`@&t@'の語呂合わせに称賛を与えるべきでしょう．`&'は私
     自身の発明ですが，`t'はSteve Bourne(Bourneシェルで有名です)によって
     書かれたALGOL68Cコンパイラのソースコードが由来となっていて，そこで
     は空の文字列を示すために`mt'を使用しています．Cでは，それは以下のよ
     うなものになるでしょう．

          char const mt[] = "";

     しかし，ソースコードは当然Algol 68で書かれています．

     彼が`mt'を得た場所を，私は知りません．それは独自の発明かもしれませ
     んし，当時のケンブリッジ大学のコンピュータ研究所で，一般的な語呂合わせだっ
     たのかもしれません．


File: autoconf-ja.info,  Node: Quotation Rule Of Thumb,  Prev: Quadrigraphs,  Up: M4 Quotation

引用符の経験則
--------------

   終りに引用符の経験則を述べます．

                     _カッコの組ごとに引用符の組_
特にマクロ定義では，多過ぎる引用符もだめ，少な過ぎる引用符も駄目です．カッ
コを使用する必要があるマクロ(通常Cのプログラム文や正規表現の中)では，適
切に_引数を_引用符で囲んでください！

   以下のような断片を用いたAutoconfプログラムを読むことはよくあります．

     AC_TRY_LINK(
     changequote(<<, >>)dnl
     <<#include <time.h>
     #ifndef tzname /* For SGI.  */
     extern char *tzname[]; /* RS6000 and others reject char **tzname.  */
     #endif>>,
     changequote([, ])dnl
     [atoi (*tzname);], ac_cv_var_tzname=yes, ac_cv_var_tzname=no)

それは，`AC_TRY_LINK'は_すでに_二重に引用符で囲まれているので，
全く無駄になり，実際は以下のようにするだけで十分です．

     AC_TRY_LINK(
     [#include <time.h>
     #ifndef tzname /* For SGI.  */
     extern char *tzname[]; /* RS6000 and others reject char **tzname.  */
     #endif],
                 [atoi (*tzname);],
                 [ac_cv_var_tzname=yes],
                 [ac_cv_var_tzname=no])

M4に親しんでいる読者は，M4が引数を"まとめる(collect)"ときに
`changequote(<<, >>)'と`<<' `>>'の両方を飲み込むので，こ
れら二つの例が厳密に等価であることに注意してください．これらの引用符は引
数の一部ではありません！

   単純にしてみると，上記の例は以下のようになります．

     changequote(<<, >>)dnl
     <<[]>>
     changequote([, ])dnl

その代わりに単純に以下のようにします．

     [[]]

引数を(規則で)二重に引用符で囲まないマクロを用いると，二重の引用は(危険
な)文字列になります．

     AC_LINK_IFELSE([AC_LANG_PROGRAM(
     [[#include <time.h>
     #ifndef tzname /* For SGI.  */
     extern char *tzname[]; /* RS6000 and others reject char **tzname.  */
     #endif]],
                                     [atoi (*tzname);])],
                    [ac_cv_var_tzname=yes],
                    [ac_cv_var_tzname=no])

引用符が十分でない状況で望みがなくなった場合どうすればいいかということに
ついては，*Note Quadrigraphs::.

   新たに書かれたマクロを用いて`configure'スクリプトを作成するとき，
マクロにより多くの引用符を加える必要があるかどうかの調査は，気を付けて吟
味してください．一つ以上の単語がM4の出力に現れない場合，より多くの引用符
が必要になります．迷ったときは引用符です．

しかし，引用符のレイヤーが多過ぎる可能性もあります．この場合は，結果とし
て得られる`configure'スクリプトは，展開されていないマクロが含ま
れているでしょう．`autoconf'プログラムは，`grep AC_
configure'を行なうことでこの問題を調査します．


File: autoconf-ja.info,  Node: Using autom4te,  Next: Programming in M4sugar,  Prev: M4 Quotation,  Up: Programming in M4

`autom4te'の呼び出し
====================

   Autoconf自身のものに加え，M4sugar，M4sh，そしてAutotestを含めた
Autoconfスイートは，M4にかなり依存しています．使い方が異なるこれらはす
べて，`m4'の上のレイヤーに集約したいという共通の要求を具体化し
ました．それは`autom4te'(1)です.

   `autom4te'は，`m4'のようなプリプロセッサです．それは
Autoconfのようなツールで使用するために設計された，M4の拡張をサポートして
います．

* Menu:

* autom4te Invocation::         A GNU M4 wrapper
* Customizing autom4te::        Customizing the Autoconf package

   ---------- Footnotes ----------

   (1) Lars J. Aasのもう一つの偉大な名前です．


File: autoconf-ja.info,  Node: autom4te Invocation,  Next: Customizing autom4te,  Up: Using autom4te

`autom4te'の呼び出し
--------------------

   コマンドライン引数は，M4のものをモデルにしています．

     autom4te OPTIONS FILES

ここでのFILESは，直接`m4'に渡すものです．正規の展開に加え，
それは四文字表記(*note Quadrigraphs::)と，出力の現在の行の
`__oline__'の置換を処理します．それは，FILESに対して拡張され
た構文もサポートしています．

`FILE.m4f'
     このファイルは，M4を固めたファイルです．_以前のファイルはすべて無視
     されることに_注意してください．正当性については，オプション
     `--melt'を参照してください．

`FILE?'
     ライブラリパスで見つかった場合，FILEは展開に含められ，それ以外では，
     異常終了を発生する代わりに無視されます．


もちろん，それはAutoconfの一般的のオプションのサブセットをサポートしてい
ます．

`--help'
`-h'
     コマンドラインオプションの概要を出力し，終了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力し，終了します．

`--verbose'
`-v'
     処理しているステップを報告します．

`--debug'
`-d'
     一時的なファイルを削除せず，さらに冗長になります．

`--include=DIR'
`-I DIR'
     入力ファイルをDIRでも探します．複数回の呼び出しは累積されます．

`--output=FILE'
`-o FILE'
     (スクリプトやトレースの)出力をFILEに保存します．ファイル`-'
     は標準出力を意味します．


   `m4'の拡張として，それらは以下のオプションが含まれます．

`--warnings=CATEGORY'
`-W CATEGORY'
     (実際にはカンマで分けられたリストになっている)CATEGORYに関連する警
     告を報告します．カテゴリの包括的なリストは，マクロ`AC_DIAGNOSE' の
     *Note Reporting Messages::.  以下の特殊な値が含まれます．

    `all'
          すべての警告を報告します．

    `none'
          何も報告しません．

    `error'
          警告をエラーとして扱います．

    `no-CATEGORY'
          CATEGORYに分類される警告を利用不可能にします．

     `syntax'に関する警告は，デフォルトで利用可能で，カテゴリのカンマで
     分離されたリストの環境変数`WARNINGS'は尊重されます． `autom4te -W
     CATEGORY'は，実際に悪いことを実行したかのよう に動作します．

          autom4te --warnings=syntax,$WARNINGS,CATEGORY

     `autom4te'のデフォルトと`WARNINGS'を利用不可能にしたいけれ
     ども，(例えば)時代遅れの構成物に関する警告は利用可能にしたい場合，
     `-W none,obsolete'を使用するべきでしょう．

     `autom4te'はエラーのバックトレースを表示しますが，警告は表示しま
     せん．警告も表示したい場合，`-W error'を渡してください．例えば以
     下のような`configure.ac'を考えます．

          AC_DEFUN([INNER],
          [AC_RUN_IFELSE([AC_LANG_PROGRAM([exit (0)])])])
          
          AC_DEFUN([OUTER],
          [INNER])
          
          AC_INIT
          OUTER

     以下のようになるでしょう．

          $ autom4te -l autoconf -Wcross
          configure.ac:8: warning: AC_RUN_IFELSE called without default \
          to allow cross compiling
          $ autom4te -l autoconf -Wcross,error -f
          configure.ac:8: error: AC_RUN_IFELSE called without default \
          to allow cross compiling
          acgeneral.m4:3044: AC_RUN_IFELSE is expanded from...
          configure.ac:2: INNER is expanded from...
          configure.ac:5: OUTER is expanded from...
          configure.ac:8: the top level

`--melt'
`-m'
     固められたファイルを使用しません．すべての引数`FILE.m4f'は
     `FILE.m4'で置換されます．これは，ファイルが固められているとき
     だけに実行されるマクロ，通常は`m4_define'の追跡で役に立ちます．例え
     ば以下のように実行します．

          autom4te --melt 1.m4 2.m4f 3.m4 4.m4f input.m4

     これは以下を実行したのと等価です．

          m4 1.m4 2.m4 3.m4 4.m4 input.m4

     一方，以下を実行した場合を考えます．

          autom4te 1.m4 2.m4f 3.m4 4.m4f input.m4

     これは以下と等価です．

          m4 --reload-state=4.m4f input.m4

`--freeze'
`-f'
     固まった状態のファイルを生成します．`autom4te'の固め方は，M4より
     厳密です．警告を生成させたり，空の行(空白行は空の行では_ありません_)
     とコメント(`#'で始まります)以外の出力を生成してはいけません．
     `m4'とは異なり，このオプションは以下のように引数をとらないことに
     注意してください．

          autom4te 1.m4 2.m4 3.m4 --freeze --output=3.m4f

     これは以下に対応します．

          m4 1.m4 2.m4 3.m4 --freeze-state=3.m4f

`--mode=OCTAL-MODE'
`-m OCTAL-MODE'
     OCTAL-MODEにトレース出力以外のモードを設定します．デフォルトは
     `0666'です．


   それ以外の`m4'上の追加機能として，`autom4te'がその結果を
キャッシュするというものがあります．GNU M4は，標準出力を生成す
ると同時にトレースすることが可能です．トレースはGNUビルドシス
テムで重点的に使用されています．`autoheader'は，
`config.h.in'をビルドするために，`autoreconf'は，使用されて
いるGNUビルドシステムの構成要素を決定するために，
`automake'は`configure.ac'をパースするため等として使用して
います．`m4'の長い実行結果を保存するために，通常の展開を実行して
いる間，トレースはキャッシュされます(1)．このキャッシュ(実際には複数あ
る) は，ディレクトリ`autom4te.cache'に保存されます．いつでも
_削除して大丈夫です_(特に，理由があれば`autom4te'はそれが捨
てられてしまったと考えます)．

`--cache=DIRECTORY'
`-C DIRECTORY'
     結果をキャッシュするディレクトリの名前を指定します．空の値を渡すことで
     キャッシュが利用不可能になります．グローバルキャッシュがサポートされると
     きまで，相対パスで渡してください．

`--no-cache'
     結果をキャッシュしません．

`--force'
`-f'
     キャッシュが使用されている場合，時代遅れだと考えません(しかし，それはい
     ずれにせよ更新されます)．


   トレースはGNUビルドシステムに重きをおいて実装されているので，
`autom4te'は，M4と比較して高度なトレース機能を提供していて，キャッ
シュを利用する手助けとなります．

`--trace=MACRO[:FORMAT]'
`-t MACRO[:FORMAT]'
     FORMATによって，MACROの呼び出しをトレースします．複数の
     `--trace'引数は，いくつかのマクロリストを使用するために使用可能で
     す．単一マクロに対する複数の`--trace'引数は累積されません．その代
     わりに，必要な長さのFORMATにすべきです．

     FORMATは，必要なときは改行を用いていて，特殊なエスケープコードをも
     用いている通常の文字列です．デフォルトは`$f:$l:$n:$%'です．以下の特
     殊なエスケープ文字が使用可能です．

    `$$'
          文字`$'．

    `$f'
          MACROが呼び出されているファイル名．

    `$l'
          MACROが呼び出されている行番号．

    `$d'
          MACRO呼び出しの深さ．これはM4の技術的な詳細で，特に知りたいとは思
          わないでしょう．

    `$n'
          MACROの名前．

    `$NUM'
          MACRO呼び出しのNUM番目の引数．

    `$@'
    `$SEP@'
    `${SEPARATOR}@'
          文字SEPまたは文字列SEPARATORで分離されている，マクロに渡され
          ているすべての引数(デフォルトは`,')．それぞれの引数は引用符で囲まれ
          ています．すなわち，角カッコの組で囲まれています．

    `$*'
    `$SEP*'
    `${SEPARATOR}*'
          上と同じですが，引数は引用符で囲まれていません．

    `$%'
    `$SEP%'
    `${SEPARATOR}%'
          上と同じですが，引数は引用符で囲まれておらず，引数内部のすべての改行文字
          は取り除かれていて，そして，デフォルトの分離子は`:'です．

          エスケープの`$%'は，(`separator'に改行を書き込まない限り)一行
          のトレース出力を生成しますが，`$@'と`$*'はそうではありません．

     トレースの使用例は*Note autoconf Invocation::.

`--preselect=MACRO'
`-p MACRO'
     MACROのトレースをキャッシュしますが，キャッシュを利用可能にしませ
     ん．これは特に，将来のCPUサイクルを無駄にしないために重要です．例えば呼
     び出し時に，`m4'の実行でトレースする必要が無いように，
     `autoconf'は`autoheader'，`automake'，
     `autoreconf'などがトレースするすべてのマクロを前もって選択します．
     キャッシュは十分です．これは結果として非常に高速になります．


   最後に，`autom4te'は"Autom4teライブラリ(Autom4te libraries)"
の概念を導入します．それらは，強力ですが非常にシンプルな機能から成り立っ
ています．コマンドライン引数の組み合わせの組です．

`--language=LANGUAGE'
`-l =LANGUAGE'
     LANGUAGEをAutom4teライブラリで使用します．現在の言語は以下のものが
     含まれています．

    `M4sugar'
          M4sugar出力を作成します．

    `M4sh'
          M4shの実行可能なシェルスクリプトを作成します．

    `Autotest'
          Autotestの実行可能なテストスイートを作成します．

    `Autoconf'
          Autoconfの実行可能なコンフィグレーションスクリプトを作成します．

    `Autoconf-without-aclocal-m4'
          `aclocal.m4'を読み込まずに，Autoconfの実行可能なコンフィグレーショ
          ンスクリプトを作成します．

`--prepend-include=DIR'

`-B DIR'
     検索パスにディレクトリDIRを前置します．これは，サードパーティーの
     マクロの前に，言語指定ファイルを含めるために使用します．

   例として，Autoconfがデフォルトの場所`/usr/local'にインストールされ
ている場合，`autom4te -l m4sugar foo.m4'を実行することは， `autom4te
--prepend-include /usr/local/share/autoconf m4sugar/m4sugar.m4f
--warning syntax foo.m4'を実行することと厳密に等価と
なります．再帰的な展開も適用します．`autom4te --language m4sh
foo.m4'を実行することは，`autom4te --language M4sugar m4sugar/m4sh.m4f
foo.m4'と同じで，すなわち，`autom4te --prepend-include
/usr/local/share/autoconf m4sugar/m4sugar.m4f m4sugar/m4sh.m4f --mode
777 foo.m4'と同じになります．言語の定義は，
`autom4te.cfg'に保存されます．

   ---------- Footnotes ----------

   (1) 訳注：原文にある"and conversely"が何を指すのか分かりません．


File: autoconf-ja.info,  Node: Customizing autom4te,  Prev: autom4te Invocation,  Up: Using autom4te

`autom4te'のカスタマイズ
------------------------

   `~/.autom4te.cfg' (すなわち，ユーザのホームディレクトリにあるとき)
と，`./.autom4te.cfg' (すなわち，`autom4te'が実行されるディ
レクトリにあるとき)で，`autom4te'をカスタマイズすることが可能で
す．順番として，最初に`autom4te.cfg'を読み込み，そして
`~/.autom4te.cfg'，そして`./.autom4te.cfg'，そして最後にコマン
ドライン引数を読み込みます．

   これらのテキストファイルでは，コメントは`#'ではじまり，空の行は無視
されます．カスタマイズは，言語ごとを基本に実行され， `begin-language:
"LANGUAGE"'と`end-language: "LANGUAGE"'の組みで囲まれます．

   言語のカスタマイズとは，現在の言語の定義にオプションを追加すること
(*note autom4te Invocation::)を意味します．オプションと一般的な引数は，
`args: ARGUMENTS'で始まります．ARGUMENTSを引用符で囲む
ことによって伝統的なシェルの構文を使用してもかまいません．

   例として，Autoconfのキャッシュ(`autom4te.cache')を大域的に利用不可
能にするため，以下の行を`~/.autom4te.cfg'に含めます．


## ------------------ ##
## User Preferences.  ##
## ------------------ ##

begin-language: "Autoconf"
args: --no-cache
end-language: "Autoconf"


File: autoconf-ja.info,  Node: Programming in M4sugar,  Next: Programming in M4sh,  Prev: Using autom4te,  Up: Programming in M4

M4sugarでのプログラミング
=========================

   M4自身は非常に小さいけれど十分な，汎用マクロの組を提供しています．
M4sugarは，追加の一般的なマクロを導入しています．その名前は，Lars J. Aas
によってつくり出されました："Readability And Greater Understanding
Stands 4 M4sugar"．

* Menu:

* Redefined M4 Macros::         M4 builtins changed in M4sugar
* Evaluation Macros::           More quotation and evaluation control
* Forbidden Patterns::          Catching unexpanded macros


File: autoconf-ja.info,  Node: Redefined M4 Macros,  Next: Evaluation Macros,  Up: Programming in M4sugar

M4マクロの再定義
----------------

   いくつか例外がありますが，全てのM4ネイティブなマクロは，`m4_'疑似名
前空間に移動されていて，例えば，M4sugarでは`define'を
`m4_define'に名前を変えるなどのようになっています．

M4マクロには再定義されているものもあり，ネイティブな同義語とわずかに互換
性がなくなっています．

 - マクロ: dnl
     このマクロは，もともとの名前を維持しています．`m4_dnl'は定義されて
     いません．

 - マクロ: m4_defn (MACRO)
     M4組み込みのものと比較して，このマクロは，MACROが定義されていない
     場合は失敗します．`m4_undefine'を参照してください．

 - マクロ: m4_exit (EXIT-STATUS)
     このマクロは`m4exit'に対応します．

 - マクロ: m4_if (COMMENT)
 - マクロ: m4_if (STRING-1, STRING-2, EQUAL, [NOT-EQUAL])
 - マクロ: m4_if (STRING-1, STRING-2, EQUAL, ...)
     このマクロは`ifelse'に対応します．

 - マクロ: m4_undefine (MACRO)
     M4組み込みのものとは異なり，このマクロはMACROが定義されていない場
     合は失敗します．以下のように使用してください．

          m4_ifdef([MACRO], [m4_undefine([MACRO])])

     それで，組み込みのものの動作に復旧します．

 - マクロ: m4_bpatsubst (STRING, REGEXP, [REPLACEMENT])
     このマクロは`patsubst'に対応します．`m4_patsubst'の名前は，
     `epatsubst'で拡張した正規表現の構文を提供する，GNU M4の最
     上位のM4shの将来のバージョンに対して残されています．

 - マクロ: m4_popdef (MACRO)
     M4組み込みのものとは異なり，このマクロはMACROが定義されていない場
     合は失敗します．`m4_undefine'を参照してください．

 - マクロ: m4_bregexp (STRING, REGEXP, [REPLACEMENT])
     このマクロは`regexp'に対応しています．`m4_regexp'の名前は，
     `eregexp'で拡張した正規表現の構文を提供する，GNU M4の最上
     位のM4shの将来のバージョンに対して残されています．

 - マクロ: m4_wrap (TEXT)
     このマクロは`m4wrap'に対応しています．

     二つの連続して呼び出される`m4_wrap'が，そのままトークンとして渡され
     るという予期しない結果となる危険が無いように，TEXTを`[]' で終
     えることが推奨されます．

          m4_define([foo], [Foo])
          m4_define([bar], [Bar])
          m4_define([foobar], [FOOBAR])
          m4_wrap([bar])
          m4_wrap([foo])
          =>FOOBAR


File: autoconf-ja.info,  Node: Evaluation Macros,  Next: Forbidden Patterns,  Prev: Redefined M4 Macros,  Up: Programming in M4sugar

マクロの評価
------------

以下のマクロは，引用符のレベルを追加したり削除したりすることで，評価の順
序全体を制御するものです．それらは，ハードコアなM4プログラマに対して意味
があります．

 - マクロ: m4_dquote (ARG1, ...)
     引用符で囲まれたリストを引用符で囲んだ引数を返します．

 - マクロ: m4_quote (ARG1, ...)
     単一の要素として引数を返し，すなわち，一つの引用符の組でそれらを囲みます．

   以下の例は，(i)これらの例を使用していない，(ii)`m4_quote'を使用して
いる，(iii)`m4_dquote'を使用している，といったそれぞれの間の差を強
調することを目的としています．

     $ cat example.m4
     # Overquote, so that quotes are visible.
     m4_define([show], [$[]1 = [$1], $[]@ = [$@]])
     m4_divert(0)dnl
     show(a, b)
     show(m4_quote(a, b))
     show(m4_dquote(a, b))
     $ autom4te -l m4sugar example.m4
     $1 = a, $@ = [a],[b]
     $1 = a,b, $@ = [a,b]
     $1 = [a],[b], $@ = [[a],[b]]


File: autoconf-ja.info,  Node: Forbidden Patterns,  Prev: Evaluation Macros,  Up: Programming in M4sugar

禁止されているパターン
----------------------

M4sugar提供の目的は，怪しげはパターン，つまり出力に現れるべきではないトー
クンを記述しているパターンを定義するためです．例えば，Autoconf
`configure'スクリプトに`AC_DEFINE'や`dnl'のようなトークン
が含められている場合，おそらく何か問題が発生するでしょう(通常は，余分な
引用符のためにマクロが評価されていないためです)．

   M4sugarは，`^m4_'と`^dnl$'に一致する全てのトークンを禁止します．

 - マクロ: m4_pattern_forbid (PATTERN)
     出力で見つかる必要のあるPATTERNにマッチするトークンを宣言しません．
     コメントは調査されません．これは，例えば，`#include'より後に展開さ
     れないまま残っているマクロがある場合に問題になるはずです．現在，Autoconf
     コミュニティでは合意がとおらず，コメント内で指名されているマクロを有効に
     すべきだと考えている人もいるからです(`#'のコメントは出力を説明する
     べきで，`dnl'コメントのように入力を説明するのではないため，このドキュ
     メントの著者には意味がありません)．

   もちろん，これらの一般的な規則の例外に遭遇する可能性もあり，例えば，
`$m4_flags'を参照する必要があるかもしれません．

 - マクロ: m4_pattern_allow (PATTERN)
     PATTERNに一致している全てのトークンが可能で，それには
     `m4_pattern_forbid'パターンに一致しているものも含まれます．


File: autoconf-ja.info,  Node: Programming in M4sh,  Prev: Programming in M4sugar,  Up: Programming in M4

M4shでのプログラミング
======================

M4shは，"mash"と発音し，移植性の高いBourneシェルスクリプトを生成するこ
とが狙いです．この名前はLars J. Aasが発明し，Webster's Revised
Unabridged Dictionary (1913)にメモがあります．

     Mash \Mash\, n.  [Akin to G. meisch, maisch, meische, maische,
     mash, wash, and prob. to AS. miscian to mix.  See "Mix".]

       1. 混合成分の塊を，こう解や圧搾でパルプ状に軟らかくして絞った....

       2. 動物に与える粉餌やぬかと水を混ぜたもの．

       3. 混乱．トラブル．  [Obs.] -Beau. & Fl.

   今しばらくは，広範囲の使用に十分なほど熟していません．

M4shは，実験してみると残念ながら移植性が無い，一般的なシェルの構成に対す
る移植性の高い代替物を提供しています．

 - マクロ: AS_DIRNAME (PATHNAME)
     POSIXで要求されるアルゴリズムを使用しながら，PATHNAME の
     ディレクトリ部分を返します．これが返すものと，それが`dirname'コ
     マンドより移植性が高い理由の詳細は，*Note Limitations of Usual
     Tools::.

 - マクロ: AS_IF (TEST, [RUN-IF-TRUE], [RUN-IF-FALSE])
     シェルコードTESTを実行します．TESTがゼロのステータスで終了し
     た場合，シェルコードのRUN-IF-TRUEを実行し，それ以外ではシェルコー
     ドのRUN-IF-FALSEを実行し，RUN-IF-TRUEやRUN-IF-FALSEが
     空の場合は何もしません．

 - マクロ: AS_MKDIR_P (FILENAME)
     間に入る必要なディレクトリを含め，ディレクトリFILENAMEを作成します．
     これは`mkdir -p FILENAME'と等価ですが，`-p'オプション
     が無い古いバージョンの`mkdir'に移植性を持たせます．

 - マクロ: AS_SET_CATFILE (VAR, DIR, FILE)
     シェル変数VARをDIR/FILEに設定しますが，一般的に最適な
     ものにします(DIRやFILEが`.'のときはFILEは絶対パス になるなどです)．


File: autoconf-ja.info,  Node: Writing Autoconf Macros,  Next: Portable Shell,  Prev: Programming in M4,  Up: Top

Autoconfマクロを書く
********************

一つ以上のソフトウェアパッケージに適用する特徴テストを書くとき，新しいマ
クロの中にそれをカプセル化することが最も良い方法です．Autoconfマクロを書
くための説明とガイドラインは以下のようになります．

* Menu:

* Macro Definitions::           Basic format of an Autoconf macro
* Macro Names::                 What to call your new macros
* Reporting Messages::          Notifying `autoconf' users
* Dependencies Between Macros::  What to do when macros depend on other macros
* Obsoleting Macros::           Warning about old ways of doing things
* Coding Style::                Writing Autoconf macros a` la Autoconf


File: autoconf-ja.info,  Node: Macro Definitions,  Next: Macro Names,  Up: Writing Autoconf Macros

マクロの定義
============

   Autoconfマクロは，M4組み込みの`m4_define'マクロに似た
`AC_DEFUN'マクロを使用して定義されています．マクロ定義に加える際，
`AC_DEFUN'は，マクロを呼び出す順番を制限するために使用されるコード
を加えます(*note Prerequisite Macros::)．

   Autoconfマクロ定義は以下のようになります．

     AC_DEFUN(MACRO-NAME, MACRO-BODY)

   マクロに渡す引数は，`$1'，`$2'等のように参照することが可能です．
M4マクロを書く際の完全な情報は，*Note How to define new macros:
(m4.info)Definitions.

   マクロが偶然前に定義されている場合の問題を避けるために，
MACRO-BODY_と_MACRO-NAMEの両方を，適切に引用符で囲んで
いることを確かめてください．

それぞれのマクロには，そのプロトタイプと短い説明を付与するため，ヘッダの
コメントを書くべきです．引数がデフォルト値の場合，そのプロトタイプを表示
してください．例えば以下のようにします．

     # AC_MSG_ERROR(ERROR, [EXIT-STATUS = 1])
     # --------------------------------------
     m4_define([AC_MSG_ERROR],
     [{ _AC_ECHO([configure: error: $1], 2); exit m4_default([$2], 1); }])

マクロに関するコメントは，ヘッダコメントに残すべきです．その他のほとんど
のコメントは，勝手に`configure'に入るので，コメントを導入するために
`#'を使用し続けるだけで結構です．

ピュアなM4コードに関して，非常に特殊なコメントがある場合は，コメントを
`configure'とヘッダコメントに入れる意味がないので，組み込みの
`dnl'を使用してください．それでM4は，次の改行までのテキストを廃棄し
ます．

   `dnl'がコメントの導入に必要になることは滅多にないということを覚えて
おいてください．`dnl'は，`AC_REQUIRE'のような，出力を生成しな
いマクロに続く改行を除去するときに，より役に立ちます．


File: autoconf-ja.info,  Node: Macro Names,  Next: Reporting Messages,  Prev: Macro Definitions,  Up: Writing Autoconf Macros

マクロ名
========

   全てのAutoconfマクロは，他のテキストと偶然衝突することを避けるため
`AC_'で始まる全て大文字の名前になっています．内部目的で使用する全て
のシェル変数は，`ac_'で始まるほとんど小文字の名前になっています．マ
クロが，現在または将来のAutoconfマクロと衝突しないことを保証するため，マ
クロ名と他の手続きで使用するシェル変数に，独自の接頭辞を付けてください．
可能性としては，イニシャルや組織やソフトウェアパッケージの名前の省略を含
めることになるでしょう．

ほとんどのAutoconfマクロ名は，名前によって調査している特徴の種類を示す，
構造化された命名則に続きます．複数の単語から成り立つマクロ名は，アンダー
スコアで分けられ，最も一般的なものから最も特殊なものへとなっています．
キャッシュ変数の名前も，同じ規則を使用しています(詳細は*note Cache
Variable Names::)．

   `AC_'の後の名前の最初の単語は，通常テストしている特徴のカテゴリを伝
えるものです．よく書くマクロの種類のテストマクロを指定するため，Autoconf
が使用するカテゴリは以下のようになっています．それらはキャッシュ変数でも
全て小文字で使用されます．適用可能なものを使用してください．無ければ独自
のカテゴリを考え出してください．

`C'
     C言語組み込み特徴．

`DECL'
     ヘッダファイルでのC変数の宣言．

`FUNC'
     ライブラリの関数．

`GROUP'
     ファイルのUNIXグループオーナー．

`HEADER'
     ヘッダファイル．

`LIB'
     Cライブラリ．

`PATH'
     プログラムを含むファイルのフルパス名．

`PROG'
     プログラムのベース名．

`MEMBER'
     集合体のメンバ．

`SYS'
     オペレーティングシステムの特徴．

`TYPE'
     C組み込みや宣言されている型．

`VAR'
     ライブラリのC変数．

カテゴリの後には，特定の特徴をテストしている名前が来ます．マクロ名のそれ
以外の単語は，特徴の特定の側面を示します．例えば，
`AC_FUNC_UTIME_NULL'は，`NULL'ポインタで呼び出されたときの
`utime'関数の動作を調査します．

内部マクロは，アンダースコアで始まる名前にすべきです．そのため，Autoconf
内部のものは`_AC_'で始まります．さらに，他のマクロ内部のサブルーチ
ンとなるマクロは，アンダースコアと他のマクロ名ではじまり，内部マクロが行
うことを伝える一つ以上の単語が続きます．例えば， `AC_PATH_X'は，内
部マクロに`_AC_PATH_X_XMKMF'と`_AC_PATH_X_DIRECT'があります．


File: autoconf-ja.info,  Node: Reporting Messages,  Next: Dependencies Between Macros,  Prev: Macro Names,  Up: Writing Autoconf Macros

メッセージの報告
================

マクロが良性または悪性の異常な状況を静的に診断しているとき，以下のマクロ
を使用してそれを報告すべきです．動的な発行，すなわち`configure'
が実行されているときは，*Note Printing Messages::を参照してください．

 - マクロ: AC_DIAGNOSE (CATEGORY, MESSAGE)
     CATEGORYの警告をオンにしている場合，MESSAGEを警告として(また
     はユーザが要求する場合はエラーとして)報告します．以下の現在含められてい
     る標準的なカテゴリを使用することを勧めます．

    `all'
          以下のカテゴリの一つに分類されないメッセージです．空のCATEGORYを使
          用することと等価です．

    `cross'
          クロスコンパイルに関連する問題です．

    `obsolete'
          時代遅れの構成の使用です．

    `syntax'
          曖昧な構文構成，間違った順序のマクロ呼び出しです．

 - マクロ: AC_WARNING (MESSAGE)
     `AC_DIAGNOSE([syntax], MESSAGE)'と等価ですが，より良く分類さ
     れているカテゴリを使用することを推奨します．

 - マクロ: AC_FATAL (MESSAGE)
     ひどいエラーMESSAGEを報告し，`autoconf'は終了します．

   ユーザが`autoconf -W error'を実行しているとき，`AC_DIAGNOSE'
と`AC_WARNING'からの警告はエラーとして報告されます．*Note autoconf
Invocation::を参照してください．


File: autoconf-ja.info,  Node: Dependencies Between Macros,  Next: Obsoleting Macros,  Prev: Reporting Messages,  Up: Writing Autoconf Macros

マクロ間の依存性
================

正確に動作するために，最初に他のマクロが呼び出されていることに依存する
Autoconfマクロもあります．Autoconfは，必要な場合はある特定のマクロが呼び
出されていることを保証する方法と，マクロが間違った処理を引き起こす順序で
呼び出された場合に警告する方法を供給します．

* Menu:

* Prerequisite Macros::         Ensuring required information
* Suggested Ordering::          Warning about possible ordering problems


File: autoconf-ja.info,  Node: Prerequisite Macros,  Next: Suggested Ordering,  Up: Dependencies Between Macros

マクロの必要条件
----------------

書いているマクロが，以前に他のマクロが計算した値を使用する必要があるかも
しれません．例えば，`AC_DECL_YYTEXT'は，`flex'や`lex' の
出力を調査するので，シェル変数 `LEX'を設定するために，
`AC_PROG_LEX'が最初に呼び出されていることに依存します．

   マクロのユーザにそれら間の依存性を追跡させるより，自動的にするために
`AC_REQUIRE'を使用することが可能です．`AC_REQUIRE'は，必要な
場合のみマクロが呼び出され，そして一度だけ呼び出されることを保証します．

 - マクロ: AC_REQUIRE (MACRO-NAME)
     M4マクロMACRO-NAMEがまだ呼び出されていない場合，それを(引数無しで)
     呼び出します．角カッコでMACRO-NAMEを囲んでいることを確認してくださ
     い．MACRO-NAMEは，`AC_DEFUN'を使用して定義されている，または
     呼び出されていることを示す`AC_PROVIDE'の呼び出しを含んでいる必要が
     あります．

     `AC_REQUIRE'は`AC_DEFUN'マクロの内部で使用する必要があります．
     それはトップレベルから呼び出してはいけません．

   `AC_REQUIRE'はよく誤解されます．一つのマクロが他のものに依存してい
る場合，後者は前者の本体の_前に_展開されるように，それはマクロ間の
依存性を実装しています．特に，`AC_REQUIRE(FOO)'は，`FOO' の本
体では置換されません．例えば，マクロを以下のように定義したとします．

     AC_DEFUN([TRAVOLTA],
     [test "$body_temperature_in_celsius" -gt "38" &&
       dance_floor=occupied])
     AC_DEFUN([NEWTON_JOHN],
     [test "$hair_style" = "curly" &&
       dance_floor=occupied])
     
     AC_DEFUN([RESERVE_DANCE_FLOOR],
     [if date | grep '^Sat.*pm' >/dev/null 2>&1; then
       AC_REQUIRE([TRAVOLTA])
       AC_REQUIRE([NEWTON_JOHN])
     fi])

これを`configure.ac'で使用します．

     AC_INIT
     RESERVE_DANCE_FLOOR
     if test "$dance_floor" = occupied; then
       AC_MSG_ERROR([cannot pick up here, let's move])
     fi

それは以下のように展開されるので，土曜日の夜以外に仲間に会う機会が残って
いません．

     test "$body_temperature_in_Celsius" -gt "38" &&
       dance_floor=occupied
     test "$hair_style" = "curly" &&
       dance_floor=occupied
     fi
     if date | grep '^Sat.*pm' >/dev/null 2>&1; then
     
     
     fi

   この動作は意図的に選択されました．(i)
それは要求されるマクロのメッセージ
が，要求しているマクロのメッセージとして解釈されることを妨げます．(ii)
それは，シェルの条件文が使用されるときひどく驚くことを妨げます．以下のよ
うになります．

     if ...; then
       AC_REQUIRE([SOME_CHECK])
     fi
     ...
     SOME_CHECK

   マクロの最初に全ての`AC_REQUIRE'を書き込むことを推奨します．空の行
が残ることを避けるため，`dnl'を使用することが可能です．


File: autoconf-ja.info,  Node: Suggested Ordering,  Prev: Prerequisite Macros,  Up: Dependencies Between Macros

推奨される順序
--------------

   両方が呼び出されても，片方がもう一方が呼び出されることを_要求_しな
い場合，もう一方のマクロの前に実行するすべきマクロもあります．例えば，C
コンパイラの動作を変更するマクロは，Cコンパイラを実行するあらゆるマクロ
の前に呼び出されるべきです．これらの依存性の多くはドキュメントに記されて
います．

   Autoconfは，これらの依存性を持つマクロが`configure.ac'ファイルで順
序が間違って現れるとき，ユーザに警告する`AC_BEFORE'を提供しています．
警告は，`configure.ac'から`configure'を作成するときに発生し
ますが，`configure'実行時には発生しません．

   例えば`AC_PROG_CPP'は，Cコンパイラに`-E'オプションが与えられて
いるとき，Cプリプロセッサが実行可能かどうか調査します．従って，使用され
るCコンパイラが変更される`AC_PROG_CC'のようなマクロの後で，それは呼
び出すべきです．そのため，`AC_PROG_CC'は以下を含んでいます．

     AC_BEFORE([$0], [AC_PROG_CPP])dnl

これで，`AC_PROG_CC'が呼び出されたとき，`AC_PROG_CPP'が既に呼
び出されている場合，ユーザに警告します．

 - マクロ: AC_BEFORE (THIS-MACRO-NAME, CALLED-MACRO-NAME)
     CALLED-MACRO-NAMEが既に呼び出されている場合，M4は標準エラー出力に
     警告メッセージを出力します．THIS-MACRO-NAMEは，`AC_BEFORE'を
     呼び出すマクロの名前にすべきです．マクロCALLED-MACRO-NAMEは，
     `AC_DEFUN'を使用して定義されている，または呼び出されていることを示
     す`AC_PROVIDE'の呼び出しを含んでいる必要があります．


File: autoconf-ja.info,  Node: Obsoleting Macros,  Next: Coding Style,  Prev: Dependencies Between Macros,  Up: Writing Autoconf Macros

時代遅れのマクロ
================

コンフィグレーションと移植性の技術は，何年もかかって進展しました．特定の
問題を解決するより良い方法が開発されたり，特別なアプローチが体系化される
ことはよくあります．この過程はAutoconfの数多くの部分で発生しました．一つ
の結果は，今では"時代遅れ(obsolete)"と思われるマクロの存在です．まだ
動作しますが，すでにそれが最善の方法ではなくなっていて，より近代的なマク
ロで置換すべきでしょう．理想的には，`autoupdate'が古いマクロの呼
び出しを現在のマクロに置換すべきでしょう．

Autoconfは，マクロが時代遅れだということを意味する単純なものを提供してい
ます．

 - マクロ: AU_DEFUN (OLD-MACRO, IMPLEMENTATION, [MESSAGE])
     IMPLEMENTATIONとしてOLD-MACROを定義します．`AC_DEFUN'
     を用いたものとは，OLD-MACROが現在は時代遅れだという警告をユーザが
     受けるところだけが異なります．

     `autoupdate'を使用する場合，OLD-MACROの呼び出しは現在の
     IMPLEMENTATIONで置換されます．更に，MESSAGEが出力されます．


File: autoconf-ja.info,  Node: Coding Style,  Prev: Obsoleting Macros,  Up: Writing Autoconf Macros

コーディングスタイル
====================

Autoconfマクロはスクリプトコーディングスタイルに従います．以下のスタイル
に従うように推奨し，特に，Autoconf自身に寄稿したり，その他の目的で，マク
ロを配布する目的がある場合はそうしてください．

   最初に必要なことは，引用符に大きく注意を払うことです．詳細は， *Note
Autoconf Language::と*Note M4 Quotation::を参照してください．

新たなインターフェースの発明は試みないでください．定義しているマクロに似
ているAutoconfマクロが存在することはよくあります．この既存のインターフェー
スに従ってみてください(引数の順序，デフォルト値，等々)．我々は，これらの
インターフェースに完全でないものがあることは，意識_しています_．そ
れにもかかわらず，無害なときは，創造性より均質性が好まれるでしょう．

   M4シンボル間とシェル変数間の両方の衝突に注意してください．

   推奨されるM4命名規則(*note Macro
Names::)に従う場合，衝突が生じることは
あまりないでしょう．それにもかかわらず，特殊な値を設定する必要があるとき，
_通常のマクロ名を使用することを避けてください_．"信じられない"名
前を使用する代わりです．例えば，バージョン2.13までは，通常のマクロ名
`AC_SUBST_SYMBOL'を設定することで既に定義されている
SYMBOLを記憶するため，マクロ`AC_SUBST'を使用していました．し
かし，`AC_SUBST_FILE'と命名されているマクロが存在するので，
`AC_SUBST(FILE)'を使用することはできませんでした！この場合，
`AC_SUBST(SYMBOL)'や`_AC_SUBST(SYMBOL)'が使用され
るべきでした(そうです，カッコは使用します)...または，より良い方法と
して，`AC_EXPAND_ONCE'のようなハイレベルのマクロを使用すべきでした．

Autoconfマクロは，ユーザ変数の名前空間に入るべきではありません．すなわち，
実際のマクロの実行結果となる変数以外の，全てシェル変数は`ac_' で始
めるべきです．さらに，小さなマクロや他のマクロに埋め込まれるようなマクロ
は，明示的な名前を使用しないように注意すべきです．

   コメントを導入するために，`dnl'を使用しないでください．書こうとして
いるコメントのほとんどは，出力されないヘッダコメント，または，
`configure'に書かれるべきコメントです．特殊なM4の構成のコメントが欲
しい場合は例外があり，その場合は`dnl'が正しいのですが，あまりないこ
とだということを覚えておいてください．

M4は，引数に前置されるスペースを無視します．呼び出されているマクロの開カッ
コに，引数が整列するように字下げするために，この特徴を使用してください．
例えば，以下の代わりを考えます．

     AC_CACHE_CHECK(for EMX OS/2 environment,
     ac_cv_emxos2,
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(, [return __EMX__;])],
     [ac_cv_emxos2=yes], [ac_cv_emxos2=no])])

以下のように書いてください．

     AC_CACHE_CHECK([for EMX OS/2 environment], [ac_cv_emxos2],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [return __EMX__;])],
                        [ac_cv_emxos2=yes],
                        [ac_cv_emxos2=no])])

または，以下のようにしてください．

     AC_CACHE_CHECK([for EMX OS/2 environment],
                    [ac_cv_emxos2],
                    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([],
                                                        [return __EMX__;])],
                                       [ac_cv_emxos2=yes],
                                       [ac_cv_emxos2=no])])

   `AC_RUN_IFELSE'や，クロスコンパイルで動作不可能なマクロを使用してい
るとき，悲観的な値(通常は`no')を提供してください．

構文をハイライト表示するエディタのような，補助ツールが不適切に動作するこ
とを避けるため，様々な手段を自由に使用してください．例えば以下を考えます．

     m4_bpatsubst([$1], [$"])

以下を使用してください．

     m4_bpatsubst([$1], [$""])

それは，Emacsenが最初の引用符で終りのない"文字列"を開いたままにしない
ようにするためです．同じ理由から以下のようなことは避けてください．

     test $[#] != 0

以下を使用してください．

     test $[@%:@] != 0

そうしない場合，閉カッコは`#'コメント内に隠され，Emacsenのカッコ一
致のハイライト表示を破壊します．好ましいスタイルは，M4からエスケープされ
るように注意してください．`$[1]'，`$[@]'，等です．不必要なと
きにエスケープしないようにしてください．意味のない引用符の一般的な例は，
`[$]$1'(`$$1'と書いてください)，`[$]var'(`$var'を使
用してください)，等です．移植性の問題をこの状態に加える場合，
`"[$]@"'より`${1+"$[@]"}'にした方が良く，Autoconfをハッキ
ングするより何か他のことをした方が良いでしょう`:-)'．

   `sed'を使用しているとき，字下げの目的以外で`-e'を使用しな
いでください．`s'コマンドを用いた場合，`/'自身がコマンドで使用
されない限り，優先されるセパレータは`/'にし，コマンドで使用される場
合は`,'を使用すべきです．

   マクロ定義の方法の詳細は，*Note Macro Definitions::.  マクロで
`AC_REQUIRE'を使用しておらず，`AC_REQUIRE'ディレクティブのオブ
ジェクトがないことを期待する場合，`m4_define'を使用してください．疑
わしい場合は，`AC_DEFUN'を使用してください．全ての`AC_REQUIRE'
文は，`dnl'されているマクロの最初に書くべきです．

引数の数に依存すべきではありません．引数が足りないことを調査する代わりに，
空でないことをテストしてください．より簡単でより予測可能なインターフェー
スをユーザに提供し，余分な引数に対する余地を節約してください．

   マクロが短くない場合は，行の最初に`])'を残し，定義されているマクロ
の名前を繰り返すコメントを続けてください．これは，`configure'に
余分な改行を導入します．通常は問題ありませんが，削除したい場合は，行の最
後に`[]dnl'を使用することが可能です．同様に，マクロ呼び出しの後に，
改行を削除するため，`[]dnl'を使用することも可能です．M4が`dnl'
をテキストやマクロ出力の前に付けられているものとして解釈しないことを確実
にするため，`[]dnl'は`dnl'の代わりとして推奨されています．例え
ば以下の代わりを考えます．

     AC_DEFUN([AC_PATH_X],
     [AC_MSG_CHECKING([for X])
     AC_REQUIRE_CPP()
     # ...omitted...
       AC_MSG_RESULT([libraries $x_libraries, headers $x_includes])
     fi])

以下のように書くべきです．

     AC_DEFUN([AC_PATH_X],
     [AC_REQUIRE_CPP()[]dnl
     AC_MSG_CHECKING([for X])
     # ...omitted...
       AC_MSG_RESULT([libraries $x_libraries, headers $x_includes])
     fi[]dnl
     ])# AC_PATH_X

マクロが長い場合，論理的な塊に分けてみてください．通常マクロは，関数のバ
グを調査し，このセットアップを実行するための補助マクロがある
`AC_LIBOBJ'の置換を準備します．コードの要素に補助マクロを導入するこ
とをためらわないでください．

推奨されるコーディングスタイルを強調するために，古い手法で書かれているマ
クロを紹介します．

     dnl Check for EMX on OS/2.
     dnl _AC_EMXOS2
     AC_DEFUN(_AC_EMXOS2,
     [AC_CACHE_CHECK(for EMX OS/2 environment, ac_cv_emxos2,
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM(, return __EMX__;)],
     ac_cv_emxos2=yes, ac_cv_emxos2=no)])
     test "$ac_cv_emxos2" = yes && EMXOS2=yes])

新しい方法は以下のようにします．

     # _AC_EMXOS2
     # ----------
     # Check for EMX on OS/2.
     m4_define([_AC_EMXOS2],
     [AC_CACHE_CHECK([for EMX OS/2 environment], [ac_cv_emxos2],
     [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [return __EMX__;])],
                        [ac_cv_emxos2=yes],
                        [ac_cv_emxos2=no])])
     test "$ac_cv_emxos2" = yes && EMXOS2=yes[]dnl
     ])# _AC_EMXOS2


File: autoconf-ja.info,  Node: Portable Shell,  Next: Manual Configuration,  Prev: Writing Autoconf Macros,  Up: Top

移植性のあるシェルプログラミング
********************************

独自の調査を書いているとき，コードを移植性の高いものにするため，使用を避
けるべきシェルスクリプトプログラムのテクニックもあります．Bourneシェルと，
BashとKornシェルのような上位互換性があるシェルは，何年もかけて進展しまし
たが，問題を避けるために，UNIXバージョン7の以降の1977年頃に加えられ
た機能を利用しないでください(*note Systemology::)．

シェル関数，エイリアス，無効な文字クラスや，Bourneシェル互換のものでは見
つからないすべての機能を使用するべきではありません．最小公倍数に制限され
てます．`unset'さえ，全てのシェルではサポートしていません！また，以
下のように，インタプリタ仕様として，感嘆符の後にスペースを含めてください．

     #! /usr/bin/perl

パスの前のスペースを省略する場合，(DYNIXのような)4.2BSDを基本
とするシステムは，`#! /'は4バイトのマジックナンバーとして解釈される
ので，その行を無視します．古いシステムでは，`#!'行の長さにも小さな
制限があり，例えばSunOS 4では，(改行を含めず)32バイトになります．

   `configure'スクリプトで実行すべき外部プログラムの設定は，かなり
小さくなっています．リストは，*Note Utilities in Makefiles:
(standards)Utilities in Makefiles.  この制限で，
ユーザは，かなり小さいプログラム設定から残りをビルドすることが可能になっ
ていて，パッケージ間の独立部分を多くし過ぎることを避けることができます．

これらの外部ユーティリティには，移植性の高い機能のサブセットがあります．
*Note Limitations of Usual Tools::を参照してください．

   シェルに関するドキュメントのソースは他にもあります．例えば， the
Shell FAQs(1)を参照し てください．

* Menu:

* Shellology::                  A zoology of shells
* Here-Documents::              Quirks and tricks
* File Descriptors::            FDs and redirections
* File System Conventions::     File- and pathnames
* Shell Substitutions::         Variable and command expansions
* Assignments::                 Varying side effects of assignments
* Parentheses::                 Parentheses in shell scripts
* Special Shell Variables::     Variables you should not change
* Limitations of Builtins::     Portable use of not so portable /bin/sh
* Limitations of Usual Tools::  Portable use of portable tools
* Limitations of Make::         Portable Makefiles

   ---------- Footnotes ----------

   (1) the Shell FAQs, <http://www.faqs.org/faqs/unix-faq/shell/>.


File: autoconf-ja.info,  Node: Shellology,  Next: Here-Documents,  Up: Portable Shell

シェル
======

いくつかのシェルのファミリーがあり，最も重要なものは，Bourneファミリーと
Cシェルファミリーで，それらは全く互換性がありません．移植性の高いシェル
スクリプトを書きたい場合，Cシェルファミリーのメンバーは避けてください．
the Shell difference
FAQ(1)には，Unixシェルの小さな歴史と，それらの間の比較が
書かれています．

以下で，Bourneシェルファミリーのメンバーを，いくつか説明していきます．

Ash
     `ash'は，動作の軽いBourne互換シェルとしてGNU/Linuxと
     BSDシステムでよく使用されています．Ash 0.2には0.3.xシリーズで
     修正されているバグがいくつかありますが，バージョン0.2は多くの
     GNU/Linux 配布物で配布されているので，移植性の高いシェルスクリ
     プトではそれを回避すべきです．

     Ash 0.2での互換性のため以下のようにしてください．

        -
          空や設定されていない変数を展開した後で，`$?'を使用しないでください．

               foo=
               false
               $foo
               echo "Don't use it: $?"

        - 変数の展開でコマンドの代入を使用しないでください．

               cat ${FOO=`bar`}

        -
          単一の組み込みの代入は，その効果が現在のシェルに適用されるため，サブシェ
          ルで実行されないことに注意してください．アイテム"コマンドの代入"につい
          ては，*Note Shell Substitutions::.

Bash
     `bash'を実行しているかどうかを検出するために，
     `BASH_VERSION'が設定されているかどうかをテストしてください．その拡
     張を利用不可能にし，POSIX互換性を要求するため，`set -o posix'
     を実行してください．詳細は，*Note Bash POSIX Mode: (bash)Bash
     POSIX Mode.

Bash 2.05とそれ以降
     バージョン2.05とそれ以降の`bash'は，`set'組み込みコマン
     ドの出力に対して，その出力をより容易に評価できるように設計されているので，
     異なる書式を使用しています．しかし，この出力はそれ以前のバージョンの
     `bash'(や，おそらくそれ以外の多くのシェル)と互換性がありません．
     そのため，`bash' 2.05やそれ以上のものを`configure'の実行
     に使用している場合，それ以外のすべてのビルドの作業に対しても，同じように
     `bash' 2.05を使用する必要があるでしょう．

Ksh
     KornシェルはBourneファミリーと互換性があり，POSIXにほとんど準
     拠しています．一般的に`ksh88'と`ksh93'という二つの有名な変種が
     あり，最初のリリースの年で後から命名されました．それらは通常
     `ksh'と呼ばれていますが，Solarisシステムには三つの変種があります．
     `/usr/bin/ksh'は`ksh88'です．
     `/usr/xpg4/bin/sh'はPOSIX準拠の`ksh88'の類似物で す．
     `/usr/dt/bin/dtksh'は`ksh93'です．`/usr/bin/ksh'が
     Soralisの標準です．それ以外の類似物はオプションパッケージの一部です．こ
     れらのパッケージには追加の変更はありませんが．それらは最小限のOSのインス
     トールの一部ではないので，インストール状況によっては無いかもしれません．
     パブリックドメインの`pdksh'と呼ばれているKornシェルのクローンも広く
     利用可能になっています．それは，いくつか独自のものがありますが
     `ksh88'の機能のほとんどがあります．

Zsh
     `zsh'が実行されているかどうかを検出するために，
     `ZSH_VERSION'が設定されているかどうかをテストしてください．デフォル
     トで，`zsh'はBourneと互換性はあり_ません_．`emulate
     sh'を実行し，`NULLCMD'を`:'に設定する必要があります．詳細は，
     *Note Compatibility: (zsh)Compatibility.

     Zsh 3.0.8は，Mac OS X 10.0.3でのネイティブな`/bin/sh'です．

   Russ AllberyとRobert
Lipeの間でなされた，以下の議論は読む価値があります．

Russ Allbery:

     `/bin/sh'が唯一のシェルであるというGNU仮定では，永久に
     行き詰まってしまいます．ベンダーは，ユーザの既存のシェルスクリプトを壊し
     たくはありませんし，BourneシェルにはPOSIXシェルと完全に互換で
     はない部分もあります．このため，この方法を採用するベンダーは，_決し
     て_ (OK..."決して，決してとは言わないよ")Bourneシェルを
     (`/bin/sh'として)POSIXシェルで置き換えないでしょう．

Robert Lipe:

     これは本当に問題です．ほとんどのもの(少なくともほとんどのSystem
     V)はシェ
     ル関数を受け入れるBourneシェルがあるのですが，ほとんどのベンダーの
     `/bin/sh'はPOSIXシェルではありません．

     そのため，ほとんど現在のシステムはPOSIX標準に適合しているシェ
     ルが_どこかに_あるのですが，問題はそれを見つけることです．

   ---------- Footnotes ----------

   (1) the Shell difference FAQ,
<http://www.faqs.org/faqs/unix-faq/shell/shell-differences/>.


File: autoconf-ja.info,  Node: Here-Documents,  Next: File Descriptors,  Prev: Shellology,  Up: Portable Shell

ヒアドキュメント
================

   `\'は，次のシンボルと一緒になって特別の意味を持たないので，維持され
る`\'に依存しないでください．OpenBSD 2.7のネイティブな
`/bin/sh'では，`\"'は`"'に展開され，ヒアドキュメントで
は引用符で囲まれていない分離子として用いられます．一般的な規則として，
`\\'が`\'に展開される場合，`\'を得るために`\\' を使 用してください．

   OpenBSD 2.7の`/bin/sh'では，以下のようになります．

     $ cat <<EOF
     > \" \\
     > EOF
     " \

そして，Bashでは以下のようになります．

     bash-2.04$ cat <<EOF
     > \" \\
     > EOF
     \" \

多くの古い(Bourneシェルを含む)シェルでは，ヒアドキュメントは非効率に実装
されています．大きなヒアドキュメントを間違って扱うシェルもあります．例え
ば，Solaris 8 `dtksh'は`ksh' M-12/28/93dで提供されていて，
ヒアドキュメントを1024バイトのバッファの境界で間違った変数の展開を生じま
す．ユーザは一般的に，より速くより信頼性の高いシェルを使用して，これらの
問題を修正することが可能で，例えば，そのまま`./configure'するのでは
なく，コマンド`bash ./configure'を使用します．

シェルによっては，単一の文の中にヒアドキュメントが多過ぎるとき，非常に非
効率になるものもあります．例えば，`configure.ac'に以下のようなもの
含めたとします．

     if <cross_compiling>; then
       assume this and that
     else
       check this
       check that
       check something else
       ...
       on and on forever
       ...
     fi

シェルは，その中のそれぞれのヒアドキュメントに対して一時ファイルを作成し
ながら，`if'/`fi'の文脈全体をパースします．`fork'ごとにそ
のようなヒアドキュメントに対してリンクを作成するシェルもあり，インストー
ルされた後のクリーンアップコードで正しく削除されます．それは，シェルが永
久に受け入れられるリンクを作成しているのです．

   `if'/`fi'の外部のテストを移動したり，複数の`if'/`fi'
の文脈を作成したりすることで，かなり動作が改善されるでしょう．とにかく，
こういった構成は，典型的なAutoconfの使用では正しくありません．実際，M4マ
クロは，シェルの条件文を見ることができないので，それは推奨されておらず，
条件分岐の前にそれが展開され，実行時に条件文が失敗だと分かるとき，マクロ
展開に失敗するかもしれず，マクロの実行を完全に終了できないでしょう．


File: autoconf-ja.info,  Node: File Descriptors,  Next: File System Conventions,  Prev: Here-Documents,  Up: Portable Shell

ファイルディスクリプタ
======================

システムによっては，明らかに不可解なのですが，特殊な目的で使用しているた
め，ファイルディスクリプタには使用すべきではないものもあります．

     3 --- それを`/dev/tty'として開くシステムもあります．
     4 --- Kubota Titanで使用されています．

Ultrixでは異常終了だと告げられるので，同じファイルディスクリプタに複数回
同じファイルをリダイレクトしないでください．

     ULTRIX V4.4 (Rev. 69) System #31: Thu Aug 10 19:42:23 GMT 1995
     UWS V4.4 (Rev. 11)
     $ eval 'echo matter >fullness' >void
     illegal io
     $ eval '(echo matter >fullness)' >void
     illegal io
     $ (eval '(echo matter >fullness)') >void
     Ambiguous output redirect.

それぞれの場合で，期待される結果はもちろん，`matter'を含んでいる
`fullness'と，空の`void'です．

コマンドの代入のリダイレクトを標準エラー出力にしないでください．それは，
コマンドの代入の_内部で_行なう必要があります．エラーメッセージを削
除することを期待して`: `cd /zorglub` 2>/dev/null'を実行しているとき，
`: `cd /zorglub 2>/dev/null`'は正しく動作します．

(AshでもBashでもない)Zshが割当を可能にすることに注意する価値はあります．
`foo=`cd /zorglub` 2>/dev/null'．

ほとんどのシェルでは，(Bash，Zsh，Ashを含め)全てではありませんが，標準エ
ラー出力を，サブシェルに対しても追跡しています．内部コマンドの標準エラー
出力を得る目的がある場合，これでは結果が望まない内容になるかもしれません．

     $ ash -x -c '(eval "echo foo >&2") 2>stderr'
     $ cat stderr
     + eval echo foo >&2
     + echo foo
     foo
     $ bash -x -c '(eval "echo foo >&2") 2>stderr'
     $ cat stderr
     + eval 'echo foo >&2'
     ++ echo foo
     foo
     $ zsh -x -c '(eval "echo foo >&2") 2>stderr'
     # Traces on startup files deleted here.
     $ cat stderr
     +zsh:1> eval echo foo >&2
     +zsh:1> echo foo
     foo

様々なレベルの詳細が分かるでしょう....

一つの回避方法は，興味がない行をgrepで削除することで，良い行は削除しない
ことを期待しつつ....

   `exec >foo; mv foo bar'のように，開いているファイルの移動/削除の試
みはしないようにしてください．`mv'の詳細は，*Note Limitations of
Builtins::を参照してください．


File: autoconf-ja.info,  Node: File System Conventions,  Next: Shell Substitutions,  Prev: File Descriptors,  Up: Portable Shell

ファイルシステムの条件
======================

   `autoconf'とその仲間達は，通常様々なUnixで実行されますが，それは
その他のシステムでも使用され，最も顕著なものとしてはDOSの仲間
があげられます．このことは，ファイルとパス名に関する仮定に衝突します．

例えば，以下のようなコードを考えます．

     case $foo_dir in
       /*) # Absolute
          ;;
       *)
          foo_dir=$dots$foo_dir ;;
     esac

それらのシステムではドライブスペックを使用していて，通常はディレクトリの
分離子としてバックスラッシュを使用しているため，絶対パスを正しく検出する
ことに失敗するでしょう．絶対パスに対する調査の標準的な方法は以下のとおり
です．

     case $foo_dir in
       [\\/]* | ?:[\\/]* ) # Absolute
          ;;
       *)
          foo_dir=$dots$foo_dir ;;
     esac

適切な場合は角カッコの引用符で囲み，最初の文字としてのバックスラッシュを
保持していることを確認してください(*note Limitations of Builtins::)．

また，コロンがデバイス指定の一部として使用されているので，これらのシステ
ムではそれをパスの分離子として使用していません．パスを作成しているときや
パスにアクセスしているときは，代わりに`PATH_SEPARATOR'出力変数を使
用してください．`configure'は，開始時にこれを適切な値(`:'
または`;')に設定します．

   ファイル名にも余計な注意が必要になります．(DJGPPのような)
`autoconf'を十分に実行できるUnixのようなDOSベースの環
境では，通常長いファイル名を適切に扱うことが可能ですが，パッケージを壊し
てしまう深刻な制限も残っています．これらの問題のいくつかは， doschk(1)
パッ ケージで容易に検出することが可能です．

   以下は簡単な全体像です．問題には，適用を示すためSFN/LFNで印が
ついています．SFNは，Windows下のDOS窓ではなく，プレーンな
DOSにのみ関連する問題を意味し，一方LFNは，Windowsでも存在
する問題を意味しています．

複数のドットの禁止 (SFN)
     DOSはファイル名に複数のドットがあるものを扱うことが不可能です．
     これは，`autoconf'は`.in'をテンプレートファイルの接尾子に使
     用するので，移植性の高いconfigureスクリプトを構築しているときに覚えてお
     く必要がある，特に重要なことです．

     以下はUnix上では完全にOKです．

          AC_CONFIG_HEADERS([config.h])
          AC_CONFIG_FILES([source.c foo.bar])
          AC_OUTPUT

     しかし，それは`config.h.in'，`source.c.in'，そして
     `foo.bar.in'が必要になるので，DOSでは問題があります．パッ
     ケージをDOSベースの環境でより移植性を高くするため，その代わり
     に以下を使用すべきです．

          AC_CONFIG_HEADERS([config.h:config.hin])
          AC_CONFIG_FILES([source.c:source.cin foo.bar:foobar.in])
          AC_OUTPUT

ドットの前置の禁止 (SFN)
     DOSはドットで始まるファイル名を扱うことが不可能です．これは通
     常，`autoconf'に対してはあまり重要ではない問題です．

大文字小文字を区別しない (LFN)
     DOSは大文字小文字を区別しないので，例えば，`INSTALL'とい
     う名のファイルと`install'という名のディレクトリの両方を持つことがで
     きません．これは，`make'にも影響します．ディレクトリに
     `INSTALL'という名のファイルがある場合，`make install'は
     (`install'がPHONY として印がついていないとき)何もしません．

8+3の制限 (SFN)
     DOSファイルシステムでは，ファイル名の最初の8文字と最初の3文字
     の拡張子のみ保存され，それらはユニークである必要があります．それは，
     `foobar-part1.c'，`foobar-part2.c'，そして
     `foobar-prettybird.c'の全ては同じ名前(`FOOBAR-P.C')になります．
     `foo.bar'と`foo.bartender'も同じものになります．

     注意：これは通常，ファイル名をユニークにするために短いバージョンでは数字
     の後置を使用するので，Windowsでは問題になりません．しかし，レジストリの
     設定でこの動作を停止可能です．これで長いファイル名を含むファイルのツリー
     を，SFNとLFNの環境で共有することが可能になりますが，上記の問題
     は同様に存在します．

無効な文字
     DOSファイル名で無効な文字もあり，そのため避けた方が良いでしょ
     う．LFNの環境では，`/'，`\'，`?'，`*'，`:'，
     `<'，`>'，`|'，そして`"'です．SFN環境では，それ
     以外にも無効になります．これには，`+'，`,'，`['，そして
     `]'が含まれます．

   ---------- Footnotes ----------

   (1) doschk, <ftp://ftp.gnu.org/gnu/non-gnu/doschk/doschk-1.1.tar.gz>.


File: autoconf-ja.info,  Node: Shell Substitutions,  Next: Assignments,  Prev: File System Conventions,  Up: Portable Shell

シェルの代入
============

   persistent urban
legendとは反対に，Bourneシェルは変数とバッククオートさ
れている式が整然と分かれておらず，特に右側の割り当てと`case'の引数
がそうです．例えば，以下のコードを考えます．

     case "$given_srcdir" in
     .)  top_srcdir="`echo "$dots" | sed 's,/$,,'`"
     *)  top_srcdir="$dots$given_srcdir" ;;
     esac

以下のように書くと，より読みやすくなります．

     case $given_srcdir in
     .)  top_srcdir=`echo "$dots" | sed 's,/$,,'`
     *)  top_srcdir=$dots$given_srcdir ;;
     esac

そして，実際それは_より_移植性が高くなります．最初の試みの最初の
caseで，全てのシェルが`"`..."..."...`"'を正しく解釈する
わけではないので，`top_srcdir'の計算結果は移植性が高くありません．
更に悪いことには，同様に`"`...\"...\"...`"'を全てのシェ
ルが解釈するわけではありません．二重引用符でバッククオートされている式の
内部で，二重引用符で囲まれた文字列を使用するための移植性を高める方法は全
くありません(pfew!)．

`$@'
     最も有名なシェルの移植性の問題の一つは，`"$@"'との関連です．位置に
     依存する引数が無いとき，POSIXでは`"$@"'を何もないことと
     等価になっていますが，オリジナルのUnixバージョン7のBourneシェルはその代
     わりに`""'として扱い，この動作はDigital Unix 5.0のようにそれ以降の
     実装でも提供されています．

     この移植性の問題を回避する伝統的な方法は，`${1+"$@"}'を使用する
     ことです．残念ながら，この手法はMac OS Xでも使用されている，Zsh
     (3.x と
     4.x)では動作しません．Bourneシェルをエミュレートしているとき，Zshは
     `${1+"$@"}'で単語の分離を実行します．

          zsh $ emulate sh
          zsh $ for i in "$@"; do echo $i; done
          Hello World
          !
          zsh $ for i in ${1+"$@"}; do echo $i; done
          Hello
          World
          !

     Zshは，プレーンの`"$@"'をおそらく処理しますが，上記の移植性の問題
     のため，プレーンの`"$@"'を使用することはできません．回避する方法の
     一つは，`${1+"$@"}'を`"$@"'に変換するZshの"global
     aliases"に依存します．

          test "${ZSH_VERSION+set}" = set && alias -g '${1+"$@"}'='"$@"'

     より保守的な回避方法は，位置に依存する引数を用いなくても良い限り，
     `"$@"'を避けることです．例えば，以下の代わりを考えます．

          cat conftest.c "$@"

     この代わりに以下を使用することが可能です．

          case $# in
          0) cat conftest.c;;
          *) cat conftest.c "$@";;
          esac

`${VAR:-VALUE}'
     Ultrix `sh'を含め，古いBSDシェルはシェルの代入に対してコ
     ロンを受け入れず，文句を言って終了します．

`${VAR=LITERAL}'
     引用符で囲まれていることを確かめてください．

          : ${var='Some words'}

     それ以外のDigital Unix V 5.0のようなシェルでは，"bad
     substitution"のた めに終了します．


     Solarisの`/bin/sh'にはこの解釈に恐ろしいバグがあります．変数を
     `}'を含む文字列に設定する必要があることを想像してください．この
     `}'文字で，影響ある変数が既に設定されているとき，Solarisの
     `/bin/sh'は混乱します．このバグは，以下のように実行することで作
     動されるはずです．

          $ unset foo
          $ foo=${foo='}'}
          $ echo $foo
          }
          $ foo=${foo='}'   # no error; this hints to what the bug is
          $ echo $foo
          }
          $ foo=${foo='}'}
          $ echo $foo
          }}
           ^ ugh!

     `}'は，シングル引用符で囲まれている場合でも，`${'に一致する
     ものとして解釈されているようです．二重引用符を使用すると問題は生じません．

`${VAR=EXPANDED-VALUE}'
     Ultrixで，以下を実行したとします．

          default="yu,yaa"
          : ${var="$default"}

     それはVARを`M-yM-uM-,M-yM-aM-a'に設定し，すなわち，全ての文字
     の八番目のビットがセットされるでしょう．`$var'を展開するとき，シェ
     ルが八番目のビットを明示的にリセットするので，単純に`echo $var'を使
     用している現象が分かりません．このシェルにその違反で混乱させる二つの方法
     は，以下のようになります．

          $ cat -v <<EOF
          $var
          EOF

     それと以下です．

          $ set | grep '^var=' | cat -v

     このバグの古典的で典型的なものの一つは以下のものです．

          default="a b c"
          : ${list="$default"}
          for c in $list; do
            echo $c
          done

     単一行に`a b c'を得るでしょう．なぜでしょうか？それは，`$list'
     にスペースが無いためです．`M- '，すなわち八ビット目を設定するスペー
     スがあるので，IFSによる分離が実行されないのです！！！

     良いニュースの一つは，Ultrixが`: ${list=$default}'で正確に動作す
     ることです．すなわち，引用符で囲ま_ない_場合です．悪いニュースとし
     ては，QNX 4.25は，LISTをDEFAULTの_最後の_項目 に設定することです！

     移植性の高い方法は，Ultrixで八番目のビットを二回切替えるために，二重(引
     用符による)代入を使用することです．

          list=${list="$default"}

     ...しかし，Solarisの`}'のバグ(上記を参照してください)には用心
     してください．安全にするには，以下を使用してください．

          test "${var+set}" = set || var={VALUE}

``COMMANDS`'
     一般的には意味がありませんが，Ash
     0.2では最適化のためコマンドを実行する
     ためサブシェルをforkしないので，副作用のある単一の組み込み物を代入しない
     でください．

     例えば，`cd'が何も出力しないことを調査したい場合，以下のことが生
     じるかもしれないので，`test -z "`cd /`"'を使用しないでください．

          $ pwd
          /tmp
          $ test -z "`cd /`" && pwd
          /

     `foo=`exit 1`'の結果は，読者への演習問題として残しておきます．

`$(COMMANDS)'
     この構成は，``COMMANDS`'を置換するという意味があります．それ
     らを入れ子状にすることは可能ですが，バッククオートを用いて移植することは
     不可能です．残念ながら，まだ全体的にサポートされていません．特に，現在の
     Solarisリリースでもサポートされていません．

          $ showrev -c /bin/sh | grep version
          Command version: SunOS 5.8 Generic 109324-02 February 2001
          $ echo $(echo blah)
          syntax error: `(' unexpected

     また，IRIX 6.5のBourneシェルもサポートされていません．
          $ uname -a
          IRIX firebird-image 6.5 07151432 IP22
          $ echo $(echo blah)
          $(echo blah)

     `$(COMMANDS)'を使用する場合，異なる表記方法
     `$((EXPRESSION))'は現在のシェルではコマンドではなく数式だと勘
     違いするので，コマンドがカッコで始まらないように確かめて下さい．この勘違
     いを避けるため，二つの開カッコの間にはスペースを挿入して下さい．


File: autoconf-ja.info,  Node: Assignments,  Next: Parentheses,  Prev: Shell Substitutions,  Up: Portable Shell

代入
====

列にいくつかの変数を設定するとき，評価の順序が定義されていないことを覚え
ておいてください．例えば，`foo=1 foo=2; echo $foo'は，Solarisの
`sh'では`1'になりますが，Bashでは`2'になります．順序を強
制するために`;'を使用する必要があります．`foo=1; foo=2; echo
$foo'のようにします．

   `subdir/program'を見つけるために，以下に依存しないようにしてくださ
い．

     PATH=subdir$PATH_SEPARATOR$PATH program

これはZsh 3.0.6では動作しません．代わりに以下のようなものを使用してくだ
さい．

     (PATH=subdir$PATH_SEPARATOR$PATH; export PATH; exec program)

   代入の終了ステータスに依存しないようにしてください．Ash
0.2はステータス を変更せず，最後の文に伝搬します．

     $ false || foo=bar; echo $?
     1
     $ false || foo=`:`; echo $?
     0

そして，更に悪いことに，QNX 4.25はあらゆる場合で終了ステータス
を0に設定します．

     $ foo=`exit 1`; echo $?
     0

   デフォルト値を代入するために，以下のアルゴリズムを使用してください．

  1.
     デフォルト値がリテラルで閉じカッコを含まない場合は以下を使用してください．

          : ${var='my literal'}

  2.
     デフォルト値が閉じカッコを含まず，展開されず，初期化されている変数がIFS
     で分けられていない(すなわち，リストでない)場合，以下を使用してください．

          : ${var="$default"}

  3.
     デフォルト値が閉じカッコを含まず，展開されず，初期化されている変数がIFS
     で分けられる(すなわち，リストの)場合，以下を使用してください．

          var=${var="$default"}

  4. デフォルト値が閉じカッコを含む場合，以下を使用してください．

          test "${var+set}" = set || var='${indirection}'

   ほとんどの場合，`var=${var="$default"}'で良いのですが，駄目なとき
は後者を使用してください．正当性のための，
`${VAR:-VALUE}'と`${VAR=VALUE}' の 項目は，*Note Shell Substitutions::.


File: autoconf-ja.info,  Node: Parentheses,  Next: Special Shell Variables,  Prev: Assignments,  Up: Portable Shell

シェルスクリプト内のカッコ
==========================

一列にある二つの開カッコは，シェルの実装によっては間違って処理されること
を覚えておいて下さい．例えば，`pdksh' 5.2.14では以下のコードのパー
スを失敗します．

     if ((true) || false); then
       echo ok
     fi

この問題を回避するため，二つの開カッコの間にスペースを挿入して下さい．
`$(('に関する同様な問題と回避方法があります．*Note Shell
Substitutions::を参照して下さい．

   POSIXでは，以下のような開カッコを用いた`case'パターンのサ
ポートを要求しています．

     case $filename in
     (*.c) echo "C source code";;
     esac

しかし，この例の`('には古いBourneシェルの実装で移植性がないものもた
くさんあります．安全のため削除すべきでしょう．


File: autoconf-ja.info,  Node: Special Shell Variables,  Next: Limitations of Builtins,  Prev: Parentheses,  Up: Portable Shell

特殊なシェル変数
================

シェルの動作に深く影響するため，使用すべきではないシェル変数もあります．
シェルからまともな動作に戻るため，unsetすべき変数もありますが，
`unset'は移植性が無く(*note Limitations of Builtins::)，代替値が
必要になります．これらの変数を以下にリストアップします．

`CDPATH'
     この変数が設定されているとき，それは`cd'が相対的なファイル名で呼び
     出されるときに検索するディレクトリのリストを設定します．POSIX
     1003.1-2001では，`CDPATH'で空ではないディレクトリ名が正しく使用され
     ている場合，`cd'は絶対的なファイル名を結果として出力することになっ
     ています．残念ながらこの出力では，`abs'がパスを二回受けとるので，
     `abs=`cd src &&
     pwd`'のような慣用句が駄目になります．また，多くのシェ
     ルは，この部分のPOSIXに準拠していません．例えば，`zsh'
     は，`.'以外のディレクトリ名が`CDPATH'で選択されている場合以外，
     結果を出力しません．

     実際，この問題があるシェルは`unset'もサポートしているので，以下
     のようにしてその問題を回避することが可能です．

          (unset CDPATH) >/dev/null 2>&1 && unset CDPATH

     Autoconfが生成したスクリプトは自動的に`CDPATH'をunsetするので，これ
     らのスクリプトのこの問題を心配する必要はありません．

`IFS'
     `IFS'の最初の文字をバックスラッシュに設定しないでください．実際，
     `"$@"'で要素を加えるときは，Bourneシェルは最初の文字(バックスラッ
     シュ)を使用し，そして，バックスラッシュエスケープをもう一度解釈する(！)
     シェルもあり，そのため，バックスペースとその他の奇妙な文字で終ることが可
     能になっています．

     (splitを実行していないとき，標準的なコードの)`IFS'の適切な値は，
     `<SPC><TAB><RET>'です．`@*'の引数を連結するために
     使用するので，最初の文字は特に重要です．

`LANG'
`LC_ALL'
`LC_COLLATE'
`LC_CTYPE'
`LC_MESSAGES'
`LC_MONETARY'
`LC_NUMERIC'
`LC_TIME'
     あまりに多くのコンフィグレーションコードがCロケールを仮定していて，
     POSIXではCロケールが要求される場合はロケールの環境変数を
     `C'に設定する必要があるので，Autoconfが生成したスクリプトは通常，こ
     れらのすべての変数を`C'に設定します．しかし，非標準の古いシステム
     (特にSCO)では，ロケールの環境変数が`C'に設定されている場
     合は壊れてしまうので，これらのシステムでAutoconfが生成したスクリプトを実
     行するとき，代わりに変数を未設定(unset)にしてください．

`LANGUAGE'
     `LANGUAGE'はPOSIXで指定されていませんが，それは場合によっ
     ては`LC_ALL'に優先させるGNUの拡張なので，Autoconfが生成し
     たスクリプトはそれも設定します．

`LC_ADDRESS'
`LC_IDENTIFICATION'
`LC_MEASUREMENT'
`LC_NAME'
`LC_PAPER'
`LC_TELEPHONE'
     これらのロケール環境変数はGNUの拡張です．それらは，上記の
     POSIXの仲間(`LC_COLLATE'など)のように扱われます．

`LINENO'
     ほとんどの近代的なシェルは，現在の行番号を`LINENO'で提供しています．
     その値は，現在のコマンドの最初の行番号です．Autoconfは近代的なシェルで
     `configure'の実行を試みます．利用可能なそのようなシェルが無い場
     合，それぞれの文字列`$LINENO'(英数文字が続かない)をインスタンスを行
     番号で置換するために，Sedに前もって渡す手法を用いて，`LINENO'の実装
     を試みます．

     実行時の動作が異なるので，`eval'で`LINENO'に依存すべきでは
     ありません．また，Sedに前もって渡す手法を用いる可能性は，引用符で囲んで
     いるとき，ヒアドキュメントのとき，または行を跨るほど長いコマンドのとき，
     `$LINENO'に依存すべきではないことを意味しています．ただし，サブシェ
     ルは問題ありません．以下の例では，一行目，六行目，そして九行目は移植性が
     ありますが，それ以外の`LINENO'のインスタンスは移植性がありません．

          $ cat lineno
          echo 1. $LINENO
          cat <<EOF
          3. $LINENO
          4. $LINENO
          EOF
          ( echo 6. $LINENO )
          eval 'echo 7. $LINENO'
          echo 8. '$LINENO'
          echo 9. $LINENO '
          10.' $LINENO
          $ bash-2.05 lineno
          1. 1
          3. 2
          4. 2
          6. 6
          7. 1
          8. $LINENO
          9. 9
          10. 9
          $ zsh-3.0.6 lineno
          1. 1
          3. 2
          4. 2
          6. 6
          7. 7
          8. $LINENO
          9. 9
          10. 9
          $ pdksh-5.2.14 lineno
          1. 1
          3. 2
          4. 2
          6. 6
          7. 0
          8. $LINENO
          9. 9
          10. 9
          $ sed '=' <lineno |
          >   sed '
          >     N
          >     s,$,-,
          >     : loop
          >     s,^\([0-9]*\)\(.*\)[$]LINENO\([^a-zA-Z0-9_]\),\1\2\1\3,
          >     t loop
          >     s,-$,,
          >     s,^[0-9]*\n,,
          >   ' |
          >   sh
          1. 1
          3. 3
          4. 4
          6. 6
          7. 7
          8. 8
          9. 9
          10. 10

`NULLCMD'
     コマンド`>foo'を実行しているとき，`zsh'は`$NULLCMD
     >foo'を実行します．Bourneシェルは`NULLCMD'が`:'だと考えますが，
     `zsh'はBourneシェル互換モードでも，`NULLCMD'を`cat'に
     設定します．`NULLCMD'の設定を忘れた場合，スクリプトは標準入力からの
     データ待ちのためサスペンド状態になるかもしれません．

`ENV'
`MAIL'
`MAILPATH'
`PS1'
`PS2'
`PS4'
     これらの変数は，対話的なシェルに対してのみ影響すると考えられるので，シェ
     ルスクリプトに対して問題はありません．しかし，少なくとも一つのシェル
     (pre-3.0 UWIN `ksh')はそれが対話的かどうかを混同し，つまり
     (例えば)`PS1'の副作用として，`$?'を予期せず変更するはずです．こ
     のバグを回避するために，Autoconfが生成したスクリプトは以下のようなことを
     します．

          (unset ENV) >/dev/null 2>&1 && unset ENV MAIL MAILPATH
          PS1='$ '
          PS2='> '
          PS4='+ '

`PWD'
     POSIX 1003.1-2001は，`cd'と`pwd'が現在のディレ
     クトリの論理的なパスを示す`PWD'環境変数を必ず更新することを要求して
     いますが，伝統的なシェルはこれをサポートしていません．一つのシェルの実体
     が`PWD'を管理していて，サブディレクトリと別のシェルは`PWD'を知ら
     ずに`cd'を実行する場合，これで混乱するはずです．この状況では，
     `PWD'は間違ったディレクトリを示します．`$PWD'の代わりに
     ``pwd`'を使用してください．

`status'
     この変数は，`zsh'(少なくとも3.1.6)での`$?'へのエイリアスで，そ
     のため読み出し専用になっています．使用しないでください．

`PATH_SEPARATOR'
     設定されていない場合，`configure'はビルドシステムに対する適切な
     パスの分離子を検出し，`PATH_SEPARATOR'出力変数をそれに応じて設定し
     ます．

     DJGPPシステムでは，パス分離子を制御するために，`PATH_SEPARATOR'環境
     変数を`bash'が(`PATH'のような)特定の環境変数を設定するため
     に使用している`:'または`;'のいずれかに設定することが可能です．
     これは`bash'内部でのみ動作するので，パス分離子として`;'がサ
     ポートされていないファイル内で代入する方が安全だろうという理由から，
     `configure'で標準的なDOSのパス分離子(`;')を検出し
     たいことでしょう．そのため，この変数をunsetするか，`;'に設定してく
     ださい．

`RANDOM'
     `RANDOM'を提供するシェルも多くあり，その変数は使用するたびに異なる
     整数を返します．その値が使用されていないとき，変更さることはほとんどあり
     ませんが，IRIXQ 6.5では毎回値が変更されます．これは，`set'
     を使用して監視すべきです．


File: autoconf-ja.info,  Node: Limitations of Builtins,  Next: Limitations of Usual Tools,  Prev: Special Shell Variables,  Up: Portable Shell

シェル組み込みの制限
====================

   だめだよ全く，我々は本気なのに．制限のあるシェルもあるんです！ :)

全ての組み込みコマンドやコマンドは，オプションをサポートし，そのため，ダッ
シュで始まる引数を用いると，全く異なる動作をすることを覚えておくべきです．
例えば罪の無い`echo "$word"'でも，`word'がダッシュで始まるとき
は予期しない結果となるはずです．この問題は，パイプでは`x'を後で評価
するように，`echo "x$word"'を使用することで避けることが可能です．

`.'
     通常のファイル(`test -f'を使用してください)を用いるときだけ
     `.'コマンドを使用してください．例えば，Bash 2.03は， `.
     /dev/null'で固まります．また，引数にスラッシュを含まない場合は
     `.'は`PATH'を使用するので，現在のディレクトリのファイル
     `foo'で`.'を使用したい場合，`. ./foo'を使用する必要が
     あることを覚えておいてください．

`!'
     `!'を使用することは不可能です．コードを書き換える必要があります．

`break'
     `break 2'の使用などは安全です．

`cd'
     POSIX 1003.1-2001では，`cd'が`-L' ("論理的") と`-P'
     ("物理的")オプションをサポートし，`-L'がデフォル
     トであることを要求しています．しかし，伝統的なシェルはこれらのオプション
     をサポートしておらず，`cd'コマンドは`-P'のように動作しま す．

     移植性の高いスクリプトは，どちらのオプションもサポートしていると仮定すべ
     きではなく，どちらの動作もデフォルトと仮定すべきではありません．これは
     ちょっとトリッキーで，例えば，POSIXのデフォルトの動作では，現
     在の論理的なディレクトリがシンボリックリンクの場合，`ls ..'と `cd
     ..'では異なるディレクトリを参照している可能性があります．
     DIRに`..'の要素が無い場合，`cd DIR'を使用しても
     安全です．また，Autoconfが生成するスクリプトは，`ac_top_srcdir' の
     ような変数を計算するとき，この問題を調査するので(*note
     Configuration Actions::)，これらの変数で`cd'しても安全です．

     `pwd'コマンドの議論も参照してください．

`case'
     引数を引用符で囲む必要はありません．分離は実行されません．

     最後の`;;'は不要ですが，使用した方が良いでしょう．

     `fnmatch'のバグのため，`bash'はバックススラッシュを文字クラ
     スとして正しく処理することに失敗します．

          bash-2.02$ case /tmp in [/\\]*) echo OK;; esac
          bash-2.02$

     このコードをUNIXやMS-DOSの絶対パスとして使用したいとき，非常に
     残念なことになります．このバグを回避するために，常にバックスラッシュを最
     初に書いてください．

          bash-2.02$ case '\TMP' in [\\/]*) echo OK;; esac
          OK
          bash-2.02$ case /tmp in [\\/]*) echo OK;; esac
          OK

     Ash 0.3.8のように，シェルによっては空の`case'/`esac'で混乱する
     ものもあります．

          ash-0.3.8 $ case foo in esac;
          error-->Syntax error: ";" unexpected (expecting ")")

     多くのシェルでは，カッコで囲まれているケース文をサポートしておらず，それ
     は，対になっているカッコに依存しているツールを使用している我々のような人
     間にとっては残念なことです．例えば，Solaris
     8のBourneシェルがそうです．

          $ case foo in (foo) echo foo;; esac
          error-->syntax error: `(' unexpected

`echo'
     単純な`echo'ですが，移植性の問題の根源として最も驚くべきものかもし
     れません．移植性の高い`echo'を使用することは，オプションとエスケー
     プシーケンスを削除しない限り不可能です．移植性を目標とする新しいアプリケー
     ションでは，`echo'の代わりに`printf'を使用すべきです．

     オプションを期待しないでください．`ECHO_N'などの，`-c'をシミュ
     レーションする方法は，*Note Preset Output Variables::.

     引数へのバックスラッシュは，処理について同意がとれていないので使用しない
     でください．`echo '\n' | wc -l'を用いれば，Digital Unix 4.0と MIPS
     RISC/OS 4.52の`sh'では答えは2になりますが，
     Solarisの`sh'，Bash，そしてZsh(の`sh'エミュレーションモー
     ド)では答えは1になります．問題が本当に`echo'にあることに注意して
     ください．全てのシェルは，`'\n''をバックスラッシュと`n'の組み
     合わせであると解釈します．

     これらの問題のため，不定の文字を含む文字列を`echo'に渡さないでく
     ださい．例えば，FOOの値がバックスラッシュを含んでおらず，`-'
     で始まらないことを知っている場合，`echo "$foo"'は安全ですが，それ以
     外では以下のようなヒアドキュメントを使用すべきではありません．

          cat <<EOF
          $foo
          EOF

`exit'
     `exit'のデフォルト値は`$?'を想定しています．残念ながらBash
     2.04を移植したDJGPPのように，シェルによっては`exit 0'を実行します．

          bash-2.04$ foo=`exit 1` || echo fail
          fail
          bash-2.04$ foo=`(exit 1)` || echo fail
          fail
          bash-2.04$ foo=`(exit 1); exit` || echo fail
          bash-2.04$

     `exit $?'を使用すると期待される動作に復帰します．

     `autoconf'が生成するようなシェルスクリプトなどには，以前の終了状
     態をクリーンアップする仕掛けを使用しているものもあります．シェルの最後の
     コマンドがゼロではないステータスで終了した場合も，呼び出し側がエラーの発
     生を報告できるように，ゼロでないステータスで終了する仕掛けがあります．

     残念ながら，Solaris 8 `sh'のように，シェルによっては`exit'
     コマンドの引数を無視する仕掛けが存在するものもあります．これらのシェルで
     は，その仕掛けで呼び出しがプレーンの`exit'によるものなのか， `exit
     1'によるものなのか決定できません．`exit'を直接呼び出す代
     わりに，この問題を回避するために`AC_MSG_ERROR'を呼び出してください．

`export'
     組み込みの`export'は，シェル変数を"環境変数(environment
     variable)"に複製します．変数がエクスポートされて更新される度に，環境変数
     も更新されます．反対に，環境変数はがシェルから読み出される度に，開始時に
     エクスポートされたものとして印のついたシェル変数をインポートするべきです．

     ああ，Solaris 2.5，IRIX 6.3，IRIX 5.2，AIX 4.1.5，そ してDigital
     UNIX 4.0のような多くのシェルは，受けとった環境変数を
     `export'することを忘れています．結果として，二つの変数は共存して
     います．環境変数とシェル変数の二つです．以下のコードは，この失敗を説明す
     るものです．

          #! /bin/sh
          echo $FOO
          FOO=bar
          echo $FOO
          exec /bin/sh $0

     環境変数で`FOO=foo'として実行した場合，これらのシェルはそれぞれ
     `foo'と`bar'を交互に出力しますが，`foo'を出力した後に，続
     けて`bar'を出力します．

     このため，それぞれ更新した環境変数を再び`export'すべきです．

`false'
     `false'がステータス1で終了することを期待してはいけません． Solaris
     8のネイティブなBourneシェルは，ステータス255で終了します．

`for'
     位置の引数までループするため，以下のように使用したとします．

          for arg
          do
            echo "$arg"
          done

     シェルによっては，間違って解釈するので，`for'と同じ行に`do' を
     書いては_いけません_．

          for arg; do
            echo "$arg"
          done

     明示的に位置に依存する引数を参照したい場合，`$@'のバグがあるので，
     以下のように使用してください．

          for arg in ${1+"$@"}; do
            echo "$arg"
          done

     しかし，ZshはBourneシェルエミュレーションモードでも，`${1+"$@"}'
     で単語の分離を試みるのことを覚えておいてください．`$@'の詳細は，
     *Note Shell Substitutions::を参照してください．

`if'
     `!'の使用は移植性がありません．以下の例を考えます．

          if ! cmp -s file file.new; then
            mv file.new file
          fi

     その代わりに以下を使用してください．

          if cmp -s file file.new; then :; else
            mv file.new file
          fi

     `if'の終了ステータスをリセットしないシェルもあります．

          $ if (exit 42); then true; fi; echo $?
          42

     そこでは，適切なシェルなら`0'を出力すべきです．これは，異常終了とな
     るので，`Makefile'では特に問題です．これが，Automakeが生成するよう
     な適切に書かれている`Makefile'がごちゃごちゃした構成になっている理
     由です．

          if test -f "$file"; then
            install "$file" "$dest"
          else
            :
          fi

`printf'
     `-'で始まる書式化文字列は問題になります．`bash'(例えば
     2.05b)では，それをオプション文字と解釈しエラーとなるでしょう．オプション
     の終りの印となる`--'は，書式化文字列をそのまま受けとるNetBSD
     Almquist shell (例えば0.4.6)ではよいとは言えません．`-'を`%c'
     や`%s'に書くのが，間違いを避ける最も簡単な方法でしょう．

          printf %s -foo

`pwd'
     最近のシェルを用いると，`pwd'は"論理的な"ディレクトリ名を出力
     し，その構成要素にはシンボリックリンクがある可能性があります．これらのディ
     レクトリ名は，構成要素はすべてディレクトリとなっている"物理的な"
     ディ レクトリ名とは異なります．

     POSIX 1003.1-2001では，`pwd'は，`-L' ("論理的") と`-P'
     ("物理的")オプションをサポートし，`-L'がデフォル
     トになっている必要があります．しかし，伝統的なシェルはこれらのオプション
     をサポートしておらず，`pwd'コマンドは`-P'のように動作しま す．

     移植性の高いスクリプトでは，どちらのオプションもサポートしていると仮定す
     べきではなく，どちらの動作もデフォルトと仮定すべきではありません．また，
     多くのホストは`/bin/pwd'が`pwd -P'と同じですが， POSIX
     はこの動作を要求しておらず，移植性の高いシェルではそれに
     依存すべきではありません．

     通常，そのまま`pwd'を使用するのが最善でしょう．最近のホストでは，
     これで論理的なディレクトリ名を出力し，以下の利点があります．

        * 論理的な名前はユーザが指定するものです．

        *
          物理的な名前は，インストールしたホストと，それ以外のネットワークファイル
          システムとで移植性が無いかもしれません．

        * 最近のホストでは，親ディレクトリに許可が無いと`pwd
          -P'は失敗するか
          もしれませんが，`pwd'をそのまま使うと，この理由で失敗するはずは
          ありません．

     `cd'コマンドでの議論も参照してください．

`set'
     この組み込みコマンドは，一般的なダッシュで始まる引数の問題に直面します．
     BashやZshのような現在のシェルでは，オプションの終りを指定する
     `--'(`--'以降の全ての引数は，例えば`-x'であってもパラ
     メータです)を理解しますが，ほとんどのシェルは，オプションではない引数が
     見つかるとすぐにオプションの処理を単純に停止します．このため，オプション
     の処理を終了するために`dummy'や単純に`x'を使用し，それを取り出
     すために`shift'を使用してください．

          set x $my_list; shift

     すべてのオプションを認識しないこととは"反対"の問題(例えば，`set -e
     -x'で`-x'をコマンドラインに割り当てるといった問題)があるシェルもあ
     ります．以下のように省略した方が良いでしょう．

          set -ex

`shift'
     `shift'するものが無いとき，`shift'を使用することは悪い考
     え方であるだけでなく，移植性が無くなってしまいことも追加されてしまいます．
     MIPS RISC/OS 4.52のシェルは，それを廃棄してしまいます．

`source'
     POSIXが要求していないので，このコマンドは移植性がありません．
     代わりに`.'を使用してください．

`test'
     `test'プログラムは，多くのファイルと文字列のテストを実行する方法で
     す．それは別名の`['で呼び出されることも多いのですが，M4の引用符文字
     という問題から，Autoconfのコードではその名前を使用することが要求されてい
     ます．

     `test'を使用して複数の調査を行う必要がある場合，`test'の演算子
     の`-a'と`-o'の代わりに，シェル演算子の`&&'と`||' で
     組み合わせてください．System Vでは，`-a'と`-o'の優先順位は，単
     項演算子とは間違った関係になっています．従って，POSIXはそれら
     を指定しないので，それを使用すると移植性が無くなります．同じ文で
     `&&'と`||'を組み合わせる場合，同じ優先順位があることを覚えてお
     いてください．

     `test'で`!'を使用してもかまいませんが，`if'ではでき ません．`test
     ! -r foo || exit 1'．

`test' (files)
     `configure'スクリプトでクロスコンパイルのサポートを可能にするた
     め，ホストシステムの代わりに，ビルドシステムの特徴のテストは，何もすべき
     ではありません．しかし，任意のファイルの存在を調査する必要があることが判
     明するかもしれません．そうするために`test -f'や`test -r'を使用
     してください．4.3BSDには`test -x'が無いので使用しないでく
     ださい．また，Solaris 2.5には`test -e'が無いので使用しないでくださ
     い．システム上にシンボリックリンクがあることをテストするためには，
     `test -L'ではなく`test -h'を使用して下さい．いずれも POSIX
     1003.1-2001に準拠した様式ですが，Solaris 8の
     `/bin/sh'のような古いシェルでは，`-h'だけをサポートしていま す．

`test' (strings)
     `test'は引数をオプションとして解釈するので(例えば， `STRING =
     "-n"')，特にSTRINGがダッシュで始まる場合， `test
     "STRING"'を避けてください．

     一般に信じられていることとは反対に，`test -n STRING'と `test -z
     STRING'は，移植性が*あります*．それにもかかわ らず，(Solaris
     2.5，AIX 3.2，UNICOS 10.0.0.6，Digital UNIX
     4等の)多くのシェルには信じられない優先順位があり，STRING
     がオペレータのように見える場合は混乱するかもしれません．

          $ test -n =
          test: argument expected

     危険はありますが，代わりに`test "xSTRING" = x'や`test "xSTRING" !=
     x'を使用してください．

     以下のような慣用句はのバリエーションは普通に見つかります．

          test -n "`echo $ac_feature | sed 's/[-a-zA-Z0-9_]//g'`" &&
            ACTION

     与えられているパターンに一致するとき動作します．そのような構文は，常に使
     用を避けるべきです．

          echo "$ac_feature" | grep '[^-a-zA-Z0-9_]' >/dev/null 2>&1 &&
            ACTION

     シェルの組み込みコマンドなのでより速くなっているため，可能な場所では
     `case'を使用してください．

          case $ac_feature in
            *[!-a-zA-Z0-9_]*) ACTION;;
          esac

     ああ，POSIXの構文`[!...]'をサポートしていないシェルは
     知りませんが，文字クラスの否定は移植性が無いかもしれません(対話的モード
     では，`zsh'は`[!...]'の構文で混乱し，`!'のため，ヒ
     ストリ内のイベントを探します)．多くのシェルは，構文`[^...]' の
     代替物をサポートしていません(Solaris，Digital Unix等)．

     以下は解決方法の一つです．

          expr "$ac_feature" : '.*[^-a-zA-Z0-9_]' >/dev/null &&
            ACTION

     以下の方が良いかもしれません．

          expr "x$ac_feature" : '.*[^-a-zA-Z0-9_]' >/dev/null &&
            ACTION

     `FOO'がバックスラッシュを含んでいるとき問題を回避するので， `expr
     "XFOO" : "XBAR"'は，`echo "XFOO" | grep "^XBAR"'より堅牢です．

`trap'
     少なくとも，シグナルの1，2，13，そして15をトラップすることは安全です．ま
     た，0のトラップも可能で，すなわち，スクリプトが終るとき(明示的な
     `exit'やスクリプトの終り)に`trap'を実行するということで す．

     POSIXでは，この点は絶対的に明確ではありませんが，`$?'をト
     ラップするとき，トラップの前の最後に実行されたコマンドの終了ステータスが
     設定されるべきだということは，広く認められています．曖昧な部分は以下のよ
     うに要約可能です．"トラップが`exit'で開始されるとき，実行された
     _最後の_コマンドは何でしょう？`exit'の直前ですか？それとも
     `exit'自身ですか？"

     Bashは`exit'を最後のコマンドと考えますが，ZshとSolaris 8
     `sh'は，トラップが実行されたとき`exit'の処理_中_ な
     ので，トラップを受信する前の終了ステータスだと考えられます．

          $ cat trap.sh
          trap 'echo $?' 0
          (exit 42); exit 0
          $ zsh trap.sh
          42
          $ bash trap.sh
          0

     移植性の解決方法は簡単です．`exit 42'にしたいとき，`(exit 42);
     exit 42'を実行し，最初の`exit'はZshに対する42の終了ステータスを
     設定するために使用され，二番目は，トラップを誘発し，Bashに対して終了ステー
     タスとしての42を渡すためです．

     FreeBSD 4.0のシェルには，以下のバグがあります．コードが内部
     `trap'の場合，空行で`$?'が0にリセットされます．

          $ trap 'false
          
          echo $?' 0
          $ exit
          0

     幸運にもこのバグは`trap'のみに影響します．

`true'
     心配しないでください．我々が知っている限り`true'には移植性があり
     ます．それにもかかわらず，常に組み込みコマンドというわけではなく(例えば
     Bash 1.x)，移植性の高いシェルのコミュニティは，`:'の使用を好みが
     ちです．これには副作用があります．`false'が`true'より移
     植性が高いかどうか尋ねてみたときのAlexandre Oliva の回答です．

          それらが存在しない場合，シェルは，`false'に対しては正しく，
          `true'に対しては正しくない，異常終了のステータスを生成するので，
          ある意味ではそのとおりです．

`unset'
     `unset'のサポートを仮定することはできません．それにもかかわらず，
     `PS1'のような邪魔な変数を利用不可能にすることは非常に役立つので，存
     在をテストし，_提供されていれば_それを使用し，`unset'がサポー
     トされていないときは，無効にする値を与えてください．

          if (unset FOO) >/dev/null 2>&1; then
            unset=unset
          else
            unset=false
          fi
          $unset PS1 || PS1='$ '

     無効にする値については，*Note Special Shell Variables::.
     また，環境変数の caseについては`export'のドキュメント*Note
     Limitations of Builtins::も参照してください．


File: autoconf-ja.info,  Node: Limitations of Usual Tools,  Next: Limitations of Make,  Prev: Limitations of Builtins,  Up: Portable Shell

通常のツールの制限
==================

あらゆるマシンで見つかることが期待できる小さなツールセットには，知ってお
くべき制限がいくつか含まれているはずです．

`awk'
     ユーザ関数呼び出しで，カッコの前に空白を残さないでください． GNU
     awkはそれを拒絶します．

          $ gawk 'function die () { print "Aaaaarg!"  }
                  BEGIN { die () }'
          gawk: cmd. line:2:         BEGIN { die () }
          gawk: cmd. line:2:                      ^ parse error
          $ gawk 'function die () { print "Aaaaarg!"  }
                  BEGIN { die() }'
          Aaaaarg!

     プログラムを決定的にしたい場合，配列上の`for'に依存しないでください．

          $ cat for.awk
          END {
            arr["foo"] = 1
            arr["bar"] = 1
            for (i in arr)
              print i
          }
          $ gawk -f for.awk </dev/null
          foo
          bar
          $ nawk -f for.awk </dev/null
          bar
          foo

     HP-UX
     11.0のネイティブのAWKのように，内部アンカーに調子が悪い正規表現の
     エンジンがあるものもあります．

          $ echo xfoo | $AWK '/foo|^bar/ { print }'
          $ echo bar | $AWK '/foo|^bar/ { print }'
          bar
          $ echo xfoo | $AWK '/^bar|foo/ { print }'
          xfoo
          $ echo bar | $AWK '/^bar|foo/ { print }'
          bar

     そのようなパターンに依存したり(すなわち，`/^(.*foo|bar)/'を使用する)，
     そのようなAWKを拒絶する単純なテストを使用したりしないでください．

`cat'
     オプションに依存しないようにしてください．しかし，表示不可能な文字を表示
     するオプション`-v'は，移植性が_ありそうです_．

`cc'
     `cc foo.c -o foo'のようなコンパイルが失敗したとき，(Reliant
     UNIXのCDSのように)`foo.o'を残すコンパイラもあります．

     HP-UX `cc'は，プリプロセスとアセンブラを行なう`.S'ファイル
     を受け入れません．`cc -c foo.S'は成功したように見えますが，実際には
     何もしません．

     `cc foo.c'で生成されるデフォルトの実行形式は，以下のようになるはず
     です．

        * `a.out' -- 通常のUnixの慣習です．

        * `b.out' -- i960 コンパイラ(`gcc'を含む)．

        * `a.exe' -- `gcc'が移植されたDJGPP．

        * `a_out.exe' -- OpenVMS上のDEC Cに対するGNV `cc'ラッパー．

        * `foo.exe' -- 様々なMS-DOSのコンパイラ．

`cmp'
     `cmp'は，二つのファイルの生のデータの比較を実行しますが，
     `diff'は二つのテキストファイルを比較します．そのため，
     DOSのファイルを比較する場合，二つのファイルが異なっているかど
     うかを調査するだけの場合でも改行のエンコードの違いで見せかけの差が発生す
     ることを避けるため，`diff'を使用してください．

`cp'
     伝統的に，ファイルのタイムスタンプの分解能は一秒になっていて，`cp
     -p'ではタイムスタンプをそのままコピーします．しかし，最近のファイルシス
     テムには分解能が1ナノ秒のタイムスタンプになっているものもたくさんありま
     す．残念ながら，`cp -p'の実装ではファイルのコピー時にタイムスタンプ
     を切り詰めるので，このためコピーされたファイルが結果としてソースよりも古
     くなってしまいます．切り詰めの正確な量は`cp'が使用するシステムコー
     ルの分解能に依存します．伝統的に，これは`utime'で，それは分解能が1
     秒になっていますが，新しい`cp'の実装では`utimes'を使用して
     いて，それは分解能が1マイクロ秒になっています．これらの新しい実装には，
     GNU coreutils 5.0.91やそれ以降，そしてSolaris 8
     (sparc)のパッチ109933-02
     やそれ以降が含まれます．残念ながら，2003年9月の段階では，完全なナノ秒の
     分解能を持つタイムスタンプを設定するシステムコールはありません．

     SunOS `cp'は`-f'をサポートしていませんが，その
     `mv'はサポートしています．`mv'と`cp'が
     `-f'に関して異なっている理由については由来が推測できます．
     `mv'はデフォルトで，読み込み専用のファイルを上書きする前にプロン
     プトを表示します．`cp'はそうではありません．そのため，
     `mv'には`-f'オプションが必要ですが，`cp'には不要
     です．`mv'と`cp'は，読み込み専用のファイルに対して，動作
     が異なり，その理由は，最も簡単な`cp'の形式では，読み込み専用のファ
     イルを上書きできませんが，最も簡単な`mv'形式では，それが可能だと
     いうことです．この理由は，`cp'はターゲットを書き込みアクセスで開
     くのに対し，`mv'は単純に`link'(または，新しいシステムでは
     `rename')を呼び出すためです．

     Bob Proulxは，`cp -p'は常に所有権のコピーを_試みる_とメモして
     います．しかし，実際に所有権をコピーするかどうかは，カーネルで実装されて
     いるシステムポリシーの決定に依存します．カーネルが許可している場合はそう
     なります．カーネルが許可していない場合は，そうなりません．`cp'自
     身が制御しているものではありません．

     SysVでは，ユーザはファイルを別のユーザにchown可能で，SysVにはstickyでは
     ない`/tmp'もあります．それは疑い無く，敵意のあるユーザのいないビジ
     ネス環境のSysVの遺産に由来しています．BSDは，rootだけがファイ
     ルを`chown'可能にし，stickyな`/tmp'を使用して，これをより安
     全なモデルに変更しました．それは疑い無く，キャンパス環境のBSD
     の遺産に由来します．

     LinuxはデフォルトでBSDに準拠していますが，`chown'可能
     に設定することも可能です．別の例として，HP-UXはSysVに準拠していますが，
     最近のセキュリティモデルを使用するよう設定し，`chown'できなくす
     ることが可能です．それは管理者が設定可能なパラメータなので，動作を示すた
     めにカーネル名を使用することは不可能です．

`date'
     `date'のバージョンによっては，特殊な%による指示語を理解しないも
     のもあり，残念ながら警告をする代わりに，それをそのまま通過させ，正しく終
     了します．

          $ uname -a
          OSF1 medusa.sis.pasteur.fr V5.1 732 alpha
          $ date "+%s"
          %s

`diff'
     `-u'には移植性がありません．

     Tru64のように，実装によっては`/dev/null'の比較で失敗するものもあり
     ます．その代わりに空のファイルを使用してください．

`dirname'
     全てのホストに動作する`dirname'があるわけではなく，その代わりに
     `AS_DIRNAME'を使用すべきです(*note Programming in M4sh::)．例えば以
     下のようにします．

          dir=`dirname "$file"`       # This is not portable.
          dir=`AS_DIRNAME(["$file"])` # This is more portable.

     これは，POSIXで要求されている標準では，幾分微妙な扱いです．例
     えばUN*Xでは`//1'は`/'になるのでしょうか？以下はPaul Eggertの
     回答です．

          古いUnixライクのものではそうはならず，前置される`//'は特殊なパス名
          になります．それは"スーパールート"を参照し，他のマシンのファイルをアク
          セスするために使用されます．前置される`///'，`////'などは，
          `/'と等価です．しかし，前置される`//'は特殊です．この伝統的は
          Apollo
          Domain/OSで始まったと考えていて，古いホストではまだそのOS
          を使用 しています．

          POSIXでは可能ですが，`//'に対する特別扱いは要求されていま
          せん．そこでは，形式`//([^/]+/*)?'のパス名でのdirnameの動作は，実装
          で定義されると告げています．これらの場合，GNU
          `dirname'は`/'を返しますが，古いUnixライクのものでも動作す
          るように`//'を返した方が移植性が高いでしょう．

`egrep'
     POSIX 1003.1-2001では，もはや`egrep'を要求していません
     が，より古いホストの多くはまだPOSIXの`grep -E'での置換を
     サポートしていません．この問題を回避するため，`AC_PROG_EGREP' を呼
     び出し，`$EGREP'を使用してください．

     空の代入は移植性が無く，代わりに`?'を使用してください．例えば，
     Digital Unix v5.0では以下のようになります．

          > printf "foo\n|foo\n" | $EGREP '^(|foo|bar)$'
          |foo
          > printf "bar\nbar|\n" | $EGREP '^(foo|bar|)$'
          bar|
          > printf "foo\nfoo|\n|bar\nbar\n" | $EGREP '^(foo||bar)$'
          foo
          |bar

     `$EGREP'も`grep'の制限で苦しむことになります．

`expr'
     `x'で始まる`expr'キーワードはないので，`expr'が
     WORDを間違って解釈しないように，`expr x"WORD" :
     'xREGEX''を使用してください．

     `length'，`substr'，`match'，そして`index'は使用し ないでください．

`expr' (`|')
     `|'を使用することは可能です．POSIXでは，`expr ''' が
     空の文字列を返すことを必須としていませんが，空の文字列を用いて空の文字列
     (またはゼロ)とともに`|'を用いたときの結果は安全ではありません．例え
     ば以下を考えます．

          expr '' \| ''

     GNU/LinuxとPOSIX.2-1992では，この場合は空の文字列を
     返しますが，伝統的なUNIXでは`0'を返します(Solarisはそのような
     例の一つです)．最近のPOSIX.1-2001ドラフトでは，その指定は伝統
     的なUNIXの動作に一致するよう変更されています(信じられないことですが，
     これを修正するには時すでに遅しです)．同じ問題が，計算結果が空の文字列に
     なるときにも，以下の状態では発生します．

          expr bar : foo \| foo : bar

     空の文字列を避けることで，この移植性の問題を避けてください．

`expr' (`:')
     Solarisではサポートされていないので，パターン内に，`\?'，`\+'，
     そして`\|'を使用しないでください．

     POSIX標準では，`expr 'a' : '\(b\)''が`0'を出力するか
     空の文字列を出力するのかは明確ではありません．実際問題として，それはほと
     んどのプラットフォームで空の文字列を出力しますが，移植性の高いスクリプト
     では，これを仮定すべきではありません．例えば，QNX 4.25 ネイティ
     ブの`expr'は`0'を返します．

     均一な動作を得る手段として，デフォルト値として空の文字列を使用することに
     なっていると信じているかもしれません．

          expr a : '\(b\)' \| ''

     残念ながら，これは元の式として正確に動作します．詳細は， ``expr'
     (`:')'の項目を参照してください．

     古い`expr'の実装(例えば，SunOS 4の`expr'とSolaris 8の
     `/usr/ucb/expr')には，一致したサブ文字列が120バイトより長い場合，
     `expr'が異常終了するという，思慮の欠けた長さの制限があります．こ
     の状況では，`expr'が失敗した場合，`echo|sed'に頼りたいと思
     うかもしれません．

     残っているものはそれだけではありません！

     QNX 4.25の`expr'には，空の文字列ではなく`0'となる
     ことに加えて，終了ステータスでおかしな動作があります．それはカッコが使用
     されているときには，常に1になるということです！

          $ val=`expr 'a' : 'a'`; echo "$?: $val"
          0: 1
          $ val=`expr 'a' : 'b'`; echo "$?: $val"
          1: 0
          
          $ val=`expr 'a' : '\(a\)'`; echo "?: $val"
          1: a
          $ val=`expr 'a' : '\(b\)'`; echo "?: $val"
          1: 0

     実際に，(`sed'のような)他の手法で`expr'プログラムで異常
     終了を捕獲する準備がある場合，結果を二回得る可能性があるので，これは大き
     な問題となります．例えば以下を考えます．

          $ expr 'a' : '\(a\)' || echo 'a' | sed 's/^\(a\)$/\1/'

     ほとんどのホストでは`a'を出力しますが，QNX 4.25では
     `aa'になります．単純な回避方法として，`expr'でのテストを構
     成し，結果によって`expr'や`false'で変数を設定する方法を
     使用します．

`fgrep'
     POSIX 1003.1-2001では，もはや`fgrep'を要求していません
     が，より古いホストの多くはまだPOSIXの`grep -F'での置換を
     サポートしていません．この問題を回避するため，`AC_PROG_FGREP' を呼
     び出し，`$FGREP'を使用してください．

`find'
     オプション`-maxdepth'はGNU特有のようです．Tru64 v5.1， NetBSD
     1.5，そしてSolaris 2.5の`find'コマンドはそれを 理解しません．

     `{}'の置換は，引数が正確に_{}_の場合のみ保証され，それが引
     数の一部の場合は保証されません．例えば，DUとHP-UX 10.20とHP-UX
     11では保 証されません．

          $ touch foo
          $ find . -name foo -exec echo "{}-{}" \;
          {}-{}

     一方，GNU `find'は`./foo-./foo'を報告します．

`grep'
     System Vの`grep -s'はエラーメッセージのみ抑制し，出力を抑制しないの
     で，出力を抑制するために`grep -s'を使用しないでください．その代わり
     に(ファイルが存在しない場合) `grep'の標準出力と標準エラー出力を
     `/dev/null'へリダイレクトしてください．一致が見つかったかどうかを決
     定するために，`grep'の終了ステータスを調査してください．

     最後のパターンのみ尊重する`grep'(例えば，AIX 6.5とSolaris
     2.5.1)もあるので，`-e'で複数の正規表現を使用しないでください．ど
     ちらにしろ，Stardent Vistra SVR4の`grep'には`-e' がありませ ん....
     その代わりに拡張した正規表現と代入を使用してください．

     Irix 6.5.16mの`grep'は，それをサポートしていないので，
     `-w'に依存しないようにしてください．

`ln'
     `-f'オプションがある`ln'に依存しないようにしてください．
     古いシステムではシンボリックリンクは利用不可能です．移植性のある代替物
     `$(LN_S)'を使用してください．

     2.04以前のバージョンのDJGPPに対して，`ln'は実行形式へのソフトリ
     ンクを，実際のプログラムを呼び出すスタブを生成することでエミュレートしま
     す．この機能は，Unix独自の実行形式以外のファイルでも動作します．そのため，
     `ln -s file link'は`link.exe'を生成し，それは実行された場合に
     `file.exe'の呼び出しを試みます．しかしこの機能は実行形式に対しての
     み動作するので，このシステムでは`cp -p'が代わりに使用されます．
     DJGPPの2.04とそれ以降では完全なシンボリックリンクがサポートされています．

`ls'
     移植性のあるオプションは`-acdilrtu'です．最近では，`-l' で
     所有者とグループを出力しますが，伝統的な`ls'はグループを省略しま
     す．

     最近では，すべての診断結果は標準エラー出力に出てきますが，伝統的な
     `ls foo'は，`foo'が存在しない場合，メッセージ`foo not
     found'を標準出力に出力します．伝統的な`ls'では，`.c'ファイ
     ルが無い場合，`sources=`ls *.c 2>/dev/null`'は`sources="*.c not
     found"'と等価なので，そのようなシェルコマンドを書くときに注意してく
     ださい．

`mkdir'
     `mkdir'のオプションには移植性はありません．`mkdir -p
     FILENAME'の代わりに`AS_MKDIR_P(FILENAME)'を使用すべきで す(*note
     Programming in M4sh::)．

`mv'
     移植性のあるオプションは，`-f'と`-i'のみです．

     ファイルシステム間で個別にファイルを移動することは(V6では)移植性がありま
     すが，常に強力でははありません．`mv new existing'をするとき，
     `existing'の古いものも新しいものも実際には存在していないという危険
     な状態が存在します．

     ファイルを`/tmp'から移動することで，これらのファイルを作成していた
     としても，好ましくない(が，まったく有効な)警告を発生することがあることを
     覚えておいてください．システムによっては，`/tmp'にファイルを作成す
     ると，guidを自分が所属していない`wheel'に設定するものもあります．そ
     のためファイルがコピーされると，`chgrp'で失敗します．

          $ touch /tmp/foo
          $ mv /tmp/foo .
          error-->mv: ./foo: set owner/group (was: 3830/0): Operation not permitted
          $ echo $?
          0
          $ ls foo
          foo

     この動作は，POSIXに準拠しています．

          何らかの理由でファイル属性の複製に失敗する場合，`mv'は診断メッセー
          ジを標準エラー出力に書き出しますが，この異常終了で，`mv'は終了ス
          テータスを変更しません．

     マウントポイントをまたがってディレクトリを移動することは移植性が無いので，
     `cp'と`rm'を使用してください．

     開いているファイルの移動/削除は移植性がありません．以下の例はDOS/WIN32
     では実行不可能です．

          exec > foo
          mv foo bar

     以下も実行不可能です．

          exec > foo
          rm -f foo

`sed'
     文字クラスの一部の場合でも，パターンに(エスケープされていない)セパレータ
     を含めるべきではありません．POSIX準拠では，Crayの`sed'
     は`s/[^/]*$//'を拒絶します．`s,[^/]*$,,'を使用してください．

     sedのスクリプトは，八文字以上の分岐ラベルを使用すべきではなく，コメント
     を含めるべきでもありません．

     NetBSD 1.4.2では，二番目のものをコマンドとして解釈しようと試み
     るので，`sed'によっては，余分な`;'を含めてはなりません．

          $ echo a | sed 's/x/x/;;s/x/x/'
          sed: 1: "s/x/x/;;s/x/x/": invalid command code ;

     `sed'によっては，入力バッファに4000バイトの制限があるものもある
     ので，入力は妥当な長さの行にすべきです．

     `\|'の交換は一般的ですが，POSIXはそのサポートを要求してい
     ないので，移植性の高いスクリプトでは避けるべきです．Solaris 8の
     `sed'は交換をサポートしていません．例えば，`sed '/a\|b/d''
     は，リテラル文字列`a|b'を含んでいる行のみ検出します．

     グループ内のアンカー(`^'と`$')は移植性がありません．

     パターン内の入れ子状のカッコは，現在のホストでは完全に移植性あるものなの
     ですが，SVR3のように古い`sed'の実装ではサポートされていません．

     もちろんオプション`-e'には移植性がありますが，それは不要です．ダッ
     シュで始まる有効なsedプログラムは無いので，明確にする役には立ちません．
     唯一の有効性は，以下のように字下げを強制的に行なうときです．

          sed -e INSTRUCTION-1 \
              -e INSTRUCTION-2

     これは以下の代わりのものです．

          sed INSTRUCTION-1;INSTRUCTION-2

     もう一つの垢抜けた伝説として，"マッチしたもの"を意味する`s'コマン
     ドの一部を置換するとき，`&'を使用しても移植性はあるでしょう．すべて
     のベル研究所のV7 `sed'の子孫は(少なくとも，我々はそれより古い
     `sed'を経験したことはありません)サポートしています．

     POSIXでは，`!'とそれ以降のコマンドの間に空白があってはい
     けません．アドレスと`!'の間の空白はOKです．例えば，Solaris 8では以
     下のようになります．

          $ echo "foo" | sed -n '/bar/ ! p'
          error-->Unrecognized command: /bar/ ! p
          $ echo "foo" | sed -n '/bar/! p'
          error-->Unrecognized command: /bar/! p
          $ echo "foo" | sed -n '/bar/ !p'
          foo

`sed' (`t')
     古いシステムには，新しいサイクルと開始するとき，その`t'フラグをリセッ
     トすることを"忘れる" `sed'があるシステムもあります．例えば， MIPS
     RISC/OSとIRIX 5.3で，以下の`sed'スクリプトを
     実行した場合を考えます(行番号は，実際にはテキストの一部ではありません)．

          s/keep me/kept/g  # a
          t end             # b
          s/.*/deleted/g    # c
          : end             # d

     ファイルの内容は以下を考えます．

          delete me         # 1
          delete me         # 2
          keep me           # 3
          delete me         # 4

     以下のようになります．

          deleted
          delete me
          kept
          deleted

     以下のようにはなりません．

          deleted
          deleted
          kept
          deleted

     なぜでしょう？一行目を処理しているとき，マッチするのでtフラグがセットさ
     れ，b行からd行まで移動し，出力が生成されます．二行目を処理しているとき，
     tフラグはセットされたままです(これはバグです)．しかし，a行はマッチに失敗
     しますが，置換が失敗するとき，`sed'はtフラグをクリアすることをサ
     ポートしていません．そのため，フラグがセットされているように見えるb行は，
     それをクリアし，dへ移動し，その結果，`deleted'の代わりに `delete
     me'になります．三行目を処理しているとき，マッチを示すt がク
     リアされるため，フラグがセットされ，その結果，b行はフラグをクリアし移動
     します．最終的にフラグはクリアになっているので，四行目は正しく処理されま
     す．

     `sed'の`t'について覚えておくべきことは二つあります．最初に，
     成功した置換に_よっては_，置換の直前だけでなく`t'ジャンプする
     ことを覚えておいてください．そのため，tフラグを実際にリセットするために，
     ごまかしの`t clear; : clear'を使用してください．

     二番目は，それぞれの新しいサイクルでフラグをクリアするのを`sed'
     に依頼することはできません．

     上記のスクリプトの移植性の高い実装の一つは，以下のようになります．

          t clear
          : clear
          s/keep me/kept/g
          t end
          s/.*/deleted/g
          : end

`touch'
     要求されるタイムスタンプ(例えば`-r'オプション)を指定する場合，
     `touch'は通常，`utime'や`utimes'システムコールを使用し，
     結果として，`cp -p'に存在するタイムスタンプの切り詰めの問題と同様の
     結果になるはずです．

     古いBSDシステムには，空のファイルに対する`touch'のよう
     なコマンドで，タイムスタンプを更新しない結果となるものもあるので，回避す
     るために，`echo'のようなコマンドを使用してください．

     GNU `touch' 3.16r(とそれ以前の全て)は，空のファイルが
     NFSでマウントされている4.2のボリュームのとき，SunOS 4.1.3 での
     動作で異常終了します．


File: autoconf-ja.info,  Node: Limitations of Make,  Prev: Limitations of Usual Tools,  Up: Portable Shell

Makeの制限
==========

   `make'自身には非常に多くの制限があるので苦労します，ここではわず
かですが紹介します．とにかく，シェルによってコマンドが実行されるので，そ
の弱い部分の全てが継承されていくということを覚えておいてください ....

`$<'
     POSIXでは，`makefile'の構成物の`$<'は推測される規則
     と`.DEFAULT'ルールのみで使用可能だと告げています．通常のルールでの
     その意味は明記されていません．例えば，Solaris 8の`make'はそれを
     引数で置換します．

マクロ名へのアンダースコアの前置
     NEWS-OS
     4.2Rのように，マクロ名にアンダースコアを前置することをサポートし
     ていない`make'もあります．

          $ cat Makefile
          _am_include = #
          _am_quote =
          all:; @echo this is test
          $ make
          Make: Must be a separator on rules line 2.  Stop.
          $ cat Makefile2
          am_include = #
          am_quote =
          all:; @echo this is test
          $ make -f Makefile2
          this is test

マクロへのバックスラッシュの後置
     HP-UXのバージョンによっては，`make'には，バックスラッシュ以降の
     複数の改行を，空ではない行も含めて読み込むものもあります．例えば以下のよ
     うにします．

          FOO = one \
          
          BAR = two
          
          test:
                  : FOO is "$(FOO)"
                  : BAR is "$(BAR)"

     `FOO'は`one BAR = two'と等価です．それ以外の`make'では，
     バックスラッシュは直後の行だけを含みます．

コメント内のエスケープされた改行
     POSIXによると，`Makefile'のコメントは`#'ではじまり，
     エスケープされていない改行まで続きます．

          % cat Makefile
          # A = foo \
                bar \
                baz
          
          all:
                  @echo ok
          % make   # GNU make
          ok

     しかし現実では，これは常にそうではありません．実装によっては，`#'
     から行末までを廃棄し，後置されるバックスラッシュを無視するものもあります．

          % pmake  # BSD make
          "Makefile", line 3: Need an operator
          Fatal errors encountered -- cannot continue

     このため，複数行の定義をコメントアウトしたい場合，最初の行だけでなく，そ
     れぞれの行に`#' を前置してください．

          # A = foo \
          #     bar \
          #     baz

`make macro=value'とサブ呼び出しの`make'
     コマンドライン変数の`foo=bar'のような定義は，`Makefile'の
     `foo'の定義に優先します．(GNU `make'のような)
     `make'の実装によっては，この優先はサブ呼び出しの`make'
     に伝搬します．古い実装によっては，それ以下の`make'に代入を渡さな
     いものもあります．

          % cat Makefile
          foo = foo
          one:
                  @echo $(foo)
                  $(MAKE) two
          two:
                  @echo $(foo)
          % make foo=bar            # GNU make 3.79.1
          bar
          make two
          make[1]: Entering directory `/home/adl'
          bar
          make[1]: Leaving directory `/home/adl'
          % pmake foo=bar           # BSD make
          bar
          pmake two
          foo

     サブ呼び出しの`make'に`foo=bar'の優先を伝搬したい場合，移植
     性を持たせる方法が無いわけではありません．その一つは，すべての環境変数を
     `Makefile'マクロ定義に優先させる`-e'オプションを使用し，
     FOOを環境変数として定義する方法です．

          % env foo=bar make -e

     `-e'オプションは，自動的にサブ呼び出しの`make'に伝搬し，環
     境変数は`make'の呼び出し間で継承されるので，`foo'マクロはサ
     ブ呼び出しの`make'で期待したように優先されます．

     この構文(`foo=bar make -e')は，`Makefile'の外で使用するときだ
     け，例えば，スクリプトやコマンドラインのときだけ移植性があります．
     `make'ルール内で実行するとき，GNU `make' 3.80とそれ以前
     のバージョンは，それ以下での`make'に`-e'オプションを伝搬さ
     せることを忘れています．

     更に`-e'を使用することで，`Makefile'で通常定義されるその他のマ
     クロが環境変数に含まれている場合，予期しない副作用があるかもしれません．
     (以下の`make -e'と`SHELL'の注意も参照してください．)

     サブ呼び出しの`make'に優先物を伝搬させるもう一つの方法は，
     `Makefile'に手動で行なうことです．

          foo = foo
          one:
                  @echo $(foo)
                  $(MAKE) foo=$(foo) two
          two:
                  @echo $(foo)

     そうする場合，ユーザが優先したいと思われるすべてのマクロを予測する必要が
     あります．

`SHELL'マクロ
     POSIX準拠の`make'では，シェルプロセスを起動したり，
     `Makefile'ルールを実行するために，内部で`$(SHELL)'マクロを使用
     します．これは`make'で提供される組み込みマクロですが，
     `Makefile'やコマンドライン引数で変更することが可能です．

     すべての`make'が，この`SHELL'マクロを定義するわけではありま
     せん．例えば，OSF/Tru64 `make'がそうです．この実装では，常に
     `/bin/sh'を使用します．そのため，`Makefile'で常に`SHELL'
     を定義するのは良い考えです．Autoconfを使用している場合，以下のようにして
     ください．

          SHELL = @SHELL@

     POSIX準拠の`make'では，`make -e'が使用されている
     場合でも，環境変数から$(SHELL)の値を入手してはなりません(そうでない場合，
     `SHELL=/bin/tcsh'の状況でルールによって何が起こるのか考えてみてくだ
     さい)．

     しかし，すべての`make'がこのような例外を実装しているわけではあり
     ません．例えば，OSF/Tru64 `make'は`SHELL'を使用しないので，
     保護していなくても不思議ではありません．

          % cat Makefile
          SHELL = /bin/sh
          FOO = foo
          all:
                  @echo $(SHELL)
                  @echo $(FOO)
          % env SHELL=/bin/tcsh FOO=bar make -e   # OSF1 V4.0 Make
          /bin/tcsh
          bar
          % env SHELL=/bin/tcsh FOO=bar gmake -e  # GNU make
          /bin/sh
          bar

ルール内のコメント
     コメントをルールに書き込まないでください．

     タブで始まるものは，タブの直後に`#'が続いていても，すべて現在のルー
     ルのコマンドとして扱う`make'もあります．Tru64 Unix V5.1の
     `make'はその一つです．以下の`Makefile'で，シェルで`#
     foo'を実行します．

          all:
                  # foo

`obj/'サブディレクトリ
     びっくりしたくなければ，サブディレクトリを`obj/'と命名しないでくだ
     さい．

     `obj/'ディレクトリが存在する場合，BSD `make'は
     `Makefile'を読み込む前に，そのなかに入ります．このため，現在のディ
     レクトリの`Makefile'は読み込まれません．

          % cat Makefile
          all:
                  echo Hello
          % cat obj/Makefile
          all:
                  echo World
          % make      # GNU make
          echo Hello
          Hello
          % pmake     # BSD make
          echo World
          World

`make -k'
     `make -k'の終了ステータスに依存しないようにしてください．終了ステー
     タスがエラーかどうかを反映する実装もあります．それ以外の実装では，常に成
     功します．

          % cat Makefile
          all:
                  false
          % make -k; echo exit status: $?    # GNU make
          false
          make: *** [all] Error 1
          exit status: 2
          % pmake -k; echo exit status: $?   # BSD make
          false
          *** Error code 1 (continuing)
          exit status: 0

`VPATH'
     POSIXでは，`VPATH'サポートを指定していません．多くの
     `make'は`VPATH'サポートの形式がありますが，その実装は，
     `make'間で一貫していません．

     `VPATH'機能を必要としている人々への最高の提案は，`make'の実
     装を選択しそれに固執するようにと言うことかもしれません．`Makefile'
     の結果は常に移植性があるとは限らないので，移植性の高い`make'を選
     択するのが良いでしょう(ヒント，ヒント)．

     `VPATH'の実装の既知の問題には以下のものがあります．

    `VPATH'と二重のコロンのルール
          `VPATH'への代入で，Sunの`make'は最初の二重コロンのルールの
          組だけを実行します．(このコメントは，1994年からで，現在は無くなっていま
          す．SunOS
          4では移植性があります．これが再生成された場合，それを説明する
          テストケースを送ってください．)

    明示的なルールで`$<'がサポートされていない
          他でも述べたように，明示的なルールで`$<'を使用するのは移植性があり
          ません．必要条件のファイルは，ルール内で明示的な名前にすべきです．
          `VPATH'の検索で必要条件を見つけたい場合，手動でコード全体を書く必要
          があります．例えば，以下のようなパターンを使用します．

               VPATH = ../src
               foo.o: foo.c
                       cc -c `test -f foo.c || echo ../src/`foo.c -o foo.o

    自動的なルールの再書き込み
          SunOS `make'のように，`VPATH'で必要条件を探し，出現するたび
          に適切なルールにを再書き込みする`make'の実装もあります．

          例えば，以下を考えます．

               VPATH = ../src
               foo.o: foo.c
                       cc -c foo.c -o foo.o

          `foo.c'が`../src'で見つかった場合，`cc -c ../src/foo.c -o
          foo.o'を実行します．素晴らしいと思います．

          しかし，それ以外の`make'の実装では，これに依存することは不可能で，
          `VPATH'を手動で検索する必要があります．

               VPATH = ../src
               foo.o: foo.c
                       cc -c `test -f foo.c || echo ../src/`foo.c -o foo.o

          しかし"必要条件の再書き込み"はこれに適用されます．そのため，
          `../src'に`foo.c'がある場合，SunOSの`make'は以下を実行
          します．

               `cc -c `test -f ../src/foo.c || echo ../src/`foo.c -o foo.o'

          以下を生成します．

               cc -c foo.c -o foo.o

          そしてこのために失敗します．あぁ．

          回避策の一つは，ルールのなかに`foo.c'をそのまま書いていないことを確
          かめることです．例えば，以下の三つのルールは安全です．

               VPATH = ../src
               foo.o: foo.c
                       cc -c `test -f ./foo.c || echo ../src/`foo.c -o foo.o
               foo2.o: foo2.c
                       cc -c `test -f 'foo2.c' || echo ../src/`foo2.c -o foo2.o
               foo3.o: foo3.c
                       cc -c `test -f "foo3.c" || echo ../src/`foo3.c -o foo3.o

          必要条件がマクロ内にあるとき，事態はより悪くなります．

               VPATH = ../src
               HEADERS = foo.h foo2.h foo3.h
               install-HEADERS: $(HEADERS)
                       for i in $(HEADERS); do \
                         $(INSTALL) -m 644 `test -f $$i || echo ../src/`$$i \
                           $(DESTDIR)$(includedir)/$$i; \
                       done

          上記の`install-HEADERS'ルールは，`for i in $(HEADERS);'は
          `for i in foo.h foo2.h foo3.h;'に展開され，`foo.h'と
          `foo2.h'はそのまま単語となり，このためサブジェクトは`VPATH' に
          調整されるので，SunOSでは信頼できません．

          三つのファイルが`../src'にある場合，このルールは以下のように実行さ
          れます．

               for i in ../src/foo.h ../src/foo2.h foo3.h; do \
                 install -m 644 `test -f $i || echo ../src/`$i \
                    /usr/local/include/$i; \
               done

          最初の二つの`install'の呼び出しは失敗します．例えば，
          `foo.h'をインストールする事を考えます．

               install -m 644 `test -f ../src/foo.h || echo ../src/`../src/foo.h \
                 /usr/local/include/../src/foo.h;

          以下を生成します．

               install -m 644 ../src/foo.h /usr/local/include/../src/foo.h;

          手動の`VPATH'の検索には問題が無いことに注意してください．しかし，こ
          のコマンドは，間違ったディレクトリに`foo.h'をインストールします．

          ここまで，いくつかの`Makefile'で`foo.c'に対して行なってきた，
          `$(HEADERS)'をどうにかして引用符で囲むことは役に立ちません．

               install-HEADERS: $(HEADERS)
                       headers='$(HEADERS)'; for i in $$headers; do \
                         $(INSTALL) -m 644 `test -f $$i || echo ../src/`$$i \
                           $(DESTDIR)$(includedir)/$$i; \
                       done

          実際，`headers='$(HEADERS)''は`headers='foo.h foo2.h foo3.h''
          に展開され，`foo2.h'はそのまま単語になります．(一方，
          `headers='$(HEADERS)'; for i in $$headers;'の慣用句は，`for i
          in;'で構文エラーになるシェルもあるので，`$(HEADERS)'が空の場合は良
          い考えです．)

          回避方法の一つは，不要な`../src/'の接頭辞を手動で削除する事です．
               VPATH = ../src
               HEADERS = foo.h foo2.h foo3.h
               install-HEADERS: $(HEADERS)
                       headers='$(HEADERS)'; for i in $$headers; do \
                         i=`expr "$$i" : '../src/\(.*\)'`;
                         $(INSTALL) -m 644 `test -f $$i || echo ../src/`$$i \
                           $(DESTDIR)$(includedir)/$$i; \
                       done

          Automakeも同様なことを行ないます．

    OSF/Tru64 `make'の`make'は，不思議なディレクトリの必要条件を作成する
          必要条件が`VPATH'のサブディレクトリにある場合，Tru64 `make'
          はそれを現在のディレクトリに作成します．

               % mkdir -p foo/bar build
               % cd build
               % cat >Makefile <<END
               VPATH = ..
               all: foo/bar
               END
               % make
               mkdir foo
               mkdir foo/bar

          ルールは，前に存在している手動の`VPATH'検索を使用するので，これは予
          想外の結果になるはずです．

               VPATH = ..
               all : foo/bar
                       command `test -d foo/bar || echo ../`foo/bar

          上記の`command'は，現在のディレクトリに作成された，空の
          `foo/bar'ディレクトリで実行されます．

    ターゲットの探索
          GNU `make'は，`VPATH'で見つかったファイルを使用す
          べきとき決定するアルゴリズムは幾分複雑です．*Note How
          Directory Searches are Performed: (make)Search Algorithm.

          ターゲットのリビルドが必要な場合，GNU `make'は，このター
          ゲットを`VPATH'で検索している間に見つかったファイル名を廃棄し，
          `Makefile'で与えられたファイル名を使用して，ローカルなファイルをビ
          ルドします．ターゲットをリビルドする必要が無い場合は，GNU
          `make'は`VPATH'で検索している間に見つかったファイル名を使用
          します．

          NetBSD `make'のような，その他の`make'の実装は，より簡単
          に記述できます．`VPATH'で検索している間に見つかったファイル名は，ター
          ゲットがリビルドを必要としているかどうかにかかわらず使用されます．このた
          め＜新しいファイルはローカルに作成されますが，`VPATH'に位置する既存
          のファイルは更新されます．

          しかし，OpenBSDとFreeBSDの`make'は，明示的なルールを持つ依存性を
          探すために`VPATH'を実行しません．これは非常にイライラします．

          `VPATH'で，autoconfパッケージのビルドを試みるとき(例えば，
          `mkdir build && cd build && ../configure')，GNU `make'
          `make'は`build'ディレクトリですべてのローカ
          ルにビルドしますが，BSD `make'はローカルな新しいファイ
          ルをビルドし，ソースディレクトリの既存のファイルを更新する事を意味します．

               % cat Makefile
               VPATH = ..
               all: foo.x bar.x
               foo.x bar.x: newer.x
                       @echo Building $@
               % touch ../bar.x
               % touch ../newer.x
               % make        # GNU make
               Building foo.x
               Building bar.x
               % pmake       # NetBSD make
               Building foo.x
               Building ../bar.x
               % fmake       # FreeBSD make, OpenBSD make
               Building foo.x
               Building bar.x
               % tmake       # Tru64 make
               Building foo.x
               Building bar.x
               % touch ../bar.x
               % make        # GNU make
               Building foo.x
               % pmake       # NetBSD make
               Building foo.x
               % fmake       # FreeBSD make, OpenBSD make
               Building foo.x
               Building bar.x
               % tmake       # Tru64 make
               Building foo.x
               Building bar.x

          NetBSDの`make'が`../bar.x'をVPATHのある場所で更新し，
          FreeBSD，OpenBSD，そしてTru64の`make'は，`../bar.x'が最新の
          ときでも，常に`bar.x'を更新することに注意して下さい．

          言及する価値のあるもう一つの点は，GNU `make'が一度
          `VPATH'のファイル名を無視する事に決めると(例えば，上記の例の
          `../bar.x'を無視する)，ターゲットが他のルールの必要条件になったとき，
          それを無視し続けます．

          以下の例では，`bar.x: newer.x'のルールを実行している間に
          `bar.x' の`VPATH'の結果を無視するので，`.x.y'のルールを実
          行する前に，GNU `make'は`VPATH'の`bar.x'を探
          さない事を示しています．

               % cat Makefile
               VPATH = ..
               all: bar.y
               bar.x: newer.x
                       @echo Building $@
               .SUFFIXES: .x .y
               .x.y:
                       cp $< $@
               % touch ../bar.x
               % touch ../newer.x
               % make        # GNU make
               Building bar.x
               cp bar.x bar.y
               cp: cannot stat `bar.x': No such file or directory
               make: *** [bar.y] Error 1
               % pmake       # NetBSD make
               Building ../bar.x
               cp ../bar.x bar.y
               % rm bar.y
               % fmake       # FreeBSD make, OpenBSD make
               echo Building bar.x
               cp bar.x bar.y
               cp: cannot stat `bar.x': No such file or directory
               *** Error code 1
               % tmake       # Tru64 make
               Building bar.x
               cp: bar.x: No such file or directory
               *** Exit 1

          `bar.x: newer.x'ルールからコマンドを削除した場合，GNU
          `make'では手品のように動作し始める事に注意してください．それは，
          `bar.x'が更新されていない事を知っているので，`VPATH'
          (`../bar.x')の結果がうまく使用できるという結果を廃棄しません．Tru64
          でも動作しますが，FreeBSDとOpenBSDではまだそうではありません．

               % cat Makefile
               VPATH = ..
               all: bar.y
               bar.x: newer.x
               .SUFFIXES: .x .y
               .x.y:
                       cp $< $@
               % touch ../bar.x
               % touch ../newer.x
               % make        # GNU make
               cp ../bar.x bar.y
               % rm bar.y
               % pmake       # NetBSD make
               cp ../bar.x bar.y
               % rm bar.y
               % fmake       # FreeBSD make, OpenBSD make
               cp bar.x bar.y
               cp: cannot stat `bar.x': No such file or directory
               *** Error code 1
               % tmake       # True64 make
               cp ../bar.x bar.y

          すべての`make'の実装が`VPATH'によるダーゲットの検索に依存し
          ないようにお願いするのが，唯一の解決方法だと思います．言い替えると，
          `VPATH'はビルドされていないソースへの予約にすべきです．

単一のサフィックスルールと分離された依存性
     "単一のサフィックスルール(Single Suffix Rule)"は，基本的に(推測され
     る)通常のサフィックスルール(`.from.to:')ですが，_ディスティネー
     ション(destination)_サフィックスは空(`.from:')です．

     "分離された依存性(Separated
     dependencies)"は，ルールを定義すること無
     く，ターゲットの必要条件のリストを単純に参照します．通常，一方ではルール
     を，もう一方で依存性をリストアップすることが可能です．

     Solarisの`make'は，単一のサフィックスルールで定義されたターゲッ
     トに対する，分離された依存性をサポートしていません．

          $ cat Makefile
          .SUFFIXES: .in
          foo: foo.in
          .in:
                  cp $< $ $ touch foo.in
          $ make
          $ ls
          Makefile  foo.in

     一方GNU Makeはサポートしています．

          $ gmake
          cp foo.in foo
          $ ls
          Makefile  foo       foo.in

     それは`foo: foo.in'の依存性無しで動作することに注意してください．

          $ cat Makefile
          .SUFFIXES: .in
          .in:
                  cp $< $ $ make foo
          cp foo.in foo

     そして，それは二重のサフィックスの継承ルールで動作することにも注意してく
     ださい．

          $ cat Makefile
          foo.out: foo.in
          .SUFFIXES: .in .out
          .in.out:
                  cp $< $ $ make
          cp foo.in foo.out

     結果として，そのような状況では，ターゲットルールを書く必要があります．

タイムスタンプの分解能
     伝統的に，ファイルのタイムスタンプの分解能は1秒になっていて，
     `make'はファイルがそれ以外のものより新しいかどうかを決定するため
     これらのタイムスタンプを使用していました．しかし，最近のファイルシステム
     には分解能が1ナノ秒のタイムスタンプになっているものもたくさんあります．
     `make'の実装には，タイムスタンプ全体を見るものもあります．それ以
     外では，分数部分を無視し，結果として間違ったものとなるはずです．通常，こ
     れは問題ありませんが，非常に稀な状況では，タイムスタンプの切り詰めのバグ
     を回避するため，`sleep 1'のような手法を使用する必要があるかもしれま
     せん．

     `cp -p'と `touch -r'のようなコマンドでは，通常はファイルのタイ
     ムスタンプを完全な分解能でコピーしません(*note Limitations of
     Usual Tools::)．このため，以下のようなルールは気を付けるべきです．

          dest: src
                  cp -p src dest

     それは，タイムスタンプの切り詰め後では，`src'よりも`dest'が古
     くなり，このため`make'は次回も不必要な仕事を再び行なうはずです．
     この問題を回避するため，タイムスタンプファイルを使用することが可能です．
     例えば以下のようにします．

          dest-stamp: src
                  cp -p src dest
                  date >dest-stamp


File: autoconf-ja.info,  Node: Manual Configuration,  Next: Site Configuration,  Prev: Portable Shell,  Up: Top

手動のコンフィグレーション
**************************

数種類の特徴については，テストプログラムを実行するだけでは自動的に推測で
きません．例えば，オブジェクトファイルのフォーマットの詳細や，コンパイラ
やリンカに渡す必要がある特別なオプションもあります．そのように，
`configure'に`uname'プログラムの出力を調査させたり，特定の
システムの特有のライブラリを探すといった，特別な手法を使用して特徴を調査
することが可能です．しかし，Autoconfは，推測できない特徴を扱うための一様
な形式の手法を提供しています．

* Menu:

* Specifying Names::            Specifying the system type
* Canonicalizing::              Getting the canonical system type
* Using System Type::           What to do with the system type


File: autoconf-ja.info,  Node: Specifying Names,  Next: Canonicalizing,  Up: Manual Configuration

システムタイプの指定
====================

   他のGNU `configure'スクリプトのように，Autoconfが生成 した
`configure'スクリプトでは，システムタイプの標準名に基づいて
決定することが可能で，それは以下のような形式になります．
`CPU-VENDOR-OS'で，OSは， `SYSTEM'や`KERNEL-SYSTEM'が可能です．

   `configure'は，通常，実行しているシステムタイプの標準名を推測す
ることが可能です．そうするために，`config.guess'と呼ばれるスクリ
プトを呼び出し，それは，`uname'コマンドや，Cプリプロセッサが前もっ
て定義したシンボルを使用して推測します．

   その代わりとして，ユーザは`configure'へのコマンドライン引数で，
システムタイプを指定可能です．それはクロスコンパイル時に必要です．クロス
コンパイルで最も複雑な場合，三つのシステムタイプが呼び出されます．指定す
るオプションは以下の通りです．

`--build=BUILD-TYPE'
     パッケージがコンフィグレーションされコンパイルされるシステムのタイプです．
     デフォルトは，`config.guess'の実行結果になります．

`--host=HOST-TYPE'
     パッケージが実行されるシステムタイプです．デフォルトで，それはビルドマシ
     ンと同じになります．それを指定することでクロスコンパイルモードが使用可能
     になります．

`--target=TARGET-TYPE'
     コードを生成するパッケージ中のコンパイラツールに対するシステムのタイプで
     す(必要になることは滅多にありません)．デフォルトはホストと同じです．

   `config.guess'の結果に優先することを意図した場合，
`--host'はクロスコンパイルを利用可能にするものなので，
`--host'ではなく`--build'を使用してください．歴史的な理由
から，`--host'を渡してもビルド形式を変更します．そのため，
`--host'を指定するときは常に`--build'も確実に指定してください．
これは将来，修正されるでしょう．

     ./configure --build=i686-pc-linux-gnu --host=m68k-coff

上記でクロスコンパイルモードになりますが，以下のようなコンフィグレーショ
ンでは，指定されているコンパイラで生成されるコートが実行不可能なので，
`configure'は失敗するでしょう．

     ./configure CC=m68k-coff-gcc

   `configure'は，多くのシステムタイプに対する短い別名を認識します．
例えば，`decstation'は`mips-dec-ultrix4.2'の代わりに使用するこ
とが可能です． `configure'は，システムタイプの別名を標準化するた
めに`config.sub'と呼ばれるスクリプトを実行します．

このセクションでは，故意に時代遅れのインターフェースの記述を省略してきま
した．*Note Hosts and Cross-Compilation::を参照してください．


File: autoconf-ja.info,  Node: Canonicalizing,  Next: Using System Type,  Prev: Specifying Names,  Up: Manual Configuration

標準的なシステムタイプの取得
============================

   以下のマクロで，システムタイプが`configure'スクリプトで利用可能
になります．

   変数`build_alias'，`host_alias'，そして`target_alias'は，
常に厳密な`--build'，`--host'，そして`--target'への
引数となります．特に，対応する`AC_CANONICAL'マクロが実行されていて
も，ユーザが使用していない場合は空のままになります．すべてのconfigureス
クリプトは，これらの変数をどこででも使用可能です．これらは，ユーザとの対
話処理で使用されるべき変数です．

システムタイプを元にした特殊な環境を認識する必要がある場合，標準的なシス
テム名を取得するために以下のマクロを実行してください．これらの変数はマク
ロ呼び出しの前で設定されません．

   これらのマクロを使用する場合，ソースコードと一緒に`config.guess'
と`config.sub'を配布する必要があります．`configure'がこ
れらのスクリプトを探すディレクトリを制御するために使用可能な
`AC_CONFIG_AUX_DIR'マクロに関する情報は，*Note Output::.

 - マクロ: AC_CANONICAL_BUILD
     標準的なビルドシステムタイプの変数の`build'と，それを識別する三つの
     部分`build_cpu'，`build_vendor'，そして`build_os'を求めま す．

     `--build'が指定されている場合，`build'は`build_alias'
     の`config.sub'で標準化されたものになり，それ以外では，シェルスク
     リプト`config.guess'で決定されます．

 - マクロ: AC_CANONICAL_HOST
     標準的なホストシステムタイプ変数の`host'と，それを識別する三つの部
     分`host_cpu'，`host_vendor'，そして`host_os'を求めます．

     `--host'が指定されている場合，`host'は`host_alias'の
     `config.sub'で標準化されたものになり，それ以外では，シェルスクリ
     プト`config.guess'で決定されます．

 - マクロ: AC_CANONICAL_TARGET
     標準的なターゲットシステムタイプ変数の`target'，それを識別する三つ
     の部分`target_cpu'，`target_vendor'，そして`target_os' を
     求めます．

     `--target'が指定されている場合，`target'は
     `target_alias'の`config.sub'で標準化されたものになり，それ
     以外では，デフォルトで`host'になります．

下位互換性のコードのため，人為的なものがあることに注意してください．詳細
は，*Note Hosts and Cross-Compilation::.


File: autoconf-ja.info,  Node: Using System Type,  Prev: Canonicalizing,  Up: Manual Configuration

システムタイプを使用する
========================

どのようにして標準的なシステムタイプを使用するのでしょう？通常，システム
特有のCファイルを選択するために`configure.ac'で，一つ以上の
`case'文を使用します．`AC_CONFIG_LINKS'を使用し，システム名に
基づくこれらのファイルを，`host.h'や`target.c'のような一般的な
名前にリンクしてください(*note Configuration Links::)．`case' 文の
パターンでは，以下の断片部分のように，複数の状態を分類するためシェルのワ
イルドカードを使用することが可能です．

     case $target in
     i386-*-mach* | i386-*-gnu*)
                  obj_format=aout emulation=mach bfd_gas=yes ;;
     i960-*-bout) obj_format=bout ;;
     esac

そして，その後で`configure.ac'では以下のように使用します．

     AC_CONFIG_LINKS(host.h:config/$machine.h
                     object.h:config/$obj_format.h)

   上記の例では，いくつかのアーキテクチャ(`$build')でビルドされ，別の
もの(`$host')で実行することが可能なツールから持ってこられているため，
`$target'を使用していて，第三のアーキテクチャ(`$target')に対す
るデータを扱っていることにに注意してください．そのようなツールは，通常コ
ンパイラスイートの一部で，それは特殊な`$target'に対するコードを生成
します．

   しかし，`$target'はほとんどのパッケージで意味が無いようにすべきです．
プログラムを実行するシステムを決定の基本にしたい場合，以下の抜粋部分のよ
うに，`$host'変数を使用していることを確かめてください．

     case $host in
       *-*-msdos* | *-*-go32* | *-*-mingw32* | *-*-cygwin* | *-*-windows*)
         MUMBLE_INIT="mumble.ini"
         ;;
       *)
         MUMBLE_INIT=".mumbleinit"
         ;;
     esac
     AC_SUBST([MUMBLE_INIT])

クロスコンパイルツールを探すため，ホストシステムタイプを使用することも可
能です．そうするための`AC_CHECK_TOOL'マクロの情報は，*Note Generic
Programs::.


File: autoconf-ja.info,  Node: Site Configuration,  Next: Running configure Scripts,  Prev: Manual Configuration,  Up: Top

サイトのコンフィグレーション
****************************

   `configure'スクリプトは，何種類かのローカルコンフィグレーション
の宣言をサポートします．ユーザが外部ソフトウェアパッケージの場所を指定し
たり，追加の特徴を含めたり排除したり，編集された名前でプログラムをインス
トールしたり，`configure'オプションに対してデフォルト値を設定し
たりする方法があります．

* Menu:

* External Software::           Working with other optional software
* Package Options::             Selecting optional features
* Pretty Help Strings::         Formatting help string
* Site Details::                Configuring site details
* Transforming Names::          Changing program names when installing
* Site Defaults::               Giving `configure' local defaults


File: autoconf-ja.info,  Node: External Software,  Next: Package Options,  Up: Site Configuration

外部ソフトウェアとともに動作する
================================

既にインストールしてある他のソフトウェアパッケージを要求したり，追加で使
用していたりしているパッケージもあります．ユーザは，使用するそのような外
部ソフトの指定するために，`configure'のコマンドラインオプション
を与えることが可能です．オプションは以下の形式うちの一つです．

     --with-PACKAGE[=ARG]
     --without-PACKAGE

   例えば，`--with-gnu-ld'は，他のリンカの代わりにGNUリン
カで動作することを意味します．`--with-x'はX Window Systemで動作す
ることを意味します．

   ユーザはパッケージ名に続く引数を，`='とその引数で与えることが可能で
す．`no'引数を与えるとパッケージはデフォルトを使用します．つまり，
パッケージを使用し_ません_．`yes'も`no'もない引数は，この
プログラムで動作すると予想される他のパッケージをより正確に指定するために，
他のパッケージの名前やバージョンナンバーを含ることが可能です．引数が与え
られていない場合，デフォルトは`yes'です．
`--without-PACKAGE'は，`--with-PACKAGE=no'と同 じです．

   `configure'スクリプトは，サポートしていない
`--with-PACKAGE'オプションに文句を言いません．これにより，
複数のパッケージを含むソースツリーにおいて，パッケージが異なるオプション
をサポートするとき，パッケージによってはサポートするものもあるオプション
で深刻なエラーメッセージを出力すること無く，トップレベルの
`configure'スクリプトでのコンフィグレーションが可能になります．
残念な副作用として，オプションのスペルエラーは診断されません．この問題の
より良い手法はまだ提案されていません．

   使用される可能性のあるそれぞれの外部ソフトウェアパッケージに対して，
`configure'のユーザがそれの使用を依頼したかどうかを検出するため，
`configure.ac'で`AC_ARG_WITH'を呼び出すべきです．それぞれのパッ
ケージでデフォルトで使用するかどうかと，有効な引数については，好きにして
ください．

 - マクロ: AC_ARG_WITH (PACKAGE, HELP-STRING, [ACTION-IF-GIVEN],
          [ACTION-IF-NOT-GIVEN])
     ユーザが`configure'に，オプション`--with-PACKAGE'
     や`--without-PACKAGE'を与えた場合，シェルコマンド
     ACTION-IF-GIVENを実行します．どちらも与えられていない場合は，シェ
     ルコマンドACTION-IF-NOT-GIVENを実行します．名前PACKAGEは，こ
     のプログラムとともに動作する，他のソフトウェアパッケージを示します．それ
     は，英数字とダッシュだけから構成されるべきです．

     オプションの引数は，`-'文字を`_'に変更したシェル変数
     `with_PACKAGE'の実際の値となる，シェル変数`withval'内の
     シェルコマンドACTION-IF-GIVENが利用可能です．望むなら，変わりにそ
     の値を使用してもかまいません．

     引数HELP-STRINGは以下のような，オプションの説明です．
            --with-readline         support fancy command line editing

     詳細が必要な場合，HELP-STRINGは一行以上でもかまいません．
     `configure --help'で行が整列していることを確認してください．ヘルプ
     文字列でのタブの使用は避けてください．前置するスペースを生成するため，ヘ
     ルプ文字列を`['と`]'で囲む必要があるでしょう．

     HELP-STRINGは，マクロ`AS_HELP_STRING'で書式化すべきです (*note
     Pretty Help Strings::)．

 - マクロ: AC_WITH (PACKAGE, ACTION-IF-GIVEN, [ACTION-IF-NOT-GIVEN])
     これはヘルプ文字列の提供をサポートしていない，`AC_ARG_WITH'の時代遅
     れのバージョンです．


File: autoconf-ja.info,  Node: Package Options,  Next: Pretty Help Strings,  Prev: External Software,  Up: Site Configuration

パッケージオプションの選択
==========================

ソフトウェアパッケージに追加のコンパイル時の特徴がある場合，それらをコン
パイルするかどうか指定するため，ユーザは`configure'コマンドライ
ンオプションを与えることが可能です．オプションは以下の書式の一つになりま
す．

     --enable-FEATURE[=ARG]
     --disable-FEATURE

これらのオプションで，ビルドしインストールする追加の機能を，ユーザが選択
することが可能になります．`--enable-FEATURE'オプションで，
ある機能に異なる動作をさせたり，ある機能を他の機能で置換させたりするべき
ではありません．それらは，プログラムの部分をビルドする，または削除するた
めだけにすべきです．

   ユーザは，機能の名前に続く引数を`='とその引数で与えることが可能です．
`no'引数を与えるとその機能は利用でき_ません_．機能とは，
`--enable-debug=stabs'のような引数です．引数が与えられていない場
合は，デフォルトで`yes'です．`--disable-FEATURE'は，
`--enable-FEATURE=no'と同じです．

   `configure'スクリプトは，サポートしていない
`--enable-FEATURE'オプションに文句を言いません．これにより，
複数のパッケージを含むソースツリーにおいて，パッケージが異なるオプション
をサポートするとき，パッケージによってはサポートするものもあるオプション
で深刻なエラーメッセージを出力すること無く，トップレベルの `configure'
スクリプトでのコンフィグレーションが可能になります．
残念な副作用として，オプションのスペルエラーは診断されません．この問題の
より良い手法はまだ提案されていません．

   使用される可能性のあるそれぞれの追加の機能に対して，`configure'
のユーザがそれを含めることを依頼したかどうかを検出するため，
`configure.ac'で`AC_ARG_ENABLE'を呼び出すべきです．それぞれの
機能をデフォルトで使用するかどうかと，有効な引数については，好きにしてく
ださい．

 - マクロ: AC_ARG_ENABLE (FEATURE, HELP-STRING, [ACTION-IF-GIVEN],
          [ACTION-IF-NOT-GIVEN])
     ユーザが，`configure'にオプション`--enable-FEATURE'
     や`--disable-FEATURE'を与えた場合，シェルコマンド
     ACTION-IF-GIVENを実行します．どちらも与えられない場合は，シェルコ
     マンドACTION-IF-NOT-GIVENを実行します．名前FEATUREはオプショ
     ンのユーザレベルの機能を示します．それは，英数字とダッシュだけで構成すべ
     きです．

     オプションの引数は，`-'文字を`_'に変更したシェル変数
     `enable_PACKAGE'の実際の値となる，シェル変数`enableval'
     内のシェルコマンドACTION-IF-GIVENが利用可能です．望むなら，変わり
     にその値を使用してもかまいません．HELP-STRING引数は，
     `AC_ARG_WITH'と同様にしてください(*note External Software::)．

     HELP-STRINGは，マクロ`AS_HELP_STRING'で書式化すべきです (*note
     Pretty Help Strings::)．

 - マクロ: AC_ENABLE (FEATURE, ACTION-IF-GIVEN, [ACTION-IF-NOT-GIVEN])
     これはヘルプ文字列の供給をサポートしない`AC_ARG_ENABLE'の時代遅れの
     バージョンです．


File: autoconf-ja.info,  Node: Pretty Help Strings,  Next: Site Details,  Prev: Package Options,  Up: Site Configuration

ヘルプ文字列を小奇麗にする
==========================

   `AC_ARG_WITH' (*note External Software::)と`AC_ARG_ENABLE' (*note
Package Options::)で使用する`help strings'を正しく書式化する
ことに挑戦してみましょう．具体的には，独自の`help strings'を，標準
的なAutoconfの`help strings'のように，`configure --help' で列
に適切に並ぶようにしたいと思うでしょう．`AS_HELP_STRING'マクロの目
的はここにあります．

 - マクロ: AS_HELP_STRING (LEFT-HAND-SIDE, RIGHT-HAND-SIDE)
     ユーザが`configure --help'を実行したとき，小奇麗なヘルプ文字列に展
     開します．通常は，`AC_ARG_WITH' (*note External Software::)や
     `AC_ARG_ENABLE' (*note Package Options::)で使用します．以下の例でよ
     り分かり易くなるでしょう．

          AC_DEFUN([TEST_MACRO],
          [AC_ARG_WITH([foo],
                       AS_HELP_STRING([--with-foo],
                                      [use foo (default is NO)]),
                       [ac_cv_use_foo=$withval], [ac_cv_use_foo=no])
          AC_CACHE_CHECK([whether to use foo],
                         [ac_cv_use_foo], [ac_cv_use_foo=no])])

     `AS_HELP_STRING'の呼び出しは*引用符で囲まない*ことに注意して
     ください．`configure --help'の最後の数行に，以下のような行が現れま
     す．

          --enable and --with options recognized:
            --with-foo              use foo (default is NO)

     `AS_HELP_STRING'マクロは，以下の例のように，LEFT-HAND-SIDE そ
     して/またはRIGHT-HAND-SIDEがマクロ引数で構成される時，特に役に立ち
     ます．

          AC_DEFUN(MY_ARG_WITH,
          [AC_ARG_WITH([$1],
                       AS_HELP_STRING([--with-$1], [use $1 (default is $2)]),
                       ac_cv_use_$1=$withval, ac_cv_use_$1=no),
          AC_CACHE_CHECK(whether to use $1, ac_cv_use_$1, ac_cv_use_$1=$2)])


File: autoconf-ja.info,  Node: Site Details,  Next: Transforming Names,  Prev: Pretty Help Strings,  Up: Site Configuration

サイトのコンフィグレーションの詳細
==================================

複雑なサイト指定の情報が必要となるソフトウェアパッケージもあります．例え
ば，特定のサービスで使用する，ホスト名，会社名，そして連絡先の電子メール
アドレスがあげられます．Metaconfigが生成したコンフィグレーションスクリプ
トには，そのような情報を対話的に尋ねるものもあるので，Autoconfが生成した
対話的でないコンフィグレーションスクリプトが，どうやってその情報を得るの
かと不思議に思うこともあるでしょう．

   そのようなサイトコンフィギュレーション情報は，プログラムではなく_ユー
ザだけ_が編集するファイルに書き込むべきです．ファイルの場所は，
`prefix'変数に基づくところか，ユーザのホームディレクトリのような，
標準的な場所が可能です．それは環境変数で指定するべきでしょう．プログラム
では，コンパイル時ではなく実行時にファイルを調査するべきです．実行時のコ
ンフィグレーションはユーザにとって便利で，コンフィグレーション時に情報を
得るよりコンフィグレーション処理が簡単になります．データファイルを書き込
む場所の詳細は，*Note Variables for Installation Directories:
(standards)Directory Variables.


File: autoconf-ja.info,  Node: Transforming Names,  Next: Site Defaults,  Prev: Site Details,  Up: Site Configuration

インストール時のプログラム名の変換
==================================

Autoconfは，インストール時にプログラム名を変更することをサポートします．
これらの変換を使用するため，`configure.ac'でマクロ
`AC_ARG_PROGRAM'を呼び出す必要があります．

 - マクロ: AC_ARG_PROGRAM
     出力変数`program_transform_name'に，インストールするプログラムの名
     前を変更するため，`sed'コマンドのシーケンスを配置します．

     下記のオプションのいずれかが`configure'に与えれらている場合，プ
     ログラム名は適宜変換されます．それ以外では，`AC_CANONICAL_SYSTEM'
     が呼び出されて，`--target'の値が与えられている場合，ダッシュが続い
     ているターゲットタイプがプレフィクスとして使用されます．それ以外ではプロ
     グラム名は変換されません．

* Menu:

* Transformation Options::      `configure' options to transform names
* Transformation Examples::     Sample uses of transforming names
* Transformation Rules::        `Makefile' uses of transforming names


File: autoconf-ja.info,  Node: Transformation Options,  Next: Transformation Examples,  Up: Transforming Names

変換オプション
--------------

   `configure'に以下のコマンドラインオプションを与えることで，名前
変換を指定することが可能です．

`--program-prefix=PREFIX'
     PREFIXを名前に前置します．

`--program-suffix=SUFFIX'
     SUFFIXを名前に後置します．

`--program-transform-name=EXPRESSION'
     `sed'のEXPRESSIONで名前への代入を実行します．


File: autoconf-ja.info,  Node: Transformation Examples,  Next: Transformation Rules,  Prev: Transformation Options,  Up: Transforming Names

変換例
------

これらの変換は，クロスコンパイル開発環境の一部となるプログラムで役に立ち
ます．例えば，`--target=i960-vxworks'オプションでコンフィグレーショ
ンされたSun 4でクロスアセンブラの実行では，通常，`as'ではなく
`i960-vxworks-as'がインストールされるので，ネイティブのSun 4アセン
ブラと混在できます．

   GNUプログラムを，他のプログラムを隠してしまうような同じ名前で
システムにインストールしたくない場合，プログラム名を`g'から始めるこ
とができます．例えば，GNU `diff'を
`--program-prefix=g'でコンフィグレーションする場合，`make
install'時に`/usr/local/bin/gdiff'としてインストールされます．

   より洗練された例として，以下を使用することができます．

     --program-transform-name='s/^/g/; s/^gg/g/; s/^gless/less/'

これは，ソースツリーで，`g'をほとんどのプログラム名に前置し，
`gdb'のように既に持っているものと，`less'と`lesskey'のよ
うにGNUプログラムでないものは例外とすることができます．(この機
能を使用するために，セットアップされたプログラムを含むソースツリーを持っ
ていることが仮定されます．)

同時にいくつかのプログラムの複数のバージョンをインストールする方法の一つ
として，一つあるいは両方の名前にバージョンナンバーを追加することです．例
えば，しばらくの間Autoconfバージョン1を保持したい場合，Autoconfバージョ
ン2を，`/usr/local/bin/autoconf2'や
`/usr/local/bin/autoheader2'等としてプログラムをインストールするた
め，`--program-suffix=2'を使用してコンフィグレーションすることが
可能です．それにもかかわらず，バイナリのみ名前が変更されることに注意して
ください．そのため，オーバーラップする可能性のあるライブラリファイルは問
題になるでしょう．


File: autoconf-ja.info,  Node: Transformation Rules,  Prev: Transformation Examples,  Up: Transforming Names

変換規則
--------

   `Makefile.in'で変数`program_transform_name'を使用する方法は以
下のようになります．

     PROGRAMS = cp ls rm
     transform = @program_transform_name@
     install:
             for p in $(PROGRAMS); do \
               $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p | \
                                                   sed '$(transform)'`; \
             done
     
     uninstall:
             for p in $(PROGRAMS); do \
               rm -f $(DESTDIR)$(bindir)/`echo $$p | sed '$(transform)'`; \
             done

   `program_transform_name'が空ではなく，無意味なセパレータがないこと
が保証されます．そのため，`;'使用している`sed'プログラムに
`program_transform_name'を安全に埋め込むことができます．

     transform = @program_transform_name@
     transform_exe = s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/

   ドキュメントファイル(Texinfoや`man')で変換するどうかは，慎重を要す
る質問です．名前を変える理由がいくつかあるため，完全な答えがあるとは思わ
れません．ドキュメントは通常，特定のアーキテクチャ特有のものではなく，
Texinfoファイルはシステムドキュメントと衝突しません．しかし，それらは同
じファイルの前のバージョンと衝突したり，`man'ページはシステムドキュ
メントと衝突することがあるかもしれません．妥協案として，`man'ページ
は名前を変換してTexinfoマニュアルは変換しないのがおそらく最善でしょう．


File: autoconf-ja.info,  Node: Site Defaults,  Prev: Transforming Names,  Up: Site Configuration

サイトのデフォルトの設定
========================

   Autoconfが生成した`configure'スクリプトで，コンフィグレーション
の値に対して，サイトのデフォルト値を供給できるものもあります．これは，サ
イト全体と システム全体の初期化ファイルを作成することで可能となります．

   環境変数`CONFIG_SITE'が設定されている場合，`configure'は，
その値を読み込むシェルスクリプトの名前として使用します．それ以外では，シェ
ルスクリプト`PREFIX/share/config.site'があればそれを読み込み，
次に`PREFIX/etc/config.site'があればそれを読み込みます．この
ため，それらが衝突する状況では，マシン特有のファイルでの設定がマシン非依
存の設定に優先します．

サイトファイルは任意のシェルスクリプトが可能ですが，本来なら特定の種類の
コードだけがその中にあるのが適切です．`configure'はサイトファイ
ルを読み込んだ後でキャッシュファイルを読み込むので，サイトファイルは，そ
のシステムで実行されるAutoconfが生成した全ての`configure'スクリ
プト間で，デフォルトのキャッシュファイルを共有することが可能になっていま
す(*note Cache Files::)．キャッシュファイルは特定のコンパイラに対しての
みで有効ですが，システムの多くは複数の利用可能なコンパイラがあるので，デ
フォルトのキャッシュファイルをサイトファイルに設定した場合，サイトファイ
ルで出力変数`CC'を設定するのは良い考えです．

   `configure'へのコマンドラインオプションで，サイトファイルで設定
された値を調査したり優先したりすることが可能です．オプションは，ダッシュ
をアンダースコアに変更した，オプションと同じ名前のシェル変数を設定します．
例外は，`--without-'と`--disable-'オプションが，対応する
`--with-'や`--enable-'オプションに値`no'を与えたものに似
ていることです．このため，`--cache-file=localcache'は，変数
`cache_file'を値`localcache'に設定し，
`--enable-warnings=no'や`--disable-warnings'は，変数
`enable_warnings'を値`no'に設定しします．
`--prefix=/usr'は，変数`prefix'を値`/usr'に設定します．
といったようになっています．

   デフォルトでない値を与える必要がある場合，サイトファイルは`CFLAGS'
のような他の出力変数に対しデフォルト値を設定するための良い場所です．通常
コマンドラインで繰り返し行っていることならなんでもできます．PREFIX
やEXEC_PREFIXに対してデフォルト値ではないものを使用したい場合(サイ
トファイルの場所がどこであれ)，`CONFIG_SITE' を用いて指定すると，サ
イトファイルで設定できます．

サイトファイル自身でキャッシュ値を設定することもできます．こうすることで，
テストプログラムの実行が必要な特徴の調査が不可能なクロスコンパイルで役に
立ちます．システムに対して`PREFIX/etc/config.site' でこれらの
値を正しく設定することで，"キャッシュの用意"が可能です．設定する必要が
あるキャッシュ変数名を見つけるため，影響を受けた`configure'スク
リプトやこれらのマクロに対するAutoconf M4ソースコードで，名前に
`_cv_'を伴うシェル変数を探してください．

キャッシュファイルは，サイトファイルで設定した変数を無効にしないよう注意
深く実行します．また，サイトファイルでコマンドラインオプションを無効にす
るべきではありません．コードでは，`prefix'と`cache_file' のよ
うな変数を変更する前に，(`configure'の最初の方で設定される) デフォ
ルト値をがあるかどうかを調査するべきです．

   サンプルファイル`/usr/share/local/gnu/share/config.site'が以下のよ
うになります．コマンド`configure --prefix=/usr/share/local/gnu' は，
(`CONFIG_SITE'で異なるファイルを設定していない場合)このファイルを読
み込みます．

     # config.site for configure
     #
     # Change some defaults.
     test "$prefix" = NONE && prefix=/usr/share/local/gnu
     test "$exec_prefix" = NONE && exec_prefix=/usr/local/gnu
     test "$sharedstatedir" = '$prefix/com' && sharedstatedir=/var
     test "$localstatedir" = '$prefix/var' && localstatedir=/var
     
     # Give Autoconf 2.x generated configure scripts a shared default
     # cache file for feature test results, architecture-specific.
     if test "$cache_file" = /dev/null; then
       cache_file="$prefix/var/config.cache"
       # A cache file is only valid for one C compiler.
       CC=gcc
     fi


File: autoconf-ja.info,  Node: Running configure Scripts,  Next: config.status Invocation,  Prev: Site Configuration,  Up: Top

`configure'スクリプトの実行
***************************

   以下は，`configure'スクリプトを使用したパッケージのコンフィグレー
ション方法の説明書で，パッケージの`INSTALL'ファイルに含めるのに適切
なものです．使用可能なプレーンテキストバージョンの`INSTALL' は，
Autoconfに付属しています．

* Menu:

* Basic Installation::          Instructions for typical cases
* Compilers and Options::       Selecting compilers and optimization
* Multiple Architectures::      Compiling for multiple architectures at once
* Installation Names::          Installing in different directories
* Optional Features::           Selecting optional features
* System Type::                 Specifying the system type
* Sharing Defaults::            Setting site-wide defaults for `configure'
* Defining Variables::          Specifying the compiler etc.
* configure Invocation::        Changing how `configure' runs


File: autoconf-ja.info,  Node: Basic Installation,  Next: Compilers and Options,  Up: Running configure Scripts

基本的なインストール
====================

   以下は一般的なインストールの説明書です．

   `configure'シェルスクリプトは，コンパイル時に使用する様々なシ
ステム依存の変数の正しい値を推測します．パッケージのそれぞれのディレク
トリの`Makefile'を作成するために，これらの値が使用されます．シス
テム依存の定義を含んでいる，一つ以上の`.h'ファイルも作成します．
終りに，現在のコンフィグレーションを将来再生成するために実行可能なシェ
ルスクリプト`config.status'と，コンパイラの出力を含んでいるファイ
ル`config.log' (主に`configure'のデバッグで役立ちます)を 作成します．

再コンフィグレーションのスピードをあげるため，テストの結果を保存する追
加ファイルも使用することが可能です(通常，`config.cache'と呼ばれ，
`--cache-file=config.cache'や短い`-C'で利用可能になりま
す)．(古いキャッシュファイルを偶然使用することによる問題を避けるため，
キャッシュはデフォルトで利用不可能になっています．)

パッケージをコンパイルするため，通常行なうこと以外のことをする必要があ
る場合，`configure'がどのように調査したのかを理解し，次のリリー
スに反映できるように，`README'にあるアドレスに差分や説明をメール
してください．キャッシュを使用していて，`config.cache'が含む結果
に保持したくないものがある場合，削除しても編集してもかまいません．

   ファイル`configure.ac' (または`configure.in')は，
`autoconf'と呼ばれるプログラムで，`configure'を作成するため
に使用されます．それを変更したり，新しいバージョンの`autoconf'で
`configure'を再生成したい場合だけ，`configure.ac'が必要です．

このパッケージをコンパイルする最も単純な方法は，以下の通りです．

  1. パッケージのソースコード含んでいるディレクトリに`cd'して，システ
     ムに対するパッケージのコンフィグレーションを行なうために
     `./configure'と入力してください．System Vの古いバージョンの
     `csh'を使用している場合，`csh'自身から`configure'を
     実行しないようにするため，`sh ./configure'と入力する必要があるか
     もしれません．

     `configure'の実行にはしばらくかかります．実行中，調査している
     特徴を伝えるメッセージを出力します．

  2. パッケージをコンパイルするために`make'と入力してください．

  3. オプションとして，パッケージ付属の自己テストを実行するため，`make
     check'と入力してください．

  4.
     プログラムと，全てのデータファイルと，ドキュメントをインストールするた
     め，`make install'と入力してください．

  5. `make clean'と入力することで，ソースコードディレクトリからプログ
     ラムのバイナリやオブジェクトファイルを削除することが可能です．(異なる
     種類のコンピュータに対するパッケージをコンパイルすることが可能になるよ
     うに)`configure'が作成したファイルも削除するためには， `make
     distclean'と入力してください．`make maintainer-clean'
     ターゲットもありますが，主にパッケージ開発者用です．それを使用する場合，
     配布物の付属ファイルを再生成するため，いろいろな種類の他のプログラムを
     入手する必要があるかもしれません．


File: autoconf-ja.info,  Node: Compilers and Options,  Next: Multiple Architectures,  Prev: Basic Installation,  Up: Running configure Scripts

コンパイラとオプション
======================

   `configure'スクリプトが知らない，通常は使用しないコンパイルや
リンクのオプションが必要なシステムもあります．妥当な環境変数の詳細を得
るために，`./configure --help'を実行してください．

コマンドラインや環境変数で変数を設定することで，コンフィグレーションパ
ラメータの初期値を`configure'に与えることが可能です．例えば以
下のようにします．

     ./configure CC=c89 CFLAGS=-O2 LIBS=-lposix

   詳細は，*Note Defining Variables::.


File: autoconf-ja.info,  Node: Multiple Architectures,  Next: Installation Names,  Prev: Compilers and Options,  Up: Running configure Scripts

複数のアーキテクチャに対するコンパイル
======================================

それぞれのアーキテクチャに対するオブジェクトファイルをそれ自身のディレ
クトリに置くことで，同時に一種類以上のコンピュータに対するパッケージを
コンパイルすることが可能です．こうするために，GNU `make'の様に，
`VPATH'変数をサポートする`make'のバージョンを使用する必要
があります．オブジェクトファイルと実行可能なファイルを配置したいディレ
クトリに `cd'して，`configure'スクリプトを実行してくだ
さい．`configure'は，`configure'があるディレクトリと
`..'でソースコードを自動的に調査します．

   `VPATH'をサポートしない`make'を使用する必要がある場合，ソー
スコードディレクトリで，一度に一つのアーキテクチャに対してパッケージを
コンパイルする必要があります．一つのアーキテクチャのパッケージをインス
トールした後，他のアーキテクチャに対して再コンフィグレーションするため，
`make distclean'を使用してください．


File: autoconf-ja.info,  Node: Installation Names,  Next: Optional Features,  Prev: Multiple Architectures,  Up: Running configure Scripts

インストール名
==============

   デフォルトで，`make install'はパッケージファイルを，
`/usr/local/bin'や`/usr/local/man'等にインストールします．イ
ンストール先の接頭辞は，`--prefix=PATH'オプションを
`configure'に与えることで指定することが可能です．

アーキテクチャ特有のファイルと，アーキテクチャ非依存のファイルを，別々
のインストール先の接頭辞に分けて指定することが可能です．
`configure'に`--exec-prefix=PATH'オプションを与え
た場合，パッケージはプログラムとライブラリをインストールする接頭辞とし
て，PATHを使用します．ドキュメントと他のデータファイルは通常の接
頭辞を使用します．

さらに，一般的でないディレクトリへの配置を使用する場合，特定の種類のファ
イルに対し異なる値で指定するように，`--bindir=PATH'のよう
なオプションを与えることが可能です．設定可能なディレクトリリストと，そ
こに置きたいファイルの種類のリストを見るために，`configure
--help'を実行してください．

   パッケージでサポートされている場合，`configure'にオプションの
`--program-prefix=PREFIX'や
`--program-suffix=SUFFIX'を与えることで，プログラムの名前
に余分な接頭辞や接尾子を付けてインストールすることが可能です．


File: autoconf-ja.info,  Node: Optional Features,  Next: System Type,  Prev: Installation Names,  Up: Running configure Scripts

オプションの機能
================

   `configure'への`--enable-FEATURE'オプションに注意
を払うパッケージもあり，そこでのFEATUREはパッケージのオプション
の部分を示しています．`--with-PACKAGE'オプションに注意を
払うパッケージもあり，そこでのPACKAGEは`gnu-as'や`x'(X Window
System用)のようなものになります．`README'でパッケージが理
解する`--enable-'と`--with-'オプションについて述べている でしょう．

   X Window Systemを使用しているパッケージに対して，`configure'は
通常，Xのインクルードファイルやリンクファイルを自動的に見つけますが，
そうでない場合は，`configure'オプションの
`--x-includes=DIR'と`--x-libraries=DIR'を，
その場所を指定するために使用することが可能です．


File: autoconf-ja.info,  Node: System Type,  Next: Sharing Defaults,  Prev: Optional Features,  Up: Running configure Scripts

システムタイプの指定
====================

   `configure'が自動的に判定できない特徴もあるかもしれませんが，
パッケージを実行するマシンのタイプで定義する必要があるものもあります．
通常，パッケージは実行されるものと_同じ_アーキテクチャでビルドさ
れていると仮定され，`configure'はそれを判定することが可能です
が，マシンのタイプが分からない旨のメッセージを出力した場合，
`--build=TYPE'オプションで与えてください．TYPEは，
`sun4'の様なシステムタイプの短い名前や，以下のような様式の標準的
な名前にすることが可能です．

     CPU-COMPANY-SYSTEM

SYSTEMは，以下の形式の一つが可能です．

     OS KERNEL-OS

   それぞれのフィールドでの可能な値は，ファイル`config.sub'を参照し
てください．`config.sub'がパッケージに含まれていない場合，パッケー
ジはマシンのタイプを知る必要がありません．

   クロスコンパイルに対するコンパイラツールを_ビルドしている_場合，
コードを生成しているシステムのタイプを選択するために，
`--target=TYPE'オプションを使用すべきです．

   プラットフォームに対して生成しているコードが，ビルドしているプラット
フォームと異なるクロスコンパイラを_使用_したい場合，"host"プ
ラットフォーム(すなわち，生成されるプログラムが実行されるプラットフォー
ム)を`--host=TYPE'で指定すべきです．


File: autoconf-ja.info,  Node: Sharing Defaults,  Next: Defining Variables,  Prev: System Type,  Up: Running configure Scripts

デフォルトの共有
================

   `configure'スクリプトを共有するため，デフォルト値を設定したい
場合，`CC'，`cache_file'，そして`prefix'の様な変数のデ
フォルト値を与える，`config.site'と呼ばれるサイトシェルスクリプト
を作成することが可能です．`configure'は，存在する場合は
`PREFIX/share/config.site'を探し，その後で，存在する場合は
`PREFIX/etc/config.site'を探します．また，
`CONFIG_SITE'環境変数をサイトスクリプトのある場所に設定することも
可能です．警告：全ての`configure'スクリプトがサイトスクリプト
を探すわけではありません．


File: autoconf-ja.info,  Node: Defining Variables,  Next: configure Invocation,  Prev: Sharing Defaults,  Up: Running configure Scripts

変数の定義
==========

   サイトのシェルスクリプトで定義されていない変数は，`configure'
に渡す環境変数で設定することが可能です．しかし，パッケージによってはビ
ルドしているときに再び`configure'を実行し，カスタマイズされて
いるこれらの変数の値が消えてしまう可能性があります．この問題を避けるた
め，`VAR=value'を使用して，それらを`configure'コマンドラ
インで設定すべきです．例えば，以下のようにします．

     ./configure CC=/usr/local2/bin/gcc

これで，(サイトシェルスクリプトで優先されない限り)Cコンパイラとして
`gcc'を指定します．


File: autoconf-ja.info,  Node: configure Invocation,  Prev: Defining Variables,  Up: Running configure Scripts

`configure'の呼び出し
=====================

   `configure'は，処理方法を制御する以下のオプションを理解します．

`--help'
`-h'
     `configure'オプションの概要を出力して終了します．

`--version'
`-V'
     `configure'スクリプトの生成に使用したAutoconfのバージョンを出
     力して終了します．

`--cache-file=FILE'
     キャッシュを可能にします．調査の結果を，通常は`config.cache'とい
     うFILEに保存し，使用します．キャッシュを利用不可能にするため，
     FILEはデフォルトで`/dev/null'です．

`--config-cache'
`-C'
     `--cache-file=config.cache'の別名です．

`--quiet'
`--silent'
`-q'
     調査したり作成したりしているメッセージを出力しません．通常の出力も全て
     省略するためには，(エラーメッセージは表示されますが)`/dev/null'に
     ファイルをリダイレクトしてください．

`--srcdir=DIR'
     ディレクトリDIRでパッケージのソースコードを探します．通常，
     `configure'はディレクトリを自動的に決定することが可能です．

`configure'は，広範囲では役に立たないかもしれませんが，その他
のオプションも受け入れます．詳細を知るために`configure --help'を
実行してください．


File: autoconf-ja.info,  Node: config.status Invocation,  Next: Obsolete Constructs,  Prev: Running configure Scripts,  Up: Top

コンフィグレーションの再生成
****************************

   `configure'スクリプトは，実際にコンフィグレーションを行なう
"実際に作成されるもの(instantiates)"のテンプレートファイルとなる
`config.status'という名前のファイルを作成します．それは，再コンフィ
グレーションが必要な状況でパッケージが前回コンフィグレーションされたとき
に指定されたコンフィグレーションオプションも記録しています．

   概要です．
     ./config.status OPTION... [FILE...]

   FILESをコンフィグレーションします．何も指定されていない場合は全て
のテンプレートの実体が作成されます．ファイルは，依存性無しで指定する必要
があり，以下のようにします．

     ./config.status foobar

以下のようにはしません．

     ./config.status foobar:foo.in:bar.in

   サポートされているOPTIONは以下のとおりです．

`--help'
`-h'
     コマンドラインオプションの概要とテンプレートファイルのリストを出力し，終
     了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力し終了します．

`--silent'
`--quiet'
`-q'
     処理中のメッセージを出力しません．

`--debug'
`-d'
     一時ファイルを削除しません．

`--file=FILE[:TEMPLATE]'
     `AC_CONFIG_FILES(FILE:TEMPLATE)'が使用されているかのよ
     うに，実際に作成されるファイルを要求します．FILEとTEMPLATEは
     どちらも`-'が可能で，それぞれ標準出力そして/または標準入力が使用さ
     れます．TEMPLATEファイル名が相対的な場合，最初にビルドツリーで検索
     され，次にソースツリーで検索されます．詳細は，*Note Configuration
     Actions::.

     このオプションと以下のものは，個別に配布されているパッケージで
     `configure'が計算した値を共有する方法を提供します．そうすること
     は，複数のパッケージがそれらのスーパーセット，おそらく共通のライブラリを
     必要とする場合に役に立つはずです．これらのオプションで，
     `config.status' ファイルが`configure.ac'で指定しているもの以外
     のファイルも作成可能になるので，異なるパッケージで使用可能になります．

`--header=FILE[:TEMPLATE]'
     `--file'と同じですが，`AC_CONFIG_HEADERS'を使用します．

`--recheck'
     `config.status'にそれ自身を更新するかどうか尋ねて終了します(実際に
     作成しません)．いくつかのテストの結果が前回のもの異なる可能性があるので，
     このオプションは`configure'を変更した場合に役に立ちます．
     `--recheck'では，前回使用したものと同じ引数に加え，
     `configure'が`config.status'を実行したり`Makefile'とそ
     の他のファイルを作成したりしないようにする`--no-create'オプション
     と，`configure'がサブディレクトリでその他の`configure'ス
     クリプトを実行しないようにする`--no-recursion'を用いて再実行しま
     す．(`config.status'が変更された時に，他の`Makefile'のルールで
     実行可能なようにするため，これは存在しています．例は，*note
     Automatic Remaking::)．

   `config.status'は，その動作を変更するいくつかのオプションの環境変数
を調査します．

 - 変数: CONFIG_SHELL
     `--recheck'オプションで`configure'が実行されるシェルです．
     Bourne互換にする必要があります．デフォルトは，利用可能な場合は
     `LINENO'をサポートするシェルで，それ以外では`/bin/sh'になります．

 - 変数: CONFIG_STATUS
     コンフィグレーションを記録するシェルスクリプトのファイル名です．デフォル
     トは`./config.status'です．この変数は，他のパッケージの一部を使用し
     たり，`configure'スクリプトが別々に管理されていて，マージされて
     いないとき役に立ちます．

   Makefileで`./config.status'を使用することも可能です．例えば，上記
(*note Automatic Remaking::)のような依存がある状況では，
`configure.ac'が変更された時，`config.status'は2回実行されます．
それがうるさい場合，以下のようなルールで，ファイルを再生成するためだけに
それぞれ実行させることが可能です．
     config.h: stamp-h
     stamp-h: config.h.in config.status
             ./config.status config.h
             echo > stamp-h
     
     Makefile: Makefile.in config.status
             ./config.status Makefile

   `config.status'の呼び出しの慣習は変更されました．詳細は， *Note
Obsolete config.status Use::を参照してください．


File: autoconf-ja.info,  Node: Obsolete Constructs,  Next: Using Autotest,  Prev: config.status Invocation,  Up: Top

時代遅れの構成物
****************

Autoconfは変化し，歳月を経て時代遅れになった構成物もあります．変更のほと
んどはマクロの呼び出しですが，状況によっては，ツール自身やそのコンセプト
さえも，今では時代遅れと考えられるものもあります．

新しいAutoconfを使用する場合は，この章を完全に飛ばしてもかまいません．こ
こでの目的は主に，より新しい構成物に変更する方法を理解することで，パッケー
ジを更新している管理者を助けることです．

* Menu:

* Obsolete config.status Use::  Different calling convention
* acconfig.h::                  Additional entries in `config.h.in'
* autoupdate Invocation::       Automatic update of `configure.ac'
* Obsolete Macros::             Backward compatibility macros
* Autoconf 1::                  Tips for upgrading your files
* Autoconf 2.13::               Some fresher tips


File: autoconf-ja.info,  Node: Obsolete config.status Use,  Next: acconfig.h,  Up: Obsolete Constructs

時代遅れの`config.status'の呼び出し
===================================

   `config.status'は現在，実際に作成されるファイルを指定するための引数
をサポートしています．詳細は，*Note config.status
Invocation::を参照してく ださい．以前は環境変数の使用が必要でした．

 - 変数: CONFIG_COMMANDS
     実行するコマンドのタグです．デフォルトは，`configure.ac'内の
     `AC_OUTPUT'と`AC_CONFIG_COMMANDS'に与える引数です．

 - 変数: CONFIG_FILES
     `@VARIABLE@'の置換を実行するファイルです．デフォルトは，
     `configure.ac'内の`AC_OUTPUT'と`AC_CONFIG_COMMANDS'に与え
     る引数です．

 - 変数: CONFIG_HEADERS
     Cの`#define'文の置換を行なうファイルです．デフォルトは
     `AC_CONFIG_HEADERS'に与える引数です．そのマクロが呼び出されていない
     場合，`config.status'はこの値を無視します．

 - 変数: CONFIG_LINKS
     作成されるシンボリックリンクです．デフォルトは，`AC_CONFIG_LINKS'
     に与える引数です．そのマクロが呼び出されていない場合，
     `config.status'はこの値を無視します．

   *Note config.status
Invocation::で古いインターフェースを使用する例は，以下
のようになります．

     config.h: stamp-h
     stamp-h: config.h.in config.status
             CONFIG_COMMANDS= CONFIG_LINKS= CONFIG_FILES= \
               CONFIG_HEADERS=config.h ./config.status
             echo > stamp-h
     
     Makefile: Makefile.in config.status
             CONFIG_COMMANDS= CONFIG_LINKS= CONFIG_HEADERS= \
               CONFIG_FILES=Makefile ./config.status

(`configure.ac'で`AC_CONFIG_HEADERS'を呼び出さない場合，
`make'ルールに`CONFIG_HEADERS'を設定する必要はありません．
`CONFIG_COMMANDS'等に対しても同様です．)


File: autoconf-ja.info,  Node: acconfig.h,  Next: autoupdate Invocation,  Prev: Obsolete config.status Use,  Up: Obsolete Constructs

`acconfig.h'
============

   `config.h.in'を生成するため，`autoheader'はそれぞれのシンボ
ルに対するテンプレートを構築したり探したりする必要がありました．現在の
Autoconfのリリースでは，`AH_VERBATIM'と`AH_TEMPLATE'を使用しま
すが(*note Autoheader Macros::)，古いリリースでは，ファイル
`acconfig.h'に必要なテンプレートのリストを含めていました．
`autoheader'は，コメントと`#define'と`#undef'の文を， `acconfig.h'
がカレントディレクトリに存在する場合はそこからコピーし
ます．追加のシンボルを`AC_DEFINE'する場合，このファイルを使用する必
要がありました．

   `config.h.in'に情報を前置/後置したい場合，現在のAutoconfのリリース
でも，`AH_TOP'と`AH_BOTTOM'を提供しています．昔のバージョンの
Autoconfにはよく似た機能がありました．`./acconfig.h'に文字列
`@TOP@'が含まれている場合，`autoheader'は`@TOP@'
が含まれている行の前の行を生成するファイルの先頭にコピーします．同様に，
`./acconfig.h'に文字列`@BOTTOM@'が含まれている場合，
`autoheader'はその行の後の行を生成するファイルの末尾にコピーしま
す．これらの文字列のいずれかまたは両方とも省略できます．古いバージョンの
Autoconfで同じ効果を生成するための，さらに古い代替方法は，カレントディレ
クトリにファイル`FILE.top'(通常は`config.h.top') や
`FILE.bot'を作成することです．それらが存在する場合，
`autoheader'はその出力の最初と終りに，それぞれその内容をコピーし ます．

以前のバージョンのAutoconfでは，配布するソフトウエアパッケージの準備で使
用するファイルは以下のようになっています．
     configure.ac --.   .------> autoconf* -----> configure
                    +---+
     [aclocal.m4] --+   `---.
     [acsite.m4] ---'       |
                            +--> [autoheader*] -> [config.h.in]
     [acconfig.h] ----.     |
                      +-----'
     [config.h.top] --+
     [config.h.bot] --'

   `AH_'マクロだけを使用する際は，`configure.ac'は自己内蔵型にす
べきで，そして，`acconfig.h'等に依存すべきではありません．


File: autoconf-ja.info,  Node: autoupdate Invocation,  Next: Obsolete Macros,  Prev: acconfig.h,  Up: Obsolete Constructs

`configure.ac'を現代風にするために`autoupdate'を使用する
========================================================

   `autoupdate'プログラムは，Autoconfマクロを古い名前で呼び出してい
る`configure.ac'ファイルを，現在のマクロ名に更新します．バージョン2
のAutoconfでは，ほとんどのマクロが，より一様で記述的な命名法で名前が変更
されています．新しい方法の記述は*Note Macro Names::.
古い名前も動作します
が(古いマクロとそれに対応する新しいマクロのリストは*note Obsolete
Macros::)，新しいマクロ名を使用するために更新した場合，
`configure.ac'はより可読性の高いものになり，現在のAutoconfマクロを
使用することがより簡単になります．

   引数が与えられていない場合，`autoupdate'は`configure.ac' を
更新し，元のバージョンを接尾子`~'でバックアップします(または，環境
変数`SIMPLE_BACKUP_SUFFIX'が設定されている場合はその値になります)．
`autoupdate'に引数を与えた場合，`configure.ac'の代わりにそ
のファイルを読み込み，更新されたファイルを標準出力に出力します．

`autoupdate'は以下のオプションを受け入れます．

`--help'
`-h'
     コマンドラインオプションの概要を出力して終了します．

`--version'
`-V'
     Autoconfのバージョンナンバーを出力して終了します．

`--verbose'
`-v'
     処理している段階を報告します．

`--debug'
`-d'
     一時的なファイルを削除しません．

`--force'
`-f'
     ファイルが変更されていない場合でも強制的に更新します．キャッシュは無視さ
     れます．

`--include=DIR'
`-I DIR'
     入力ファイルをDIRでも探します．複数回の呼び出しは累積されます．ディ
     レクトリは最後のものから最初のものという順序で見ていきます．


File: autoconf-ja.info,  Node: Obsolete Macros,  Next: Autoconf 1,  Prev: autoupdate Invocation,  Up: Obsolete Constructs

時代遅れのマクロ
================

様々な理由で(通常適切に引用婦で囲むことに失敗していて以前の配布物が拡張
できないなどの理由です)，いくつかのマクロがAutoconfで時代遅れになってい
ます．それらはサポートされていますが，使用を止めるようお願いします．それ
らの使用は避けた方が良いでしょう．

Autoconfのバージョン1からバージョン2へ移行している間，より一般的でより記
述的な命名法を使用するために，ほとんどのマクロの名前が変更されましたが，
そのシグニチャは変更されていません．以下で，これらのマクロの古い名前と新
しい名前の対応付けがあるものは，署名と記述に対する新しいマクロの定義へ参
照するよう読者を招待します．

 - マクロ: AC_ALLOCA
     `AC_FUNC_ALLOCA'

 - マクロ: AC_ARG_ARRAY
     有用性の制限のため削除．

 - マクロ: AC_C_CROSS
     このマクロは時代遅れです．何もしません．

 - マクロ: AC_CANONICAL_SYSTEM
     システムタイプを決定し，出力変数を標準的なシステムタイプ名に設定します．
     このマクロが設定する変数の詳細は*Note Canonicalizing::.

     ユーザは必要なものに依存して，`AC_CANONICAL_BUILD'または
     `AC_CANONICAL_HOST'のいずれか，または`AC_CANONICAL_TARGET'を使
     用することを推奨します．`AC_CANONICAL_TARGET'を実行することで，必ず
     それ以外の二つのマクロが実行されます．

 - マクロ: AC_CHAR_UNSIGNED
     `AC_C_CHAR_UNSIGNED'

 - マクロ: AC_CHECK_TYPE (TYPE, DEFAULT)
     2.13までのAutoconfでは，このバージョンの`AC_CHECK_TYPE'を提供するた
     めに使用されていましたが，問題があり反対されていました．第一に，それは
     `CHECK'一族のメンバーですが，単一のファミリーに過ぎず，調査以上のこ
     とを行なっていました．次に，足りない型は`typedef'されず，それらは
     `#define'されるので，ポインタ型の場合は互換性がなくなってしまうはず
     です．

     この`AC_CHECK_TYPE'の使用は時代遅れで推奨できません．現在のマクロの
     記述は，*Note Generic Types::を参照してください．

     型TYPEが定義されていない場合，それはC(またはC++)の組み込みの型
     DEFAULTに定義されます．例えば，`short'や`unsigned'です．

     このマクロは以下と等価です．

          AC_CHECK_TYPE([TYPE],,
                        [AC_DEFINE_UNQUOTED([TYPE], [DEFAULT],
                                            [Define to `DEFAULT' if
                                             <sys/types.h> does not define.])])

     下位互換性のため，二つのバージョンの`AC_CHECK_TYPE'が実装されていて，
     単純な発見的手法で選択されます．

       1. 引数が三つまたは四つある場合，現在のバージョンが使用されます．

       2.
          二番目の引数にCやC++の型がある場合，時代遅れのバージョンが使用されます．
          引数がCやC++に_組み込まれている_型，または`_t'で終るC識別子で，
          さらに一つの`[(* 'が続き，その後にゼロ以上の`[]()* _a-zA-Z0-9'
          以外の文字列が続く場合はこうなります．

       3.
          二番目の引数が有効なCとC++のアルファベットで綴られている型の場合，ユーザ
          は警告され，現在のバージョンが使用されます．

       4. それ以外では，現在のバージョンが使用されます．

     有効な組み込みの型を使用する，または，同じ現在のコード(上記参照)を使用す
     る，もしくはそれより良いものとして，`AC_CHECK_TYPES'とともに使用す
     ることをお勧めします．

          #if !HAVE_LOFF_T
          typedef loff_t off_t;
          #endif

 - マクロ: AC_CHECKING (FEATURE-DESCRIPTION)
     `AC_MSG_NOTICE([checking FEATURE-DESCRIPTION...]'と同じで す．

 - マクロ: AC_COMPILE_CHECK (ECHO-TEXT, INCLUDES, FUNCTION-BODY,
          ACTION-IF-FOUND, [ACTION-IF-NOT-FOUND])
     これは，`AC_TRY_COMPILE'の時代遅れのバージョンで，それ自身も
     `AC_COMPILE_IFELSE'で置換され(*note Running the Compiler::)，それは
     ECHO-TEXTが空ではない場合，`checking for ECHO-TEXT' を
     標準出力の最初に追加出力します．メッセージを出力するためには，代わりに
     `AC_MSG_CHECKING'と`AC_MSG_RESULT'を使用してください (*note
     Printing Messages::)．

 - マクロ: AC_CONST
     `AC_C_CONST'

 - マクロ: AC_CROSS_CHECK
     `AC_C_CROSS'と同じで，さらにそれも時代遅れになっていて，何もしませ
     ん`:-)'．

 - マクロ: AC_CYGWIN
     Cygwin環境を調査し，その状況ではシェル変数`CYGWIN'を`yes'に設
     定します．このマクロを使用せず，権威のあるホストの調査手法
     `AC_CANONICAL_HOST'が使用されています．実際問題として，このマクロは
     以下のように定義されています．

          AC_REQUIRE([AC_CANONICAL_HOST])[]dnl
          case $host_os in
            *cygwin* ) CYGWIN=yes;;
                   * ) CYGWIN=no;;
          esac

     変数`CYGWIN'には，CygWin32を実行しているときは非常に特殊な意味があ
     ることに注意し，変更すべきではありません．それはこのマクロを使用しないも
     う一つの理由です．

 - マクロ: AC_DECL_SYS_SIGLIST
     以下と同じです．

          AC_CHECK_DECLS([sys_siglist],,,
          [#include <signal.h>
          /* NetBSD declares sys_siglist in unistd.h.  */
          #if HAVE_UNISTD_H
          # include <unistd.h>
          #endif
          ])

 - マクロ: AC_DECL_YYTEXT
     何もせず，現在は`AC_PROG_LEX'に統合されています．

 - マクロ: AC_DIR_HEADER
     `AC_FUNC_CLOSEDIR_VOID'と`AC_HEADER_DIRENT'の呼び出しに似てい
     ますが，ヘッダファイルが見つかったことを示すため，異なるCプリプロセッサ
     マクロの組を定義します．

     ヘッダ         古いシンボル 新しいシンボル
     `dirent.h'     `DIRENT'     `HAVE_DIRENT_H'
     `sys/ndir.h'   `SYSNDIR'    `HAVE_SYS_NDIR_H'
     `sys/dir.h'    `SYSDIR'     `HAVE_SYS_DIR_H'
     `ndir.h'       `NDIR'       `HAVE_NDIR_H'

 - マクロ: AC_DYNIX_SEQ
     DYNIX/ptxの場合，出力変数`LIBS'に`-lseq' を追加します．この
     マクロは以下のように定義されるように使用されていました．

          AC_CHECK_LIB(seq, getmntent, LIBS="-lseq $LIBS")

     現在では，`AC_FUNC_GETMNTENT'で行ないます．

 - マクロ: AC_EXEEXT
     コンパイラの出力を元に出力変数`EXEEXT'を定義し，それは現在では自動
     的に行なわれます．通常，Unixでは空の文字列で，Win32やOS/2では`.exe'
     に設定します．

 - マクロ: AC_EMXOS2
     `AC_CYGWIN'に似ていますが，OS/2のEMX環境変数を調査し`EMXOS2'
     を設定します．

 - マクロ: AC_ERROR
     `AC_MSG_ERROR'

 - マクロ: AC_FIND_X
     `AC_PATH_X'

 - マクロ: AC_FIND_XTRA
     `AC_PATH_XTRA'

 - マクロ: AC_FUNC_CHECK
     `AC_CHECK_FUNC'

 - マクロ: AC_FUNC_WAIT3
     `wait3'が見つかり，第三引数(`struct rusage *')の内容が満たされ
     ている場合，HP-UXは違いますが，`HAVE_WAIT3'を定義します．

     現在では，`wait3'はOpen Groupの標準から削除されていて，次のリビジョ
     ンのPOSIXでは無くなるので，移植性の高いプログラムでは
     `wait3'ではなく`waitpid'を使用すべきです．

 - マクロ: AC_GCC_TRADITIONAL
     `AC_PROG_GCC_TRADITIONAL'

 - マクロ: AC_GETGROUPS_T
     `AC_TYPE_GETGROUPS'

 - マクロ: AC_GETLOADAVG
     `AC_FUNC_GETLOADAVG'

 - マクロ: AC_HAVE_FUNCS
     `AC_CHECK_FUNCS'

 - マクロ: AC_HAVE_HEADERS
     `AC_CHECK_HEADERS'

 - マクロ: AC_HAVE_LIBRARY (LIBRARY, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [OTHER-LIBRARIES])
     このマクロは，FUNCTION引数を`main'にした`AC_CHECK_LIB'
     の呼び出しと同じです．さらに，LIBRARYは，`foo'，
     `-lfoo'，または`libfoo.a'のいずれで書くことも可能です．これ
     ら全ての状況で，コンパイラに`-lfoo'が渡されます．しかし，
     LIBRARYをシェル変数することは不可能です．リテラル名にする必要があ
     ります．

 - マクロ: AC_HAVE_POUNDBANG
     `AC_SYS_INTERPRETER' (呼び出し規則が異なります)

 - マクロ: AC_HEADER_CHECK
     `AC_CHECK_HEADER'

 - マクロ: AC_HEADER_EGREP
     `AC_EGREP_HEADER'

 - マクロ: AC_HELP_STRING
     `AS_HELP_STRING'

 - マクロ: AC_INIT (UNIQUE-FILE-IN-SOURCE-DIR)
     以前の`AC_INIT'は単一の引数のみで使用され，それは以下と同じです．

          AC_INIT
          AC_CONFIG_SRCDIR(UNIQUE-FILE-IN-SOURCE-DIR)

 - マクロ: AC_INLINE
     `AC_C_INLINE'

 - マクロ: AC_INT_16_BITS
     Cの型`int'が16ビット幅の場合，`INT_16_BITS'を定義します．代わ
     りに`AC_CHECK_SIZEOF(int)'を使用してください．

 - マクロ: AC_IRIX_SUN
     AIX (Silicon Graphics UNIX)の場合，出力変数`LIBS' に
     `-lsun'を追加します．`getmntent'を取得するためにそれを使用し
     ている場合，その代わりに`AC_FUNC_GETMNTENT'を使用してください．NIS
     バージョンのパスワードとグループ関数のためにそれを使用している場合．
     `AC_CHECK_LIB(sun, getpwnam)'を使用してください．Autoconf 2.13まで
     は，以下のように使用されていました．

          AC_CHECK_LIB(sun, getmntent, LIBS="-lsun $LIBS")

     現在ではそれは以下のように定義されます．

          AC_FUNC_GETMNTENT
          AC_CHECK_LIB(sun, getpwnam)

 - マクロ: AC_LANG_C
     `AC_LANG(C)'と同じです．

 - マクロ: AC_LANG_CPLUSPLUS
     `AC_LANG(C++)'と同じです．

 - マクロ: AC_LANG_FORTRAN77
     `AC_LANG(Fortran 77)'と同じです．

 - マクロ: AC_LANG_RESTORE
     `AC_LANG_SAVE'で設定されるように，スタックのトップに保存される
     LANGUAGEを選択し，スタックから削除し，
     `AC_LANG(LANGUAGE)'を呼び出します．

 - マクロ: AC_LANG_SAVE
     現在の言語を(`AC_LANG'で設定されるように)スタックに記憶します．現在
     の言語は変更されません．`AC_LANG_PUSH'が好まれます．

 - マクロ: AC_LINK_FILES (SOURCE..., DEST...)
     これは，`AC_CONFIG_LINKS'の時代遅れのバージョンです．以下を更新した
     バージョンにします．

          AC_LINK_FILES(config/$machine.h config/$obj_format.h,
                        host.h            object.h)

     それは，以下のようになります．

          AC_CONFIG_LINKS(host.h:config/$machine.h
                          object.h:config/$obj_format.h)

 - マクロ: AC_LN_S
     `AC_PROG_LN_S'

 - マクロ: AC_LONG_64_BITS
     Cの型`long int'が64ビット幅の場合，`LONG_64_BITS'を定義します．
     その代わりに，一般的なマクロ`AC_CHECK_SIZEOF([long int])'を使用して
     ください．

 - マクロ: AC_LONG_DOUBLE
     `AC_C_LONG_DOUBLE'

 - マクロ: AC_LONG_FILE_NAMES
     `AC_SYS_LONG_FILE_NAMES'

 - マクロ: AC_MAJOR_HEADER
     `AC_HEADER_MAJOR'

 - マクロ: AC_MEMORY_H
     `mem'関数が`memory.h'で定義されている場合に
     `NEED_MEMORY_H'を定義するために使用されます．現在は，
     `AC_CHECK_HEADERS(memory.h)'と同じです．コードを
     `NEED_MEMORY_H'ではなく`HAVE_MEMORY_H'に依存するように調整して
     ください．*Note Standard Symbols::.

 - マクロ: AC_MINGW32
     `AC_CYGWIN'に似ていますが，それはMingW32コンパイラの環境を調査し
     `MINGW32'を設定します．

 - マクロ: AC_MINUS_C_MINUS_O
     `AC_PROG_CC_C_O'

 - マクロ: AC_MMAP
     `AC_FUNC_MMAP'

 - マクロ: AC_MODE_T
     `AC_TYPE_MODE_T'

 - マクロ: AC_OBJEXT
     `.c'ファイルが除外された後，コンパイラの出力に基づいて，出力変数
     `OBJEXT'を定義します．通常，Unixでは`o'で，Win32では
     `obj'に設定します．現在はコンパイラの調査マクロがこれを自動的に処理
     します．

 - マクロ: AC_OBSOLETE (THIS-MACRO-NAME, [SUGGESTION])
     M4が標準エラー出力に，THIS-MACRO-NAMEが時代遅れだというメッセージ
     をそれが呼び出されているファイルと行とともに出力します．
     THIS-MACRO-NAMEは，`AC_OBSOLETE'が呼び出しているマクロ名にす
     べきです．SUGGESTIONが与えられている場合，それは警告メッセージの終
     りに出力されます．例えば，THIS-MACRO-NAMEの代わりに使用するものを
     提案することが可能になります．

     例えば以下のようにします．

          AC_OBSOLETE([$0], [; use AC_CHECK_HEADERS(unistd.h) instead])dnl

     ユーザに対するより良いサービスとなるので，代わりに`AU_DEFUN'を使用
     することを推奨します．

 - マクロ: AC_OFF_T
     `AC_TYPE_OFF_T'

 - マクロ: AC_OUTPUT ([FILE]..., [EXTRA-CMDS], [INIT-CMDS])
     引数を用いた`AC_OUTPUT'の使用は反対されます．これは以下と同じものの
     時代遅れのインターフェースです．

          AC_CONFIG_FILES(FILE...)
          AC_CONFIG_COMMANDS([default],
                             EXTRA-CMDS, INIT-CMDS)
          AC_OUTPUT

 - マクロ: AC_OUTPUT_COMMANDS (EXTRA-CMDS, [INIT-CMDS])
     `config.status'の終りに実行する追加のシェルコマンドと，
     `configure'で変数を初期化するためのシェルコマンドをを指定します．
     このマクロは複数回呼び出し可能です．それは時代遅れで，
     `AC_CONFIG_COMMANDS'で置換されました．

     以下は現実的ではない例です．

          fubar=27
          AC_OUTPUT_COMMANDS([echo this is extra $fubar, and so on.],
                             [fubar=$fubar])
          AC_OUTPUT_COMMANDS([echo this is another, extra, bit],
                             [echo init bit])

     `AC_CONFIG_COMMANDS'が追加のキーを要求する事実以外，重要な差は
     `AC_OUTPUT_COMMANDS'が引数を二回引用符で囲んでいますが
     `AC_CONFIG_COMMANDS'はそうではないということです．これは，
     `AC_CONFIG_COMMANDS'では引数を用いてマクロを安全に呼び出すことが可
     能だということを意味します．

          AC_CONFIG_COMMANDS(foo, [my_FOO()])

     反対に，1レベルの引用符が`AC_OUTPUT_COMMANDS'でのリテラル文字列に対
     して十分なところでは，`AC_CONFIG_COMMANDS'が二回必要になります．以
     下の行は等価です．

          AC_OUTPUT_COMMANDS([echo "Square brackets: []"])
          AC_CONFIG_COMMANDS([default], [[echo "Square brackets: []"]])

 - マクロ: AC_PID_T
     `AC_TYPE_PID_T'

 - マクロ: AC_PREFIX
     `AC_PREFIX_PROGRAM'

 - マクロ: AC_PROG_CC_STDC
     このマクロは，`AC_PROG_CC'に統合されました．

 - マクロ: AC_PROGRAMS_CHECK
     `AC_CHECK_PROGS'

 - マクロ: AC_PROGRAMS_PATH
     `AC_PATH_PROGS'

 - マクロ: AC_PROGRAM_CHECK
     `AC_CHECK_PROG'

 - マクロ: AC_PROGRAM_EGREP
     `AC_EGREP_CPP'

 - マクロ: AC_PROGRAM_PATH
     `AC_PATH_PROG'

 - マクロ: AC_REMOTE_TAPE
     有用性の制限のため削除されました．

 - マクロ: AC_RESTARTABLE_SYSCALLS
     `AC_SYS_RESTARTABLE_SYSCALLS'

 - マクロ: AC_RETSIGTYPE
     `AC_TYPE_SIGNAL'

 - マクロ: AC_RSH
     有用性の制限のため削除されました．

 - マクロ: AC_SCO_INTL
     SCO UNIXの場合，出力変数`LIBS'に`-lintl'を加えます．このマク
     ロは以下を使用していました．

          AC_CHECK_LIB(intl, strftime, LIBS="-lintl $LIBS")

     現在は，代わりに`AC_FUNC_STRFTIME'を呼び出します．

 - マクロ: AC_SETVBUF_REVERSED
     `AC_FUNC_SETVBUF_REVERSED'

 - マクロ: AC_SET_MAKE
     `AC_PROG_MAKE_SET'

 - マクロ: AC_SIZEOF_TYPE
     `AC_CHECK_SIZEOF'

 - マクロ: AC_SIZE_T
     `AC_TYPE_SIZE_T'

 - マクロ: AC_STAT_MACROS_BROKEN
     `AC_HEADER_STAT'

 - マクロ: AC_STDC_HEADERS
     `AC_HEADER_STDC'

 - マクロ: AC_STRCOLL
     `AC_FUNC_STRCOLL'

 - マクロ: AC_ST_BLKSIZE
     `AC_CHECK_MEMBERS'

 - マクロ: AC_ST_BLOCKS
     `AC_STRUCT_ST_BLOCKS'

 - マクロ: AC_ST_RDEV
     `AC_CHECK_MEMBERS'

 - マクロ: AC_SYS_RESTARTABLE_SYSCALLS
     システムが自動的にシグナルで中断されたシステムコールを再スタートする場合，
     `HAVE_RESTARTABLE_SYSCALLS'を定義します．このマクロは，システムが一
     般的に再スタートするかどうかを調査しません - それは，(`sigaction'
     ではなく)`signal'でインストールされているシグナルハンドラが再スター
     トするためのシステムコールを呼び出すかどうかをテストします．ハンドラの無
     いシグナルで中断されたときにシステムコールが再スタートされる場合，テスト
     しません．

     今日の移植性の高いプログラムでは，システムコールを再スタートしたい場合，
     `SA_RESTART'を用いて`sigaction'を使用すべきです．現在では，シ
     ステムコールが再スタート可能かどうかは，コンフィグレーション時の問題では
     なく動的な問題なので，`HAVE_RESTARTABLE_SYSCALLS'に依存すべきではあ
     りません．

 - マクロ: AC_SYS_SIGLIST_DECLARED
     `AC_DECL_SYS_SIGLIST'

 - マクロ: AC_TEST_CPP
     `AC_TRY_CPP'になり，それも`AC_PREPROC_IFELSE'で置き換えられま
     した．

 - マクロ: AC_TEST_PROGRAM
     `AC_TRY_RUN'になり，それも`AC_RUN_IFELSE'で置き換えられました．

 - マクロ: AC_TIMEZONE
     `AC_STRUCT_TIMEZONE'

 - マクロ: AC_TIME_WITH_SYS_TIME
     `AC_HEADER_TIME'

 - マクロ: AC_TRY_COMPILE (INCLUDES, FUNCTION-BODY, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     `AC_COMPILE_IFELSE([AC_LANG_SOURCE([[INCLUDES]],
     [[FUNCTION-BODY]])], [ACTION-IF-TRUE],
     [ACTION-IF-FALSE])'と同じです(*note Running the Compiler::)．

     このマクロは，INCLUDESとFUNCTION-BODYの両方を二重に引用符で
     囲みます．

     CとC++に対して，INCLUDESはFUNCTION-BODYにあるコードが必要と
     するすべての`#include'文です(現在選択されている言語がFortranや
     Fortran 77 の場合，INCLUDESは無視されます)．コンパイラやコンパイル
     フラグは，現在の言語(*note Language Choice::)によって決定されます．

 - マクロ: AC_TRY_CPP (INPUT, [ACTION-IF-TRUE], [ACTION-IF-FALSE])
     `AC_PREPROC_IFELSE([AC_LANG_SOURCE([[INPUT]])], [ACTION-IF-TRUE],
     [ACTION-IF-FALSE])'と同じです (*note Running the Preprocessor::)．

     このマクロはINPUTを二重に引用符で囲みます．

 - マクロ: AC_TRY_LINK (INCLUDES, FUNCTION-BODY, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     `AC_LINK_IFELSE([AC_LANG_SOURCE([[INCLUDES]], [[FUNCTION-BODY]])],
     [ACTION-IF-TRUE], [ACTION-IF-FALSE])'と同じです(*note Running the
     Compiler::)．

     このマクロは，INCLUDESとFUNCTION-BODYの両方を二重に引用符で
     囲みます．

     現在の言語に依存して(*note Language Choice::)，FUNCTION-BODYの中身
     にある関数をコンパイルしリンクすることが可能かどうかを調べるテストプログ
     ラムを作成します．ファイルのコンパイルとリンクが成功する場合，シェルコマ
     ンドACTION-IF-FOUNDを実行し，それ以外ではACTION-IF-NOT-FOUND
     を実行します．

     このマクロは，INCLUDESとFUNCTION-BODYの両方を二重に引用符で
     囲みます．

     CとC++に対して，INCLUDESはFUNCTION-BODYにあるコードが必要と
     するすべての`#include'文です(現在選択されている言語がFortran 77 の
     場合，INCLUDESは無視されます)．コンパイラとコンパイルフラグは現在
     の言語(*note Language Choice::)で決定され，リンクでは`LDFLAGS'と
     `LIBS'が追加で使用されます．

 - マクロ: AC_TRY_LINK_FUNC (FUNCTION, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     このマクロは，`AC_LINK_IFELSE([AC_LANG_CALL([[INCLUDES]],
     [[FUNCTION-BODY]])], [ACTION-IF-TRUE],
     [ACTION-IF-FALSE])'と同じです．

 - マクロ: AC_TRY_RUN (PROGRAM, [ACTION-IF-TRUE], [ACTION-IF-FALSE],
          [ACTION-IF-CROSS-COMPILING])
     `AC_RUN_IFELSE([AC_LANG_SOURCE([[PROGRAM]], [ACTION-IF-TRUE],
     [ACTION-IF-FALSE], [ACTION-IF-CROSS-COMPILING])'と同じです(*note
     Run Time::)．

 - マクロ: AC_UID_T
     `AC_TYPE_UID_T'

 - マクロ: AC_UNISTD_H
     `AC_CHECK_HEADERS(unistd.h)'と同じです．

 - マクロ: AC_USG
     BSD文字列関数が`strings.h'で定義されている場合，
     `USG'を定義します．これからは`USG'ではなく`HAVE_STRING_H'
     に依存するようにすべきです．*Note Standard Symbols::.

 - マクロ: AC_UTIME_NULL
     `AC_FUNC_UTIME_NULL'

 - マクロ: AC_VALIDATE_CACHED_SYSTEM_TUPLE ([CMD])
     キャッシュファイルが現在のホスト，ターゲット，そしてビルドシステムのタイ
     プで矛盾がある場合，CMDを実行したりデフォルトのエラーメッセージを
     出力したりするために使用されていました．これは現在デフォルトで処理されま
     す．

 - マクロ: AC_VERBOSE (RESULT-DESCRIPTION)
     `AC_MSG_RESULT'.

 - マクロ: AC_VFORK
     `AC_FUNC_VFORK'

 - マクロ: AC_VPRINTF
     `AC_FUNC_VPRINTF'

 - マクロ: AC_WAIT3
     `AC_FUNC_WAIT3'

 - マクロ: AC_WARN
     `AC_MSG_WARN'

 - マクロ: AC_WORDS_BIGENDIAN
     `AC_C_BIGENDIAN'

 - マクロ: AC_XENIX_DIR
     このマクロは，Xenixの場合に出力変数`LIBS'に`-lx'を追加するた
     めに使用されていました．また，`dirent.h'が調査され，`LIBS' を
     `-ldir'に追加していました．現在では，`AC_HEADER_DIRENT' の代
     わりの別名となっていることも滅多に無く，依存すべきではありませんが，
     XENIXで実行されているかどうかを検出するコートが追加されています．

          AC_MSG_CHECKING([for Xenix])
          AC_EGREP_CPP(yes,
          [#if defined M_XENIX && !defined M_UNIX
            yes
          #endif],
                       [AC_MSG_RESULT([yes]); XENIX=yes],
                       [AC_MSG_RESULT([no]); XENIX=])

 - マクロ: AC_YYTEXT_POINTER
     `AC_DECL_YYTEXT'


File: autoconf-ja.info,  Node: Autoconf 1,  Next: Autoconf 2.13,  Prev: Obsolete Macros,  Up: Obsolete Constructs

バージョン1からの更新
=====================

Autoconfバージョン2は，バージョン1とほとんど下位互換性があります．しかし，
何かをするときにより良くなる方法も導入していますし，バージョン1の醜いも
のにはサポートしなくなったものもあります．そのため，`configure.ac'
の洗練具合に依存して，バージョン2に更新するための手作業が必要になります．
この章は，更新時に見るべき問題点も示します．また，`configure'ス
クリプトは，バージョン2の新しい機能でより良くなります．変更点は，
Autoconf配布物のファイル`NEWS'に概要が書かれています．

* Menu:

* Changed File Names::          Files you might rename
* Changed Makefiles::           New things to put in `Makefile.in'
* Changed Macros::              Macro calls you might replace
* Changed Results::             Changes in how to check test results
* Changed Macro Writing::       Better ways to write your own macros


File: autoconf-ja.info,  Node: Changed File Names,  Next: Changed Makefiles,  Up: Autoconf 1

ファイル名の変更
----------------

   Autoconfでインストールされた`aclocal.m4'がある場合，(特定のパッケー
ジのソースディレクトリと対立するので)，それを`acsite.m4'に名前を変
更する必要があります．*Note autoconf Invocation::.

   パッケージで`install.sh'を配布する場合，`make'組み込みルールが，
`install'と呼ばれる意図しないファイルを作成するので，
`install-sh'に名前を変更してください．`AC_PROG_INSTALL'は両方
の名前でスクリプトを探しますが，新しい名前を使用するのが最善です．

   `config.h.top'，`config.h.bot'，または`acconfig.h'を使用
している場合，そのまま使用することは可能ですが，`AH_'マクロを使用す
るとバラバラになりません．*Note Autoheader Macros::.


File: autoconf-ja.info,  Node: Changed Makefiles,  Next: Changed Macros,  Prev: Changed File Names,  Up: Autoconf 1

Makefileの変更
--------------

   `Makefile.in'ファイルに`@CFLAGS@'，`@CPPFLAGS@'，そし
て`@LDFLAGS@'を，`configure'実行時に，環境変数としてこれ
らの変数の値を利用できるので，それらを加えてください．必要ではありません
が，ユーザにとって便利です．

   出力ファイルに，`configure'で生成されたというコメントを含めるた
めに，`AC_OUTPUT'に対する`Makefile'以外の入力ファイルのそれそ
れのコメントに，`@configure_input@'を加えてください．
`AC_OUTPUT'で呼び出す全ての種類のファイルに対し，自動的に正しいコメ
ント文を選択するには，作業が非常に多くなります．

   `distclean'ターゲットで削除するファイルリストに， `config.log'
と`config.cache'を加えてください．

   以下のような`Makefile.in'がある場合を考えます．

     prefix = /usr/local
     exec_prefix = $(prefix)

以下のように変更する必要があります．

     prefix = @prefix@
     exec_prefix = @exec_prefix@

周りに`@'が無い変数の置換をする古い動作は削除されました．


File: autoconf-ja.info,  Node: Changed Macros,  Next: Changed Results,  Prev: Changed Makefiles,  Up: Autoconf 1

変更されたマクロ
----------------

Autoconfバージョン2でマクロの多くは名前が変更されました．まだ古い名前を
使用することも可能ですが，新しいものはより明確で，それらのドキュメントは
簡単に見つかります．古いマクロに対する新しい名前の表は，*Note Obsolete
Macros::.  新しいマクロを使用するように`configure.ac'を変換するため，
`autoupdate'プログラムを使用してください．*Note autoupdate Invocation::.

マクロには，より良い仕事をする似たものに置き換えられたものもありますが，
呼び出しに互換性がありません．`autoconf'実行中に，時代遅れのマク
ロの呼び出しに関する警告がある場合，無視しても大丈夫ですが，時代遅れのマ
クロの置換に関して出力されるアドバイスに従う場合，`configure'ス
クリプトはより良い仕事をします．特に，テストの結果を報告するメカニズムが
変化しました．(おそらく`AC_COMPILE_CHECK' によって)`echo'や
`AC_VERBOSE'を使用していた場合，`configure'スクリプトの出力
は，`AC_MSG_CHECKING'と`AC_MSG_RESULT'に変えた方が良く見えるで
しょう．*Note Printing Messages::.
これらのマクロは，キャッシュ変数に関連 して最高の仕事をします．*Note
Caching Results::.


File: autoconf-ja.info,  Node: Changed Results,  Next: Changed Macro Writing,  Prev: Changed Macros,  Up: Autoconf 1

変更された結果
--------------

   シェル変数の`DEFS'を調査することで，前のテストの結果を調査していた
場合，それらのテストに対するキャッシュ変数の値を調査することに切り替える
必要があります．`DEFS'は`configure'実行中にも存在しません．
それは出力ファイルを生成するときのみ作成されます．バージョン1からのこの
違いは，正確にその変数を引用符で囲むことが，あまりに厄介で，
`AC_DEFINE'を毎回呼び出すことは，非効率だと分かったためです． *Note
Cache Variable Names::.

   例えば，Autoconfバージョン1に対して書かれた，`configure.ac'の一部は
以下のようになります．

     AC_HAVE_FUNCS(syslog)
     case "$DEFS" in
     *-DHAVE_SYSLOG*) ;;
     *) # syslog is not in the default libraries.  See if it's in some other.
       saved_LIBS="$LIBS"
       for lib in bsd socket inet; do
         AC_CHECKING(for syslog in -l$lib)
         LIBS="$saved_LIBS -l$lib"
         AC_HAVE_FUNCS(syslog)
         case "$DEFS" in
         *-DHAVE_SYSLOG*) break ;;
         *) ;;
         esac
         LIBS="$saved_LIBS"
       done ;;
     esac

   バージョン2に対する書き方は以下のようになります．

     AC_CHECK_FUNCS(syslog)
     if test $ac_cv_func_syslog = no; then
       # syslog is not in the default libraries.  See if it's in some other.
       for lib in bsd socket inet; do
         AC_CHECK_LIB($lib, syslog, [AC_DEFINE(HAVE_SYSLOG)
           LIBS="$LIBS -l$lib"; break])
       done
     fi

   引用符の前にバックスラッシュを加えることで，`AC_DEFINE_UNQUOTED' で
バグが生じる場合，それを削除する必要があります．今は予想通りに動作し，
(バックスラッシュ以外の)引用符を特別扱いしません．*Note Setting Output
Variables::.

現在，Autoconfマクロが設定した真偽値のシェル変数のすべては，真の値に対し
て`yes'が使用され．偽に対してはほとんど`no'を使用しますが，下
位互換性のため，代わりに空の文字列を使用するものもあります．真に対して1
や`t'にシェル変数が設定されることを期待する場合，テストを変更する必
要があります．


File: autoconf-ja.info,  Node: Changed Macro Writing,  Prev: Changed Results,  Up: Autoconf 1

マクロの書き方の変更
--------------------

   独自のマクロを定義するとき，現在は`define'の代わりに`AC_DEFUN'
を使用すべきです．`AC_DEFUN'は`AC_PROVIDE'を自動的に呼び出し，
`AC_REQUIRE'のために呼び出されるマクロが，画面上で入れ子状になって
いる`checking...'メッセージを妨げないように，他のマクロを中断し
ていないことを確かめます．古い方法を使用し続けても実際に害はありませんが，
便利さと美しさが現象します．*Note Macro Definitions::.

恐らく，Autoconfと共にやってくるマクロを，何かをする方法のガイドとして見
ることになるでしょう．新しいバージョンのものを見ることは，スタイルが改善
されているものもあり，新しい機能も利用しているので，よい考えでしょう．

文書化されていないAutoconfの内部(マクロ，変数，変換)を使用して，トリッキー
なことをしていた場合，なされた変更を考慮するため，変更する必要があるかど
うか調査してください．恐らくkludeする代わりに，バージョン2で公式にサポー
トされたテクニックを使用することができます．そうしなければダメでしょう．

ローカルで書かれた特徴のテストを高速化するため，キャッシュを加えてくださ
い．共有可能なマクロをカプセル化するため，テストが一般的に十分役に立つこ
とを確かめてください．


File: autoconf-ja.info,  Node: Autoconf 2.13,  Prev: Autoconf 1,  Up: Obsolete Constructs

バージョン2.13からの更新
========================

   前のセクション(*note Autoconf
1::)の導入は，このセクションにも全く適して いるなあ....

     Autoconfバージョン2.50は，バージョン2.13とほとんど下位互換性があります．
     しかし，何かをするときより良くする方法も導入し，バージョン2.13の醜いもの
     にはサポートしなくなったものもあります．そのため，`configure.ac'の
     洗練具合に依存して，バージョン2.50に更新するための手作業が必要になります．
     この章は，更新時に見るべき問題点も示します．また，`configure'ス
     クリプトは，バージョン2.50の新しい機能でより良くなります．変更点は，
     Autoconf 配布物のファイル`NEWS'に概要が書かれています．

* Menu:

* Changed Quotation::           Broken code which used to work
* New Macros::                  Interaction with foreign macros
* Hosts and Cross-Compilation::  Bugward compatibility kludges
* AC_LIBOBJ vs LIBOBJS::        LIBOBJS is a forbidden token
* AC_FOO_IFELSE vs AC_TRY_FOO::  A more generic scheme for testing sources


File: autoconf-ja.info,  Node: Changed Quotation,  Next: New Macros,  Up: Autoconf 2.13

引用符で囲むことの変更
----------------------

紹介すべき最も重要な変更です．ほとんどのマクロの実装は完全に変更されまし
た．コードの分解，エラーメッセージの改善，ユーザインターフェースの一貫性
などが，このことで可能になりました．残念ながら副作用として，これまで(奇
跡的に)動作していた構成物には，Autoconf 2.50でおかしくなり始めるものもあ
ります．

   例えば，以下の例では，メッセージが適切に引用符で囲まれていません．

     AC_INIT
     AC_CHECK_HEADERS(foo.h,,
     AC_MSG_ERROR(cannot find foo.h, bailing out))
     AC_OUTPUT

Autoconf 2.13は，単純にそれを無視していました．

     $ autoconf-2.13; ./configure --silent
     creating cache ./config.cache
     configure: error: cannot find foo.h
     $

しかしAutoconf 2.50では，壊れた`configure'を生成します．

     $ autoconf-2.50; ./configure --silent
     configure: error: cannot find foo.h
     ./configure: exit: bad non-numeric arg `bailing'
     ./configure: exit: bad non-numeric arg `bailing'
     $

   メッセージは引用符で囲む必要があり，`AC_MSG_ERROR'の呼び出しもそう
です！

     AC_INIT
     AC_CHECK_HEADERS(foo.h,,
                      [AC_MSG_ERROR([cannot find foo.h, bailing out])])
     AC_OUTPUT

   多くの多くの(いくらでも続けたい)Autoconfマクロには...少なくとも
`AC_DEFUN'自身も含めて，適切な引用符がありませんでした！

     $ cat configure.in
     AC_DEFUN([AC_PROG_INSTALL],
     [# My own much better version
     ])
     AC_INIT
     AC_PROG_INSTALL
     AC_OUTPUT
     $ autoconf-2.13
     autoconf: Undefined macros:
     ***BUG in Autoconf--please report*** AC_FD_MSG
     ***BUG in Autoconf--please report*** AC_EPI
     configure.in:1:AC_DEFUN([AC_PROG_INSTALL],
     configure.in:5:AC_PROG_INSTALL
     $ autoconf-2.50
     $


File: autoconf-ja.info,  Node: New Macros,  Next: Hosts and Cross-Compilation,  Prev: Changed Quotation,  Up: Autoconf 2.13

新しいマクロ
------------

Autoconfは何年も休止中だったので，その間AutomakeがAutoconfのようなマクロ
を提供していました．現在は，Autoconf 2.50がこれらのマクロのより良いバー
ジョンを提供していて，`AM_'ではなく`AC_'の名前空間で統合されて
います．しかし，`autoupdate'で容易に更新できるように，そのような
`AM_'マクロも結合されて提供されています．

残念ながら，Automakeはこれらのマクロ名を引用符で囲んでいませんでした．そ
のため，`m4'が`AC_DEFUN(AM_TYPE_PTRDIFF_T, ...)'のよう
なマクロを`aclocal.m4'で見つけたとき，`AM_TYPE_PTRDIFF_T'は展
開され，そのAutoconfの定義で置換されていました．

   幸い，Autoconfは前置される`AC_INIT'の展開を受けて，それが所有する単
語で文句をいいます．

     $ cat configure.in
     AC_INIT
     AM_TYPE_PTRDIFF_T
     $ aclocal-1.4
     $ autoconf
     ./aclocal.m4:17: error: m4_defn: undefined macro: _m4_divert_diversion
     actypes.m4:289: AM_TYPE_PTRDIFF_T is expanded from...
     ./aclocal.m4:17: the top level
     $

将来のAutomakeのバージョンは，単純にこれらのマクロをこれ以上定義せず，お
そらく残りのマクロ名を引用符で囲むでしょう．しかし，全てがうまくいくまで
じっと待っている必要はありません．(単独で要求されるものもありますが)マク
ロを提供するための仕事は単純ではないので，Automakeのマクロに依存しないで
ください．

     $ cat configure.in
     AC_INIT
     AM_TYPE_PTRDIFF_T
     $ rm aclocal.m4
     $ autoupdate
     autoupdate: `configure.in' is updated
     $ cat configure.in
     AC_INIT
     AC_CHECK_TYPES([ptrdiff_t])
     $ aclocal-1.4
     $ autoconf
     $


File: autoconf-ja.info,  Node: Hosts and Cross-Compilation,  Next: AC_LIBOBJ vs LIBOBJS,  Prev: New Macros,  Up: Autoconf 2.13

ホストとクロスコンパイル
------------------------

コンパイラ作者の経験とそれ以降の長期にわたる公開討論を基にして，一連のク
ロスコンパイルの多くの面が変更されました．

   -
     ビルド，ホスト，そしてターゲットアーキテクチャタイプの違いに関連すること．

   - `configure'でそれらを指定するコマンドラインインターフェース．

   - `configure'で定義される変数．

   - クロスコンパイルモードを利用可能にすること．


ビルド，ホスト，そしてターゲットアーキテクチャタイプの違いに関連すること
は解決しています．一連のデフォルトは，現在は単純です．ターゲットのデフォ
ルトはホスト，ホストはビルド，そしてビルドは`config.guess' の結
果となっています．それにもかかわらず，2.13から2.50へ容易に変換するために，
以下の変換手法が実装されています．それは，リリースの組を完全に利用不可能
にすることはできないので，_それに依存しないでください_ (直すより問
題が生じることが多いので，我々はそれを維持することは不可能です)．

   `--build'または`--host'で指定しない限り，すべてのデフォル
トは`config.guess'の実行結果になります．指定する場合は，デフォル
トは指定したシステムタイプになります．両方を指定していて異なっている場合，
テストと要求された実行物をの実行しないように，`configure'はクロ
スコンパイルモードになります．

   ヒント：`config.guess'の結果に優先させたい場合は，
`--host'ではなく`--build'の方が好ましくなっています．将来
は，`--host'でビルドシステムタイプを優先しなくなるでしょう．
`--host'を指定する場合も，確実に`--build'も指定してください．


   下位互換性のため，`configure'はシステムタイプ自身をオプションと
して受け入れます．そのようなオプションは，ビルド，ホスト，そしてターゲッ
トのシステムタイプのデフォルトに優先されます．以下のコンフィグレーション
命令では，NetBSD/alphaで実行するのですが，ビルドプラットフォー
ムにもなるGNU Hurd/sparcのコードを生成する一連のクロスツールが
コンフィグレーションされます．

     ./configure --host=alpha-netbsd sparc-gnu


   Autoconf 2.13とそれ以前では，変数`build'，`host'，そして
`target'は，`AC_CANONICAL_BUILD'の呼び出しの前後で異なる意味を
持っていました．現在は，`--build'の引数を指定することで，それは厳
密な意味で`build_alias'にコピーされ，それ以外では空のままになります．
`AC_CANONICAL_BUILD'の後で，`build'は標準的なビルドタイプに設
定されます．変換を容易にするため，以前の内容は，`build_alias'と同じ
です．この壊れた機能に依存_しないように_ してください．

   下位互換性を考慮した手法は上のようになり，`--host'が指定されてい
て，`--build'指定されていないときは，ビルドシステムは
`--host'と同じだと仮定され，`build_alias'がその値として設定
されます．最終的には，この歴史的に間違っている動作はなくなるでしょう．


クロスコンパイルを利用可能にするための前者の方法はあまり良くなく，特に，
それが安易に使用されると，通常のエンドユーザが不可解なエラーメッセージを
前にして困ってしまいます．コンパイラが汎用的でないときだけのために，
`configure'はクロスコンパイルモードに入ることが可能です．これは
主に，ユーザからの明示的なフラグを待つ代わりに，`configure' をク
ロスコンパイルの検出を試みるために使用されるためです．

   現在は，`--host'が渡されている場合，そしてその状況でだけ，
`configure'はクロスコンパイルモードに入ります．

以下は，短いドキュメントです．2.13とその後のものの間で簡単に変換するため，
より複雑な手法が実行されています．以下は将来削除されるので，_以下の
内容に依存しないでください_．

   `--host'を指定していて`--build'を指定していない場合，
`configure'が最初のコンパイルテストを実行するときに，コンパイラ
で実行形式が生成されることを実行することで調査してみます．実行が失敗する
場合，クロスコンパイルモードに入ります．これは壊れやすいものです．さらに，
コンパイラテストを実行する頃には，ビルドシステムのタイプを修正するには遅
過ぎるかもしれません．そのため，`--host'を指定するときには，確実に
`--build'も指定してください．

     ./configure --build=i686-pc-linux-gnu --host=m68k-coff

これでクロスコンパイルモードに入ります．コンパイラに`configure'
の情報を渡すことなくクロスコンパイルする設定から成り立っている前者のイン
ターフェースは時代遅れです．例えば，以下のようなコンフィグレーションを行
なっていて，指定されたコンパイラで生成されたコードが実行できない場合，
`configure'は失敗します．

     ./configure CC=m68k-coff-gcc


File: autoconf-ja.info,  Node: AC_LIBOBJ vs LIBOBJS,  Next: AC_FOO_IFELSE vs AC_TRY_FOO,  Prev: Hosts and Cross-Compilation,  Up: Autoconf 2.13

`AC_LIBOBJ'対`LIBOBJS'
----------------------

   Autoconf 2.13までは，関数の置換は変数`LIBOBJS'で開始されていました．
Autoconf 2.50からは，マクロ`AC_LIBOBJ'を代わりに使用すべきです (*note
Generic Functions::)．Autoconf 2.53からは，`LIBOBJS'の使用は
エラーになります．

   この変更は，GNUビルドシステムの構成要素から要求されました．特
に，`configure.ac'のパースで使用される様々な壊れやすいテクニックは，
すべてトレースを使用することで置換されます．結果として，すべての動作をト
レース可能にする必要があり，それでクリティカルな変数の代入は時代遅れにな
ります．幸運にも`LIBOBJS'だけが問題となっていて，それは美しく処理す
ることが可能です("何も変更する必要はない"ということです)．

   典型的な`LIBOBJS'の使用方法は二つありました．関数の置換を依頼するこ
とと，Automakeそして/またはLibtoolに対する`LIBOBJS'を調整することで す．


   関数の置換に対しては，修正はすぐにできます．`AC_LIBOBJ'を使用してく
ださい．例えば，以下を考えます．

     LIBOBJS="$LIBOBJS fnmatch.o"
     LIBOBJS="$LIBOBJS malloc.$ac_objext"

以下で置換すべきです．

     AC_LIBOBJ([fnmatch])
     AC_LIBOBJ([malloc])


   自動的なde-ANSI-ficationが依頼されたとき，Automakeは，`$U'をベース
ファイル名に追加するために`LIBOBJS'されたファイル名が必要です．
Libtoolは，接尾子が`.lo'になっている`LTLIBOBJS'の定義が必要で
す．人々は，以下のような断片を実行していました．

     # This is necessary so that .o files in LIBOBJS are also built via
     # the ANSI2KNR-filtering rules.
     LIBOBJS=`echo "$LIBOBJS" | sed 's/\.o /\$U.o /g;s/\.o$/\$U.o/'`
     LTLIBOBJS=`echo "$LIBOBJS" | sed 's/\.o/\.lo/g'`
     AC_SUBST(LTLIBOBJS)

`.o'が拡張子ではない可能性があるので，このコードが_間違ってい
る_ことに注意してください(1)！ 以下のように読み換えてください．

     # This is necessary so that .o files in LIBOBJS are also built via
     # the ANSI2KNR-filtering rules.
     LIB@&t@OBJS=`echo "$LIB@&t@OBJS" |
                  sed 's,\.[[^.]]* ,$U&,g;s,\.[[^.]]*$,$U&,'`
     LTLIBOBJS=`echo "$LIB@&t@OBJS" |
                sed 's,\.[[^.]]* ,.lo ,g;s,\.[[^.]]*$,.lo,'`
     AC_SUBST(LTLIBOBJS)


   もやはこれを使用する必要がありません．`AC_OUTPUT'は`LIBOBJS'
と`LTLIBOBJS'を正規化します(そのため，あらゆるバージョンのAutomake
とLibtoolで動作します)．この行を削除してください(これはマクロではないの
で，`autoupdate'でこの作業を行なうことは不可能です)．

   `U'を`Makefile'で使用する必要はありません．

   ---------- Footnotes ----------

   (1) もう一つの理由として，`LIBOBJS'を直接代入するのは反対です．


File: autoconf-ja.info,  Node: AC_FOO_IFELSE vs AC_TRY_FOO,  Prev: AC_LIBOBJ vs LIBOBJS,  Up: Autoconf 2.13

`AC_FOO_IFELSE'対`AC_TRY_FOO'
-----------------------------

   Autoconf 2.50以来，内部コードでは，一方では`AC_PREPROC_IFELSE'，
`AC_COMPILE_IFELSE'，`AC_LINK_IFELSE'，そして
`AC_RUN_IFELSE'を使用し，もう一方では反対されている
`AC_TRY_CPP'，`AC_TRY_COMPILE'，`AC_TRY_LINK'，そして
`AC_TRY_RUN'の代わりに`AC_LANG_SOURCES'と
`AC_LANG_PROGRAM'を使用しています．その動機は以下にあります．
   - より矛盾のないインターフェース．`AC_TRY_COMPILE'などは，その引数を
     二重の引用符で囲みます．

   -
     一方ではソースを生成し，もう一方ではプログラムを実行するように，組合せが
     増加しても分解することで解決します．

   -
     この手法はプレーンのCとC++より多くの言語をサポートする助けとなります．

構文の変更だけでなく，哲学的な変更もなされました．正確さの代償として速度
を用いたことを強調しておきますが，今日のAutoconfは，テスティングフレーム
ワークの正確さを進展させていて，う〜ん...速度の代償になっています．

   なされては_いない_完全な例として，ヘッダファイルが，型，構造体，構
造体のメンバー，または関数といった特定の宣言を含んでいるかどうかを調べる
方法が以下にあります．ヘッダファイルで直接`grep'を実行する代わりに，
`AC_EGREP_HEADER'を使用してください．調査している`#include' 以
外のヘッダファイルでシンボルを定義しているシステムもあるでしょう．

(悪い)例として，シンボルが，ヘッダファイルで定義されているか，またはC プ
リプロセッサで定義されているかを，Cプリプロセッサを調査すべきではない理
由がは以下にあります．

     AC_EGREP_CPP(yes,
     [#ifdef _AIX
       yes
     #endif
     ], is_aix=yes, is_aix=no)

   上記の例では，適切に書かれている(i)`AC_LANG_PROGRAM'を使用し，(ii)
コンパイラを実行すべきです．

     AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
     [[#if !defined _AIX
     # error _AIX not defined
     #endif
     ]])],
                        [is_aix=yes],
                        [is_aix=no])


File: autoconf-ja.info,  Node: Using Autotest,  Next: FAQ,  Prev: Obsolete Constructs,  Up: Top

Autotestで一般的なテストスイートを生成する
******************************************

     *厳重注意：このセクションでは，この次のリリースのAutoconfの一部と
     なっている，実験的な機能を記述しています．我々はAutotestが安定しているこ
     とを信じていますが，このドキュメントでは将来変更される可能性があるインター
     フェースを記述しています．Autoconfのメーリングリストを購読しないまま
     Autotestに依存することはやめてください．*

移植性の高いプロジェクトで，テストスイートを実行するために移植性のないツー
ルに依存していることは，矛盾しています．Autoconf自身がこの問題の典型です．
2.13までは完全な移植性を目的としていましたが，そのテストスイートは
DejaGNUを使用していて，それは高品質で複雑なテストフレームワー
クですが，Unixシステムの標準からかけ離れていました．悪いことに，ほとんど
の壊れやすいプラットフォームが無いことがよくあり，そのプラットフォームが
Autoconfを苦しめ，欠陥を提示していることがほとんどでした．

この問題を回避するために，パッケージ管理者の多くは，その出力が終了ステー
タスとなる，つまりテストが成功するまたは失敗するといった，単純なシェルス
クリプトをベースに，独自のテストフレームワークを開発してきました．さらに，
これらのテストのほとんどは，共通のパターン，重複している大量のコードの結
果，退屈な管理などを共有しています．

以下はAutoconfが生まれた理由と全く同じですが，Autotestは，M4マクロを基本
として移植性の高いシェルスクリプトを構築するテストスイートを生成するフレー
ムワークを提供しています．スイート自身は，バグの報告で中断することを限り
なく少なくし，自動的なログ生成と追跡機能を備えていて，単純なタイミングで
バグは報告されます．

Autoconf自身はAutotestを何年も使用していて，テストスイートとバグの報告の
強さをかなり改善している"attest"を実行しています．Autotestの生成物を
使用していることが知られている，Bison，Free Recode，Free Wdiff， GNU
Tar といったそれ以外のプロジェクトでは，それぞれ異なるニー
ズがあり，一般的なテストフレームワークとしてのAutotestにのんびりと磨きを
かけていました．

   それにもかかわらず，DejaGNUと比較して，Autotestは対話的なテス
トツールとしては不十分で，それがおそらく主な制限事項となっています．

* Menu:

* Using an Autotest Test Suite::  Autotest and the user
* Writing testsuite.at::        Autotest macros
* testsuite Invocation::        Running `testsuite' scripts
* Making testsuite Scripts::    Using autom4te to create `testsuite'


File: autoconf-ja.info,  Node: Using an Autotest Test Suite,  Next: Writing testsuite.at,  Up: Using Autotest

Autotestテストスイートを使用する
================================

* Menu:

* testsuite Scripts::           The concepts of Autotest
* Autotest Logs::               Their contents


File: autoconf-ja.info,  Node: testsuite Scripts,  Next: Autotest Logs,  Up: Using an Autotest Test Suite

`testsuite'スクリプト
---------------------

Autotestを使用してテストスイートや評価スイートを生成することは簡単です．
評価スイート全体は，`autom4te'で処理されるファイルに保持されてい
て，それ自身は配布物から得られるスタンドアローンのBourneシェルスクリプト
を生成するために，GNU M4の環境下で使用されます． `autom4te'もGNU
M4もインストールしているエンドユーザは 不要です．

   評価スイートのそれぞれのテストは，テストグループの一部にすべきです．
"テストグループ(test group)"は，通常はグループのテストの一つがデータ
ファイルを作成し，それ以降のテストで同じグループのテストがそれを読み込む
ために，お互いに実行される必要がある混合テストの，連続した手続きになって
います．テストグループごとの数個のテストのみを維持する方がより良く，テス
トグループごとに一つのテストのみを維持することが可能な場合，それは理想的
です．

   最も単純なパッケージ以外のすべてのものに対して，`testsuite.at'のよ
うなファイルは，別々のファイルにした方が管理しやすいことも多いので，すべ
てのテストのソースを完全に保持しているわけではありません．これらの個別の
ファイルのそれぞれは，単一のテストグループや，パッケージの共通の機能をす
べて提示しているテストグループの連続したものを維持しています．そのような
場合は，ファイル`testsuite.at'は評価スイート全体の初期化のみを行な
い，他のすべてのテストファイルに対して含める文をリストアップする前に，要
素が健全かどうかを調査するときもあります．特殊なファイル
`package.m4'はパッケージの識別子を含んでいて，見つかった場合は自動
的にインクルードされます．

   便利な代替品は，すべての大域的な呼び出しをファイル`local.at'に移動
し(ローカルなAutotestマクロは基本的な状態を調査し，`AT_INIT'を呼び
出します)，`testsuite.at'をサブテストスイートを`m4_include'す
る単純なリストにすることです．そのような状況では，テストスイート全体また
は一部を生成すると，`autom4te'コマンドライン引数の選択が問題にな
ります．

   Autotestが生成する評価スクリプトは，慣習で`testsuite'から呼び出
されます．実行時には，`testsuite'はそれぞれのテストグループを順
番に実行し，テストごとにその特定のテストが成功したか失敗したかを告げる概
要を表示する一行を生成します．すべてのテストの終りに，数を集約して出力し
ます．デバッグディレクトリには，それぞれのテストのグループで失敗したもの
があれば，それが残ります．そのようなディレクトリは
`testsuite.dir/NN'と命名され，NNはテストグループの順番
になり，以下のものが含まれています．

   * デバッグスクリプトは`run'と命名され，"デバッグモード(debug
     mode)"でテストの結果を返します(*note testsuite
     Invocation::)．自動的に生
     成されるデバッグスクリプトは，バグの調査を簡単にする目的があります．

   * すべてのファイルは`AT_DATA'で生成されます．

   * 実行時のログは，`testsuite.log'と命名されます．

理想的な状況では，失敗するテストがなく，結果として有効なものが残っている
デバッグディレクトリはありません．

評価スイートの個別のテストがコンフィグレーションスクリプトからの情報を入
手する必要が生じることも，実験段階ではよくあります．すべての評価スイート
で共通なこの情報が，`AC_CONFIG_TESTDIR'で自動的に生成されるファイル
`atconfig'で提供されることもあります．テスト環境で特別に必要となる
コンフィグレーションの情報に対し，`AC_CONFIG_FILES'で実際に作成され
るように，`atlocal.in'という名前の追加ファイルを準備してもかまいま
せん．コンフィグレーションのプロセスで，`atconfig'と`atlocal'
は二つの入力ファイルから作成され，これら二つの生成されたファイルは，自動
的に`testsuite'スクリプトで読み込まれます．

   ファイル間の関係を表示する図は以下のようになります．

配布するソフトウェアパッケージの準備に使用されるファイルです．

                     [package.m4] -->.
                                      \
     subfile-1.at ->.  [local.at] ---->+
         ...         \                  \
     subfile-i.at ---->-- testsuite.at -->-- autom4te* -->testsuite
         ...         /
     subfile-n.at ->'

ソフトウェアパッケージのコンフィグレーションで使用されるファイルです．

                                          .--> atconfig
                                         /
     [atlocal.in] -->  config.status* --<
                                         \
                                          `--> [atlocal]

テストスイートを実行中に作成されるファイルです．

     atconfig -->.                    .--> testsuite.log
                  \                  /
                   >-- testsuite* --<
                  /                  \
     [atlocal] ->'                    `--> [testsuite.dir]


File: autoconf-ja.info,  Node: Autotest Logs,  Prev: testsuite Scripts,  Up: Using an Autotest Test Suite

Autotestのログ
--------------

   実行時に，テストスイートはそれ自身の名前に`.log'が後置されているロ
グファイルを作成し，例えば，`testsuite'という名前のテストスイー
トは`testsuite.log'を作成します．それには多くの情報が含まれ，通常は
管理者が実際に必要とするもの以上ですが，そのためほとんどの場合で必要とさ
れるすべてのものが含まれます．

コマンドライン引数
     残念なことに広く広がっているUnixの非常に悪い習慣は，
     `CC=my-home-grown-cc ./testsuite'のように，コマンドの前に環境変数を
     設定することです．この結果テストスイートは変更を知ることが無く，そのため，
     (i)それを報告することが不可能で，(ii)連続する実行に対し`CC' の値を
     保存することができません．Autoconfは全く同じ問題に直面していて，コマンド
     ライン引数での変数定義を渡すようユーザに依頼することで解決しました．
     Autotestでもこの規則が要求されますが，強制する意味はありません．ログには
     ユーザが変更した変数の追跡が含まれています．

`ChangeLog'の抜粋
     ソースの階層で見つかるすべての`ChangeLog'の先頭の行です．バグがパッ
     ケージの開発バージョンで報告されるとき，バージョン文字列はユーザがコンパ
     イルしたソースの正確な状態を知るための情報としては十分ではないので，これ
     は特に役に立ちます．もちろんこれは`ChangeLog'の使用方法に依存します．

ビルドマシン
     クロスコンパイル環境でテストスイートを実行するということは，テストスイー
     トはマシンBUILDで実行されますがプログラムはマシンHOSTで実行
     されるという意味があり，簡単な作業ではありません．テストスイートとプログ
     ラムの両方をHOSTで実行するのはより簡単ですが，テストスイートの観点
     からすると，単一の環境変数HOST = BUILDは残ります．ログにはビ
     ルドマシンに関連する情報が含まれていて，それには重要な環境変数も含まれて
     います．

テストされたプログラム
     テストされたプログラムの絶対バスと`--version'の答えです (*Note
     Writing testsuite.at::，`AT_TESTED'を参照してください)．

コンフィグレーションのログ
     `configure'で生成される`config.log'の内容が後置されます．そ
     れにはコンフィグレーションフラグとコンフィグレーション自身の詳細な報告が
     含まれます．


File: autoconf-ja.info,  Node: Writing testsuite.at,  Next: testsuite Invocation,  Prev: Using an Autotest Test Suite,  Up: Using Autotest

`testsuite.at'を書く
====================

   `testsuite.at'はBourneシェルスクリプトで，特殊なAutotest M4マクロを
使用して作成します．それは，最初の方で`AT_INIT'の呼び出しを含んでい
て，それにテストのためのソースファイルごとに`m4_include'の呼び出し
が続きます．それぞれのインクルードファイルや，インクルードファイルが使用
されていない場合は`testsuite.at'の残りは，テストグループの連続した
手続きが含まれています．それぞれのテストグループは`AT_SETUP'の呼び
出しで始まり，それは任意の数のシェルコマンドや`AT_CHECK'の呼び出し
が含まれていて，`AT_CLEANUP'の呼び出しで完結します．

 - マクロ: AT_INIT ([NAME])
     Autotestを初期化します．パッケージに複数のテストスイートを含める場合，テ
     ストスイートにNAMEを与えることが推奨されます．すべての状況で，テス
     トスイートは常にパッケージ名とバージョンを表示します．それはパッケージの
     バグを報告する(メール)アドレスも継承します．

 - マクロ: AT_TESTED (EXECUTABLES)
     それぞれのプログラムのパスと`--version'の答を，スペースで分離され
     ているリストEXECUTABLESにログをとります．複数回呼び出されると新し
     い実行が登録され，言い替えると，一つのプログラムの複数回の登録を危惧する
     必要はありません．

   Autotestテストスイートは，テストされるプログラムを見つける際に
`PATH'に依存します．これは様々なツールの絶対パスから生成されるもの
から保存され，インストールされているプログラムのテストを可能にします．そ
のため，動作しているプログラムを知ることは，テストスイート自身やその偶発
的な誤使用の問題を理解するために重要です．互換性の問題を簡単に診断するた
めに，依存している外部のプログラムを登録することも重要です．


 - マクロ: AT_SETUP (TEST-GROUP-NAME)
     このマクロは関連するテストのグループがすべて同じサブシェルで実行されるよ
     うに開始します．それは，開始されるテストグループの目的を手短に記述した数
     語の単語(30から40文字以下)を保持している，単一の引数を受け入れます．

 - マクロ: AT_KEYWORDS (KEYWORDS)
     まとまっているテストグループに関連する，スペースで分離されている
     KEYWORDSのリストです．これでテストスイートの"slices"を実行するこ
     とが可能になります．例えばテストグループの`foo'の機能を行使している
     場合，`AT_KEYWORDS(foo)'を使用することで，これらのテストグループを
     排他的に実行するために`./testsuite -k
     foo'を実行します．テストグルー
     プのTITLEは，`AT_KEYWORDS'に自動的に保存されます．

     テストグループ内で複数回呼び出すことで新しいキーワードを累積します．言い
     替えると，テストグループで同じキーワードを複数回登録することを危惧する必
     要はありません．

 - マクロ: AT_XFAIL_IF (SHELL-CONDITION)
     テストが，既知のバグで期待されたように失敗するかどうかを決定します(サポー
     トされていない機能に対してはテストを省略するべきです)．
     SHELL-CONDITIONは`test'コマンドのようなシェルの式です．同じテ
     ストグループから，このマクロを何回でも利用することが可能で，テストが期待
     した異常終了になるには，条件の一つで十分でしょう．

 - マクロ: AT_CLEANUP
     現在のテストグループを終了します．


 - マクロ: AT_DATA (FILE, CONTENTS)
     入力データのFILEを，与えられたCONTENTSで初期化します．もちろ
     ん，カンマが含まれていることや，見せかけのM4の展開から保護するために，
     CONTENTSは適切に角カッコで囲む必要があります．内容は行末(EOF)で終
     える必要があります．

 - マクロ: AT_CHECK (COMMANDS, [STATUS = ``0''], [STDOUT = ``''],
          [STDERR = ``''], [RUN-IF-FAIL], [RUN-IF-PASS])
     与えられたシェルコマンドCOMMANDSを実行することでテストを実行します．
     これらのコマンドは，期待されるSTDOUTとSTDERRの内容を生成しな
     がら，通常のSTATUSで終えるべきです．COMMANDSが77のステータス
     で終了する場合，テストグループ全体が省略されます．それ以外で，このテスト
     が失敗する場合はシェルコマンドRUN-IF-FAILを実行し，このテストがパ
     スした場合はシェルコマンドRUN-IF-PASSを実行します．

     COMMANDSを標準出力にも標準エラー出力にもリダイレクトしては_い
     けません_．

     STATUS，またはSTDOUT，またはSTDERRが`ignore'の場
     合，対応する値は調査されません．

     STDOUTに対する特殊な値`expout'は，COMMANDSの出力がファ
     イル`expout'の内容であることを期待するという意味があります．
     STDOUTが`stdout'の場合，COMMANDSの標準出力はファイル
     `stdout'のテスト以外でも利用可能です．`expout'と`stderr'
     を用いているSTDERRも同様です．


File: autoconf-ja.info,  Node: testsuite Invocation,  Next: Making testsuite Scripts,  Prev: Writing testsuite.at,  Up: Using Autotest

`testsuite'スクリプトの実行
===========================

   Autotestテストスイートは以下の引数をサポートしています．

`--help'
`-h'
     オプションのリストを表示し，正しく終了します．

`--version'
`-V'
     テストスイートのバージョンを表示し，正しく終了します．

`--clean'
`-c'
     テストスイートが生成したすべてのファイルを削除し終了します．Makefileター
     ゲットの`clean'を意味します．

`--list'
`-l'
     すべてのテスト(またはセクションのみ)を，可能なキーワードを含めてリストアッ
     プします．


デフォルトで，すべてのテストはデフォルトの環境変数で，最初は静かに，その
後で冗長に実行され(または`--list'で記述され)ますが，テストの組の
環境変数と冗長さの度合は調整可能です．

`VARIABLE=VALUE'
     環境変数VARIABLEをVALUEに設定します．デバッグスクリプトとし
     て`FOO=foo ./testsuite'を実行して，その後で異なる環境変数で実行しな
     いでください．

     変数`AUTOTEST_PATH'は`PATH'に前置するためにテストするパスを指
     定します．それは特別に相対パス(`/'で始まらない)を処理します．それら
     は，ビルドしているパッケージのトップレベルから相対的なものと考えられます．
     すべてのディレクトリは絶対的になり，最初は_ビルド_ツリーのトップレ
     ベルで開始され，その後で_ソース_ツリーで開始されます．例えば，
     `/tmp/foo'でビルドされている`/src/foo-1.0'のソースパッケージの
     `./testsuite AUTOTEST_PATH=tests:bin'は，結果として
     `/tmp/foo/tests:/tmp/foo/bin'になり，そして
     `/src/foo-1.0/tests:/src/foo-1.0/bin'が`PATH'に追加されます．

`NUMBER'
`NUMBER-NUMBER'
`NUMBER-'
`-NUMBER'
     明確な意味を持ち一致するテストグループを選択肢に追加します．

`--keywords=KEYWORDS'
`-k KEYWORDS'
     (`AT_SETUP'や`AT_KEYWORDS'への引数となる)タイトルやキーワード
     が_すべての_カンマで分けられたリストKEYWORDSのキーワードにマッ
     チするテストグループの選択に追加します．

     `./testsuite -k autoupdate,FUNC'を実行すると，(`AC_CHECK_FUNC'
     や`AC_FUNC_FNMATCH'などで) `autoupdate'_および_
     `FUNC'でタグ付けされているすべてのテストを選択しますが，
     `./testsuite -k autoupdate -k FUNC'は`autoupdate'_あるい
     は_`FUNC'でタグ付けされているすべてのテストを選択します．

`--errexit'
`-e'
     テストが失敗した場合，すぐにテストを中断します．それは`--debug'
     を暗黙に指定します．過去のテストグループをクリーンアップし，デバッグスク
     リプトを生成し，ログは停止されます．このオプションは，すべてのテストスイー
     トに対して意味があり，それは生成されるデバッグスクリプトに対しては実際に
     は意味がありません．

`--verbose'
`-v'
     行なっているものの詳細な出力でより冗長なものにします．これはデバッグスク
     リプトに対してデフォルトです．

`--debug'
`-d'
     テストグループを実行した後でファイルを削除しません --
     しかし，それらは
     実行前には削除され，そのためこのオプションの使用は，複数のテストグループ
     を実行するとき問題ありません．デバッグスクリプトを作成しません．ログは行
     なわれません(おそらく存在している既存の完全なログファイルを保持するため
     です)．これはデバッグスクリプトに対してデフォルトですが，それはテストス
     イート自身のデバッグでも役に立つはずです．

`--trace'
`-x'
     テストグループのシェルの追跡を開始します．


File: autoconf-ja.info,  Node: Making testsuite Scripts,  Prev: testsuite Invocation,  Up: Using Autotest

`testsuite'スクリプトの作成
===========================

   Autotestを動作に入れるため，コンフィグレーションと`Makefile'のから
くりで必要になるものもあります．少なくともパッケージで深いまたは浅い階層
を使用している場合，すべてのテストとその`Makefile'を格納するディレ
クトリの名前として，`tests/'を使用することを推奨します．行なうこと
の調査リストは以下のようになります．

   - パッケージ固有の定義を行なうファイル`package.m4'を必ず作成してくだ
     さい．それは，パッケージの完全な署名となる`AT_PACKAGE_STRING'と，バ
     グレポートを送るアドレス`AT_PACKAGE_BUGREPORT'を定義する必要があり
     ます．完全性の目的で，`AT_PACKAGE_NAME'，`AT_PACKAGE_TARNAME'，
     そして`AT_PACKAGE_VERSION'を定義することも提案します．これらの変数
     の記述は*Note Initializing configure::.
     我々は以下のようなMakefileの断片 を提案します．

          $(srcdir)/package.m4: $(top_srcdir)/configure.ac
                  {                                      \
                    echo '# Signature of the current package.'; \
                    echo 'm4_define([AT_PACKAGE_NAME],      [@PACKAGE_NAME@])'; \
                    echo 'm4_define([AT_PACKAGE_TARNAME],   [@PACKAGE_TARNAME@])'; \
                    echo 'm4_define([AT_PACKAGE_VERSION],   [@PACKAGE_VERSION@])'; \
                    echo 'm4_define([AT_PACKAGE_STRING],    [@PACKAGE_STRING@])'; \
                    echo 'm4_define([AT_PACKAGE_BUGREPORT], [@PACKAGE_BUGREPORT@])'; \
                  } >$(srcdir)/package.m4

     `package.m4'を配布していることと，それをソースの階層に書いているこ
     とを確かめてください．テストスイートは配布する必要があります！

   - `AC_CONFIG_TESTDIR'の呼び出し．

      - マクロ: AC_CONFIG_TESTDIR (DIRECTORY, [TEST-PATH = `DIRECTORY'])
          Autotestテストスイートは，DIRECTORYでコンフィグレーションされます．
          このマクロは，`DIRECTORY/atconfig.in'からの
          `DIRECTORY/atconfig'の実体を必要とし，デフォルトの
          `AUTOTEST_PATH'をTEST-PATHに設定します(*note testsuite
          Invocation::)．

   - しかし，`configure.ac'に，`AC_CONFIG_FILES'コマンドが
     `tests/atlocal'での代入を確実に含むよう，適切に`configure.ac'
     に書いてください．

   - `make check'でパッケージの評価を開始するように，
     `tests/Makefile.in'を修正すべきです．例は以下で提供しています．

   Automakeを用いると，評価スイートで`make check'をリンクする方法の最
小限の例は以下のようになります．

     EXTRA_DIST = testsuite.at testsuite
     TESTSUITE = $(srcdir)/testsuite
     check-local: atconfig atlocal $(TESTSUITE)
             $(SHELL) $(TESTSUITE)
     
     AUTOTEST = $(AUTOM4TE) --language=autotest
     $(TESTSUITE): $(srcdir)/testsuite.at
             $(AUTOTEST) -I $(srcdir) $@.at -o $@.tmp
             mv $@.tmp $@

   依存性，すなわち`testsuite.at'を含んでいるファイルのリストを，明示
的にリストアップしたいかもしれません．

厳密にAutoconfを用いると，以下のような行を追加する必要があるかもしれま
せん．

     subdir = tests
     
     atconfig: $(top_builddir)/config.status
             cd $(top_builddir) && \
                $(SHELL) ./config.status $(subdir)/$@
     
     atlocal: $(srcdir)/atlocal.in $(top_builddir)/config.status
             cd $(top_builddir) && \
                $(SHELL) ./config.status $(subdir)/$@

そして，`atconfig.in'と`$(EXTRA_DIST)'を配布物されるように管理
する必要があるかもしれません．


File: autoconf-ja.info,  Node: FAQ,  Next: History,  Prev: Using Autotest,  Up: Top

Autoconfのよくある質問と答え
****************************

Autoconfに関するいくつかの質問が，時々発生します．ここではそれらを扱いま
す．

* Menu:

* Distributing::                Distributing `configure' scripts
* Why GNU m4::                  Why not use the standard M4?
* Bootstrapping::               Autoconf and GNU M4 require each other?
* Why Not Imake::               Why GNU uses `configure' instead of Imake
* Defining Directories::        Passing `datadir' to program
* autom4te.cache::              What is it?  Can I remove it?
* Present But Cannot Be Compiled::  Compiler and Preprocessor Disagree


File: autoconf-ja.info,  Node: Distributing,  Next: Why GNU m4,  Up: FAQ

`configure'スクリプトの配布
===========================

     Autoconfが生成した`configure'スクリプトの配布の際，制限はありま
     すか？それは，それを利用する私のプログラムに影響しますか？

Autoconfが生成するコンフィギュレーションスクリプトを，配布したり使用した
りすることに制限はありません．Autoconfバージョン1では，GNU General
Public Licenseでカバーされていました．我々はソフトウェア著者に，
GPLのような規則で成果を配布することを奨励していましたが，Autoconfを使用
するためにそうすることは要求していません．

   `configure'と一緒に使用するファイルの`config.h.in'は，
`configure.ac'に対して使用した著作権に従います．`config.sub'
と`config.guess'は，Autoconfが生成する`configure'スクリプト
と一緒に使用するとき，GPLの例外とされ，他のパッケージと同じ規則で配布で
きます．`install-sh'はXコンソーシアムからのもので，著作権保護はあり
ません．


File: autoconf-ja.info,  Node: Why GNU m4,  Next: Bootstrapping,  Prev: Distributing,  Up: FAQ

なぜGNU M4が必要なのですか？
============================

     なぜAutoconfはGNU M4を必要とするのですか？

M4の実装の多くは，マクロのサイズと数にハードコードされた制限があり，マク
ロ数はAutoconfの方が多くなっています．それらは，Autoconfのような洗練され
たアプリケーション無しでは難しい，以下を含むいくつかの組み込みマクロが足
りません．

     m4_builtin
     m4_indir
     m4_bpatsubst
     __file__
     __line__

   固まった状態のファイルを使用するので，AutoconfではGNU M4のバー
ジョン1.4以上を要求します．

   ソフトウェア管理者はAutoconfを使用する必要があり，GNU M4はコン
フィグレーションとインストールが簡単なので，GNU M4のインストー
ルの要求も妥当だと思われます．GNUと他のフリーソフトウェアの管
理者の多くは，GNUユーティリティが好きなので，既にインストール
しています．


File: autoconf-ja.info,  Node: Bootstrapping,  Next: Why Not Imake,  Prev: Why GNU m4,  Up: FAQ

ブートストラップはどうするのですか？
====================================

     AutoconfがGNU M4を要求し，GNU M4にAutoconfの
     `configure'スクリプトがある場合，どうやってブートストラップすれ
     ばよいのでしょうか？鶏と卵の問題みたいですね！

   これは誤解です．GNU M4は，Autoconfが生成した
`configure'スクリプトと共に配布されていますが，Autoconfは，スク
リプトを実行するためにGNU M4をインストールすることを要求しませ
ん．AutoconfはM4の`configure'スクリプトを変更したいときだけ必要
で，(主に管理者以外) ほとんどの人が必要ありません．


File: autoconf-ja.info,  Node: Why Not Imake,  Next: Defining Directories,  Prev: Bootstrapping,  Up: FAQ

なぜImakeではないのですか？
===========================

     なぜ`configure'スクリプトの代わりにImakeを使用しないのですか？

何人かがこの質問を扱って書いてきたので，私はここでそれらの説明に脚色しま
す．

   以下の答えは，Richard Pixleyが書いたものに基づきます．

     Autoconfが生成したスクリプトは，処理するために一度もセットアップされたこ
     とがないマシンでも動作することがよくあります．すなわち，新しいシステムに
     対するコンフィグレーションの推測によってきちんと動作します．Imake
     ではこ れは不可能です．

     Imakeは，ホスト特定のデータの共通のデータベースを使用します．データベー
     スを制御している一つの中央の権威によって，配布物はツールのコレクションと
     して作成されるので，X11に対してはこれは意味があります．

     GNUツールはこの方法でリリースされません．それぞれの
     GNUツールには管理者がいて，管理者は世界中に散らばっています．
     共通のデータベースを使用することは，管理するときの悪夢となります．
     Autoconfはこの種のデータベースのように見えますが，実際はそうではありませ
     ん．ホストの依存性をリストアップする代わりに，プログラムが要求することを
     リストアップします．

     GNUスイートをネイティブのツールのコレクションだと見なす場合，
     問題は似ています．しかし，GNU開発ツールは，ほとんどのホスト+
     ターゲットで，クロスツールとしてコンフィグレーション可能です．これらのコ
     ンフィグレーションは，同時にインストールも可能です．それらは，ホスト間で
     共有するホスト非依存ファイルもコンフィグレーション可能です．Imake
     はこれ らの問題を扱いません．

     Imakeテンプレートは標準化の形式です．GNU coding standardsは，
     同じ制限を必然的に課さずに，同じ問題を扱います．

   以下はPer Bothnerによって書かれたそれ以上の説明です．

     Imakeの利点の一つは，`cpp'の`#include'とマクロのメカニズムを使
     用した，大きなMakefilesを簡単に生成することです．しかし，`cpp' はプ
     ログラム不可能です．それは限定されたファシリティと，ループがないという制
     限があります．そして`cpp'ではその環境を検査できません．

     これらすべての問題は，`cpp'の代わりに`sh'を使用することで解決
     されます．シェルは完全にプログラム可能で，マクロの代入や，他のシェルスク
     リプトを実行する(あるいは他のもののソースとなる)ことが可能で，環境変数を
     も検査可能です．

   Paul Eggertはより多く詳述しています．

     Autoconfの場合，インストーラは，Imake自身がインストールされていて，うま
     く動作していることを想定する必要がありません．これは，Imakeに慣れている
     人にとっては，あまり利点とは思わないかもしれません．しかし，多くのホスト
     でImakeはインストールされておらず，デフォルトのインストールではうまく動
     作せず，Imakeにパッケージのインストールを要求すると，それらのホストでパッ
     ケージの受け入れを妨げます．例えば，Imakeテンプレートとコンフィグレーショ
     ンファイルは，正確にホストにインストールされていなかったり，Imakeのビル
     ドの手続きは，全てのソースファイルが大きなディレクトリにあると誤解したり，
     Imakeのコンフィグレーションは，一つのコンパイラを想定しているのに，パッ
     ケージやインストーラが他のものを必要としたり，パッケージが期待するImake
     と，ホストがサポートするImakeのバージョンが異なったりする場合があります．
     これらの問題は，Autoconfの方がはるかに稀で，それぞれのパッケージは，独自
     の独立したコンフィグレーションプロセッサを持ってきます．

     また，Imakeは，`make'とインストーラのCプリプロセッサの間の予期せぬ
     干渉にもしばしば苦しみます．ここでの基本的な問題は，Cプリプロセッサが，
     `Makefile'ではなく，Cプログラムのプリプロセスのためにデザインされて
     いるということです．これは，Autoconfではほとんど問題にならず，それは汎用
     のプリプロセッサM4を使用し，そこでは(インストールする人ではなく)
     パッケー ジの著作者が標準的な方法でプリプロセスを行います．

   最後はMark Eichinのメモです．

     Imakeは，それほど拡張可能でもありません．Imakeに新しい特徴を加えるために，
     独自のプロジェクトテンプレートを供給して，既存の特徴の大部分を繰り返す必
     要があります．洗練されたプロジェクトに対してベンダーが供給したImakeテン
     プレートを使用することは，効力の供給に失敗することを意味します．その理由
     は，(たとえX11プログラムを使用していなくても)
     独自のプロジェクトが必要と
     するものを全くサポートしていないからです．

     しかし，他の面では．

     一つの利点として，Imakeは`configure'以上のものを持っています．
     `Imakefile'は，`Makefile.in'より(同じか，かなり)短い傾向にあり
     ます．これは修正されています．--しかし，少なくともKerberos
     V5のツリーに 対し，共通の`post.in'と`pre.in'を呼び出すため，
     `Makefile'の一部をツリー全体で修正しました．これは，多くの共通のも
     のが，通常の`configure'セットアップにあるものさえ，繰りさえされ
     ることを意味します．


File: autoconf-ja.info,  Node: Defining Directories,  Next: autom4te.cache,  Prev: Why Not Imake,  Up: FAQ

インストールディレクトリを`#define'で定義する方法は？
=====================================================

     プログラムは，`datadir'やそれに似た場所にインストールされているライ
     ブラリファイルが必要です．以下を使用した場合です．
          AC_DEFINE_UNQUOTED([DATADIR], [$datadir],
                             [Define to the read-only architecture-independent
                              data directory.])
     
     
     以下のようになりました．
          #define DATADIR "${prefix}/share"

   既に説明しているので，この動作は目的通りで，GNU Coding
Standardsでも強制されています．*Note Installation Directory Variables::
を
参照してください．同様の目的を達成するため，いくつかの手段があります．

   - `AC_DEFINE'を使用せず，コンパイルフラグで`datadir'の実際の値を
     渡す`Makefile'を使用してください．詳細は，*Note Installation
     Directory Variables::を参照してください．

   - プログラムのコンパイル時では，この解決方法は単純になります．
     `CPPFLAGS'を拡張してもかまいません．

          CPPFLAGS = -DDATADIR=\"$(datadir)\" @CPPFLAGS@

     または，そのためのヘッダファイルを作成します．

          DISTCLEANFILES = datadir.h
          datadir.h: Makefile
                  echo '#define DATADIR "$(datadir)"' >$@

   - `AC_DEFINE'を使用しますが，`configure'に`datadir'とそ
     の他のリテラル値を計算させます．多くの人々は，ラッパーマクロでこの作業を
     自動的に実行させています．例えば， Autoconf Macro Archive(1)
     のマクロ`AC_DEFINE_DIR'です．

     この解決方法は，GNU Coding Standardsに準拠していません．

   -
     これまでのすべての解決方法は，これらのディレクトリの絶対パスが，実行形式
     に強く結び付いていて，あまり良くないことに注意してください．
     `prefix'からの相対パスを計算し，実行時に`prefix'を見つけてもよ
     く，こうするとパッケージが移動可能になります．この問題を解決するために既
     に利用可能なマクロもあります． Autoconf Macro Archive(2)
     の`adl_COMPUTE_RELATIVE_PATHS'と
     `adl_COMPUTE_STANDARD_RELATIVE_PATHS'を参照してください．

   ---------- Footnotes ----------

   (1) Autoconf Macro Archive,
<http://www.gnu.org/software/ac-archive/>.

   (2) Autoconf Macro Archive,
<http://www.gnu.org/software/ac-archive/>.


File: autoconf-ja.info,  Node: autom4te.cache,  Next: Present But Cannot Be Compiled,  Prev: Defining Directories,  Up: FAQ

`autom4te.cache'はなんですか？
==============================

     このディレクトリ`autom4te.cache'は何ですか？削除しても大丈夫ですか？

   GNUビルドシステムでは，`configure.ac'が中心的な役割を果た
し，多くのツールから読み込まれます．`autoconf'は`configure'
を作成するため，`autoheader'は`config.h.in'を作成するため，
`automake'は`Makefile.in'を作成するため，`autoscan'
は`configure.ac'が完全であるかを調査するため，`autoreconf'
はそれらを利用するGNUビルドシステムの構成物を調査するために読
み込みます．"`configure.ac'を読み込む"本当の意味は，それをM4 でコ
ンパイルするということで，複雑な`configure.ac'では，それは非常に長
い処理になり得ます．

   これが，直接M4を実行する代わりに，これらすべてのツールが `autom4te'
(*note autom4te Invocation::)を呼び出す理由で，特別な
要求に答えている間，将来実行するために`autom4te.cache'に追加情報を
保存しています．例えば，`autoconf'を実行する場合，その影では
`autoheader'や`automake'などを呼び出すとき，
`configure.ac'を再び処理する必要が無いように，`autom4te' は
それ以外のツールのための情報を保存しています．速度の向上は30倍ぐらいで，
`configure.ac'の大きさにより更に大きくなります．

   しかし，それは単純なキャッシュです．削除しても問題ありません．


     永久に削除することは可能ですか？

   このキャッシュの生成は，`~/.autom4te.cfg'で利用不可能にすることが可
能で，詳細は*Note Customizing
autom4te::を参照してください．キャッシュを利
用不可能にするとAutoconfのテストスイートが40%遅くなることを覚えておいて
ください．それ以外のGNUビルドシステムの構成物を使用している場
合，キャッシュはより役に立ちます．例えば，Coreutilsで`autoreconf
-f'を実行すると，_たとえ`--force'を暗黙に指定していてもキャッ
シュを完全に利用することができないので_キャッシュが無ければ二倍遅くなり，
`--force'がなければ八倍遅くなります．


File: autoconf-ja.info,  Node: Present But Cannot Be Compiled,  Prev: autom4te.cache,  Up: FAQ

ヘッダが存在するのにコンパイルされません
========================================

機能の調査時に覚えておくべき最も重要なガイドラインは，使いたいものをでき
るだけ真似てみるということです．残念ながら，古いバージョンの
`AC_CHECK_HEADER'と`AC_CHECK_HEADERS'はこの考えに従うと失敗し，
そして，ヘッダの調査のためコンパイラの代わりにプリプロセッサを呼び出しま
す．結果として，ヘッダ間での非互換性はコンフィグレーション時に注目されず，
管理者は結局，この問題を別の場所で処理する必要があります．

   Autoconf
2.56では両方の調査を実行するので，コンパイラとプリプロセッサが
受け入れない場合，`configure'派手に文句を言います．プリプロセッサの
結果を利用するときは，`configure.ac'を修正する時間が管理者に与えら
れます．しかし，将来はコンパイラだけ考慮されるでしょう．

   以下の例を考えて下さい．

     $ cat number.h
     typedef int number;
     $ cat pi.h
     const number pi = 3;
     $ cat configure.ac
     AC_INIT
     AC_CHECK_HEADERS(pi.h)
     $ autoconf -Wall
     $ ./configure
     checking for gcc... gcc
     checking for C compiler default output... a.out
     checking whether the C compiler works... yes
     checking whether we are cross compiling... no
     checking for suffix of executables...
     checking for suffix of object files... o
     checking whether we are using the GNU C compiler... yes
     checking whether gcc accepts -g... yes
     checking for gcc option to accept ANSI C... none needed
     checking how to run the C preprocessor... gcc -E
     checking for egrep... grep -E
     checking for ANSI C header files... yes
     checking for sys/types.h... yes
     checking for sys/stat.h... yes
     checking for stdlib.h... yes
     checking for string.h... yes
     checking for memory.h... yes
     checking for strings.h... yes
     checking for inttypes.h... yes
     checking for stdint.h... yes
     checking for unistd.h... yes
     checking pi.h usability... no
     checking pi.h presence... yes
     configure: WARNING: pi.h: present but cannot be compiled
     configure: WARNING: pi.h: check for missing prerequisite headers?
     configure: WARNING: pi.h: proceeding with the preprocessor's result
     configure: WARNING:     ## ------------------------------------ ##
     configure: WARNING:     ## Report this to bug-autoconf@gnu.org. ##
     configure: WARNING:     ## ------------------------------------ ##
     checking for pi.h... yes

この状況での正しい方法は，四番目の引数を使用することです(*note Generic
Headers::)．

     $ cat configure.ac
     AC_INIT
     AC_CHECK_HEADERS(number.h pi.h,,,
     [[#if HAVE_NUMBER_H
     # include <number.h>
     #endif
     ]])
     $ autoconf -Wall
     $ ./configure
     checking for gcc... gcc
     checking for C compiler default output... a.out
     checking whether the C compiler works... yes
     checking whether we are cross compiling... no
     checking for suffix of executables...
     checking for suffix of object files... o
     checking whether we are using the GNU C compiler... yes
     checking whether gcc accepts -g... yes
     checking for gcc option to accept ANSI C... none needed
     checking for number.h... yes
     checking for pi.h... yes

   必要条件となるヘッダのリストは*Note Particular Headers::．


File: autoconf-ja.info,  Node: History,  Next: Copying This Manual,  Prev: FAQ,  Up: Top

Autoconfの歴史
**************

以下のことを不思議に思うかもしれません．なぜAutoconfは元々書かれたのです
か？どのようにして現在の形式になったのですか？(なぜそれはゴリラの唾によ
く似ているのですか？)不思議に思っていない場合，この章は有用な情報を含ん
でいないので，飛ばした方が良いでしょう．不思議に思って_いる_ 場合，
軽くながしてください....

* Menu:

* Genesis::                     Prehistory and naming of `configure'
* Exodus::                      The plagues of M4 and Perl
* Leviticus::                   The priestly code of portability arrives
* Numbers::                     Growth and contributors
* Deuteronomy::                 Approaching the promises of easy configuration


File: autoconf-ja.info,  Node: Genesis,  Next: Exodus,  Up: History

Genesis
=======

   1991年6月，私はFree Software FoundationのGNUユーティリティの多
くを保守していました．それらは，より多くのプラットホームに移植され，より
多くのプログラムが追加されたので，ユーザは，`Makefile'で多くの
`-D'オプション(およそ20)を選択する必要があり厄介になりました．特に
私がそうでした--私は異なるシステムでそれぞれの新しいリリースをテストす
る必要がありました．そして，私はfileutilsパッケージに対する正しい設定を
見つけるため小さなシェルスクリプトを書き，fileutils
2.0の一部としてリリー
スしました．その`configure'は，翌月，いくつかの他のGNU
ユーティリティパッケージに対する`configure' スクリプトを作成する
ため，(手作業で)改造するとうまく動作しました．Brian Berlinerも，私のスク
リプトを，CVSリビジョンコントロールシステム用に改造しました．

   その夏の後，私はRichard StallmanとRichard Pixleyが，GNUコンパ
イラツールで使用する，類似のスクリプトを開発していたことを知りました．そ
れで私は，`configure'スクリプトが発展するインタフェースをサポー
トするように改造しました．テンプレートとして，`Makefile.in'という名
前のファイルを使用し，(たくさんの中から)最初のオプション`+srcdir'を
追加し， `config.status'ファイルを作成しました．


File: autoconf-ja.info,  Node: Exodus,  Next: Leviticus,  Prev: Genesis,  Up: History

Exodus
======

ユーザからのフィードバックを得るにつれ，私は，検索と置換，カットアンドペー
スト，それぞれのスクリプトの良く似た変更でEmacsを使用し，多くの改良点を
組み入れました．私が，GNUユーティリティパッケージに，
`configure'スクリプトを使用するため改造するにつれ，手作業での更
新は，現実的なものではなくなりました．GNUグラフィックユーティ
リティの管理者Rich Murpheyは，`configure'スクリプトは素晴らしい
というメールを送ってくれ，それらを生成するツールを持っているなら送って欲
しいという依頼がありました．持ってはいませんでしたが，そうするべきだと思
いました！それで，私はそれらを生成する仕事を始めました．手書きの
`configure'スクリプトの奴隷から，Autoconfで簡単に始める裕福で簡
単な旅が始まりました．

   Cygnus `configure'は，そのころには開発されていて，表を基に動作し
ていました．それは，主に推測しにくい(オブジェクトファイルのフォーマット
の詳細のような)特徴を，小さな数字を使用して，システムタイプを不連続な数
字で，扱う手法を主に用いていました．Brian Foxが，Bashのために開発してい
た自動的なコンフィグレーションシステムは，類似のアプローチをとっています．
一般的に使用するため，それぞれのオペレーティングシステムが持つそれぞれ異
なる特徴の最新のデータベースを管理しようとすることは，望みがないように思
われました．その場その場でほとんどの機能を調査するため，より容易でより信
頼性が高いものが必要です -- 特に，人々がローカルでハックしたり，ベンダー
がインストールしたパッチがある，ハイブリッドなシステムではそうなります．

   私は Cygnus `configure'に類似のアーキテクチャを使おうと考え，そ
れは実行時に`configure.in'の一部を読み込む一つの
`configure'スクリプトです．しかし，全てのパッケージで全ての特徴
を配布する必要は望まなかったので，プロセッサーによってそれぞれの
`configure.in'から異なる`configure'を作成する処理にしました．
そのアプローチは，多くの制御と柔軟性をもたらしました．

   私は，Larry Wall，Harlan Stennと，Raphael
Manfrediによる，Metaconfigを使
用してみようとしましたが，いくつかの理由でやめました．それが生成する
`configure'スクリプトは対話的で，それが非常に不都合だと分かりま
した．私は，それが行う(ライブラリ関数のような)特徴の調査方法が，好きであ
りませんでした．さらに，いまだ管理されているかどうか分かりませんでした．
`configure'スクリプトは，(System V R4とNeXTのような)近代的なシス
テムでは動作しないように思えました．特徴の有無の反応で，できることがあま
り柔軟ではありませんでした．学ぶことが難しいと思いました．そして，必要以
上にあまりに大きく複雑でした(私は，そのとき，Autoconfが結局どれくらい成
長するのか，理解していませんでした)．

   私は，`configure'スクリプトの私のスタイルを生成するため，Perl を
使用することを考えましたが，簡単なテキスト代入の仕事により適しているM4に
決めました．出力が暗黙で決まっているので，より小さい手法になると思いまし
た．さらに，みんなは既にそれを所有しています．(最初は，私はGNU
が拡張したM4に依存しませんでした．)また，Maryland大学の私の友達は最近，
M4を`tvtwm'を含むいくつかのプログラムのフロントエンドとして位置付け
ていて，私は新しい言語への挑戦に興味が湧きました．


File: autoconf-ja.info,  Node: Leviticus,  Next: Numbers,  Prev: Exodus,  Up: History

Leviticus
=========

   私の`configure'スクリプトは，ユーザの対話的な干渉無しでシステム
の能力を自動的に決定するので，それを生成するプログラムをAutoconfigと呼ぶ
ことに決定しました．しかし，バージョンナンバーを付けると，UNIXファ
イルシステムとしてはあまりに長い名前なので，短くしてAutoconfとしました．

1991年秋，私は，M4マクロの手書きのスクリプトの部品をカプセル化し，調査時
に使用する特徴と技術の改善を加えることを続けるにつれて，フィードバックし
てもらうため，移植性の聖杯にちなんだ探求者たちのグループ(つまり，アルファ
テスター)を呼びました．テスターの間で著明な人は，以下の通りです．M4を実
行し，未解決のマクロの呼び出しの調査するAautoconfシェルスクリプトを作成
するアイディアをもたらしたFranc,ois Pinard，インクルードファイルやシ
ンボルを探すためファイルシステムを探す代わりに，より正確な結果を求るため
コンパイラの実行を提案したRichard Pixley．Autoconfに，TeXコンフィグレー
ションを与え，ドキュメントにマクロインデクッスを加えたKarl
Berry．そして，
`-D'オプションを`Makefile'に書き込む代わりに，Cヘッダファイル
を作成するサポートを加え，UUCPパッケージでAutoconfが使えるよう
にしたIan Taylor．アルファテスターは，リリースごとに変化するAutoconfマク
ロの名前と呼び出し方法に対して，何度も何度もファイルを機嫌良く調整してく
れました．彼らは皆，多くの特定の調査，偉大なアイディア，そしてバグフィク
スを提供してくれました．


File: autoconf-ja.info,  Node: Numbers,  Next: Deuteronomy,  Prev: Leviticus,  Up: History

Numbers
=======

   1992年7月，何カ月ものアルファテストの後で，私は Autoconf
1.0をリリースし，
それを使用して多くのGNUパッケージを改造しました．私は，それら
に対するあまりに肯定的な反応に驚きました．私が追跡記録可能な人以上の多く
の人々がそれを使用し始め，それには，GNUプロジェクトの一部では
ない(TCL，FSP とKerberos V5のような)ソフトウェアで仕事をしている人も含ま
れています．Autoconfは，`configure'を使用している多くの人が遭遇
した問題を報告してくれるので，急速に改善され続けました．

   Autoconfは，M4実行の良い耐久テストだということが分かりました．UNIX
M4は，Autoconfが定義するマクロの長さでコアダンプを吐き始め，いくつかのバ
グがGNU M4でも同様に明らかになりました．結局，私達は GNU
M4のみが持つ機能が必要だと認識しました．4.3BSD
M4は，特に組み込みマクロの設定が足りず，System Vバージョンはましですが，
私達が必要とするもの全てをいまだに供給してくれません．

人々が，Autoconfをより強い圧力の下(そして，私が予想していなかった使用方
法の下)で利用するにつれ，更なる開発事項が生じました．Karl BerryはX11 に
対する調査を加えました．david zuhnはC++サポートを寄付してくれました．
Franc,ois Pinardは，無効な引数を診断させるようにしました．Jim Blandy は
勇敢にも，後の改良のためのワークグランドとなるよう，GNU Emacs
のコンフィグレーションに強要しました．Roland McGrathは，GNU C
ライブラリのコンフィグレーションに使用し，Cヘッダテンプレートファイルを
自動的に作成する，`autoheader'スクリプトを書き，
`configure'に，`--verbose'オプションを加えました．Noah
Friedmanは，`--macrodir'オプションと `AC_MACRODIR'環境変数を加
えました．(彼は，"ソフトウェアパッケージを，Autoconfを使用するものに改
造してください"と言うことを意味する "autoconfiscate"という言葉も作
り出しました．)RolandとNoahは，`AC_DEFINE'での引用の保護を改善し，
特に私が1993年の2月から6月まで移植性の問題にうんざりしているときに多くの
バグを直しました．


File: autoconf-ja.info,  Node: Deuteronomy,  Prev: Numbers,  Up: History

Deuteronomy
===========

長い間望まれていた主な特徴のリストが蓄積され，様々な人々のパッチの数年間
の効果は，残りのcruftを残したままでした．1994年4月のCygnus Supportに対す
る仕事中に，私はautoconfの主な修正を始めました．Cygnus
`configure'が関連した部分がほとんどですが，david zuhnとKen
Raeburnの助けで，Autoconfに欠けているCygnus `configure'のほとん
どの機能を追加しました．これらの機能は，`config.sub'，
`config.guess'，`--host'と`--target'を使用するサポート，
ファイルをリンクさせること，サブディレクトリで`configure'を実行
することを含みます．これらの機能に加え，Autoconfを使用するように，Kenは
GNU `as'を対応し，Rob Savoye はDejaGNUを対応し ました．

   私は，他の人々の要求に答えより多くの機能を加えました．多くの人々は，
`configure'スクリプトが実行時の調査結果を共有できるよう求め，そ
れは(特に，Cygnusのような，大きなソースツリーのコンフィグレーション時に)
イライラする程遅かったためです．Mike Haertelは，サイト特定の初期化スクリ
プトを加えることを提案しました．MS-DOSでアンパックが必要なものを配布して
いる人々は，生成されるファイル名が`config.h.in'のように二つのドット
を含むので，ファイル名の`.in'拡張子に優先するよう求めました．Jim Avera
は，`AC_DEFINE'と`AC_SUBST'の引用を使用する問題の拡張試
験を行い，彼の洞察は重要な改良につながりました．Richard Stallmanは，
Emacsの`configure'スクリプトをデバッグする人々を助けるため，
`/dev/null'の代わりに`config.log'にコンパイラ出力を送るよう頼 みました．

プログラム品質に不満があり，その他の変更をしました．メッセージに曖昧でな
い調査結果が表示されるようにし，常に結果を出力するようにしました．マクロ
の名前を組織化し，コーディングスタイルの矛盾をきれいにしました．Autoconf
を使用するソースコードパッケージの改造を助けるため開発した，追加のユーティ
リティを加えました．Franc,ois Pinardの助けで，マクロがお互いのメッセー
ジに干渉しないようにしました．(その機能は，GNU M4のパフォーマ
ンスのボトルネックを明らかにし，彼はすぐに修正しました！) 人々が解決を望
むドキュメント周りの問題を再編成しました．そして，経験から，Autoconfを変
更したとき，明らかに退化する傾向が分かっているので，テストスイートを始め
ました．

再び，貴重なフィードバックをくれたアルファテスターです．特に，Franc,ois
Pinard，Jim Meyering，Karl Berry，Rob Savoye，Ken Raeburnと，Mark Eichin
です．

最終的に，バージョン2.0が用意できました．そしてたくさんの喜びがありまし
た．(そして私は再び自由な時間を持ちます．私は考えます．これは正当な権利
だ．)


File: autoconf-ja.info,  Node: Copying This Manual,  Next: Indices,  Prev: History,  Up: Top

このマニュアルのコピー条件
**************************

* Menu:

* GNU Free Documentation License::  License for copying this manual


File: autoconf-ja.info,  Node: GNU Free Documentation License,  Up: Copying This Manual

GNU Free Documentation License
==============================

                      Version 1.2, November 2002
     Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warrany Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

ADDENDUM: How to use this License for your documents
----------------------------------------------------

   To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: autoconf-ja.info,  Node: Indices,  Prev: Copying This Manual,  Up: Top

索引
****

* Menu:

* Environment Variable Index::  Index of environment variables used
* Output Variable Index::       Index of variables set in output files
* Preprocessor Symbol Index::   Index of C preprocessor symbols defined
* Autoconf Macro Index::        Index of Autoconf macros
* M4 Macro Index::              Index of M4, M4sugar, and M4sh macros
* Autotest Macro Index::        Index of Autotest macros
* Program & Function Index::    Index of those with portability problems
* Concept Index::               General index


File: autoconf-ja.info,  Node: Environment Variable Index,  Next: Output Variable Index,  Up: Indices

環境変数の索引
==============

   以下は，Autoconfが調査する環境変数のアルファベット順のリストです．

* Menu:

* CDPATH:                                Special Shell Variables.
* CONFIG_COMMANDS:                       Obsolete config.status Use.
* CONFIG_FILES:                          Obsolete config.status Use.
* CONFIG_HEADERS:                        Obsolete config.status Use.
* CONFIG_LINKS:                          Obsolete config.status Use.
* CONFIG_SHELL:                          config.status Invocation.
* CONFIG_SITE:                           Site Defaults.
* CONFIG_STATUS:                         config.status Invocation.
* ENV:                                   Special Shell Variables.
* IFS:                                   Special Shell Variables.
* LANG:                                  Special Shell Variables.
* LANGUAGE:                              Special Shell Variables.
* LC_ADDRESS:                            Special Shell Variables.
* LC_ALL:                                Special Shell Variables.
* LC_COLLATE:                            Special Shell Variables.
* LC_CTYPE:                              Special Shell Variables.
* LC_IDENTIFICATION:                     Special Shell Variables.
* LC_MEASUREMENT:                        Special Shell Variables.
* LC_MESSAGES:                           Special Shell Variables.
* LC_MONETARY:                           Special Shell Variables.
* LC_NAME:                               Special Shell Variables.
* LC_NUMERIC:                            Special Shell Variables.
* LC_PAPER:                              Special Shell Variables.
* LC_TELEPHONE:                          Special Shell Variables.
* LC_TIME:                               Special Shell Variables.
* LINENO:                                Special Shell Variables.
* MAIL:                                  Special Shell Variables.
* MAILPATH:                              Special Shell Variables.
* NULLCMD:                               Special Shell Variables.
* PATH_SEPARATOR:                        Special Shell Variables.
* PS1:                                   Special Shell Variables.
* PS2:                                   Special Shell Variables.
* PS4:                                   Special Shell Variables.
* PWD:                                   Special Shell Variables.
* RANDOM:                                Special Shell Variables.
* SIMPLE_BACKUP_SUFFIX:                  autoupdate Invocation.
* status:                                Special Shell Variables.
* WARNINGS <1>:                          autom4te Invocation.
* WARNINGS <2>:                          autoheader Invocation.
* WARNINGS <3>:                          autoreconf Invocation.
* WARNINGS:                              autoconf Invocation.


File: autoconf-ja.info,  Node: Output Variable Index,  Next: Preprocessor Symbol Index,  Prev: Environment Variable Index,  Up: Indices

出力変数の索引
==============

   以下は，Autoconfが作成するファイルに，通常は一つ以上の`Makefile' に
代入する変数のアルファベット順のリストです．こうする方法の詳細は，
*Note Setting Output Variables::.

* Menu:

* abs_builddir:                          Preset Output Variables.
* abs_srcdir:                            Preset Output Variables.
* abs_top_builddir:                      Preset Output Variables.
* abs_top_srcdir:                        Preset Output Variables.
* ALLOCA:                                Particular Functions.
* AWK:                                   Particular Programs.
* bindir:                                Installation Directory Variables.
* build:                                 Canonicalizing.
* build_alias:                           Canonicalizing.
* build_cpu:                             Canonicalizing.
* build_os:                              Canonicalizing.
* build_vendor:                          Canonicalizing.
* builddir:                              Preset Output Variables.
* CC <1>:                                System Services.
* CC:                                    C Compiler.
* CFLAGS <1>:                            Preset Output Variables.
* CFLAGS:                                C Compiler.
* configure_input:                       Preset Output Variables.
* CPP:                                   C Compiler.
* CPPFLAGS:                              Preset Output Variables.
* cross_compiling:                       Specifying Names.
* CXX:                                   C++ Compiler.
* CXXCPP:                                C++ Compiler.
* CXXFLAGS <1>:                          Preset Output Variables.
* CXXFLAGS:                              C++ Compiler.
* datadir:                               Installation Directory Variables.
* DEFS:                                  Preset Output Variables.
* ECHO_C:                                Preset Output Variables.
* ECHO_N:                                Preset Output Variables.
* ECHO_T:                                Preset Output Variables.
* EGREP:                                 Particular Programs.
* exec_prefix:                           Installation Directory Variables.
* EXEEXT <1>:                            Obsolete Macros.
* EXEEXT:                                Compilers and Preprocessors.
* F77:                                   Fortran Compiler.
* FC:                                    Fortran Compiler.
* FCFLAGS <1>:                           Fortran Compiler.
* FCFLAGS:                               Preset Output Variables.
* FCLIBS:                                Fortran Compiler.
* FFLAGS <1>:                            Fortran Compiler.
* FFLAGS:                                Preset Output Variables.
* FGREP:                                 Particular Programs.
* FLIBS:                                 Fortran Compiler.
* GETGROUPS_LIBS:                        Particular Functions.
* GETLOADAVG_LIBS:                       Particular Functions.
* host:                                  Canonicalizing.
* host_alias:                            Canonicalizing.
* host_cpu:                              Canonicalizing.
* host_os:                               Canonicalizing.
* host_vendor:                           Canonicalizing.
* includedir:                            Installation Directory Variables.
* infodir:                               Installation Directory Variables.
* INSTALL:                               Particular Programs.
* INSTALL_DATA:                          Particular Programs.
* INSTALL_PROGRAM:                       Particular Programs.
* INSTALL_SCRIPT:                        Particular Programs.
* KMEM_GROUP:                            Particular Functions.
* LDFLAGS:                               Preset Output Variables.
* LEX:                                   Particular Programs.
* LEX_OUTPUT_ROOT:                       Particular Programs.
* LEXLIB:                                Particular Programs.
* libdir:                                Installation Directory Variables.
* libexecdir:                            Installation Directory Variables.
* LIBOBJS <1>:                           Generic Functions.
* LIBOBJS <2>:                           Particular Functions.
* LIBOBJS <3>:                           Generic Functions.
* LIBOBJS <4>:                           Particular Functions.
* LIBOBJS:                               Particular Structures.
* LIBS <1>:                              Preset Output Variables.
* LIBS <2>:                              Obsolete Macros.
* LIBS:                                  UNIX Variants.
* LN_S:                                  Particular Programs.
* localstatedir:                         Installation Directory Variables.
* mandir:                                Installation Directory Variables.
* NEED_SETGID:                           Particular Functions.
* OBJEXT <1>:                            Compilers and Preprocessors.
* OBJEXT:                                Obsolete Macros.
* oldincludedir:                         Installation Directory Variables.
* PACKAGE_BUGREPORT:                     Initializing configure.
* PACKAGE_NAME:                          Initializing configure.
* PACKAGE_STRING:                        Initializing configure.
* PACKAGE_TARNAME:                       Initializing configure.
* PACKAGE_VERSION:                       Initializing configure.
* POW_LIB:                               Particular Functions.
* prefix:                                Installation Directory Variables.
* program_transform_name:                Transforming Names.
* RANLIB:                                Particular Programs.
* sbindir:                               Installation Directory Variables.
* SET_MAKE:                              Output.
* sharedstatedir:                        Installation Directory Variables.
* srcdir:                                Preset Output Variables.
* subdirs:                               Subdirectories.
* sysconfdir:                            Installation Directory Variables.
* target:                                Canonicalizing.
* target_alias:                          Canonicalizing.
* target_cpu:                            Canonicalizing.
* target_os:                             Canonicalizing.
* target_vendor:                         Canonicalizing.
* top_builddir:                          Preset Output Variables.
* top_srcdir:                            Preset Output Variables.
* U:                                     AC_LIBOBJ vs LIBOBJS.
* X_CFLAGS:                              System Services.
* X_EXTRA_LIBS:                          System Services.
* X_LIBS:                                System Services.
* X_PRE_LIBS:                            System Services.
* YACC:                                  Particular Programs.


File: autoconf-ja.info,  Node: Preprocessor Symbol Index,  Next: Autoconf Macro Index,  Prev: Output Variable Index,  Up: Indices

プリプロセッサシンボルの索引
============================

以下は，Autoconfマクロが定義するCプリプロセッサシンボルのアルファベット
順のリストです．Autoconfと共に動作するため，Cソースコードでは，
`#if'ディレクティブにこれらの名前を使用する必要があります．

* Menu:

* __CHAR_UNSIGNED__:                     C Compiler.
* __PROTOTYPES:                          C Compiler.
* _ALL_SOURCE:                           UNIX Variants.
* _FILE_OFFSET_BITS:                     System Services.
* _GNU_SOURCE:                           UNIX Variants.
* _LARGE_FILES:                          System Services.
* _LARGEFILE_SOURCE:                     Particular Functions.
* _MINIX:                                UNIX Variants.
* _POSIX_1_SOURCE:                       UNIX Variants.
* _POSIX_SOURCE:                         UNIX Variants.
* _POSIX_VERSION:                        Particular Headers.
* C_ALLOCA:                              Particular Functions.
* C_GETLOADAVG:                          Particular Functions.
* CLOSEDIR_VOID:                         Particular Functions.
* const:                                 C Compiler.
* DGUX:                                  Particular Functions.
* DIRENT:                                Obsolete Macros.
* F77_DUMMY_MAIN:                        Fortran Compiler.
* F77_FUNC:                              Fortran Compiler.
* F77_FUNC_:                             Fortran Compiler.
* F77_MAIN:                              Fortran Compiler.
* F77_NO_MINUS_C_MINUS_O:                Fortran Compiler.
* FC_FUNC:                               Fortran Compiler.
* FC_FUNC_:                              Fortran Compiler.
* FC_MAIN:                               Fortran Compiler.
* FC_NO_MINUS_C_MINUS_O:                 Fortran Compiler.
* GETGROUPS_T:                           Particular Types.
* GETLODAVG_PRIVILEGED:                  Particular Functions.
* GETPGRP_VOID:                          Particular Functions.
* gid_t:                                 Particular Types.
* GWINSZ_IN_SYS_IOCTL:                   Particular Headers.
* HAVE__BOOL:                            Particular Headers.
* HAVE_ALLOCA_H:                         Particular Functions.
* HAVE_CONFIG_H:                         Configuration Headers.
* HAVE_DECL_STRERROR_R:                  Particular Functions.
* HAVE_DECL_SYMBOL:                      Generic Declarations.
* HAVE_DIRENT_H:                         Particular Headers.
* HAVE_DOPRNT:                           Particular Functions.
* HAVE_FUNCTION:                         Generic Functions.
* HAVE_GETMNTENT:                        Particular Functions.
* HAVE_HEADER:                           Generic Headers.
* HAVE_LONG_DOUBLE:                      C Compiler.
* HAVE_LONG_FILE_NAMES:                  System Services.
* HAVE_LSTAT_EMPTY_STRING_BUG:           Particular Functions.
* HAVE_MALLOC:                           Particular Functions.
* HAVE_MBRTOWC:                          Particular Functions.
* HAVE_MMAP:                             Particular Functions.
* HAVE_NDIR_H:                           Particular Headers.
* HAVE_NLIST_H:                          Particular Functions.
* HAVE_OBSTACK:                          Particular Functions.
* HAVE_REALLOC:                          Particular Functions.
* HAVE_RESTARTABLE_SYSCALLS:             Obsolete Macros.
* HAVE_ST_BLKSIZE:                       Particular Structures.
* HAVE_ST_BLOCKS:                        Particular Structures.
* HAVE_ST_RDEV:                          Particular Structures.
* HAVE_STAT_EMPTY_STRING_BUG:            Particular Functions.
* HAVE_STDBOOL_H:                        Particular Headers.
* HAVE_STRCOLL:                          Particular Functions.
* HAVE_STRERROR_R:                       Particular Functions.
* HAVE_STRFTIME:                         Particular Functions.
* HAVE_STRINGIZE:                        C Compiler.
* HAVE_STRNLEN:                          Particular Functions.
* HAVE_STRUCT_STAT_ST_BLKSIZE:           Particular Structures.
* HAVE_STRUCT_STAT_ST_BLOCKS:            Particular Structures.
* HAVE_STRUCT_STAT_ST_RDEV:              Particular Structures.
* HAVE_SYS_DIR_H:                        Particular Headers.
* HAVE_SYS_NDIR_H:                       Particular Headers.
* HAVE_SYS_WAIT_H:                       Particular Headers.
* HAVE_TM_ZONE:                          Particular Structures.
* HAVE_TZNAME:                           Particular Structures.
* HAVE_UTIME_NULL:                       Particular Functions.
* HAVE_VFORK_H:                          Particular Functions.
* HAVE_VPRINTF:                          Particular Functions.
* HAVE_WAIT3:                            Obsolete Macros.
* HAVE_WORKING_FORK:                     Particular Functions.
* HAVE_WORKING_VFORK:                    Particular Functions.
* inline:                                C Compiler.
* INT_16_BITS:                           Obsolete Macros.
* LONG_64_BITS:                          Obsolete Macros.
* LSTAT_FOLLOWS_SLASHED_SYMLINK:         Particular Functions.
* MAJOR_IN_MKDEV:                        Particular Headers.
* MAJOR_IN_SYSMACROS:                    Particular Headers.
* malloc:                                Particular Functions.
* mbstate_t:                             Particular Types.
* mode_t:                                Particular Types.
* NDIR:                                  Obsolete Macros.
* NEED_MEMORY_H:                         Obsolete Macros.
* NEED_SETGID:                           Particular Functions.
* NLIST_NAME_UNION:                      Particular Functions.
* NO_MINUS_C_MINUS_O:                    C Compiler.
* off_t:                                 Particular Types.
* PACKAGE_BUGREPORT:                     Initializing configure.
* PACKAGE_NAME:                          Initializing configure.
* PACKAGE_STRING:                        Initializing configure.
* PACKAGE_TARNAME:                       Initializing configure.
* PACKAGE_VERSION:                       Initializing configure.
* PARAMS:                                C Compiler.
* pid_t:                                 Particular Types.
* PROTOTYPES:                            C Compiler.
* realloc:                               Particular Functions.
* restrict:                              C Compiler.
* RETSIGTYPE:                            Particular Types.
* SELECT_TYPE_ARG1:                      Particular Functions.
* SELECT_TYPE_ARG234:                    Particular Functions.
* SELECT_TYPE_ARG5:                      Particular Functions.
* SETPGRP_VOID:                          Particular Functions.
* SETVBUF_REVERSED:                      Particular Functions.
* size_t:                                Particular Types.
* STDC_HEADERS:                          Particular Headers.
* STRERROR_R_CHAR_P:                     Particular Functions.
* SVR4:                                  Particular Functions.
* SYS_SIGLIST_DECLARED:                  Obsolete Macros.
* SYSDIR:                                Obsolete Macros.
* SYSNDIR:                               Obsolete Macros.
* TIME_WITH_SYS_TIME:                    Particular Headers.
* TM_IN_SYS_TIME:                        Particular Structures.
* uid_t:                                 Particular Types.
* UMAX:                                  Particular Functions.
* UMAX4_3:                               Particular Functions.
* USG:                                   Obsolete Macros.
* vfork:                                 Particular Functions.
* volatile:                              C Compiler.
* WORDS_BIGENDIAN:                       C Compiler.
* X_DISPLAY_MISSING:                     System Services.
* YYTEXT_POINTER:                        Particular Programs.


File: autoconf-ja.info,  Node: Autoconf Macro Index,  Next: M4 Macro Index,  Prev: Preprocessor Symbol Index,  Up: Indices

Autoconfマクロの索引
====================

   以下は，Autoconfマクロのアルファベット順のリストです．

* Menu:

* AC_AIX:                                UNIX Variants.
* AC_ALLOCA:                             Obsolete Macros.
* AC_ARG_ARRAY:                          Obsolete Macros.
* AC_ARG_ENABLE:                         Package Options.
* AC_ARG_PROGRAM:                        Transforming Names.
* AC_ARG_VAR:                            Setting Output Variables.
* AC_ARG_WITH:                           External Software.
* AC_AU_DEFUN:                           Obsoleting Macros.
* AC_BEFORE:                             Suggested Ordering.
* AC_C_BIGENDIAN:                        C Compiler.
* AC_C_CHAR_UNSIGNED:                    C Compiler.
* AC_C_CONST:                            C Compiler.
* AC_C_CROSS:                            Obsolete Macros.
* AC_C_INLINE:                           C Compiler.
* AC_C_LONG_DOUBLE:                      C Compiler.
* AC_C_PROTOTYPES:                       C Compiler.
* AC_C_RESTRICT:                         C Compiler.
* AC_C_STRINGIZE:                        C Compiler.
* AC_C_VOLATILE:                         C Compiler.
* AC_CACHE_CHECK:                        Caching Results.
* AC_CACHE_LOAD:                         Cache Checkpointing.
* AC_CACHE_SAVE:                         Cache Checkpointing.
* AC_CACHE_VAL:                          Caching Results.
* AC_CANONICAL_BUILD:                    Canonicalizing.
* AC_CANONICAL_HOST:                     Canonicalizing.
* AC_CANONICAL_SYSTEM:                   Obsolete Macros.
* AC_CANONICAL_TARGET:                   Canonicalizing.
* AC_CHAR_UNSIGNED:                      Obsolete Macros.
* AC_CHECK_DECL:                         Generic Declarations.
* AC_CHECK_DECLS:                        Generic Declarations.
* AC_CHECK_FILE:                         Files.
* AC_CHECK_FILES:                        Files.
* AC_CHECK_FUNC:                         Generic Functions.
* AC_CHECK_FUNCS:                        Generic Functions.
* AC_CHECK_HEADER:                       Generic Headers.
* AC_CHECK_HEADERS:                      Generic Headers.
* AC_CHECK_LIB:                          Libraries.
* AC_CHECK_MEMBER:                       Generic Structures.
* AC_CHECK_MEMBERS:                      Generic Structures.
* AC_CHECK_PROG:                         Generic Programs.
* AC_CHECK_PROGS:                        Generic Programs.
* AC_CHECK_SIZEOF:                       Generic Compiler Characteristics.
* AC_CHECK_TOOL:                         Generic Programs.
* AC_CHECK_TOOLS:                        Generic Programs.
* AC_CHECK_TYPE <1>:                     Obsolete Macros.
* AC_CHECK_TYPE:                         Generic Types.
* AC_CHECK_TYPES:                        Generic Types.
* AC_CHECKING:                           Obsolete Macros.
* AC_COMPILE_CHECK:                      Obsolete Macros.
* AC_COMPILE_IFELSE:                     Running the Compiler.
* AC_CONFIG_AUX_DIR:                     Input.
* AC_CONFIG_COMMANDS:                    Configuration Commands.
* AC_CONFIG_FILES:                       Configuration Files.
* AC_CONFIG_HEADERS:                     Configuration Headers.
* AC_CONFIG_LIBOBJ_DIR:                  Generic Functions.
* AC_CONFIG_LINKS:                       Configuration Links.
* AC_CONFIG_MACRO_DIR:                   Input.
* AC_CONFIG_SRCDIR:                      Input.
* AC_CONFIG_SUBDIRS:                     Subdirectories.
* AC_CONFIG_TESTDIR:                     Making testsuite Scripts.
* AC_CONST:                              Obsolete Macros.
* AC_COPYRIGHT:                          Notices.
* AC_CROSS_CHECK:                        Obsolete Macros.
* AC_CYGWIN:                             Obsolete Macros.
* AC_DECL_SYS_SIGLIST:                   Obsolete Macros.
* AC_DECL_YYTEXT:                        Obsolete Macros.
* AC_DEFAULT_INCLUDES:                   Default Includes.
* AC_DEFINE:                             Defining Symbols.
* AC_DEFINE_UNQUOTED:                    Defining Symbols.
* AC_DEFUN <1>:                          Obsoleting Macros.
* AC_DEFUN:                              Macro Definitions.
* AC_DIAGNOSE:                           Reporting Messages.
* AC_DIR_HEADER:                         Obsolete Macros.
* AC_DYNIX_SEQ:                          Obsolete Macros.
* AC_EGREP_CPP:                          Running the Preprocessor.
* AC_EGREP_HEADER:                       Running the Preprocessor.
* AC_EMXOS2:                             Obsolete Macros.
* AC_ENABLE:                             Package Options.
* AC_ERROR:                              Obsolete Macros.
* AC_EXEEXT:                             Obsolete Macros.
* AC_F77_DUMMY_MAIN:                     Fortran Compiler.
* AC_F77_FUNC:                           Fortran Compiler.
* AC_F77_LIBRARY_LDFLAGS:                Fortran Compiler.
* AC_F77_MAIN:                           Fortran Compiler.
* AC_F77_WRAPPERS:                       Fortran Compiler.
* AC_FATAL:                              Reporting Messages.
* AC_FC_FREEFORM:                        Fortran Compiler.
* AC_FC_FUNC:                            Fortran Compiler.
* AC_FC_LIBRARY_LDFLAGS:                 Fortran Compiler.
* AC_FC_MAIN:                            Fortran Compiler.
* AC_FC_SRCEXT:                          Fortran Compiler.
* AC_FC_WRAPPERS:                        Fortran Compiler.
* AC_FIND_X:                             Obsolete Macros.
* AC_FIND_XTRA:                          Obsolete Macros.
* AC_FUNC_ALLOCA:                        Particular Functions.
* AC_FUNC_CHECK:                         Obsolete Macros.
* AC_FUNC_CHOWN:                         Particular Functions.
* AC_FUNC_CLOSEDIR_VOID:                 Particular Functions.
* AC_FUNC_ERROR_AT_LINE:                 Particular Functions.
* AC_FUNC_FNMATCH:                       Particular Functions.
* AC_FUNC_FNMATCH_GNU:                   Particular Functions.
* AC_FUNC_FORK:                          Particular Functions.
* AC_FUNC_FSEEKO:                        Particular Functions.
* AC_FUNC_GETGROUPS:                     Particular Functions.
* AC_FUNC_GETLOADAVG:                    Particular Functions.
* AC_FUNC_GETMNTENT:                     Particular Functions.
* AC_FUNC_GETPGRP:                       Particular Functions.
* AC_FUNC_LSTAT:                         Particular Functions.
* AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK: Particular Functions.
* AC_FUNC_MALLOC:                        Particular Functions.
* AC_FUNC_MBRTOWC:                       Particular Functions.
* AC_FUNC_MEMCMP:                        Particular Functions.
* AC_FUNC_MKTIME:                        Particular Functions.
* AC_FUNC_MMAP:                          Particular Functions.
* AC_FUNC_OBSTACK:                       Particular Functions.
* AC_FUNC_REALLOC:                       Particular Functions.
* AC_FUNC_SELECT_ARGTYPES:               Particular Functions.
* AC_FUNC_SETPGRP:                       Particular Functions.
* AC_FUNC_SETVBUF_REVERSED:              Particular Functions.
* AC_FUNC_STAT:                          Particular Functions.
* AC_FUNC_STRCOLL:                       Particular Functions.
* AC_FUNC_STRERROR_R:                    Particular Functions.
* AC_FUNC_STRFTIME:                      Particular Functions.
* AC_FUNC_STRNLEN:                       Particular Functions.
* AC_FUNC_STRTOD:                        Particular Functions.
* AC_FUNC_UTIME_NULL:                    Particular Functions.
* AC_FUNC_VPRINTF:                       Particular Functions.
* AC_FUNC_WAIT3:                         Obsolete Macros.
* AC_GCC_TRADITIONAL:                    Obsolete Macros.
* AC_GETGROUPS_T:                        Obsolete Macros.
* AC_GETLOADAVG:                         Obsolete Macros.
* AC_GNU_SOURCE:                         UNIX Variants.
* AC_HAVE_C_BACKSLASH_A:                 C Compiler.
* AC_HAVE_FUNCS:                         Obsolete Macros.
* AC_HAVE_HEADERS:                       Obsolete Macros.
* AC_HAVE_LIBRARY:                       Obsolete Macros.
* AC_HAVE_POUNDBANG:                     Obsolete Macros.
* AC_HEADER_CHECK:                       Obsolete Macros.
* AC_HEADER_DIRENT:                      Particular Headers.
* AC_HEADER_EGREP:                       Obsolete Macros.
* AC_HEADER_MAJOR:                       Particular Headers.
* AC_HEADER_STAT:                        Particular Headers.
* AC_HEADER_STDBOOL:                     Particular Headers.
* AC_HEADER_STDC:                        Particular Headers.
* AC_HEADER_SYS_WAIT:                    Particular Headers.
* AC_HEADER_TIME:                        Particular Headers.
* AC_HEADER_TIOCGWINSZ:                  Particular Headers.
* AC_HELP_STRING <1>:                    Pretty Help Strings.
* AC_HELP_STRING:                        Obsolete Macros.
* AC_INIT <1>:                           Obsolete Macros.
* AC_INIT:                               Initializing configure.
* AC_INLINE:                             Obsolete Macros.
* AC_INT_16_BITS:                        Obsolete Macros.
* AC_IRIX_SUN:                           Obsolete Macros.
* AC_ISC_POSIX:                          UNIX Variants.
* AC_LANG_ASSERT:                        Language Choice.
* AC_LANG_C:                             Obsolete Macros.
* AC_LANG_CALL:                          Generating Sources.
* AC_LANG_CONFTEST:                      Generating Sources.
* AC_LANG_CPLUSPLUS:                     Obsolete Macros.
* AC_LANG_FORTRAN77:                     Obsolete Macros.
* AC_LANG_FUNC_LINK_TRY:                 Generating Sources.
* AC_LANG_POP:                           Language Choice.
* AC_LANG_PROGRAM:                       Generating Sources.
* AC_LANG_PUSH:                          Language Choice.
* AC_LANG_RESTORE:                       Obsolete Macros.
* AC_LANG_SAVE:                          Obsolete Macros.
* AC_LANG_SOURCE:                        Generating Sources.
* AC_LANG_WERROR:                        Generic Compiler Characteristics.
* AC_LIBOBJ:                             Generic Functions.
* AC_LIBSOURCE:                          Generic Functions.
* AC_LIBSOURCES:                         Generic Functions.
* AC_LINK_FILES:                         Obsolete Macros.
* AC_LINK_IFELSE:                        Running the Linker.
* AC_LN_S:                               Obsolete Macros.
* AC_LONG_64_BITS:                       Obsolete Macros.
* AC_LONG_DOUBLE:                        Obsolete Macros.
* AC_LONG_FILE_NAMES:                    Obsolete Macros.
* AC_MAJOR_HEADER:                       Obsolete Macros.
* AC_MEMORY_H:                           Obsolete Macros.
* AC_MINGW32:                            Obsolete Macros.
* AC_MINIX:                              UNIX Variants.
* AC_MINUS_C_MINUS_O:                    Obsolete Macros.
* AC_MMAP:                               Obsolete Macros.
* AC_MODE_T:                             Obsolete Macros.
* AC_MSG_CHECKING:                       Printing Messages.
* AC_MSG_ERROR:                          Printing Messages.
* AC_MSG_FAILURE:                        Printing Messages.
* AC_MSG_NOTICE:                         Printing Messages.
* AC_MSG_RESULT:                         Printing Messages.
* AC_MSG_WARN:                           Printing Messages.
* AC_OBJEXT:                             Obsolete Macros.
* AC_OBSOLETE:                           Obsolete Macros.
* AC_OFF_T:                              Obsolete Macros.
* AC_OUTPUT <1>:                         Output.
* AC_OUTPUT:                             Obsolete Macros.
* AC_OUTPUT_COMMANDS:                    Obsolete Macros.
* AC_OUTPUT_COMMANDS_POST:               Configuration Commands.
* AC_OUTPUT_COMMANDS_PRE:                Configuration Commands.
* AC_PACKAGE_BUGREPORT:                  Initializing configure.
* AC_PACKAGE_NAME:                       Initializing configure.
* AC_PACKAGE_STRING:                     Initializing configure.
* AC_PACKAGE_TARNAME:                    Initializing configure.
* AC_PACKAGE_VERSION:                    Initializing configure.
* AC_PATH_PROG:                          Generic Programs.
* AC_PATH_PROGS:                         Generic Programs.
* AC_PATH_TOOL:                          Generic Programs.
* AC_PATH_X:                             System Services.
* AC_PATH_XTRA:                          System Services.
* AC_PID_T:                              Obsolete Macros.
* AC_PREFIX:                             Obsolete Macros.
* AC_PREFIX_DEFAULT:                     Default Prefix.
* AC_PREFIX_PROGRAM:                     Default Prefix.
* AC_PREPROC_IFELSE:                     Running the Preprocessor.
* AC_PREREQ:                             Notices.
* AC_PROG_AWK:                           Particular Programs.
* AC_PROG_CC:                            C Compiler.
* AC_PROG_CC_C_O:                        C Compiler.
* AC_PROG_CC_STDC:                       Obsolete Macros.
* AC_PROG_CPP:                           C Compiler.
* AC_PROG_CPP_WERROR:                    C Compiler.
* AC_PROG_CXX:                           C++ Compiler.
* AC_PROG_CXXCPP:                        C++ Compiler.
* AC_PROG_EGREP:                         Particular Programs.
* AC_PROG_F77:                           Fortran Compiler.
* AC_PROG_F77_C_O:                       Fortran Compiler.
* AC_PROG_FC:                            Fortran Compiler.
* AC_PROG_FC_C_O:                        Fortran Compiler.
* AC_PROG_FGREP:                         Particular Programs.
* AC_PROG_GCC_TRADITIONAL:               C Compiler.
* AC_PROG_INSTALL:                       Particular Programs.
* AC_PROG_LEX:                           Particular Programs.
* AC_PROG_LN_S:                          Particular Programs.
* AC_PROG_MAKE_SET:                      Output.
* AC_PROG_RANLIB:                        Particular Programs.
* AC_PROG_YACC:                          Particular Programs.
* AC_PROGRAM_CHECK:                      Obsolete Macros.
* AC_PROGRAM_EGREP:                      Obsolete Macros.
* AC_PROGRAM_PATH:                       Obsolete Macros.
* AC_PROGRAMS_CHECK:                     Obsolete Macros.
* AC_PROGRAMS_PATH:                      Obsolete Macros.
* AC_REMOTE_TAPE:                        Obsolete Macros.
* AC_REPLACE_FNMATCH:                    Particular Functions.
* AC_REPLACE_FUNCS:                      Generic Functions.
* AC_REQUIRE:                            Prerequisite Macros.
* AC_REQUIRE_CPP:                        Language Choice.
* AC_RESTARTABLE_SYSCALLS:               Obsolete Macros.
* AC_RETSIGTYPE:                         Obsolete Macros.
* AC_REVISION:                           Notices.
* AC_RSH:                                Obsolete Macros.
* AC_RUN_IFELSE:                         Run Time.
* AC_SCO_INTL:                           Obsolete Macros.
* AC_SEARCH_LIBS:                        Libraries.
* AC_SET_MAKE:                           Obsolete Macros.
* AC_SETVBUF_REVERSED:                   Obsolete Macros.
* AC_SIZE_T:                             Obsolete Macros.
* AC_SIZEOF_TYPE:                        Obsolete Macros.
* AC_ST_BLKSIZE:                         Obsolete Macros.
* AC_ST_BLOCKS:                          Obsolete Macros.
* AC_ST_RDEV:                            Obsolete Macros.
* AC_STAT_MACROS_BROKEN <1>:             Obsolete Macros.
* AC_STAT_MACROS_BROKEN:                 Particular Headers.
* AC_STDC_HEADERS:                       Obsolete Macros.
* AC_STRCOLL:                            Obsolete Macros.
* AC_STRUCT_ST_BLKSIZE:                  Particular Structures.
* AC_STRUCT_ST_BLOCKS:                   Particular Structures.
* AC_STRUCT_ST_RDEV:                     Particular Structures.
* AC_STRUCT_TIMEZONE:                    Particular Structures.
* AC_STRUCT_TM:                          Particular Structures.
* AC_SUBST:                              Setting Output Variables.
* AC_SUBST_FILE:                         Setting Output Variables.
* AC_SYS_INTERPRETER:                    System Services.
* AC_SYS_LARGEFILE:                      System Services.
* AC_SYS_LONG_FILE_NAMES:                System Services.
* AC_SYS_POSIX_TERMIOS:                  System Services.
* AC_SYS_RESTARTABLE_SYSCALLS:           Obsolete Macros.
* AC_SYS_SIGLIST_DECLARED:               Obsolete Macros.
* AC_TEST_CPP:                           Obsolete Macros.
* AC_TEST_PROGRAM:                       Obsolete Macros.
* AC_TIME_WITH_SYS_TIME:                 Obsolete Macros.
* AC_TIMEZONE:                           Obsolete Macros.
* AC_TRY_COMPILE:                        Obsolete Macros.
* AC_TRY_CPP:                            Obsolete Macros.
* AC_TRY_LINK:                           Obsolete Macros.
* AC_TRY_LINK_FUNC:                      Obsolete Macros.
* AC_TRY_RUN:                            Obsolete Macros.
* AC_TYPE_GETGROUPS:                     Particular Types.
* AC_TYPE_MBSTATE_T:                     Particular Types.
* AC_TYPE_MODE_T:                        Particular Types.
* AC_TYPE_OFF_T:                         Particular Types.
* AC_TYPE_PID_T:                         Particular Types.
* AC_TYPE_SIGNAL:                        Particular Types.
* AC_TYPE_SIZE_T:                        Particular Types.
* AC_TYPE_UID_T:                         Particular Types.
* AC_UID_T:                              Obsolete Macros.
* AC_UNISTD_H:                           Obsolete Macros.
* AC_USG:                                Obsolete Macros.
* AC_UTIME_NULL:                         Obsolete Macros.
* AC_VALIDATE_CACHED_SYSTEM_TUPLE:       Obsolete Macros.
* AC_VERBOSE:                            Obsolete Macros.
* AC_VFORK:                              Obsolete Macros.
* AC_VPRINTF:                            Obsolete Macros.
* AC_WAIT3:                              Obsolete Macros.
* AC_WARN:                               Obsolete Macros.
* AC_WARNING:                            Reporting Messages.
* AC_WITH:                               External Software.
* AC_WORDS_BIGENDIAN:                    Obsolete Macros.
* AC_XENIX_DIR:                          Obsolete Macros.
* AC_YYTEXT_POINTER:                     Obsolete Macros.
* AH_BOTTOM:                             Autoheader Macros.
* AH_TEMPLATE:                           Autoheader Macros.
* AH_TOP:                                Autoheader Macros.
* AH_VERBATIM:                           Autoheader Macros.


File: autoconf-ja.info,  Node: M4 Macro Index,  Next: Autotest Macro Index,  Prev: Autoconf Macro Index,  Up: Indices

M4マクロの索引
==============

   以下は，M4，M4sugar，そしてM4shマクロのアルファベット順のリストです．

* Menu:

* AS_DIRNAME:                            Programming in M4sh.
* AS_IF:                                 Programming in M4sh.
* AS_MKDIR_P:                            Programming in M4sh.
* AS_SET_CATFILE:                        Programming in M4sh.
* m4_bpatsubst:                          Redefined M4 Macros.
* m4_bregexp:                            Redefined M4 Macros.
* m4_defn:                               Redefined M4 Macros.
* m4_dnl:                                Redefined M4 Macros.
* m4_dquote:                             Evaluation Macros.
* m4_exit:                               Redefined M4 Macros.
* m4_if:                                 Redefined M4 Macros.
* m4_pattern_allow:                      Forbidden Patterns.
* m4_pattern_forbid:                     Forbidden Patterns.
* m4_popdef:                             Redefined M4 Macros.
* m4_quote:                              Evaluation Macros.
* m4_undefine:                           Redefined M4 Macros.
* m4_wrap:                               Redefined M4 Macros.


File: autoconf-ja.info,  Node: Autotest Macro Index,  Next: Program & Function Index,  Prev: M4 Macro Index,  Up: Indices

Autotestマクロの索引
====================

   以下は，Autotestマクロのアルファベット順のリストです．

* Menu:

* AT_CHECK:                              Writing testsuite.at.
* AT_CLEANUP:                            Writing testsuite.at.
* AT_DATA:                               Writing testsuite.at.
* AT_INIT:                               Writing testsuite.at.
* AT_KEYWORDS:                           Writing testsuite.at.
* AT_SETUP:                              Writing testsuite.at.
* AT_TESTED:                             Writing testsuite.at.
* AT_XFAIL_IF:                           Writing testsuite.at.


File: autoconf-ja.info,  Node: Program & Function Index,  Next: Concept Index,  Prev: Autotest Macro Index,  Up: Indices

プログラムと関数の索引
======================

以下は，このドキュメントで移植性を検討しているプログラムと関数のアルファ
ベット順のリストです．

* Menu:

* !:                                     Limitations of Builtins.
* .:                                     Limitations of Builtins.
* alloca:                                Particular Functions.
* alloca.h:                              Particular Functions.
* awk:                                   Limitations of Usual Tools.
* break:                                 Limitations of Builtins.
* case:                                  Limitations of Builtins.
* cat:                                   Limitations of Usual Tools.
* cd:                                    Limitations of Builtins.
* chown:                                 Particular Functions.
* closedir:                              Particular Functions.
* cmp:                                   Limitations of Usual Tools.
* cp:                                    Limitations of Usual Tools.
* ctype.h:                               Particular Headers.
* date:                                  Limitations of Usual Tools.
* diff:                                  Limitations of Usual Tools.
* dirent.h:                              Particular Headers.
* dirname:                               Limitations of Usual Tools.
* echo:                                  Limitations of Builtins.
* egrep:                                 Limitations of Usual Tools.
* error_at_line:                         Particular Functions.
* exit <1>:                              Function Portability.
* exit:                                  Limitations of Builtins.
* export:                                Limitations of Builtins.
* expr:                                  Limitations of Usual Tools.
* expr (|):                              Limitations of Usual Tools.
* false:                                 Limitations of Builtins.
* fgrep:                                 Limitations of Usual Tools.
* float.h:                               Particular Headers.
* fnmatch:                               Particular Functions.
* fnmatch.h:                             Particular Functions.
* for:                                   Limitations of Builtins.
* fork:                                  Particular Functions.
* fseeko:                                Particular Functions.
* getgroups:                             Particular Functions.
* getloadavg:                            Particular Functions.
* getmntent:                             Particular Functions.
* getpgid:                               Particular Functions.
* getpgrp:                               Particular Functions.
* grep:                                  Limitations of Usual Tools.
* if:                                    Limitations of Builtins.
* inttypes.h:                            Header Portability.
* Korn shell:                            Shellology.
* Ksh:                                   Shellology.
* ksh88:                                 Shellology.
* ksh93:                                 Shellology.
* linux/irda.h:                          Header Portability.
* linux/random.h:                        Header Portability.
* ln:                                    Limitations of Usual Tools.
* ls:                                    Limitations of Usual Tools.
* lstat:                                 Particular Functions.
* malloc:                                Particular Functions.
* mbrtowc:                               Particular Functions.
* memcmp:                                Particular Functions.
* mkdir:                                 Limitations of Usual Tools.
* mktime:                                Particular Functions.
* mmap:                                  Particular Functions.
* mv:                                    Limitations of Usual Tools.
* ndir.h:                                Particular Headers.
* net/if.h:                              Header Portability.
* netinet/if_ether.h:                    Header Portability.
* nlist.h:                               Particular Functions.
* pdksh:                                 Shellology.
* printf:                                Limitations of Builtins.
* putenv:                                Function Portability.
* pwd:                                   Limitations of Builtins.
* realloc:                               Particular Functions.
* sed:                                   Limitations of Usual Tools.
* sed (t):                               Limitations of Usual Tools.
* select:                                Particular Functions.
* set:                                   Limitations of Builtins.
* setpgrp:                               Particular Functions.
* setvbuf:                               Particular Functions.
* shift:                                 Limitations of Builtins.
* signal:                                Function Portability.
* signal.h:                              Particular Types.
* snprintf:                              Function Portability.
* Solaris上の/usr/bin/ksh:               Shellology.
* Solaris上の/usr/dt/bin/dtksh:          Shellology.
* Solaris上の/usr/xpg4/bin/sh:           Shellology.
* source:                                Limitations of Builtins.
* sprintf:                               Function Portability.
* sscanf:                                Function Portability.
* stat:                                  Particular Functions.
* stdarg.h:                              Particular Headers.
* stdbool.h:                             Particular Headers.
* stdint.h:                              Header Portability.
* stdlib.h <1>:                          Particular Types.
* stdlib.h <2>:                          Particular Headers.
* stdlib.h:                              Header Portability.
* strcoll:                               Particular Functions.
* strerror_r:                            Particular Functions.
* strftime:                              Particular Functions.
* string.h:                              Particular Headers.
* strings.h:                             Particular Headers.
* strnlen <1>:                           Particular Functions.
* strnlen:                               Function Portability.
* strtod:                                Particular Functions.
* sys/dir.h:                             Particular Headers.
* sys/ioctl.h:                           Particular Headers.
* sys/mkdev.h:                           Particular Headers.
* sys/mount.h:                           Header Portability.
* sys/ndir.h:                            Particular Headers.
* sys/socket.h:                          Header Portability.
* sys/stat.h:                            Particular Headers.
* sys/sysmacros.h:                       Particular Headers.
* sys/time.h <1>:                        Particular Headers.
* sys/time.h:                            Particular Structures.
* sys/types.h:                           Particular Types.
* sys/ucred.h:                           Header Portability.
* sys/wait.h:                            Particular Headers.
* sysconf:                               Function Portability.
* system.h:                              Particular Headers.
* termios.h:                             Particular Headers.
* test:                                  Limitations of Builtins.
* time.h <1>:                            Particular Headers.
* time.h:                                Particular Structures.
* touch:                                 Limitations of Usual Tools.
* trap:                                  Limitations of Builtins.
* true:                                  Limitations of Builtins.
* unistd.h:                              Particular Headers.
* unlink:                                Function Portability.
* unset:                                 Limitations of Builtins.
* unsetenv:                              Function Portability.
* utime:                                 Particular Functions.
* va_copy:                               Function Portability.
* va_list:                               Function Portability.
* vfork:                                 Particular Functions.
* vfork.h:                               Particular Functions.
* vprintf:                               Particular Functions.
* vsnprintf:                             Function Portability.
* vsprintf:                              Function Portability.
* wchar.h:                               Particular Types.
* X11/extensions/scrnsaver.h:            Header Portability.


File: autoconf-ja.info,  Node: Concept Index,  Prev: Program & Function Index,  Up: Indices

概念の索引
==========

以下は，ファイル，ツール，そしてこのドキュメントで紹介されている概念のア
ルファベット順のリストです．

* Menu:

* "$@":                                  Shell Substitutions.
* $(COMMANDS):                           Shell Substitutions.
* $<, explicit rules, and VPATH:         Limitations of Make.
* $U:                                    AC_LIBOBJ vs LIBOBJS.
* ${VAR=EXPANDED-VALUE}:                 Shell Substitutions.
* ${VAR=LITERAL}:                        Shell Substitutions.
* @&t@:                                  Quadrigraphs.
* @S|@:                                  Quadrigraphs.
* _m4_divert_diversion:                  New Macros.
* `COMMANDS`:                            Shell Substitutions.
* acconfig.h:                            acconfig.h.
* aclocal.m4:                            Making configure Scripts.
* Ash:                                   Shellology.
* autoconf:                              autoconf Invocation.
* autoheader:                            autoheader Invocation.
* Autom4te Library:                      autom4te Invocation.
* autom4te.cache:                        autom4te Invocation.
* autom4te.cfg:                          autom4te Invocation.
* Automake:                              Automake.
* automatic rule rewriting and VPATH:    Limitations of Make.
* autoreconf:                            autoreconf Invocation.
* autoscan:                              autoscan Invocation.
* Autotest:                              Using Autotest.
* AUTOTEST_PATH:                         testsuite Invocation.
* autoupdate:                            autoupdate Invocation.
* Back trace <1>:                        autoconf Invocation.
* Back trace:                            autom4te Invocation.
* Bash:                                  Shellology.
* Bash 2.05 and later:                   Shellology.
* BSD make and obj/:                     Limitations of Make.
* Cache:                                 Caching Results.
* Cache variable:                        Cache Variable Names.
* Cache, enabling:                       configure Invocation.
* Command Substitution:                  Shell Substitutions.
* Comments in Makefile rules:            Limitations of Make.
* config.h:                              Configuration Headers.
* config.h.bot:                          acconfig.h.
* config.h.in:                           Header Templates.
* config.h.top:                          acconfig.h.
* config.status:                         config.status Invocation.
* config.sub:                            Specifying Names.
* Configuration Header:                  Configuration Headers.
* Configuration Header Template:         Header Templates.
* configure <1>:                         Making configure Scripts.
* configure:                             Running configure Scripts.
* configure.ac:                          Making configure Scripts.
* configure.in:                          Making configure Scripts.
* Copyright Notice:                      Notices.
* Darwin:                                Systemology.
* Declaration, checking:                 Declarations.
* dnl <1>:                               Coding Style.
* dnl:                                   Macro Definitions.
* double-colon rules and VPATH:          Limitations of Make.
* Endianness:                            C Compiler.
* explicit rules, $<, and VPATH:         Limitations of Make.
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
* File, checking:                        Files.
* Function, checking:                    Particular Functions.
* Header, checking:                      Header Files.
* ifnames:                               ifnames Invocation.
* Includes, default:                     Default Includes.
* Instantiation:                         Output.
* Language:                              Language Choice.
* Library, checking:                     Libraries.
* Libtool:                               Libtool.
* Links:                                 Configuration Links.
* Listing directories:                   Limitations of Usual Tools.
* M4sugar:                               Programming in M4sugar.
* Macro invocation stack <1>:            autoconf Invocation.
* Macro invocation stack:                autom4te Invocation.
* make -k:                               Limitations of Make.
* make and SHELL:                        Limitations of Make.
* Makefile rules and comments:           Limitations of Make.
* Making directories:                    Limitations of Usual Tools.
* Messages, from autoconf:               Reporting Messages.
* Messages, from configure:              Printing Messages.
* Moving open files:                     Limitations of Usual Tools.
* obj/, subdirectory:                    Limitations of Make.
* obstack:                               Particular Functions.
* package.m4:                            Making testsuite Scripts.
* POSIX termios headers:                 System Services.
* prerequisite directories and VPATH:    Limitations of Make.
* Previous Variable:                     Setting Output Variables.
* Programs, checking:                    Alternative Programs.
* QNX 4.25:                              Systemology.
* quadrigraphs:                          Quadrigraphs.
* quotation <1>:                         M4 Quotation.
* quotation:                             Autoconf Language.
* Revision:                              Notices.
* Rule, Single Suffix Inference:         Limitations of Make.
* Separated Dependencies:                Limitations of Make.
* SHELL and make:                        Limitations of Make.
* Single Suffix Inference Rule:          Limitations of Make.
* Structure, checking:                   Structures.
* Symbolic links:                        Limitations of Usual Tools.
* termios POSIX headers:                 System Services.
* test group:                            testsuite Scripts.
* testsuite <1>:                         testsuite Scripts.
* testsuite:                             testsuite Invocation.
* timestamp resolution <1>:              Limitations of Usual Tools.
* timestamp resolution:                  Limitations of Make.
* Tru64:                                 Systemology.
* undefined macro:                       New Macros.
* Unix version 7:                        Systemology.
* V7:                                    Systemology.
* Variable, Precious:                    Setting Output Variables.
* Version:                               Notices.
* VPATH:                                 Limitations of Make.
* VPATH and automatic rule rewriting:    Limitations of Make.
* VPATH and double-colon rules:          Limitations of Make.
* VPATH and prerequisite directories:    Limitations of Make.
* VPATH, explicit rules, and $<:         Limitations of Make.
* VPATH, resolving target pathnames:     Limitations of Make.
* Zsh:                                   Shellology.



Tag table:
Node: Top2422
Node: Introduction16997
Node: The GNU Build System20352
Node: Automake21022
Node: Libtool22259
Node: Pointers23084
Node: Making configure Scripts24467
Node: Writing configure.ac26956
Node: Shell Script Compiler27979
Node: Autoconf Language29276
Node: configure.ac Layout32198
Node: autoscan Invocation33062
Node: ifnames Invocation34721
Node: autoconf Invocation35527
Node: autoreconf Invocation39318
Node: Setup41916
Node: Initializing configure43011
Node: Notices44277
Node: Input45482
Node: Output46876
Node: Configuration Actions48624
Node: Configuration Files51893
Node: Makefile Substitutions53067
Node: Preset Output Variables54226
Node: Installation Directory Variables57587
Node: Build Directories61478
Node: Automatic Remaking62558
Node: Configuration Headers64137
Node: Header Templates65999
Node: autoheader Invocation67056
Node: Autoheader Macros69236
Node: Configuration Commands71024
Node: Configuration Links72177
Node: Subdirectories73263
Node: Default Prefix75119
Node: Existing Tests76115
Node: Common Behavior77481
Node: Standard Symbols77911
Node: Default Includes78308
Node: Alternative Programs80186
Node: Particular Programs80624
Node: Generic Programs84161
Node: Files87244
Node: Libraries87928
Node: Library Functions89771
Node: Function Portability90217
Node: Particular Functions93786
Node: Generic Functions103790
Node: Header Files106940
Node: Header Portability107416
Node: Particular Headers109690
Node: Generic Headers115696
Node: Declarations117319
Node: Particular Declarations117766
Node: Generic Declarations117924
Node: Structures119659
Node: Particular Structures120119
Node: Generic Structures121358
Node: Types122554
Node: Particular Types122926
Node: Generic Types123977
Node: Compilers and Preprocessors125051
Node: Specific Compiler Characteristics125869
Node: Generic Compiler Characteristics126743
Node: C Compiler127782
Node: C++ Compiler135152
Node: Fortran Compiler136438
Node: System Services146139
Node: UNIX Variants148566
Node: Writing Tests149476
Node: Language Choice150730
Node: Writing Test Programs153088
Node: Guidelines153572
Node: Test Functions154757
Node: Generating Sources155745
Node: Running the Preprocessor158641
Node: Running the Compiler161126
Node: Running the Linker161827
Node: Run Time162948
Node: Systemology164968
Node: Multiple Cases166421
Node: Results167534
Node: Defining Symbols168092
Node: Setting Output Variables170512
Node: Caching Results173763
Node: Cache Variable Names176497
Node: Cache Files177453
Node: Cache Checkpointing178754
Node: Printing Messages179890
Node: Programming in M4182309
Node: M4 Quotation182919
Node: Active Characters183581
Node: One Macro Call184439
Node: Quotation and Nested Macros185529
Node: Changequote is Evil187569
Node: Quadrigraphs189007
Node: Quotation Rule Of Thumb190296
Node: Using autom4te192255
Node: autom4te Invocation192846
Node: Customizing autom4te199461
Node: Programming in M4sugar200366
Node: Redefined M4 Macros200901
Node: Evaluation Macros202554
Node: Forbidden Patterns203370
Node: Programming in M4sh204251
Node: Writing Autoconf Macros205533
Node: Macro Definitions206209
Node: Macro Names207374
Node: Reporting Messages208756
Node: Dependencies Between Macros209714
Node: Prerequisite Macros210173
Node: Suggested Ordering212149
Node: Obsoleting Macros213150
Node: Coding Style213878
Node: Portable Shell218704
Node: Shellology220515
Node: Here-Documents223413
Node: File Descriptors224874
Node: File System Conventions226565
Node: Shell Substitutions229388
Node: Assignments234083
Node: Parentheses235417
Node: Special Shell Variables236005
Node: Limitations of Builtins241085
Node: Limitations of Usual Tools252471
Node: Limitations of Make266045
Node: Manual Configuration283181
Node: Specifying Names283778
Node: Canonicalizing285315
Node: Using System Type286834
Node: Site Configuration288201
Node: External Software288927
Node: Package Options291047
Node: Pretty Help Strings292934
Node: Site Details294569
Node: Transforming Names295309
Node: Transformation Options296116
Node: Transformation Examples296485
Node: Transformation Rules297585
Node: Site Defaults298725
Node: Running configure Scripts301401
Node: Basic Installation302322
Node: Compilers and Options304143
Node: Multiple Architectures304607
Node: Installation Names305270
Node: Optional Features306080
Node: System Type306660
Node: Sharing Defaults307493
Node: Defining Variables307973
Node: configure Invocation308437
Node: config.status Invocation309282
Node: Obsolete Constructs312064
Node: Obsolete config.status Use312797
Node: acconfig.h314165
Node: autoupdate Invocation315613
Node: Obsolete Macros316738
Node: Autoconf 1331902
Node: Changed File Names332653
Node: Changed Makefiles333193
Node: Changed Macros333939
Node: Changed Results334720
Node: Changed Macro Writing336286
Node: Autoconf 2.13337022
Node: Changed Quotation337864
Node: New Macros339375
Node: Hosts and Cross-Compilation340632
Node: AC_LIBOBJ vs LIBOBJS343183
Node: AC_FOO_IFELSE vs AC_TRY_FOO345159
Node: Using Autotest346522
Node: Using an Autotest Test Suite348042
Node: testsuite Scripts348324
Node: Autotest Logs351238
Node: Writing testsuite.at352582
Node: testsuite Invocation355382
Node: Making testsuite Scripts357550
Node: FAQ360375
Node: Distributing361032
Node: Why GNU m4361649
Node: Bootstrapping362244
Node: Why Not Imake362697
Node: Defining Directories365551
Node: autom4te.cache367334
Node: Present But Cannot Be Compiled368595
Node: History371551
Node: Genesis372184
Node: Exodus372951
Node: Leviticus374703
Node: Numbers375551
Node: Deuteronomy376745
Node: Copying This Manual378262
Node: GNU Free Documentation License378478
Node: Indices400874
Node: Environment Variable Index401487
Node: Output Variable Index404364
Node: Preprocessor Symbol Index411324
Node: Autoconf Macro Index419182
Node: M4 Macro Index437910
Node: Autotest Macro Index439160
Node: Program & Function Index439872
Node: Concept Index448544

End tag table
