Info file: binutils-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `binutils-ja.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.




START-INFO-DIR-ENTRY
* Binutils(ja): (binutils-ja).         The GNU binary utilities.
* ar(ja): (binutils-ja)ar.               Create, modify, and extract from archives
* nm(ja): (binutils-ja)nm.               List symbols from object files
* objcopy(ja): (binutils-ja)objcopy.     Copy and translate object files
* objdump(ja): (binutils-ja)objdump.     Display information from object files
* ranlib(ja): (binutils-ja)ranlib.       Generate index to archive contents
* readelf(ja): (binutils-ja)readelf.     Display the contents of ELF format files.
* size(ja): (binutils-ja)size.           List section sizes and total size
* strings(ja): (binutils-ja)strings.     List printable strings from files
* strip(ja): (binutils-ja)strip.         Discard symbols
* c++filt(ja): (binutils-ja)c++filt.     Filter to demangle encoded C++ symbols
* cxxfilt(ja): (binutils-ja)c++filt.     MS-DOS name for c++filt
* addr2line(ja): (binutils-ja)addr2line. Convert addresses to file and line
* nlmconv(ja): (binutils-ja)nlmconv.     Converts object code into an NLM
* windres(ja): (binutils-ja)windres.     Manipulate Windows resources
* dlltool(ja): (binutils-ja)dlltool.     Create files needed to build and use DLLs
END-INFO-DIR-ENTRY

Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001, 2002
Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".






File: binutils-ja.info, Node: Top, Next: ar, Prev: (dir), Up: (dir)

Introduction
************

この短いマニュアルは，GNUバイナリユーティリティ(バージョン2.13全体)に
対する予備的な文章を含んでいます．


この文章はGNU Free Documentation Licenseの条件の下で配布されます．ライ
センスのコピーは，"GNU Free Documentation License"と名付けられたセクショ
ンに含まれています．

* Menu:

* ar::                          Create, modify, and extract from archives
* nm::                          List symbols from object files
* objcopy::			Copy and translate object files
* objdump::                     Display information from object files
* ranlib::                      Generate index to archive contents
* readelf::			Display the contents of ELF format files.
* size::                        List section sizes and total size
* strings::                     List printable strings from files
* strip::                       Discard symbols
* c++filt::			Filter to demangle encoded C++ symbols
* cxxfilt: c++filt.             MS-DOS name for c++filt
* addr2line::			Convert addresses to file and line
* nlmconv::                     Converts object code into an NLM
* windres::			Manipulate Windows resources
* dlltool::			Create files needed to build and use DLLs
* Selecting The Target System:: How these utilities determine the target.
* Reporting Bugs::              Reporting Bugs
* GNU Free Documentation License::  GNU Free Documentation License
* Index::                       Index



File: binutils-ja.info, Node: ar, Next: ld, Prev: Top, Up: Top

ar
**



     ar [-]P[MOD [RELPOS] [COUNT]] ARCHIVE [MEMBER...]
     ar -M [ <mri-script ]


GNU `ar'は，アーカイブの作成，変更，そして，それからの抽出を行います．
"アーカイブ(archive)"とは，(アーカイブの"メンバー(members)"と呼ばれる) 
元となる個々のファイルを取り出すことが可能な構造のファイル中に，他のファ
イルの集合を保持している単一のファイルです．

元のファイルの内容，モード(許可)，タイムスタンプ，所有者，そしてグルー
プは，アーカイブに保存されていて，抽出時に復元可能です．

GNU `ar'は，あらゆる長さのメンバー名のアーカイブを管理することが可能で
す．しかし，`ar'がシステムでコンフィグレーションされた方法に依存し，他
のツールで管理されるアーカイブのフォーマットの互換性のため，メンバー名
の長さは制限される可能性があります．それが存在する場合，制限は15文字
(a.out に関連するフォーマットの典型)や16文字(coffに関連するフォーマッ
トの典型)のことが多いでしょう．

この種のアーカイブは，一般に必要なサブルーチンを保持する"ライブラリ
(libraries)" として最もよく使用されるので，`ar'は，バイナリユーティリ
ティと考えられます．

`ar'は，修飾子`s'を指定したとき，アーカイブの再配置可能なオブジェクト
モジュールに定義されているシンボルに索引を作成します．一度作成されると，
(`q'更新コマンドに対する保存で)`ar'がその内容を変更したときはいつも，
この索引はアーカイブ内で更新されます．そのような索引をもつアーカイブは，
ライブラリとのリンク速度を上げ，ライブラリのルーチンがアーカイブ内の位
置に関わらず，お互いの呼び出しを可能にします．

この索引テーブルをリストアップするため，`nm -s'や`nm
--print-armap' を使用してもかまいません．アーカイブにテーブルがない場合，
`ranlib'と呼ばれる`ar'の別の形式を，テーブルを加えるために使用すること
が可能です．

GNU `ar'は，二つの異なる機能と互換性があるように設計されています．Unix
システム上の異なる形態の`ar'のように，コマンドラインオプションを使用し
てその作業を制御することが可能です．また，単一のコマンドラインオプショ
ン`-M'を指定した場合，MRI "librarian"プログラムのように，標準入力を通
じて供給されるスクリプトを用いて，それを制御することが可能です．


* Menu:

* ar cmdline::                  Controlling `ar' on the command line
* ar scripts::                  Controlling `ar' with a script



File: binutils-ja.info, Node: ar cmdline, Next: ar scripts, Prev: ar, Up: ar

コマンドラインでの`ar'の制御
============================

     ar [`-X32_64'] [`-']P[MOD [RELPOS] [COUNT]] ARCHIVE [MEMBER...]

Unix形式で`ar'を使用するとき，`ar'は少なくとも二つの引数を実行時に要求
します．*operation*を指定するキー文字(*modifiers*を指定するその他のキー
文字がオプションで付きます)と，動作対象のアーカイブ名です．

ほとんどの処理は，それ以外にMEMBER引数を受け入れ，それは処理の対象とな
る特定のファイル名を指定します．


GNU `ar'では，最初のコマンドライン引数内で，処理コードPと修飾フラグMOD
を，あらゆる順序で混合させることが可能です．

好みにより，最初のコマンドライン引数をダッシュで始めてもかまいません．

Pキー文字は，実行する処理を指定します．それは以下のいずれでもかまいま
せんが，その中の一つだけを指定する必要があります．

`d'
     アーカイブからモジュールを*削除*します．削除するモジュール名は，
     MEMBER...として指定してください．削除するファイルを指定していない
     場合，アーカイブはそのままです．

     `v'修飾子を指定した場合，`ar'は削除するそれぞれのモジュールをリス
     トアップします．

`m'
     アーカイブ内でメンバーを*移動*するためにこの処理を使用してくださ
     い．

     シンボルが一つ以上のメンバーで定義されている場合，アーカイブ内の
     メンバーの順序で，ライブラリを使用してプログラムがリンクされる方
     法に差異が発生するはずです．

     `m'とともに修飾子を使用しない場合，MEMBER引数で指名したすべてのメ
     ンバーは，アーカイブの*終り*に移動されます．そうする代わりに，指
     定した位置にそれらを移動するために，`a'，`b'，または`i' 修飾子が
     使用可能です．

`p'
     アーカイブの指定されたメンバーを標準出力ファイルに*出力*します．
     `v'修飾子が指定されている場合，その内容のコピーの前にメンバー名を
     標準出力に表示します．

     MEMBER引数を指定していない場合，アーカイブのすべてのファイルが出
     力されます．

`q'
     *すばやく追加*します．歴史的に，ファイルMEMBER...をARCHIVEの終り
     に，置換についての調査をせずに追加します．

     修飾子`a'，`b'，そして`i'は，このオプションに効果は*ありません*．
     新しいメンバーは常にアーカイブの終りに配置されます．

     修飾子`v'で，`ar'は追加されるそれぞれのファイルをリストアップしま
     す．

     このオペレーションの要点は速度なので，アーカイブのシンボルテーブ
     ルの索引が存在している場合でも更新されません．シンボルテーブルの
     索引を更新するために，`ar s'または`ranlib'を明示的に使用すること
     が可能です．

     しかし，あまりに多くの異なるシステムで，高速追加が索引を再構築す
     ることを仮定するので，GNU `ar'は，`q'を`r'の同義語として実装され
     ています．

`r'
     ファイルMEMBER...をARCHIVEに挿入します(*置換*を用います)．この処
     理は，追加されるものと名前が一致した場合，既存のメンバーが削除さ
     れる点で，`q'とは異なります．

     MEMBER...で指名されたファイルが一つでも存在しない場合，`ar'はエラー
     メッセージを表示し，名前がアーカイブと一致する既存のメンバーはそ
     のままになります．

     デフォルトで，新しいメンバーはファイルの終りに追加されます．しか
     し，既存のメンバーとの相対位置を要求するため，修飾子`a'，`b'，ま
     たは`i'の一つを使用してもかまいません．

     この処理での修飾子`v'の使用は，挿入されたそれぞれのファイルを出力
     の一行に書き出し，ファイルが追加された(古いメンバーが削除されてい
     ない)のか，置換されたのかを示す文字`a'または`r'のどちらかを追加し
     ます．

`t'
     ARCHIVEの内容をリストアップしている*テーブル*，または，アーカイブ
     に存在するMEMBER...にリストアップされているファイルの*テーブル*を
     表示します．通常，メンバー名のみ見えます．モード(許可)，タイムス
     タンプ，所有者，そして大きさも見たい場合，`v'修飾子を指定してで要
     求することも可能です．

     MEMBERを指定しない場合は，アーカイブ内のすべてのファイルがリスト
     アップされます．

     同じ名前の(`fie'という名の)ファイルが，(`b.a'をいう名の)アーカ
     イブに一つ以上ある場合，`ar t b.a fie'は最初のインスタンスのみリス
     トアップします．すべてを見るために，完全なリストを請求する必要があります 
     --- この例では`ar t b.a'です．

`x'
     (MEMBERという名の)メンバーをアーカイブから*抽出*します．`ar'が抽
     出しているそれぞれの名前をリストアップするように，この処理で`v'修
     飾子を使用することが可能です．

     MEMBERを指定しない場合，アーカイブのすべてのファイルが抽出されま
     す．


処理の動作の変更を指定するため，いくつかの修飾子(MOD)をPキー文字の直後
に続けてもかまいません．

`a'
     新しいファイルを，アーカイブの既存のメンバーの*後*に追加します．
     修飾子`a'を使用した場合，ARCHIVE指定の前に，既存のアーカイブメン
     バー名がRELPOS引数にある必要があります．

`b'
     新しいファイルをアーカイブの既存のメンバーの*前*に加えます．修飾
     子`b'を使用した場合，ARCHIVE指定の前に，既存のアーカイブメンバー
     名がRELPOS引数にある必要があります．(`i'と同じです)．

`c'
     アーカイブを*作成*します．更新の要求をしたとき，指定されたARCHIVE
     が存在する場合でも，それは常に作成されます．しかし，この修飾子を
     使用して，作成することを期待するということを前もって指定しない場
     合，警告が生じます．

`f'
     アーカイブで名前を切り詰めます．GNU `ar'は，通常あらゆる長さのファ
     イル名を許可します．これは，いくつかのシステムのネイティブ`ar'プ
     ログラムと互換性のないアーカイブを作成します．これが懸念される場
     合，アーカイブに配置するときファイル名を切り詰めるために，`f' 修
     飾子を使用してもかまいません．

`i'
     新しいファイルをアーカイブの既存のメンバーの*前に*挿入します．修
     飾子`i'を使用する場合，ARCHIVE指定の前に，既存のアーカイブメンバー
     名前がRELPOS引数にある必要があります．(`b'と同じです)．

`l'
     この修飾子は受け入れられますが，使用されません．

`N'
     COUNTパラメータを使用します．これは，同じ名前のアーカイブに，複数
     のエントリーがある場合に使用されます．アーカイブから，該当する名
     前のインスタンスをCOUNT個，抽出または削除します．

`o'
     メンバーが既存のとき，その*オリジナルの*日付を保持します．この修
     飾子を指定しない場合，アーカイブから抽出されるファイルは，抽出し
     た時間でタイムスタンプがつきます．

`P'
     アーカイブの名前の一致にフルパス名を使用します．GNU `ar'はフルパ
     ス名を持つアーカイブ(そのようなアーカイブは，POSIXで問題ない)を作
     成することは不可能ですが，アーカイブを作成するものには，そうする
     ことが可能なものもあります．このオプションで，GNU `ar'はフルパス
     名を使用しているファイル名にマッチし，それは，他のツールで作成さ
     れたアーカイブから単一のファイルを抽出するとき便利でしょう．

`s'
     オブジェクトファイルの索引をアーカイブに書き出したり，他の変更が
     アーカイブに対してなされない場合でも，既存のものを更新したりしま
     す．この修飾子フラグは，あらゆるオプションとともに，または単独で
     使用してもかまいません．アーカイブで`ar s'を実行することは，
     `ranlib'の実行と等価です．

`S'
     アーカイブシンボルテーブルを生成しません．これで何段階か使用する
     大きなライブラリの構築を高速にすることが可能です．結果として出力
     されるアーカイブは，リンカで使用することは不可能です．シンボルテー
     ブルを構築するために，`ar' の最後の実行で`S' 修飾子を省略したり，
     アーカイブで`ranlib'を実行する必要があります．

`u'
     通常，`ar r'...でリストアップされているすべてのファイルをアーカイ
     ブに挿入します．リストアップしたもので，同じ名前の既存のメンバー
     より新しいファイル*のみ*挿入したい場合，この修飾子を使用してくだ
     さい．`u'修飾子は，処理`r'(置換)に対してのみ可能です．特に，タイ
     ムスタンプの調査が処理`q'での速度の利点を損なうため，`qu'と組み合
     わせることはできません．

`v'
     この修飾子は，処理の*冗長*バージョンを要求します．多くのオペレー
     ションは，修飾子`v'が追加されているとき，処理しているファイル名の
     ような追加の情報を表示します．

`V'
     この修飾子は`ar'のバージョンナンバーを表示します．

`ar'は，AIXに対する互換性のため，`-X32_64'と綴られた最初のオプションを
無視します．このオプションによって引き起こされる動作は，GNU `ar'のデフォ
ルトです．`ar'は，その他の`-X'オプションを全くサポートしません．特に，
AIX `ar'ではデフォルトとなる`-X32'はサポートしません．





File: binutils-ja.info, Node: ar scripts, Prev: ar cmdline, Up: ar

スクリプトを用いた`ar'の制御
============================

     ar -M [ <SCRIPT ]

単一のコマンドラインオプション`-M'を`ar'で用いた場合，基礎的なコマンド
言語でその処理を制御することが可能です．`ar'のこの形式は，標準入力が端
末から直接来ている場合，対話的に処理します．対話的に使用している間，
`ar'は入力を促し(プロンプトは`AR >')，エラー後も実行を続けます．標準入
力をスクリプトファイルにリダイレクトしている場合，プロンプトは発行され
ず，`ar'はエラーが発生すると(ゼロでない終了コードで)実行を終了します．

`ar'コマンド言語は，コマンドラインオプションと等価に設計されて*いませ
ん*．実際，それはアーカイブ上の制御が幾分少なくなっています．コマンド
言語の目的は，MRI "librarian"プログラムに対して書かれたスクリプトを既
に所有している開発者が，GNU `ar'への変換をより簡単にすることです．

`ar'コマンド言語の構文は簡単です．
   * コマンドは大文字も小文字も認識します．例えば，`LIST'は`list'と同
     じです．以下の記述では，明確さのためにコマンドは大文字で表示され
     ます．

   * 単一のコマンドは，個別の行に配置してもかまいません．それは，行の
     最初の単語となります．

   * 空行が可能で，それは効果がありません．

   * コメントが可能です．文字`*'または`;'以降のテキストは無視されます．

   * `ar'コマンドの引数の一部として名前のリストを使用するときは，カン
     マまたは空白で，それぞれの名前を分けることが可能です．明確さのた
     め，以下の説明はカンマで表現されます．

   * 行の連結文字として`+'が使用されます．`+'が行末に現れた場合，それ
     に続く行のテキストは，現在のコマンドの一部と考えられます．

ここに，`ar'で使用可能な，または，`ar'を対話的に使用しているときのコマ
ンドがあります．そのうちの３つは特別な意味を持ちます．

`OPEN'または`CREATE'は"現在のアーカイブ(current archive)" を指定し，そ
れはそれ以外のほとんどのコマンドが要求する一時ファイルです．

`SAVE'は，スクリプトでこれまでに指定された変更をコミットします．`SAVE'
の前のコマンドは，現在のアーカイブの一時的なコピーに対してのみ効果があ
ります．

`ADDLIB ARCHIVE'
`ADDLIB ARCHIVE (MODULE, MODULE, ... MODULE)'
     ARCHIVEのすべての内容(または，指定されている場合，アーカイブのそ
     れぞれの指名されたMODULE)を，現在のアーカイブに追加します．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`ADDMOD MEMBER, MEMBER, ... MEMBER'
     それぞれの指名されたMEMBERを，モジュールとして，現在のアーカイブ
     に追加します．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`CLEAR'
     現在のアーカイブの内容を削除し，最後に`SAVE'されてからのあらゆる
     処理の効果を無効にします．現在のアーカイブが指定されていない場合
     でも実行可能です(効果はありません)．

`CREATE ARCHIVE'
     アーカイブを作成し，それを現在のアーカイブにします(その他，多くの
     コマンドに対し必要です)．新しいアーカイブは，一時的な名前で作成さ
     れます．それは，`SAVE'を使用するまで，ARCHIVEとして実際に保存され
     ません．既存のアーカイブに優先可能です．同様に，指名されている既
     存のARCHIVEファイルの内容は，`SAVE'まで破壊されません．

`DELETE MODULE, MODULE, ... MODULE'
     リストアップされているそれぞれのMODULEを，現在のアーカイブから削
     除します．`ar -d ARCHIVE MODULE ... MODULE'と同じです．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`DIRECTORY ARCHIVE (MODULE, ... MODULE)'
`DIRECTORY ARCHIVE (MODULE, ... MODULE) OUTPUTFILE'
     ARCHIVEに存在している指名されたそれぞれMODULEをリストアップします．
     別のコマンド`VERBOSE'で，出力形式を指定します．冗長出力がオフのと
     き，出力は`ar -t ARCHIVE MODULE...'のようになります．冗長出力がオ
     ンのとき，リストは`ar -tv ARCHIVE MODULE...'のようになります．

     出力は通常，標準出力に流れていきます．しかし，OUTPUTFILEを最後の
     引数として指定した場合，`ar'はそのファイルに出力を変更します．

`END'
     `ar'を，正しく完了したことを示す終了コード`0'で終了します．このコ
     マンドは出力ファイルを保存しません．最後の`SAVE'コマンド以降に現
     在のアーカイブを変更した場合．これらの変更は失われます．

`EXTRACT MODULE, MODULE, ... MODULE'
     指名されたそれぞれのMODULEを現在のアーカイブから抽出し，それらを
     現在のディレクトリに個別のファイルとして書き出します．`ar -x
     ARCHIVE MODULE...'と同じです．

     `OPEN'や`CREATE'を前もって使用することが要求されます．


`LIST'
     現在のアーカイブのすべての内容を，`VERBOSE'の状態に関わらず，
     "verbose"形式で表示します．効果は`ar tv ARCHIVE'に似ています．(こ
     の単独コマンドはGNU `ar'拡張で，MRI互換に提供されているものではあ
     りません)．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`OPEN ARCHIVE'
     現在のアーカイブとして使用するために，既存のアーカイブを開きます
     (他の多くのコマンドに対し必要です)．それに続くコマンドの結果から
     のあらゆる変更は，次に`SAVE'が使用されるまで，ARCHIVEに対し実際に
     効果はありません．

`REPLACE MODULE, MODULE, ... MODULE'
     現在のアーカイブで，それぞれの(`REPLACE'の引数で指名された)既存の
     MODULEを，現在のワーキングディレクトリのファイルで置換します．エ
     ラー無くこのコマンドを実行するために，ファイルと現在のアーカイブ
     のモジュールの両方が存在する必要があります．

     `OPEN'や`CREATE'を前もって使用することが要求されます．

`VERBOSE'
     `DIRECTORY'からの出力を管理している内部フラグを切り替えます．フラ
     グがオンのとき，`DIRECTORY'出力は，`ar -tv '...からの出力に一致し
     ます．

`SAVE'
     現在のアーカイブへの変更をコミットし，それを，最後の`CREATE'や
     `OPEN'コマンドで指定された名前のファイルに，実際に保存します．

     `OPEN'や`CREATE'を前もって使用することが要求されます．





File: binutils-ja.info, Node: nm, Next: objcopy, Prev: ld, Up: Top

nm
**


     nm [`-a'|`--debug-syms'] [`-g'|`--extern-only']
        [`-B'] [`-C'|`--demangle'[=STYLE]] [`-D'|`--dynamic']
        [`-S'|`--print-size'] [`-s'|`--print-armap']
        [`-A'|`-o'|`--print-file-name']
        [`-n'|`-v'|`--numeric-sort'] [`-p'|`--no-sort']
        [`-r'|`--reverse-sort'] [`--size-sort'] [`-u'|`--undefined-only']
        [`-t' RADIX|`--radix='RADIX] [`-P'|`--portability']
        [`--target='BFDNAME] [`-f'FORMAT|`--format='FORMAT]
        [`--defined-only'] [`-l'|`--line-numbers'] [`--no-demangle']
        [`-V'|`--version'] [`-X 32_64'] [`--help']  [OBJFILE...]

GNU `nm'は，オブジェクトファイルOBJFILE...のシンボルをリストアップしま
す．オブジェクトファイルが引数として与えられていない場合，`nm'はファイ
ルを`a.out'と仮定します．

それぞれのシンボルに対し，`nm'は以下を表示します．

   * シンボル値で，オプションで指定されている基数(以下を参照)，または，
     デフォルトの16進数になります．

   * シンボル形式です．少なくとも以下の形式が使用されます．それ以外は，
     同様にオブジェクトファイルのフォーマットに依存します．小文字の場
     合，シンボルはローカルです．大文字の場合，シンボルはグローバル(外
     部参照可能)です．

     `A'
          シンボルの値は絶対値で，更なるリンクで変更されません．

     `B'
          シンボルは初期化されていないデータセクションにあります(BSSと
          して知られています)．

     `C'
          シンボルは共通です．共通シンボルは初期化されていないデータで
          す．リンク時，複数の共通シンボルは，同じ名前のものが存在して
          もかまいません．シンボルがどこかで定義されている場合，共通の
          シンボルは未定義の参照として扱われます．共通シンボルの詳細は，
          *Note Linker options: (ld.info)Optionsの`--warn-common'の記
          述を参照してください．

     `D'
          シンボルは，初期化されているデータセクションにあります．

     `G'
          シンボルは，小さいオブジェクトに対して初期化されているデータ
          セクションにあります．いくつかのオブジェクトファイルのフォー
          マットは，グローバルな配列に対するグローバルな整数型変数のよ
          うな，小さなデータオブジェクトに対するより効果的なアクセスを
          可能とします．

     `I'
          シンボルは他のシンボルへの間接参照です．これは，滅多に使用さ
          れない`a.out'オブジェクトファイル形式に対するGNU拡張です．

     `N'
          シンボルはデバッグシンボルです．

     `R'
          シンボルは読み込み専用データセクションにあります．

     `S'
          シンボルは小さなオブジェクトに対する初期化されていないデータ
          セクションにあります．

     `T'
          シンボルはテキスト(code)セクションにあります．

     `U'
          シンボルは定義されていません．

     `V'
          シンボルはweakオブジェクトです．定義されているweakシンボルが，
          通常通りに定義されているシンボルとリンクされるとき，通常通り
          に定義されているシンボルがエラー無く使用されます．weakな未定
          義のシンボルがリンクされ，シンボルが定義されていないとき，
          weakシンボルの値はエラー無くゼロになります．

     `W'
          シンボルは，weakオブジェクトシンボルとして特殊なタグを持たな
          いweakシンボルです．定義されているweakシンボルが，通常通りに
          定義されているシンボルとリンクされるとき，通常通りに定義され
          ているシンボルがエラー無く使用されます．weakな未定義のシンボ
          ルがリンクされ，シンボルが定義されていないとき，weakシンボル
          の値はエラー無くゼロになります．

     `-'
          シンボルは，`a.out'オブジェクトファイルのスタブシンボルです．
          この場合，次に出力される値は，スタブのその他のフィールド，ス
          タブのdescフィールド，そして，スタブの形式になります．スタブ
          シンボルは，デバッグ情報を保つために使用されます．詳細は，
          *Note Stabs: (stabs.info)Topを参照してください．

     `?'
          シンボル形式が分からない，または独特のフォーマットのオブジェ
          クトファイルです．

   * シンボル名です．


以下で交互に表示している，オプションの長い形式と短い形式は等価です．

`-A'
`-o'
`--print-file-name'
     入力ファイルの識別をそのすべてのシンボルの前に一度だけ前置するの
     ではなく，シンボルが見つかった入力ファイル(またはアーカイブメンバー)
     の名前をそれぞれのシンボルに前置します．

`-a'
`--debug-syms'
     すべてのシンボルを表示し，デバッグ専用のシンボルさえも表示します．
     通常はリストアップされません．

`-B'
     (MIPS `nm'との互換性のための)`--format=bsd'と同じです．

`-C'
`--demangle[=STYLE]'
     低レベルのシンボル名をユーザレベルの名前に復号("demangle")します．
     システムが前置する，最初のあらゆるアンダースコアを削除するだけで
     なく，これでC++関数名が読みやすくなります．異なるコンパイラでは，
     mangle形式が異なります．追加のdemangle形式の引数は，コンパイラに
     対する適切なdemangle形式を選択するために使用可能です．demangleの
     情報は，*Note c++filt::.

`--no-demangle'
     低レベルのシンボル名をdemangleしません．これはデフォルトです．

`-D'
`--dynamic'
     通常のシンボルではなく，動的シンボルを表示します．これは，共有ラ
     イブラリの特定の形式のような，動的オブジェクトに対してのみ意味が
     あります．

`-f FORMAT'
`--format=FORMAT'
     出力書式FORMATを使用し，書式は`bsd'，`sysv'，または`posix'が可能
     です．デフォルトは`bsd'です．FORMATの最初の文字のみ識別されます．
     それは大文字または小文字が可能です．

`-g'
`--extern-only'
     外部シンボルのみ表示します．

`-l'
`--line-numbers'
     それぞれのシンボルに対し，ファイル名と行番号を見つけることを試み
     るため，デバッグ情報を使用します．定義済シンボルに対し，シンボル
     のアドレスの行番号を探します．未定義のシンボルに対し，シンボルを
     参照する再配置エントリーの行番号を探します．行番号の情報が見つか
     る場合，それを他のシンボル情報の後に出力します．

`-n'
`-v'
`--numeric-sort'
     シンボルを，名前のアルファベット順ではなく，そのアドレスで数値的
     に並べ替えます．

`-p'
`--no-sort'
     シンボルの並べ替えを全く行いません．それらを見つかった順番で出力
     します．

`-P'
`--portability'
     デフォルトの書式の代わりに，POSIX.2標準出力形式を使用します．`-f
     posix'と同じです．

`-S'
`--print-size'
     `bsd'出力書式に対し，定義されているシンボルのサイズを出力します．

`-s'
`--print-armap'
     アーカイブメンバーからシンボルをリストアップするとき，索引を含め
     ます．名前に対する定義を含むモジュールの(`ar'や`ranlib'でアーカイ
     ブに保存されている)マップです．

`-r'
`--reverse-sort'
     並べ替えの順序を(数値的またはアルファベット順によらず)逆にします．
     最後のものを最初にします．

`--size-sort'
     シンボルを大きさで並べ替えます．大きさは，そのシンボル値と，次に
     現れるより大きい値を持つシンボル値の差として計算されます．シンボ
     ル値ではなく，その大きさが出力されます．

`-t RADIX'
`--radix=RADIX'
     RADIXをシンボル値を出力する基数として使用します．それは，10進数の
     `d'，8進数の`o'，または16進数の`x'にする必要があります．

`--target=BFDNAME'
     システムのデフォルトフォーマット以外のオブジェクトコードを指定し
     ます．詳細は，*Note Target Selection::.

`-u'
`--undefined-only'
     未定義のシンボルのみ表示します(それらはそれぞれのオブジェクトファ
     イルの外部にあります)．

`--defined-only'
     それぞれのオブジェクトファイルの定義済シンボルのみ表示します．

`-V'
`--version'
     `nm'のバージョンナンバーを表示し終了します．

`-X'
     このオプションは，AIXバージョンの`nm'への互換性のため無視されます．
     それは，`32_64'とする必要がある，一つのパラメータを持ちます．AIX
     `nm'のデフォルトモードは`-X 32'に対応し，それはGNU `nm'ではサポー
     トされていません．

`--help'
     `nm'のオプションの概要を表示し終了します．





File: binutils-ja.info, Node: objcopy, Next: objdump, Prev: nm, Up: Top

objcopy
*******


     objcopy [`-F' BFDNAME|`--target='BFDNAME]
             [`-I' BFDNAME|`--input-target='BFDNAME]
             [`-O' BFDNAME|`--output-target='BFDNAME]
             [`-B' BFDARCH|`--binary-architecture='BFDARCH]
             [`-S'|`--strip-all'] [`-g'|`--strip-debug']
             [`-K' SYMBOLNAME|`--keep-symbol='SYMBOLNAME]
             [`-N' SYMBOLNAME|`--strip-symbol='SYMBOLNAME]
             [`-G' SYMBOLNAME|`--keep-global-symbol='SYMBOLNAME]
             [`-L' SYMBOLNAME|`--localize-symbol='SYMBOLNAME]
             [`-W' SYMBOLNAME|`--weaken-symbol='SYMBOLNAME]
             [`-x'|`--discard-all'] [`-X'|`--discard-locals']
             [`-b' BYTE|`--byte='BYTE]
             [`-i' INTERLEAVE|`--interleave='INTERLEAVE]
             [`-j' SECTIONNAME|`--only-section='SECTIONNAME]
             [`-R' SECTIONNAME|`--remove-section='SECTIONNAME]
             [`-p'|`--preserve-dates']
             [`--debugging']
             [`--gap-fill='VAL] [`--pad-to='ADDRESS]
             [`--set-start='VAL] [`--adjust-start='INCR]
             [`--change-addresses='INCR]
             [`--change-section-address' SECTION{=,+,-}VAL]
             [`--change-section-lma' SECTION{=,+,-}VAL]
             [`--change-section-vma' SECTION{=,+,-}VAL]
             [`--change-warnings'] [`--no-change-warnings']
             [`--set-section-flags' SECTION=FLAGS]
             [`--add-section' SECTIONNAME=FILENAME]
             [`--rename-section' OLDNAME=NEWNAME[,FLAGS]]
             [`--change-leading-char' ] [`--remove-leading-char']
             [`--srec-len='IVAL ] [`--srec-forceS3']
             [`--redefine-sym' OLD=NEW ]
             [`--weaken']
             [`--keep-symbols='FILENAME]
             [`--strip-symbols='FILENAME]
             [`--keep-global-symbols='FILENAME]
             [`--localize-symbols='FILENAME]
             [`--weaken-symbols='FILENAME]
             [`--alt-machine-code=INDEX']
             [`-v'|`--verbose']
             [`-V'|`--version']  
             [`--help']
             INFILE [OUTFILE]

GNU `objcopy'ユーティリティは，オブジェクトファイルの内容を別のファイ
ルにコピーします．`objcopy'はオブジェクトファイルの読み書きにGNU BFDを
使用します．コピー先のオブジェクトファイルに，コピー元のオブジェクトファ
イルとは異なるフォーマットで書き出すことが可能です．`objcopy'の正確な
動作は，コマンドラインオプションで制御されます．`objcopy'は，完全にリ
ンクされているファイルを，二つの書式間でコピー可能であるべきだというこ
とに注意してください．しかし，再配置可能なオブジェクトファイルを二つの
フォーマットの間でコピーすることは，期待したようには動作しません．

`objcopy'は，その変換を行うために一時ファイルを作成し，その後でそれを
削除します．`objcopy'は，そのすべての変換作業でBFDを使用します．それは，
BFDで記述されているすべてのフォーマットにアクセスするので，明示的に伝
えること無く，ほとんどのフォーマットを認識することが可能です．*Note
BFD: (ld.info)BFD.

`objcopy'は，`srec'出力ターゲットを使用することで，S-record を生成する
ために使用可能です(例えば，`-O srec'を使用してください)．

`objcopy'は，`binary'の出力ターゲットを使用することで，生のバイナリファ
イルを生成するために使用可能です(例えば，`-O binary' を使用してくださ
い)．`objcopy'が生のバイナリファイルを生成するとき，それは本質的に，入
力オブジェクトファイルの内容のメモリダンプを生成します．すべてのシンボ
ルと再配置の情報は削除されます．メモリダンプは，出力ファイルにコピーさ
れる最抵位のセクションのロードアドレスから開始します．

S-recordや生のバイナリファイルを生成するとき，デバッグ情報を含むセクショ
ンを削除するため，`-S'を使用すると便利かもしれません．場合によっては，
バイナリファイルに必要のない情報を含むセクションを削除するため，`-R'が
役に立つでしょう．

注意 - `objcopy'は，入力ファイルのエンディアンを変更することができませ
ん．入力フォーマットにエンディアンがある場合，(持たないフォーマットも
あります)，`objcopy'は，入力ファイルを同じエンディアンを持つ，またはエ
ンディアンを持たないフォーマットのファイル(例えば`srec')にのみコピー可
能です．



`INFILE'
`OUTFILE'
     それぞれ入力と出力のファイルです．OUTFILEを指定しない場合，
     `objcopy'は結果的に破壊される一時ファイルを作成し，INFILE に名前
     を変更します．

`-I BFDNAME'
`--input-target=BFDNAME'
     ソースファイルのオブジェクトのフォーマットを，それを導き出すので
     はなく，BFDNAMEと考えます．詳細は，*Note Target Selection::.

`-O BFDNAME'
`--output-target=BFDNAME'
     出力ファイルを，オブジェクトファイルのフォーマットBFDNAMEを用いて
     書き出します．詳細は，*Note Target Selection::.

`-F BFDNAME'
`--target=BFDNAME'
     入出力両方のファイルに対し，オブジェクトのフォーマットとして
     BFDNAMEを使用します．すなわち，単純に元ファイルから目的ファイルに，
     変換せずにデータを転送します．詳細は，*Note Target Selection::.

`-B BFDARCH'
`--binary-architecture=BFDARCH'
     生の入力ファイルをオブジェクトファイルに変換するとき役に立ちます．
     この状況では，出力先のアーキテクチャはBFDARCHに設定されるはずです．
     入力ファイルに既知のBFDARCHがある場合，このオプションは無視されま
     す．変換処理で作成される特殊なシンボルで参照することで，このバイ
     ナリデータをプログラム内部でアクセスすることが可能です．これらの
     シンボルは，`_binary_OBJFILE_start'，`_binary_OBJFILE_end'，そし
     て`_binary_OBJFILE_size'という名前です．例えば，画像ファイルをオ
     ブジェクトファイルに変換した後，これらのシンボルを使用してコード
     内でアクセスすることが可能です．

`-j SECTIONNAME'
`--only-section=SECTIONNAME'
     指名されたセクションのみ，入力ファイルから出力ファイルへコピーし
     ます．このオプションは，一回以上与えてもかまいません．このオプショ
     ンを不適切に使用すると，出力ファイルが使用不可能になることに注意
     してください．

`-R SECTIONNAME'
`--remove-section=SECTIONNAME'
     指名されている，あらゆるSECTIONNAMEセクションを出力ファイルから削
     除します．このオプションは，一回以上与えてもかまいません．このオ
     プションを不適切に使用すると，出力ファイルが使用不可能になること
     に注意してください．

`-S'
`--strip-all'
     再配置の情報ととシンボルの情報を，ソースファイルからコピーしませ
     ん．

`-g'
`--strip-debug'
     デバッグシンボルをソースファイルからコピーしません．

`--strip-unneeded'
     再配置の処理に不要な，すべてのシンボルを削除します．

`-K SYMBOLNAME'
`--keep-symbol=SYMBOLNAME'
     ソースファイルからシンボルSYMBOLNAMEのみコピーします．このオプショ
     ンは，一回以上与えてもかまいません．

`-N SYMBOLNAME'
`--strip-symbol=SYMBOLNAME'
     ソースファイルからシンボルSYMBOLNAMEをコピーしません．このオプショ
     ンは，一回以上与えてもかまいません．

`-G SYMBOLNAME'
`--keep-global-symbol=SYMBOLNAME'
     グローバルなSYMBOLNAMEシンボルのみ保ちます．すべての他のシンボル
     をそれらが外部から見えないようにファイルローカルにします．このオ
     プションは一回以上与えてもかまいません．

`-L SYMBOLNAME'
`--localize-symbol=SYMBOLNAME'
     外部から見えないようにするため，シンボルSYMBOLNAMEをファイルでロー
     カルにします．このオプションは，一回以上与えてもかまいません．

`-W SYMBOLNAME'
`--weaken-symbol=SYMBOLNAME'
     シンボルSYMBOLNAMEをweakにします．このオプションは，一回以上与え
     てもかまいません．

`-x'
`--discard-all'
     ソースファイルからグローバルでないシンボルをコピーしません．

`-X'
`--discard-locals'
     コンパイラが生成したローカルなシンボルをコピーしません．(これらは
     通常，`L'または`.'ではじまります．)

`-b BYTE'
`--byte=BYTE'
     入力ファイルのBYTEバイト毎のバイトのみ保持します(ヘッダデータは影
     響されません)．BYTEは，0からINTERLEAVE-1までの範囲が可能で，
     INTERLEAVEは，`-i'や`--interleave'オプションで与えられる，または
     デフォルトの4になります．このオプションは，プログラマブルROMにファ
     イルを作成するとき便利です．それは特に，`srec'出力ターゲットとと
     もに使用されます．

`-i INTERLEAVE'
`--interleave=INTERLEAVE'
     INTERLEAVEバイト毎に一つのみコピーします．`-b'や`--byte'オプショ
     ンを用いてそのバイトを選択してください．デフォルトは4です．
     `objcopy'は，`-b'や`--byte'を指定していない場合，このオプションを
     無視します．

`-p'
`--preserve-dates'
     出力ファイルのアクセスと編集の日付を入力ファイルと同じに設定しま
     す．

`--debugging'
     可能な場合，デバッグ情報を変換します．特定のデバッグフォーマット
     のみサポートされていて，そして，変換処理は時間がかかるため，これ
     はデフォルトではありません．

`--gap-fill VAL'
     VALを用いてセクション間のギャップを補充します．このオプションはセ
     クションの*load address* (LMA)に適用されます．それは，低いアドレ
     ス (1) (*Note objcopy-Footnotes::)でセクションの大きさを増加し，
     そして，VALを用いて作成される余分な空間で補充することで動作します．

`--pad-to ADDRESS'
     出力ファイルをload address ADDRESSまでパディングします．これは，
     最後のセクションの大きさを増加することで動作します．余分な空間は，
     `--gap-fill'で指定された値(デフォルトはゼロ)で補充されます．

`--set-start VAL'
     新しいファイルの開始アドレスをVALに設定します．すべてのオブジェク
     トファイルのフォーマットが，開始アドレスの設定をサポートするわけ
     ではありません．

`--change-start INCR'
`--adjust-start INCR'
     開始アドレスをINCRを加えることで変更します．すべてのオブジェクト
     ファイルのフォーマットが，開始アドレスの設定をサポートするわけで
     はありません．

`--change-addresses INCR'
`--adjust-vma INCR'
     開始アドレスのように，INCRを加えることで，VMAとLMAアドレスを変更
     します．オブジェクトファイルのフォーマットによっては，セクション
     アドレスを任意に変更できないものもあります．これはセクションを再
     配置しないことに注意してください．セクションが特定のアドレスにロー
     ドされていることをプログラムが期待し，セクションが異なるアドレス
     にロードされるように変更するために，このオプションが使用された場
     合，プログラムは失敗するかもしれません．

`--change-section-address SECTION{=,+,-}VAL'
`--adjust-section-vma SECTION{=,+,-}VAL'
     SECTIONで指名されたVMAアドレスとLMAアドレスの両方を設定または変更
     します．`='が使用された場合，セクションのアドレスは，VALに設定さ
     れます．それ以外の場合，VALは，セクションアドレスに加えられる，ま
     たはそれから引かれます．上記の`--change-addresses'以下のコメント
     を参照してください．入力ファイルにSECTIONが存在しない場合，
     `--no-change-warnings'が使用されていない限り，警告が発せられます．

`--change-section-lma SECTION{=,+,-}VAL'
     指名されたSECTIONのLMAアドレスを設定または変更します．LMAアドレス
     は，プログラムロード時にセクションがメモリにロードされるアドレス
     です．通常これはVMAと同じで，それは，プログラムの実行時のセクショ
     ンのアドレスですが，システムによっては，特にプログラムがROMに保存
     されるものでは，二つが異なる可能性があります．`='が使用されている
     場合，セクションのアドレスは，VALに設定されます．それ以外の場合，
     VALはセクションアドレスに加えられる，またはそれから引かれます．上
     記の`--change-addresses'以下のコメントを参照してください．SECTION 
     が入力ファイルに存在しない場合，`--no-change-warnings'が使用され
     ていない限り，警告が発せられます．

`--change-section-vma SECTION{=,+,-}VAL'
     指名されたSECTIONのVMAアドレスを設定または変更します．VMAアドレス
     は，プログラムの実行を開始したときにセクションが位置するアドレス
     です．通常これはLMAと同じで，それは，セクションがメモリにロードさ
     れるアドレスですが，システムによっては，特にプログラムがROMに保存
     されるものでは，二つのアドレスが異なる可能性があります．`='が使用
     されている場合，セクションのアドレスは，VALに設定されます．それ以
     外の場合，VALはセクションアドレスに加えられる，またはそれから引か
     れます．上記の`--change-addresses'以下のコメントを参照してくださ
     い．SECTIONが入力ファイルに存在しない場合，`--no-change-warnings'
     が使用されていない限り，警告が発せられます．

`--change-warnings'
`--adjust-warnings'
     `--change-section-address'や`--change-section-lma'や
     `--change-section-vma'が使用されていて，指名されたセクションが存
     在しない場合，警告を発します．これはデフォルトです．

`--no-change-warnings'
`--no-adjust-warnings'
     `--change-section-address'や`--change-section-lma'や
     `--change-section-vma'が使用されていて，指名されたセクションが存
     在しない場合でも警告を発しません．

`--set-section-flags SECTION=FLAGS'
     指名したセクションのフラグを設定します．FLAGS引数は，カンマで分け
     られたフラグ名の文字列です．認識される名前は，`alloc'，`contents'，
     `load'，`noload'，`readonly'，`code'，`data'，`rom'，`share'，そ
     して`debug'です．`contents'フラグを内容のないセクションに対し設定
     可能ですが，内容のあるセクションの`contents'フラグとしての意味が
     ありません -- その代わりにセクションを削除します．すべてのフラグ
     がすべてのオブジェクトファイルのフォーマットに意味があるわけでは
     ありません．

`--add-section SECTIONNAME=FILENAME'
     ファイルをコピーしている間に，指名されたSECTIONNAMEの新しいセクショ
     ンを追加します．新しいセクションの内容はファイルFILENAMEからもた
     らされます．セクションの大きさは，ファイルのサイズになります．こ
     のオプションは，任意の名前を持つセクションをサポート可能なファイ
     ルのフォーマットでのみ動作します．

`--rename-section OLDNAME=NEWNAME[,FLAGS]'
     セクションの名前をOLDNAMEからNEWNAMEに変更し，オプションでセクショ
     ンのフラグをFLAGSに，処理中に変更します．名前の変更を実行するため
     にリンカスクリプトを使用すると，オブジェクトファイルとして出力が
     抑制されリンクされた実行形式にはならないので，これには利点があり
     ます．

     このオプションは，`.data'いう名前のセクションを常に作成するので，
     入力フォーマットがバイナリのとき，特に役に立ちます．例えば，バイ
     ナリデータを含んでいる`.rodata'いう名前のセクションを作成したい場
     合，それを達成するために以下のコマンドラインを使用することが可能
     でしょう．

            objcopy -I binary -O <output_format> -B <architecture> \
             --rename-section .data=.rodata,alloc,load,readonly,data,contents \
             <input_binary_file> <output_object_file>

`--change-leading-char'
     オブジェクトファイルのフォーマットには，シンボルの開始時に特別な
     文字を使用するものもあります．そのような文字で最もよくあるのはア
     ンダースコアで，それはコンパイラがすべてのシンボルの前によく追加
     するものです．このオプションは，`objcopy'に，オブジェクトファイル
     のフォーマットを変換している間にすべてのシンボルに前置される文字
     を変更するよう伝えます．オブジェクトファイルのフォーマットが同じ
     前置文字を使用している場合，このオプションは効果がありません．そ
     れ以外の場合，それは適切に，文字を加えたり，文字を削除したり，文
     字を変更したりします．

`--remove-leading-char'
     グローバルシンボルの最初の文字が，オブジェクトファイルのフォーマッ
     トで使用されているシンボルに前置される特殊な文字の場合，その文字
     を削除します．そのような文字で最もよくあるのはアンダースコアです．
     このオプションは，すべてのグローバルシンボルから前置されるアンダー
     スコアを削除します．シンボル名に対して異なる規則を持つ，異なるファ
     イルフォーマットのオブジェクト同士をリンクしたい場合，これは役に
     立つはずです．これは`--change-leading-char'とは異なり，出力ファイ
     ルのオブジェクトファイルのフォーマットに依存せず，それは適切なと
     きは常にシンボル名を変更します．

`--srec-len=IVAL'
     srec出力でのみ意味があります．生成されているSrecordの最大長をIVAL 
     に設定します．この長さは，両方のアドレス，データ，そしてcrcフィー
     ルドをカバーします．

`--srec-forceS3'
     srec出力でのみ意味があります．S1/S2レコードの生成を避け，S3のみの
     レコードのフォーマットを作成します．

`--redefine-sym OLD=NEW'
     シンボル名をOLDからNEWに変更します．ソースを持っていない二つのも
     のを一緒にリンクしようとし，名前の衝突があるとき便利です．

`--weaken'
     ファイルのすべてのグローバルシンボルをweakにします．リンカに対し
     `-R'オプションを使用している他のオブジェクトに対してリンクするオ
     ブジェクトを構築するとき，これは便利です．このオプションは，weak
     なシンボルをサポートしているオブジェクトファイルを使用していると
     きだけ効果があります．

`--keep-symbols=FILENAME'
     `--keep-symbol'オプションを，ファイルFILENAMEにリストアップされて
     いるそれぞれのシンボルに適用します．FILENAMEは単なるフラットなファ
     イルで，一行に一つのシンボル名があります．行のコメントはハッシュ
     文字で導入されます．このオプションは一回以上与えるてもかまいませ
     ん．

`--strip-symbols=FILENAME'
     `--strip-symbol'オプションを，ファイルFILENAMEにリストアップされ
     ているそれぞれのシンボルに適用します．FILENAMEは単なるフラットな
     ファイルで，一行に一つのシンボル名があります．行のコメントはハッ
     シュ文字で導入されます．このオプションは一回以上与えてもかまいま
     せん．

`--keep-global-symbols=FILENAME'
     `--keep-global-symbol'オプションを，ファイルFILENAMEにリストアッ
     プされているそれぞれのシンボルに適用します．FILENAMEは単なるフラッ
     トなファイルで，一行に一つのシンボル名があります．行のコメントは
     ハッシュ文字で導入されます．このオプションは一回以上与えてもかま
     いません．

`--localize-symbols=FILENAME'
     `--localize-symbol'オプションを，ファイルFILENAMEにリストアップさ
     れているそれぞれのシンボルに適用します．FILENAMEは単なるフラット
     なファイルで，一行に一つのシンボル名があります．行のコメントはハッ
     シュ文字で導入されます．このオプションは一回以上与えてもかまいま
     せん．

`--weaken-symbols=FILENAME'
     `--weaken-symbol'オプションを，ファイルFILENAMEにリストアップされ
     ているそれぞれのシンボルに適用します．FILENAMEは単なるフラットな
     ファイルで，一行に一つのシンボル名があります．行のコメントはハッ
     シュ文字で導入されます．このオプションは一回以上与えてもかまいま
     せん．

`--alt-machine-code=INDEX'
     出力アーキテクチャに代替のマシンコードがある場合，デフォルトのも
     のの代わりにINDEX番目のコードを使用します．マシンに公式のコードが
     割り当てられていて，ツールチェーンが新しいコードに適用するのです
     が，他のアプリケーションはまだ使用されているオリジナルのコードに
     依存している状況では，これは役に立ちます．

`-V'
`--version'
     `objcopy'のバージョンナンバーを表示します．

`-v'
`--verbose'
     冗長な出力です．修正されたすべてのオブジェクトファイルをリストアッ
     プします．アーカイブの場合，`objcopy -v'は，アーカイブのすべての
     メンバーをリストアップします．

`--help'
     `objcopy'へのオプションの概要を表示します．




File: binutils-ja.info  Node: objcopy-Footnotes, Up: objcopy

(1) 訳注：原文は lower address．



File: binutils-ja.info, Node: objdump, Next: ranlib, Prev: objcopy, Up: Top

objdump
*******



     objdump [`-a'|`--archive-headers']
             [`-b' BFDNAME|`--target=BFDNAME']
             [`-C'|`--demangle'[=STYLE] ]
             [`-d'|`--disassemble']
             [`-D'|`--disassemble-all']
             [`-z'|`--disassemble-zeroes']
             [`-EB'|`-EL'|`--endian='{big | little }]
             [`-f'|`--file-headers']
             [`--file-start-context']
             [`-g'|`--debugging']
             [`-h'|`--section-headers'|`--headers']
             [`-i'|`--info']
             [`-j' SECTION|`--section='SECTION]
             [`-l'|`--line-numbers']
             [`-S'|`--source']
             [`-m' MACHINE|`--architecture='MACHINE]
             [`-M' OPTIONS|`--disassembler-options='OPTIONS]
             [`-p'|`--private-headers']
             [`-r'|`--reloc']
             [`-R'|`--dynamic-reloc']
             [`-s'|`--full-contents']
             [`-G'|`--stabs']
             [`-t'|`--syms']
             [`-T'|`--dynamic-syms']
             [`-x'|`--all-headers']
             [`-w'|`--wide']
             [`--start-address='ADDRESS]
             [`--stop-address='ADDRESS]
             [`--prefix-addresses']
             [`--[no-]show-raw-insn']
             [`--adjust-vma='OFFSET]
             [`-V'|`--version']
             [`-H'|`--help']
             OBJFILE...


`objdump'は，一つ以上のオブジェクトファイルに関する情報を表示します．
オプションで，表示する情報を制御します．この情報は，プログラムをコンパ
イルして動作させたいだけのプログラマより，コンパイルツールに関する作業
をしているプログラマに対し最も役に立ちます．

OBJFILE...は，調査されるオブジェクトファイルです．アーカイブを指定した
とき，`objdump'は，それぞれのメンバーオブジェクトファイルの情報を表示
します．



ここに交互に表示しているオプションの長い形式と短い形式は等価です．リス
トの`-a,-d,-D,-f,-g,-G,-h,-H,-p,-r,-R,-S,-t,-T,-V,-x'から少なくとも一
つのオプションを与える必要があります．

`-a'
`--archive-header'
     OBJFILEファイルがすべてアーカイブの場合，アーカイブヘッダ情報を表
     示します(書式は`ls -l'に似ています)．`ar tv'を用いてリストアップ
     可能な情報に加え，`objdump -a'は，それぞれのアーカイブのメンバー
     のオブジェクトファイルのフォーマットを表示します．

`--adjust-vma=OFFSET'
     情報をダンプしているとき，最初に，すべてのセクションアドレスに
     OFFSETを加えます．これは，セクションアドレスがシンボルテーブルに
     対応していない場合便利で，それは，`a.out'のようなセクションアドレ
     スが存在しないフォーマットを使用しているとき，セクションを特定の
     アドレスに配置するとき発生します．

`-b BFDNAME'
`--target=BFDNAME'
     オブジェクトファイルに対するオブジェクトコードのフォーマットを
     BFDNAMEに指定します．このオプションは不要かもしれません．OBJDUMP
     は，自動的に多くのフォーマットを認識することが可能です．

     例えば，以下のようにします．objdump -b oasys -m vax -h fu.o それ
     は，`fu.o'のセクションヘッダ(`-h')からの情報の概要を表示し，それ
     は特に，Oasysコンパイラで生成されるフォーマットのVAXオブジェクト
     ファイルとして認識(`-m')されます．`-i'オプションを用いて利用可能
     なフォーマットをリストアップすることが可能です．詳細は，*Note
     Target Selection::.

`-C'
`--demangle[=STYLE]'
     低レベルのシンボル名をユーザレベルの名前に復号("demangle")します．
     システムによって前置される，最初のすべてのアンダースコアを削除す
     るだけでなく．これはC++関数名を可読にします．異なるコンパイラでは，
     mangle形式が異なります．追加のdemangle形式の引数は，コンパイラに
     対する適切なdemangle形式を選択するために使用可能です．demangleの
     情報は，*Note c++filt::.

`-G'
`--debugging'
     デバッグ情報を表示します．これは，ファイルに保存されているデバッ
     グ情報の解析を試み，Cのような構文を使用してそれを出力します．デバッ
     グ情報の特定の形式のみ実装されています．

`-d'
`--disassemble'
     OBJFILEから，機械語命令に対するアセンブラニーモニックを表示します．
     このオプションは，命令を含むことを期待されるそれらのセクションを，
     逆アセンブルするだけです．

`-D'
`--disassemble-all'
     `-d'に似ていますが，命令を含むことを期待されるものだけでなく，す
     べてのセクションの内容を逆アセンブルします．

`--prefix-addresses'
     逆アセンブルしているとき，それぞれの行に絶対アドレスを出力します．
     これはより古い逆アセンブルの書式です．

`--disassemble-zeroes'
     通常逆アセンブルの出力はゼロブロックをスキップします．このオプショ
     ンは，それらのブロックを他のデータと同じように逆アセンブルする，
     直接的な逆アセンブラです．

`-EB'
`-EL'
`--endian={big|little}'
     オブジェクトファイルのエンディアンを指定します．これは逆アセンブ
     ラにのみ効果があります．これは，S-recordのような，エンディアン情
     報を記述していないファイルフォーマットを逆アセンブルしているとき
     役に立つはずです．

`-f'
`--file-header'
     それぞれのOBJFILEファイルのヘッダ全体からの情報の概要を表示します．

`--file-start-context'
     まだ表示されていない，内部にリストアップされているソースコード/ファ
     イルから逆アセンブルされたもの(おそらく`-S')を表示しているとき，
     コンテクストをファイルの先頭まで拡張することを指定します．

`-h'
`--section-header'
`--header'
     オブジェクトファイルのセクションヘッダの情報の概要を表示します．

     ファイルのセグメントは，非標準のアドレスに再配置され，例えば，
     `-Ttext'，`-Tdata'，または`-Tbss'オプションが
     `ld'で使用されています．しかし，`a.out'のようなオブジェクト
     ファイルのフォーマットによっては，ファイルセグメントの開始アドレスを保存
     しないものもあります．そのような状況では，`ld'がセクションを正し
     く再配置しますが，ファイルのセクションのヘッダのリストに`objdump
     -h'を使用しても，正しいアドレスを表示することは不可能です．その代わりに，
     それは通常のアドレスを表示し，それらはターゲットに対して暗黙のう
     ちに行われます．

`--help'
     `objdump'に対するオプションの概要を出力し，終了します．

`-i'
`--info'
     `-b'や`-m'を用いて指定可能な，すべてのアーキテクチャとオブジェク
     トのフォーマットを示すリストを表示します．

`-j NAME'
`--section=NAME'
     セクションNAMEに対する情報のみ表示します．

`-l'
`--line-numbers'
     (デバッグ情報を使用した)表示に，表示されているオブジェクトコード
     や再配置に一致しているファイル名とソースの行番号を用いてラベル付
     けします．`-d'，`-D'，または`-r'を用いた場合のみ有益です．

`-m MACHINE'
`--architecture=MACHINE'
     オブジェクトファイルの逆アセンブル時に，使用するアーキテクチャを
     指定します．これは，S-recordのような，アーキテクチャ情報が記述さ
     れていないオブジェクトファイルを逆アセンブルするとき役に立ちます．
     `-i'オプションを用いて，利用可能なアーキテクチャをリストアップす
     ることが可能です．

`-M OPTIONS'
`--disassembler-options=OPTIONS'
     ターゲット指定の情報を逆アセンブラに渡します．いくつかのターゲッ
     トだけをサポートします．

     ターゲットがARMアーキテクチャの場合，逆アセンブラが使用されている
     間に使用するレジスタ名のセットを選択するために，このスイッチを使
     用することが可能です．`-M reg-name-std' (デフォルト)を指定すると，
     ARMの命令セットのドキュメントで使用しているレジスタ名を選択します
     が，'sp'と呼ばれるレジスタ13，'lr'と呼ばれるレジスタ14，そして'
     pc'と呼ばれるレジスタ15 レジスタは除きます．`-M reg-names-apcs'を
     指定すると，ARM Procedure Call Standardで使用されている名前のセッ
     トを選択するのに対し，`-M reg-names-raw'を指定すると，`r'にレジス
     タ番号が続いたものを使用します．

     APCSレジスタ命名規則には二つの変形があり，`-M reg-names-atpcs'と
     `-M reg-names-special-atpcs'により利用可能で，それはARM/Thumb
     Procedure Call Standard命名規約を使用します．(通常のレジスタ名，
     または，特殊なレジスタ名のどちらかを使用します．)

     このオプションは，ARMアーキテクチャに対し，スイッチ
     `--disassembler-options=force-thumb'を使用して，すべての命令を
     Thumb命令として解釈するように逆アセンブラに強制するためにも使用可
     能です．他のコンパイラで生成される thumb コードの逆アセンブラを試
     みるとき，これは役に立つはずです．

     x86に対して，オプションによっては`-m'のスイッチの機能を複製します
     が，よりきめ細かい制御が可能になります．以下の複数のセクションを
     カンマで分けられた文字列として指定してもかまいません．`x86-64'，
     `i386'，そして`i8086'は該当するアーキテクチャに対する逆アセンブル
     を選択します．`intel'と`att'は，インテルの構文のモードとAT&Tの構
     文のモードを選択します．`addr32'，`addr16'，`data32'，そして
     `data16'は，デフォルトのアドレスサイズとオペランドサイズを指定し
     ます．これらの四つのオプションは，それ以降のオプション文字列に
     `x86-64'，`i386'，または`i8086'が現れる場合は，そちらが優先されま
     す．最後は`suffix'で，これはAT&Tモードのとき，サフィックスがオペ
     ランドで推測可能なときでさえ，ニーモニックサフィックスを逆アセン
     ブラは出力します．

     PPCに対し，`booke'，`booke32'，そして`booke64'はBookE命令の逆アセ
     ンブラを選択します．`32'と`64'は，それぞれPowerPCとPowerPC64の逆
     アセンブラを選択します．

`-p'
`--private-headers'
     オブジェクトファイルのフォーマット特有の情報を出力します．出力さ
     れる厳密な情報はオブジェクトファイルのフォーマットに依存します．
     オブジェクトファイルのフォーマットによっては，追加情報は出力され
     ません．

`-r'
`--reloc'
     ファイルの再配置エントリを出力します．`-d'や`-D'とともに使用され
     る場合，再配置は逆アセンブルの中にバラバラに出力されます．

`-R'
`--dynamic-reloc'
     ファイルの動的な再配置エントリを出力します．これは，ある形式の共
     有ライブラリのような，動的オブジェクトのみで意味があります．

`-s'
`--full-contents'
     要求されたあらゆるセクションの，すべての内容を表示します．

`-S'
`--source'
     可能な場合，逆アセンブラの中にソースコードを混ぜて表示します．
     `-d' が暗黙のうちに指定されます．

`--show-raw-insn'
     命令を逆アセンブルするとき，命令をシンボリック形式と同様に16進で
     出力します．`--prefix-addresses'が使用されているとき以外，これは
     デフォルトです．

`--no-show-raw-insn'
     命令を逆アセンブルするとき，命令バイトを出力しません．これは
     `--prefix-addresses'が使用されているときデフォルトです．

`-G'
`--stabs'
     要求されるすべてのセクションの内容を全部表示します．ELFファイルの 
     .stab と .stab.indexと .stab.exclセクションの内容を表示します．こ
     れは，`.stab'デバッグシンボルテーブルのエントリーがELFのセクショ
     ンに運び込まれる(Solaris 2.0のような)システムでのみ役に立ちます．
     そのほかのほとんどのフォーマットでは，デバッグシンボルテーブルの
     エントリーは，リンクシンボルとともにバラバラに配置され，`--syms' 
     の出力で見ることが可能となります．スタブシンボルの詳細は，*Note
     Stabs: (stabs.info)Topを参照してください．

`--start-address=ADDRESS'
     データの表示を，指定したアドレスで開始します．これは`-d'，`-r'，
     そして`-s'オプションの出力に効果があります．

`--stop-address=ADDRESS'
     データの表示を，指定したアドレスで停止します．これは`-d'，`-r'，
     そして`-s'オプションの出力に効果があります．

`-t'
`--syms'
     ファイルのシンボルテーブルのエントリーを出力します．これは，`nm'
     プログラムで提供される情報に似ています．

`-T'
`--dynamic-syms'
     ファイルの動的シンボルテーブルのエントリーを表示します．これは，
     特定の形式の共有ライブラリのような，動的オブジェクトに対してのみ
     意味があります．これは，`-D' (`--dynamic')オプションが与えられて
     いる`nm'プログラムで提供される情報に似ています．

`--version'
     `objdump'のバージョンナンバーを出力し終了します．

`-x'
`--all-header'
     利用可能なヘッダ情報をすべて表示し，それはシンボルテーブルと，再
     配置エントリを含みます．`-x'を用いると，`-a -f -h -r -t'をすべて
     指定したものと等価になります．

`-w'
`--wide'
     80列以上の出力デバイスに対し，数行で書式化します．また，表示する
     ときにシンボル名を切り詰めません．





File: binutils-ja.info, Node: ranlib, Next: size, Prev: objdump, Up: Top

ranlib
******



     ranlib [`-vV'] ARCHIVE


`ranlib'は，アーカイブの内容の索引を生成し，それをアーカイブに保存しま
す．索引は，再配置可能なオブジェクトファイルであるアーカイブのメンバー
によって定義される，それぞれのシンボルをリストアップします．

この索引をリストアップするために，`nm -s'や`nm --print-armap' を使用し
てもかまいません．

そのような索引を持ったアーカイブは，ライブラリとのリンクで高速になり，
アーカイブ内での位置によらず，ライブラリ内でのお互いの呼び出し動作を可
能にします．

GNU `ranlib'プログラムは，GNU `ar'のもう一つの形式です．`ranlib'を実行
することは，`ar -s'を実行することと完全に等価です．*Note ar::.



`-v'
`-V'
`--version'
     `ranlib'のバージョンナンバーを表示します．





File: binutils-ja.info, Node: size, Next: strings, Prev: ranlib, Up: Top

size
****



     size [`-A'|`-B'|`--format='COMPATIBILITY]
          [`--help']
          [`-d'|`-o'|`-x'|`--radix='NUMBER]
          [`-t'|`--totals']
          [`--target='BFDNAME] [`-V'|`--version']  
          [OBJFILE...]


GNU `size'ユーティリティは，その引数リスト内の，それぞれの
オブジェクトやアーカイブファイルOBJFILEに対し，セクションのサイズ 
--- と全体のサイズ -- をリストアップします．デフォルトで，それぞれのオ
ブジェクトファイルやそれぞれのアーカイブのモジュールに対し，一行の出力
が生成されます．

OBJFILE... は，調査するオブジェクトファイルです．何も指定されない場合，
ファイル`a.out'が使用されます．



コマンドラインオプションには，以下の意味があります．

`-A'
`-B'
`--format=COMPATIBILITY'
     これらのオプションの一つを使用した場合，System V `size' (`-A'，ま
     たは`--format=sysv'の使用)の出力に似ているGNU `size'の出力，また
     は，Berkeley `size' (`-B'，または`--format=berkeley'の使用)のいず
     れかを選択することが可能です．デフォルトは，Berkeleyのものに似て
     いる一行の書式です．

     以下は，Berkeley(デフォルト)書式の`size'の出力例です．
          $ size --format=Berkeley ranlib size
          text    data    bss     dec     hex     filename
          294880  81920   11592   388392  5ed28   ranlib
          294880  81920   11888   388688  5ee50   size

     これは同じデータですが，System Vの記法を選択して表示されています．

          $ size --format=SysV ranlib size
          ranlib  :
          section         size         addr
          .text         294880         8192       
          .data          81920       303104       
          .bss           11592       385024       
          Total         388392    


          size  :
          section         size         addr
          .text         294880         8192       
          .data          81920       303104       
          .bss           11888       385024       
          Total         388688    

`--help'
     受け入れ可能な引数とオプションの概要を表示します．

`-d'
`-o'
`-x'
`--radix=NUMBER'
     これらのオプションの一つを使用した場合，それぞれのセクションのサ
     イズを，10進数(`-d'または`--radix=10')，8進数(`-o'または
     `--radix=8')，または16進数(`-x'または`--radix=16') で与えられるも
     ののいづれかに制御可能です．`--radix=NUMBER' では，三つの値(8,
     10, 16)のみサポートされます．全体のサイズは常に二つの基数で与えら
     れます．それは，`-d'や`-x'に対する，10進数と16 進数，または`-o'を
     使用した場合，8進数と16進数になります．

`-t'
`--totals'
     リストアップされたすべてのオブジェクトの総数を表示します(Berkeley
     の書式でのリストアップモードのみです)．

`--target=BFDNAME'
     OBJFILEに対するオブジェクトコードのフォーマットをBFDNAMEとして指
     定します．このオプションは不要かもしれません．`size'は自動的に多
     くのフォーマットを認識することが可能です．詳細は，*Note Target
     Selection::.

`-V'
`--version'
     `size'のバージョンナンバーを表示します．





File: binutils-ja.info, Node: strings, Next: strip, Prev: size, Up: Top

strings
*******


     strings [`-afov'] [`-'MIN-LEN]
             [`-n' MIN-LEN] [`--bytes='MIN-LEN]
             [`-t' RADIX] [`--radix='RADIX]
             [`-e' ENCODING] [`--encoding='ENCODING]
             [`-'] [`--all'] [`--print-file-name']
             [`--target='BFDNAME]
             [`--help'] [`--version'] FILE...


それぞれの与えられたFILEに対し，GNU `strings'は，出力可能な文字が最低
四文字(または以下のオプションで与えられた数)並んでいて，それに出力不可
能な文字が続くものの，出力可能な文字を出力します．デフォルトで，オブジェ
クトファイルの，初期化されロードされるセクションから，文字列のみ出力し
ます．それ以外のファイルの形式では，ファイル全体から文字列を出力します．

`strings'は，テキストではないファイルの内容を判断することに，主に役立
ちます．



`-a'
`--all'
`-'
     オブジェクトファイルの初期化されロードされるセクションのみをスキャ
     ンするのではありません．ファイル全体をスキャンします．

`-f'
`--print-file-name'
     それぞれの文字列の前にファイル名を出力します．

`--help'
     プログラムの使用方法の概要を標準出力に出力し終了します．

`-MIN-LEN'
`-n MIN-LEN'
`--bytes=MIN-LEN'
     デフォルトの４文字ではなく，少なくともMIN-LEN文字の長さの文字の列
     を出力します．

`-o'
     `-t o'に似ています．`strings'の他のバージョンには，代わりに`-t d'
     のように`-o'を動作させるものもあります．我々は，両方の互換性を提
     供することができないので，単純にこちらを選択しただけです．

`-t RADIX'
`--radix=RADIX'
     それぞれの文字列の前に，ファイル内部でのオフセットを出力します．
     単一文字の引数を指定した場合，オフセットの基数を指定します -- 8進
     数に対する`o'，16進数に対する`x'，または10進数に対する`d'になりま
     す．

`-e ENCODING'
`--encoding=ENCODING'
     見つかった文字列の文字のエンコードを選択します．ENCODINGに対して利
     用可能な値は以下のとおりです．`s' = シングルバイト文字(ASCII，ISO
     8859等，デフォルトです)，`b' = 16ビットビッグエンディアン，`l'
     = 16ビットリトルエンディアン，`B' = 32ビットビッグエンディアン，
     `L' = 32ビットリトルエンディアン．ワイド文字の文字列を見つけると
     き役に立ちます．

`--target=BFDNAME'
     システムのデフォルトのフォーマット以外のオブジェクトコードのフォー
     マットを指定します．詳細は，*Note Target Selection::.

`-v'
`--version'
     プログラムのバージョンナンバーを標準出力に出力し終了します．





File: binutils-ja.info, Node: strip, Next: c++filt, Prev: strings, Up: Top

strip
*****



     strip [`-F' BFDNAME |`--target='BFDNAME ]
           [`-I' BFDNAME |`--input-target='BFDNAME ]
           [`-O' BFDNAME |`--output-target='BFDNAME ]
           [`-s'|`--strip-all'] [`-S'|`-g'|`-d'|`--strip-debug']
           [`-K' SYMBOLNAME |`--keep-symbol='SYMBOLNAME ]
           [`-N' SYMBOLNAME |`--strip-symbol='SYMBOLNAME ]
           [`-x'|`--discard-all' ] [`-X' |`--discard-locals']
           [`-R' SECTIONNAME |`--remove-section='SECTIONNAME ]
           [`-o' FILE ] [`-p'|`--preserve-dates']
           [`-v' |`--verbose']  [`-V'|`--version'] [`--help']
           OBJFILE...


GNU `strip'は，オブジェクトファイルOBJFILEからシンボルをすべて廃棄しま
す．オブジェクトファイルのリストには，アーカイブを含めてもかまいません．
少なくとも一つのオブジェクトファイルを与える必要があります．

`strip'は，異なる名前に編集されたものを書き出すのではなく，その引数で
指名されたファイルを変更します．



`-F BFDNAME'
`--target=BFDNAME'
     オリジナルのOBJFILEを，オブジェクトコードのフォーマットBFDNAMEを
     用いたファイルとして扱い，同じフォーマットで再書き込みします．詳
     細は，*Note Target Selection::.

`--help'
     `strip'へのオプションの概要を表示し終了します．

`-I BFDNAME	'
`--input-target=BFDNAME'
     オリジナルのOBJFILEを，オブジェクトコードのフォーマットBFDNAMEを
     用いたファイルとして扱います．詳細は，*Note Target Selection::.

`-O BFDNAME'
`--output-target=BFDNAME'
     OBJFILEを，出力フォーマットBFDNAMEのファイルで置換します．詳細は，
     *Note Target Selection::.

`-R SECTIONNAME'
`--remove-section=SECTIONNAME'
     SECTIONNAMEで指名されたすべてのセクションを，出力ファイルから削除
     します．このオプションは一回以上与えてもかまいません．このオプショ
     ンを使用すると，不適切にも出力ファイルを利用不可能にする可能性が
     あることに注意してください．

`-s'
`--strip-all'
     すべてのシンボルを削除します．

`-g'
`-S'
`-d'
`--strip-debug'
     デバッグシンボルのみ削除します．

`--strip-unneeded'
     再配置の処理に不要なすべてのシンボルを削除します．

`-K SYMBOLNAME'
`--keep-symbol=SYMBOLNAME'
     シンボルSYMBOLNAMEのみ，ソースファイルに保存します．このオプショ
     ンは一回以上与えてもかまいません．

`-N SYMBOLNAME'
`--strip-symbol=SYMBOLNAME'
     シンボルSYMBOLNAMEをソースファイルから削除します．このオプション
     は一回以上与えたり，`-K'以外の`strip'オプションと組み合わせたりし
     てもかまいません．

`-o FILE'
     既存のファイルを置換するのではなく，`strip'された出力をFILEに書き
     込みます．この引数が使用されたとき，一つのOBJFILE 引数のみ指定可
     能です．

`-p'
`--preserve-dates'
     ファイルのアクセスと編集の日付を保持します．

`-x'
`--discard-all'
     グローバルでないシンボルを削除します．

`-X'
`--discard-locals'
     コンパイラが生成したローカルシンボルを削除します．(これらは通常，
     `L'または`.'で始まります．)

`-V'
`--version'
     `strip'のバージョンナンバーを表示します．

`-v'
`--verbose'
     冗長な出力です．編集されたすべてのオブジェクトファイルをリストアッ
     プします．アーカイブの場合，`strip -v'はアーカイブのすべてのメン
     バーをリストアップします．





File: binutils-ja.info, Node: c++filt, Next: addr2line, Prev: strip, Up: Top

c++filt
*******



     c++filt [`-_'|`--strip-underscores']
             [`-j'|`--java']
             [`-n'|`--no-strip-underscores']
             [`-s' FORMAT|`--format='FORMAT]
             [`--help']  [`--version']  [SYMBOL...]


C++とJava言語は，関数のオーバーロードを提供し，それは(それぞれ異なる型
のパラメータの受け入れを提供する)同じ名前で複数の関数を書くことが可能
だということを意味します．すべてのC++とJavaの関数名は，低レベルのアセ
ンブリラベルに符号化されます(この処理は"mangling"として知られています．)
`c++filt' (1) (*Note c++filt-Footnotes::)プログラムは，マッピングを反
転します．それは，これらのオーバーロードされた関数を破壊することから，
リンカが守ることができるように，低レベルの名前をユーザレベルの名前に復
号("demangles")します．

入力にあるすべての英数単語(文字，数字，アンダースコア，ドル記号，また
はピリオド)は，ポテンシャルラベルと考えられます．ラベルをC++の名前に復
号する場合，C++の名前は出力で低レベルの名前に置換されます．

個別のシンボルを解読するために`c++filt'を使用することが可能です．

     c++filt SYMBOL

SYMBOL引数が与えられた場合，`c++filt'は，シンボル名を標準入力から読み
込み，demangleされた名前を標準出力に書き出します．すべての結果は，標準
出力に出力されます．



`-_'
`--strip-underscores'
     システムによっては，CとC++のコンパイラが，すべての名前の前にアン
     ダースコアを書き込むものもあります．例えば，Cでの名前`foo'が，低
     レベルでは名前`_foo'になります．このオプションは，最初のアンダー
     スコアを削除します．`c++filt'がデフォルトでアンダースコアを削除す
     るかどうかはターゲットに依存します．

`-j'
`--java'
     demangleされた名前を，Javaの構文を用いて出力します．デフォルトは，
     C++の構文の使用です．

`-n'
`--no-strip-underscores'
     最初のアンダースコアを削除しません．

`-s FORMAT'
`--format=FORMAT'
     GNU `nm'は，異なるC++コンパイラが使用されてmangleしている，三つの
     異なるメソッドを復号することが可能です．このオプションの引数は，
     使用されているメソッドを選択します．

     `gnu'
          GNUコンパイラで使用されるもの(デフォルトメソッド)．
     `lucid'
          Lucidコンパイラで使用されるもの．
     `arm'
          C++ Annotated Reference Manualで指定されるもの．
     `hp'
          HPコンパイラで使用されるもの．
     `edg'
          EDGコンパイラで使用されるもの．
     `gnu-new-abi'
          新しいABIを用いたGNUコンパイラで使用されるもの．

`--help'
     `c++filt'のオプションの概要を出力し終了します．

`--version'
     `c++filt'のバージョンナンバーを出力し終了します．



     *警告:* `c++filt'は，新しいユーティリティで，そのユーザインター
     フェースの詳細は将来のリリースで変更を受けやすくなっています．特
     に，コマンドラインの引数として渡される名前を復号するために，コマ
     ンドラインオプションが，将来要求されるかもしれません．言い換える
     と以下のようになるということです．

          c++filt SYMBOL

     これが，将来のリリースでは，以下のようになるかもしれません．

          c++filt OPTION SYMBOL


File: binutils-ja.info  Node: c++filt-Footnotes, Up: c++filt

(1) MS-DOSは，ファイル名に`+'文字が使用できないので，MS-DOS上での
このプログラムは`cxxfilt'と命名されます．



File: binutils-ja.info, Node: addr2line, Next: nlmconv, Prev: c++filt, Up: Top

addr2line
*********



     addr2line [`-b' BFDNAME|`--target='BFDNAME]
               [`-C'|`--demangle'[=STYLE]]
               [`-e' FILENAME|`--exe='FILENAME]
               [`-f'|`--functions'] [`-s'|`--basename']
               [`-H'|`--help'] [`-V'|`--version']
               [addr addr ...]


`addr2line'は，プログラムアドレスをファイル名と行番号に変換します．ア
ドレスと実行形式が与えられた場合，ファイル名と行番号が与えられたアドレ
スに関連していることを判別するため，それは実行形式内のデバッグ情報を使
用します．

使用する実行形式は，`-e'オプションで指定されます．デフォルトは，ファイ
ル`a.out'です．

`addr2line'には，二つの処理モードがあります．

最初のものは，16進のアドレスがコマンドラインで指定され，`addr2line'は，
それぞれのアドレスに対しファイル名と行番号を表示します．

二番目のものは，`addr2line'が16進のアドレスと標準入力から読み込み，そ
れぞれのアドレスに対し，ファイル名と行番号を標準出力に出力します．この
モードでは，`addr2line'は，動的に選択されたアドレスを変換するパイプと
して使用可能です．

出力の書式は，`FILENAME:LINENO'です．それぞれのアドレスに対するファイ
ル名と行番号は，個別の行に出力されます．`-f'オプションが使用された場合，
それぞれの`FILENAME:LINENO'行に，アドレスに含まれる関数名
`FUNCTIONNAME'が前置されます．

ファイル名と関数名を決定することが不可能な場合，`addr2line'は二つの疑
問符をその場所に出力します．行番号を決定することが不可能な場合，
`addr2line'は，0を出力します．



以下で交互に表示している，オプションの長い形式と短い形式は等価です．

`-b BFDNAME'
`--target=BFDNAME'
     オブジェクトファイルに対するオブジェクトコードをBFDNAMEとして指定
     します．

`-C'
`--demangle[=STYLE]'
     低レベルのシンボル名をユーザレベル名に復号("demangle")します．シ
     ステムによって前置される，すべての最初のアンダースコアを削除する
     他に，これはC++関数名を可読にします．異なるコンパイラでは，mangle
     形式が異なります．追加のdemangle形式の引数は，コンパイラに対する
     適切なdemangle形式を選択するために使用可能です．demangleの情報は，
     *Note c++filt::.

`-e FILENAME'
`--exe=FILENAME'
     変換したいアドレスに対する実行形式の名前を指定します．デフォルト
     ファイルは`a.out'です．

`-f'
`--functions'
     ファイルと行番号の情報と同様に，関数名も表示します．

`-s'
`--basenames'
     それぞれのファイル名のベースのみ表示します．





File: binutils-ja.info, Node: nlmconv, Next: windres, Prev: addr2line, Up: Top

nlmconv
*******

`nlmconv'は，再配置可能なオブジェクトファイルをNetWare Loadable Module
に変換します．


     *警告:* `nlmconv'は，NLMターゲットに対してのみ役に立つので，常に
     バイナリユーティリティの一部として構築されるわけではありません．


     nlmconv [`-I' BFDNAME|`--input-target='BFDNAME]
             [`-O' BFDNAME|`--output-target='BFDNAME]
             [`-T' HEADERFILE|`--header-file='HEADERFILE]
             [`-d'|`--debug'] [`-l' LINKER|`--linker='LINKER]
             [`-h'|`--help'] [`-V'|`--version']
             INFILE OUTFILE


`nlmconv'は，再配置可能な`i386'オブジェクトファイルINFILEをNetWare
Loadable Module OUTFILEに変換し，さらに，NLM ヘッダ情報に対する
HEADERFILEを読み込みます．ヘッダで使用されているNLMコマンドファイル言
語を書くことに関する説明は， Novell, Inc.で利用可能な，NLM Software
Developer's Kit ("NLM SDK")の一部である，`NLM Development and Tools
Overview'の，`linkers'セクションの特定の`NLMLINK'を参照してください．
`nlmconv'は，INFILEを読み込むために，GNU Binary File Descriptorライブ
ラリを使用します．詳細は，*Note BFD: (ld.info)BFD,を参照してください．

`nlmconv'はリンクステップを実行することが可能です．言い換えると，(コマ
ンドラインで一つの入力ファイルを単に指定するのではなく)定義ファイルで
リストアップした場合，入力に対して一つ以上のオブジェクトファイルをリス
トアップすることが可能です．この場合，`nlmconv'はリンカを呼び出します．



`-I BFDNAME'
`--input-target=BFDNAME'
     入力ファイルのオブジェクトフォーマットです．`nlmconv'は，通常与え
     られたファイルのフォーマットを決定することが可能です(そのためデフォ
     ルトは不要です)．詳細は，*Note Target Selection::.

`-O BFDNAME'
`--output-target=BFDNAME'
     出力ファイルのオブジェクトのフォーマットです．`nlmconv'は，出力の
     フォーマットを入力のフォーマットを元に推測し，例えば，`i386'入力
     ファイルに対する出力のフォーマットは，`nlm32-i386'になります．詳
     細は，*Note Target Selection::.

`-T HEADERFILE'
`--header-file=HEADERFILE'
     NLMヘッダ情報のためにHEADERFILEを読み込みます．ヘッダファイルで使
     用されているNLMコマンドファイルの言語を書くときの命令については，
     Novell, Inc. で利用可能なNLM Software Developer's Kitの一部となっ
     ている，`NLM Development and Tools Overview'の`linkers'セクション
     を参照してください．

`-d'
`--debug'
     `nlmconv'が使用しているリンカコマンドラインを(標準エラー出力に) 
     表示します．

`-l LINKER'
`--linker=LINKER'
     すべてのリンクでLINKERを使用します．LINKERは，絶対パス名または相
     対パス名が可能です．

`-h'
`--help'
     使用方法の概要を出力します．

`-V'
`--version'
     `nlmconv'のバージョンナンバーを出力します．





File: binutils-ja.info, Node: windres, Next: dlltool, Prev: nlmconv, Up: Top

windres
*******

`windres'は，Windowsのリソースを操作することに使用可能です．

     *警告:* `windres'は，Windowsターゲットに対してのみ役に立つので，
     常にバイナリユーティリティの一部として構築されるわけではありませ
     ん．


     windres [options] [input-file] [output-file]


`windres'はリソースを入力ファイルから読み込み，それを出力ファイルにコ
ピーします．ファイルは以下の三つの形式のいずれか一つが可能です．

`rc'
     リソースコンパイラで読み込むテキスト形式．

`res'
     リソースコンパイラが生成したバイナリ形式．

`coff'
     COFFオブジェクト，または，実行形式．

これらの形式の差異の正確な記述は，Microsoftのドキュメントで利用可能で
す．

`windres'が`rc'形式から`res'形式に変換するとき，それはWindows Resource
Compilerのように動作します．`windres'が`res'形式から`coff'形式に変換す
るとき，それはWindows `CVTRES'プログラムのように動作します．

`windres'が`rc'ファイルを生成するとき，出力は似ていますが，入力で期待
される形式と同一ではありません．入力`rc'ファイルが外部のファイル名を参
照するとき，出力`rc'ファイルは，その代わりにファイルの内容を含めます．

入力や出力の形式が指定されていない場合，`windres'はファイル名，または，
入力ファイルのファイルの内容を基に推測します．`.rc'の拡張子を持つファ
イルは，`rc'ファイルとして扱われ，`.res'の拡張子を持つファイルは，
`res'ファイルとして扱われ，そして，`.o'や`.exe'の拡張子を持つファイル
は，`coff'ファイルとして扱われます．

出力ファイルが指定されない場合，`windres'は，`rc'形式内のリソースを標
準出力に出力します．

`rc'を書き，COFFオブジェクトファイルに変換するために`windres'を使用し，
COFFファイルをアプリケーションにリンクするのが通常の使用方法です．これ
は，`rc'ファイルのリソースの記述を，Windowsで利用可能にします．



`-i FILENAME'
`--input FILENAME'
     入力ファイル名です．このオプションが使用されていない場合，
     `windres'は，最初の非オプションの引数を入力ファイル名として使用し
     ます．非オプションの引数がない場合，`windres'は，標準入力から読み
     込みます．`windres'は，COFFファイルを標準入力から読み込むことは不
     可能です．

`-o FILENAME'
`--output FILENAME'
     出力ファイル名です．このオプションが使用されない場合，`windres' 
     は，入力ファイル名として使用した後の，最初の非オプションの引数を
     出力ファイル名として使用します．非オプションの引数がない場合，
     `windres' は，標準出力に書き出します．`windres'は，COFFファイルを
     標準出力に書き出すことは不可能です．

`-I FORMAT'
`--input-format FORMAT'
     読み込む入力の形式です．FORMATは，`res'，`rc'，または`coff'が可能
     です．入力形式が指定されない場合，`windres'は，上記のように推測し
     ます．

`-O FORMAT'
`--output-format FORMAT'
     生成する出力の形式です．FORMATは，`res'，`rc'，または`coff'が可能
     です．出力形式が指定されない場合，`windres'は，上記のように推測し
     ます．

`-F TARGET'
`--target TARGET'
     入出力としてのCOFFに対して使用するBFDフォーマットを指定します．こ
     れは，BFDターゲット名です．サポートされているターゲットのリストを
     見るために，`--help'オプションが使用可能です．通常，`windres'はデ
     フォルトのフォーマットを使用し，それは`--help'オプションでリスト
     アップされる最初のものです．*Note Target Selection::.

`--preprocessor PROGRAM'
     `windres'が`rc'ファイルを読み込むとき，それは最初にCプリプロセッ
     サを通じて実行されます．このオプションは，使用するプリプロセッサ
     を指定するために利用してもかまわず，それには引数を前置するものを
     含みます．デフォルトのプリプロセッサ引数は，`gcc -E -xc-header
     -DRC_INVOKED' です．

`--include-dir DIRECTORY'
     `rc'ファイルを読み込むとき使用する，インクルードディレクトリを指
     定します．`windres'は，これを`-I'オプションとしてプリプロセッサに
     渡します．`windres'は，`rc'ファイルで指名されているファイルを探す
     とき，このディレクトリの検索も行います．

`-D TARGET'
`--define SYM[=VAL]'
     `rc'ファイルを読み込むとき，プリプロセッサに渡す`-D'オプションを
     指定します．

`-v'
     冗長モードを可能にします．これは，プリプロセッサが指定されていな
     い場合，そのプリプロセッサを報告します．

`--language VAL'
     `rc'ファイルを読み込むとき使用する，デフォルトの言語を指定します．
     VALは16進数の言語コードにする必要があります．下位8ビットは言語で，
     上位8ビットはサブ言語です．

`--use-temp-file'
     プリプロセッサの出力を読み込むためpopenを使用する代わりに，一時ファ
     イルを使用します．popenの実装にバグの多いホストの場合，このオプショ
     ンを使用してください(例えば，ある非英語バージョンのWindows95と
     Windows98は，出力がコンソールでないところでは，バグの多いpopenと
     なっていることが知られています)．

`--no-use-temp-file'
     プリプロセッサの出力を読み込むため，一時ファイルではなくpopenを使
     用します．これはデフォルトの動作です．

`--help'
     使用方法の概要を出力します．

`--version'
     `windres'のバージョンナンバーを出力します．

`--yydebug'
     `windres'が`YYDEBUG'を`1'と定義してコンパイルされる場合，パーサデ
     バッグを開始します．





File: binutils-ja.info, Node: dlltool, Next: readelf, Prev: windres, Up: Top

DLLを構築し使用するのに必要なファイルの作成
*******************************************

ダイナミックリンクライブラリ(DLL)を構築し使用するのに必要なファイルを
作成するために，`dlltool'は使用されます．

     に立つので，常にバイナリユーティリティの一部として構築されるわけ
     ではありません．


     dlltool [`-d'|`--input-def' DEF-FILE-NAME]
             [`-b'|`--base-file' BASE-FILE-NAME]
             [`-e'|`--output-exp' EXPORTS-FILE-NAME]
             [`-z'|`--output-def' DEF-FILE-NAME]
             [`-l'|`--output-lib' LIBRARY-FILE-NAME]        
             [`--export-all-symbols'] [`--no-export-all-symbols']
             [`--exclude-symbols' LIST]
             [`--no-default-excludes']
             [`-S'|`--as' PATH-TO-ASSEMBLER] [`-f'|`--as-flags' OPTIONS]
             [`-D'|`--dllname' NAME] [`-m'|`--machine' MACHINE]
             [`-a'|`--add-indirect'] [`-U'|`--add-underscore'] [`-k'|`--kill-at']
             [`-A'|`--add-stdcall-alias']
             [`-x'|`--no-idata4'] [`-c'|`--no-idata5'] [`-i'|`--interwork']
             [`-n'|`--nodelete'] [`-v'|`--verbose'] 
             [`-h'|`--help'] [`-V'|`--version']
             [object-file ...]


`dlltool'は，その入力を読み込み，それは，コマンドラインで指定されたオ
ブジェクトファイルと，`-d'と`-b'オプションから成り立ちます．そして，こ
れらの入力を処理し，`-e'オプションが指定されている場合は，エクスポート
ファイルを作成します．`-l'オプションが指定されている場合は，ライブラリ
ファイルを作成し，`-z'オプションが指定されている場合は，defファイルを
作成します．`-e'，`-l'，そして`-z'オプションのいずれか，またはすべてを，
`dlltool' の呼び出しに配置することが可能です．

DLLを作成しているとき，DLLのソースファイルとともに，それは三つの他のファ
イルが必要です．`dlltool'は，これらのファイルの作成を手助けすることが
可能です．

最初のファイルは，DLLからエクスポートされる関数や，DLLがインポートする
関数等を指定する，`.def'ファイルです．これはテキストファイルで，手動で
作成したり，作成するために`dlltool'を`-z'オプションを用いて使用したり
することが可能です．この場合，`dlltool'は，エクスポートされるように特
別に印の付けられたこれらの関数を探しながら，コマンドラインで指定された
オブジェクトファイルを走査し，作成する`.def'ファイルにそれらのエントリー
を書き出します．

DLLからエクスポートされるように関数に印を付けるため，オブジェクトファ
イルの`.drectve'セクションに，`-export:<name_of_function>'エントリーが
必要です．これは，Cでasm()演算子を使用することで可能となります．

       asm (".section .drectve");  
       asm (".ascii \"-export:my_func\"");

       int my_func (void) { ... }

DLLの作成に必要とされる2番目のファイルは，エクスポートファイルです．こ
のファイルは，DLL本体を作成し，DLLと外部世界の間のインターフェースを取
り扱うオブジェクトファイルとリンクされます．これはバイナリファイルで，
`dlltool'が`.def'ファイルの作成または読み込みをしているときに，それに
`-e'オプションを与えると作成されます．

DLLの作成に必要とされる三番目のファイルは，DLL内の関数にアクセスするた
めにプログラムとリンクするライブラリファイルです．このファイルは，
`dlltool'が`.def'ファイルの作成または読み込みをしている時に，それに
`-l'オプションを与えると作成されます．

`dlltool'は，手動でライブラリファイルを構築しますが，それは，アセンブ
ラ宣言を含む一時ファイルを作成し，それをアセンブルすることで，エクスポー
トファイルを構築します．`-S'コマンドラインオプションは，`dlltool'が使
用するアセンブラへのパスを指定するため使用可能で，`-f'オプションは，そ
のアセンブラに特別なフラグを渡すために使用可能です．`-n'は，`dlltool'
がこれらの一時的なアセンブラファイルを終了後に削除することを防ぐために
使用可能で，`-n'が二回指定されている場合は，`dlltool'がライブラリを構
築するために使用した，一時的なオブジェクトファイルが削除されることを防
ぎます．

ソースファイル`dll.c'からDLLを作成し，そのDLLを使用しているプログラム
も(`program.o'という名前のオブジェクトファイルから)作成している例は以
下のようになります．

       gcc -c dll.c
       dlltool -e exports.o -l dll.lib dll.o
       gcc dll.o exports.o -o dll.dll
       gcc program.o dll.lib -o program



コマンドラインオプションには以下の意味があります．


`-d FILENAME'
`--input-def FILENAME'
     読み込み，処理する`.def'ファイルの名前を指定します．

`-b FILENAME'
`--base-file FILENAME'
     読み込み，処理するベースファイルの名前を指定します．このファイル
     の内容に，`dlltool'で生成されるエクスポートファイルの，再配置のセ
     クションが追加されます．

`-e FILENAME'
`--output-exp FILENAME'
     `dlltool'で作成される，`.def'ファイルの名前を指定します．

`-z FILENAME'
`--output-def FILENAME'
     `dlltool'で作成される，`.def'ファイルの名前を指定します．

`-l FILENAME'
`--output-lib FILENAME'
     `dlltool'で作成される，ライブラリファイルの名前を指定します．

`--export-all-symbols'
     入力ファイル内のエクスポートされるシンボルとして見つかったものは，
     すべて大域的にweakとして定義されているシンボルとして扱います．こ
     れらは，デフォルトでエクスポートされないシンボルの小さなリストで
     す．`--no-default-excludes'オプションを参照してください．
     `--exclude-symbols'オプションを使用して，エクスポートされないシン
     ボルのリストを追加してもかまいません．

`--no-export-all-symbols'
     入力の`.def'ファイルや入力オブジェクトファイルの`.drectve'セクショ
     ンで，明示的にリストアップされているシンボルのみエクスポートしま
     す．`.drectve'は，ソースコード内の`dllexport'属性で作成されます．

`--exclude-symbols LIST'
     LIST内のシンボルをエクスポートしません．これは，カンマまたはコロ
     ン文字で分けられた，シンボル名のリストです．シンボル名に，アンダー
     スコアの前置を含めることはできません．これは，
     `--export-all-symbols'が使用されているときのみ意味があります．

`--no-default-excludes'
     `--export-all-symbols'が使用されているとき，それはデフォルトで，
     ある特別なシンボルをエクスポートすることを避けます．現在のエクス
     ポートを避けるリストは，`DllMain@12', `DllEntryPoint@0',
     `impure_ptr'です．これらの特別なシンボルを進んでエクスポートする
     ために，`--no-default-excludes'オプションを使用してもかまいません．
     これは，`--export-all-symbols'が使用されているときのみ意味があり
     ます．

`-S PATH'
`--as PATH'
     エクスポートファイルを作成するために使用するアセンブラの，ファイ
     ル名を含む，パスを指定します．

`-f OPTIONS'
`--as-flags OPTIONS'
     エクスポートファイルを構築しているときアセンブラに渡す，あらゆる
     特別なコマンドラインオプションを指定します．このオプションは，
     `-S'が指定されていないかのように動作します．このオプションは一つ
     の引数のみ渡し，コマンドラインに一回以上出現する場合，最後に出現
     したものを，前に出現したものに優先させます．そのため，複数のオプ
     ションをアセンブラに渡す必要がある場合は，二重引用符で囲む必要が
     あります．

`-D NAME'
`--dll-name NAME'
     `-e'オプションが使用されてるとき，DLLの名前として`.def'ファイルに
     保存する名前を指定します．このオプションがない場合，`-e'オプショ
     ンで与えられるファイル名は，DLLの名前として使用されます．

`-m MACHINE'
`-machine MACHINE'
     ライブラリファイルが構築されるマシンの形式を指定します．`dlltool'
     には，構築のされ方に依存するデフォルト形式がありますが，このオプ
     ションで，それに優先させることが可能です．これは通常，ARMプロセッ
     サに対するDLLを作成するときのみ役に立ち，DLLの内容は，実際にThumb
     命令を使用して符号化されます．

`-a'
`--add-indirect'
     `dlltool'がエクスポートファイルを作成しているとき，エクスポート関
     数がインポートライブラリを使用しないで参照できるように，セクショ
     ンを加えることを指定します．たとえ，それが地獄を意味しようとも！

`-U'
`--add-underscore'
     `dlltool'エクスポートファイルを作成しているとき，エクスポート関数
     の名前にアンダースコアを前置することを指定します．

`-k'
`--kill-at'
     `dlltool'エクスポートファイルを作成しているとき，文字列`@
     <number>'を追加しないことを指定します．これらの数字は，序数と呼ば
     れ，DLL では関数にアクセスする一つの方法を表示し，それ以外では名
     前で表示します．

`-A'
`--add-stdcall-alias'
     `dlltool'がエクスポートファイルを作成しているとき，シンボルに`@
     <number>'を追加したものを，`@ <number>'なしでstdcallシンボルの別
     名を加えることを指定します．

`-x'
`--no-idata4'
     `dlltool'エクスポートファイルとライブラリファイルを作成していると
     き，`.idata4'セクションを削除することを指定します．これは，あるオ
     ペレーティングシステムとの互換性のためです．

`-c'
`--no-idata5'
     `dlltool'エクスポートファイルとライブラリファイルを作成していると
     き，`.idata5'セクションを削除することを指定します．これは，あるオ
     ペレーティングシステムとの互換性のためです．

`-i'
`--interwork'
     `dlltool'が，生成しているライブラリファイルとエクスポートファイル
     内のオブジェクトに，ARMとThumb間での相互動作をサポートするように
     印を付けることを指定します．

`-n'
`--nodelete'
     `dlltool'は，エクスポートファイルを作成するために使用した一時的な
     アセンブラファイルを保存します．このオプションが繰り返される場合，
     `dlltool'は，ライブラリを作成するために使用する一時的なオブジェク
     トファイルも保存します．

`-v'
`--verbose'
     `dlltool'は，行っていることを記述します．

`-h'
`--help'
     コマンドラインオプションのリストを表示し終了します．

`-V'
`--version'
     `dlltool'のバージョンナンバーを表示し終了します．






File: binutils-ja.info, Node: readelf, Next: Selecting The Target System, Prev: dlltool, Up: Top

readelf
*******



     readelf [`-a'|`--all'] 
             [`-h'|`--file-header']
             [`-l'|`--program-headers'|`--segments']
             [`-S'|`--section-headers'|`--sections']
             [`-e'|`--headers']
             [`-s'|`--syms'|`--symbols']
             [`-n'|`--notes']
             [`-r'|`--relocs']
             [`-u'|`--unwind']
             [`-d'|`--dynamic']
             [`-V'|`--version-info']
             [`-D'|`--use-dynamic']
             [`-x' <number>|`--hex-dump='<number>]
             [`-w[liaprmfFso]'|`--debug-dump'[=line,=info,=abbrev,=pubnames,=ranges,=macro,=frames,=str,=loc]]
             [`-histogram']
             [`-v'|`--version']
             [`-W'|`--wide']
             [`-H'|`--help']
             ELFFILE...


`readelf'は，一つ以上のELFフォーマットのオブジェクトファイルの情報を表
示します．オプションで表示する特定の情報を制御します．

ELFFILE... は調査するオブジェクトファイルです．現在は，`readelf'は，アー
カイブの調査のサポートも，64ビットELFファイルのサポートもありません．



ここで交互に表示されている，オプションの長い形式と短い形式は等価です．
`-v'または`-H'の他に，少なくとも一つのオプションを与える必要があります．

`-a'
`--all'
     `--file-header'，`--program-headers'，`--sections'，
     `--symbols'，`--relocs'，`--dynamic'，
     `--notes'，そして`--version-info'を指定することと等価です．

`-h'
`--file-header'
     ファイルの最初のELFヘッダ内に含まれる情報を表示します．

`-l'
`--program-headers'
`--segments'
     ファイルのセグメントヘッダ内に含まれる情報を，存在する場合は表示
     します．

`-S'
`--sections'
`--section-headers'
     ファイルのセクションヘッダ内に含まれる情報を，存在する場合は表示
     します．

`-s'
`--symbols'
`--syms'
     ファイルのシンボルテーブルセクション内のエントリーを，存在する場
     合は表示します．

`-e'
`--headers'
     ファイルのすべてのヘッダを表示します．`-h -l -S'と等価です．

`-n'
`--notes'
     NOTEセグメントの内容を，存在する場合は表示します．

`-r'
`--relocs'
     ファイルの再配置のセクションの内容を，存在する場合は表示します．

`-u'
`--unwind'
     ファイルのunwindセクションの内容が存在する場合は表示します．IA64
     ELF ファイルのunwindセクションのみ，現在はサポートされています．

`-d'
`--dynamic'
     ファイルの動的セクションの内容を，存在する場合は表示します．

`-V'
`--version-info'
     ファイルのバージョンセクションの内容を，存在する場合は表示します．

`-D'
`--use-dynamic'
     シンボルを表示しているとき，`readelf'はこのオプションで，ファイル
     のシンボルセクションではなく，動的セクションのシンボルテーブルを
     使用します．

`-x <number>'
`--hex-dump=<number>'
     16進のダンプとして示されているセクションの内容を表示します．

`-w[liaprmfFso]'
`--debug-dump[=line,=info,=abbrev,=pubnames,=ranges,=macro,=frames,=str,=loc]'
     ファイルのデバッグセクションの内容を，存在する場合は表示します．
     オプション文字や単語の一つがスイッチに続く場合，これらで指定され
     たセクションで見つかるデータのみダンプされます．

`--histogram'
     シンボルテーブルの内容を表示するとき，バケットリスト長のヒストグ
     ラムを表示します．

`-v'
`--version'
     `readelf'のバージョンナンバーを表示します．

`-W'
`--wide'
     出力行を80列に揃えて改行しません．`readelf'はデフォルトで，64ビッ
     トのELFファイルに対し，セクションヘッダとセグメントを80列に揃うよ
     うに改行します．このオプションで，`readelf'はそれぞれのセクション
     ヘッダを各々のセグメントを単一の行出力し，80列以上の幅の端末でよ
     り読み易くなります．

`-H'
`--help'
     `readelf'が理解するコマンドラインオプションを表示します．






File: binutils-ja.info, Node: Selecting The Target System, Next: Reporting Bugs, Prev: readelf, Up: Top

ターゲットシステムの選択
************************

ターゲットシステムの三つの側面を，GNUバイナリファイルユーティリティに，
それぞれ異なる方法で指定することが可能です．

   * ターゲット

   * アーキテクチャ

   * リンカエミュレーション(リンカのみ適用されます)

以下の概要では，変数を指定する方法のリストは，優先順位が下がる順序となっ
ています．方法は，最初のものがそれ以降のものに優先するようにリストアッ
プされています．

有効な値をリストアップするコマンドは，実行しているプログラムに設定され
ている値のみリストアップします．それらが`--enable-targets=all'で設定さ
れている場合，ほとんどの利用可能なコマンドはリストアップされますが，い
くつかはそうなりません．ターゲットには"native"(ターゲットシステムと同
じ形式のホスト)に設定することしかできないものもあるので，すべてのもの
が一度に設定可能なわけではありません．

* Menu:

* Target Selection::            
* Architecture Selection::      
* Linker Emulation Selection::  



File: binutils-ja.info, Node: Target Selection, Next: Architecture Selection, Prev: Selecting The Target System, Up: Selecting The Target System

ターゲットの選択
================

"ターゲット(target)"とはオブジェクトファイルのフォーマットです．与えら
れたターゲットは，複数のアーキテクチャでサポートされるかもしれません
(*Note Architecture Selection::)．ターゲットの選択は，オペレーティング
システムやアーキテクチャによっても，変化があるかもしれません．

有効なターゲットの値をリストアップするコマンドは，`objdump -i'です(出
力の最初の列は，関連した情報を含みます)．

サンプルの値は以下のとおりです．`a.out-hp300bsd'，`ecoff-littlemips'，
`a.out-sunos-big'．

三項目の設定を使用してターゲットを指定することも可能です．これは，ター
ゲットを指定するために`configure'に渡す名前と同種です．三項目の設定を
引数として使用するとき，それを完全に標準のものにする必要があります．ソー
スに含まれるシェルスクリプト`config.sub'を実行することで，三項目の標準
的なバージョンを知ることが可能です．

サンプルの値は以下のとおりです．`m68k-hp-bsd'，`mips-dec-ultrix'，
`sparc-sun-sunos'．


`objdump'のターゲット
---------------------

指定方法：

  1. コマンドラインオプション：`-b'または`--target'

  2. 環境変数`GNUTARGET'

  3. 入力ファイルから推測


`objcopy'と`strip'の入力ターゲット
----------------------------------

指定方法：

  1. コマンドラインオプション：`-I'または`--input-target'，もしくは，
     `-F'または`--target'

  2. 環境変数`GNUTARGET'

  3. 入力ファイルから推測


`objcopy'と`strip'の出力ターゲット
----------------------------------

指定方法：

  1. コマンドラインオプション：`-O'または`--output-target'，もしくは，
     `-F'または`--target'

  2. 入力ターゲット(上記の"`objcopy'と`strip'の入力ターゲット"を参照し
     てください)

  3. 環境変数`GNUTARGET'

  4. 入力ファイルから推測


`nm'，`size'，そして`strings'のターゲット
-----------------------------------------

指定方法：

  1. コマンドラインオプション：`--target'

  2. 環境変数`GNUTARGET'

  3. 入力ファイルから推測


リンカ入力ターゲット
--------------------

指定方法：

  1. コマンドラインオプション：`-b'または`--format' (*Note Options:
     (ld.info)Options.)

  2. スクリプトコマンド`TARGET' (*Note Format Commands:
     (ld.info)Format Commands.)

  3. 環境変数`GNUTARGET' (*Note Environment: (ld.info)Environment.)

  4. リンカエミュレーションで選択されたデフォルトターゲット (*Note
     Linker Emulation Selection::)


リンカ出力ターゲット
--------------------

指定方法：

  1. コマンドラインオプション：`-oformat' (*Note Options:
     (ld.info)Options.)

  2. スクリプトコマンド`OUTPUT_FORMAT' (*Note Format Commands:
     (ld.info)Format Commands.)

  3. リンカ入力ターゲット(上記の"リンカ入力ターゲット"を参照してくださ
     い)



File: binutils-ja.info, Node: Architecture Selection, Next: Linker Emulation Selection, Prev: Target Selection, Up: Selecting The Target System

アーキテクチャの選択
====================

"アーキテクチャ(architecture)"は，オブジェクトファイルを実行するCPUの
型式です．その名前にはコロンを含めてもかまわず，それは特定のCPUとプロ
セッサファミリーの名前を分けます．

有効なアーキテクチャの値をリストアップするコマンドは，`objdump -i' で
す(二番目のコロンは，関連する情報を含みます)．

サンプルの値です．`m68k:68020'，`mips:3000'，`sparc'．


`objdump'のアーキテクチャ
-------------------------

指定方法：

  1. コマンドラインオプション：`-m'または`--architecture'

  2. 入力ファイルから推測


`objcopy'，`nm'，`size'，`strings'のアーキテクチャ
--------------------------------------------------

指定方法：

  1. 入力ファイルから推測


リンカの入力のアーキテクチャ
----------------------------

指定方法：

  1. 入力ファイルから推測


リンカの出力のアーキテクチャ
----------------------------

指定方法：

  1. スクリプトコマンド`OUTPUT_ARCH' (*Note Miscellaneous Commands:
     (ld.info)Miscellaneous Commands.)

  2. リンカの出力ターゲットのデフォルトアーキテクチャ(*Note Target
     Selection::)



File: binutils-ja.info, Node: Linker Emulation Selection, Prev: Architecture Selection, Up: Selecting The Target System

リンカエミュレーションの選択
============================

リンカ"エミュレーション(emulation)"は，リンカの"個性"で，それはターゲッ
トシステムのそれ以外の側面に対するリンカのデフォルト値を与えます．特に
以下から成り立ちます．

   * リンカスクリプト

   * ターゲット

   * いくつかのターゲットが要求する特別なことを行うために，リンクプロ
     セスの特定のステージで実行されるいくつかの"フック"関数．

有効なリンカエミュレーションの値をリストアップするコマンドは，`ld
-V'です．

サンプルの値は以下のとおりです．`hp300bsd'，`mipslit'，`sun4'．

指定方法：

  1. コマンドラインオプション：`-m' (*Note Options: (ld.info)Options.)

  2. 環境変数`LDEMULATION'

  3. `Makefile'でコンパイル時に組み込まれた`DEFAULT_EMULATION'で，それ
     は`config/TARGET.mt'の`EMUL'に由来する．



File: binutils-ja.info, Node: Reporting Bugs, Next: GNU Free Documentation License, Prev: Selecting The Target System, Up: Top

バグの報告
**********

バグの報告は，バイナリユーティリティを確実にする上で重要な役割を果たし
ます．

バグを報告することで，問題の解決をもたらすかもしれませんが，そうでない
かもしれません．しかし，いずれにせよ，バグの報告の主な機能は，バイナリ
ユーティリティの次のバージョンの仕事をより良くすることで，全てのコミュ
ニティに役立つことです．バグの報告は，管理者に対する貢献になります．

バグの報告を目的に役立つようにするため，バグの修正が可能となるような情
報を含める必要があります．

* Menu:

* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs



File: binutils-ja.info, Node: Bug Criteria, Next: Bug Reporting, Prev: Reporting Bugs, Up: Reporting Bugs

バグを見つけましたか？
======================

バグを見つけたかどうか確実でない場合，ここに指針がいくつかあります．

   * バイナリユーティリティが，入力によらず，致命的なシグナルを得た場
     合，それはバグです．信頼できるユーティリティは決して壊れません．

   * バイナリユーティリティが有効な入力に対しエラーメッセージを生成し
     た場合，それはバグです．

   * バイナリユーティリティの経験豊かなユーザの場合，改良のための提案
     はいつでも歓迎します．



File: binutils-ja.info, Node: Bug Reporting, Prev: Bug Criteria, Up: Reporting Bugs

バグの報告の方法
================

多くの企業と個人が，GNU製品に対してサポートを提供しています．サポート
組織からバイナリユーティリティを得ている場合，われわれは，その組織に最
初に連絡するように勧めます．

GNU Emacs配布物のファイル`etc/SERVICE'で，サポートしている多くの会社と
個人へ連絡する情報を見つけることが可能です．

いずれにせよ，我々は，バイナリユーティリティに対するバグの報告を
`bug-binutils@gnu.org'にも送ることを勧めます．

バグの報告の有効な基本原理は以下のとおりです．*すべての事実を報告する*．
事実を述べるべきか削除すべきかよく分からない場合，それを述べてください！

人々はよく，問題を発生させるものを知っていて，重要でない詳細もあると思
うため，事実を省略します．このため，使用したファイル名は重要でないと考
えたとします．さて，おそらくそうでしょうが，確実ではありません．おそら
くバグは，パス名がメモリに保存されている場所から取り出すために生じる，
偶然のメモリ参照です．おそらく，パス名が異なっている場合，その場所の内
容は，バグにもかかわらず正しいことを行うユーティリティを馬鹿にするでしょ
う．安全に動作するようにし，特定の完全な例を与えてください．それは，最
も簡単に行うことができ，最も役に立ちます．

バグの報告の目的が，新しいものの場合は，バグの修正を可能にすることだと
いうことを覚えておいてください．そのため，以前にバグが報告されていない
ことを常に前提にして，バグの報告を書いてください．

ときどき，概略だけのわずかな事実を与え，"これは報告すべきですか？ 
(Does this ring a bell?)と尋ねる人がいます．これらのバグの報告は役に立
たず，正しくバグの報告をするよう送付者に小言を言うために，*それに対す
る返答を廃棄するように*ということを，我々は全員に勧めます．

バグの修正を可能とするため，これらすべてのものを含めるべきです．

   * ユーティリティのバージョン．それぞれのバージョンは，`--version'引
     数を用いて開始した場合，それを報告します．

     これがなければ，我々はバイナリユーティリティの現在のバージョンに
     バグを探す場所があるかどうか分かりません．

   * `BFD'ライブラリを作るために与えたパッチを含む，ソースに適用したあ
     らゆるパッチ．

   * 使用しているマシンの形式と，オペレーティングシステム名とバージョ
     ンナンバー．

   * ユーティリティをコンパイルするとき使用したコンパイラ(とバージョン)
     -- 例えば，"`gcc-2.7'"．

   * バグを観測するためにユーティリティに与えたコマンド引数．重要なも
     のを省略しないことを保証するため，すべてをリストアップしてくださ
     い．Makefile(またはmakeの出力)のコピーで十分です．

     我々が引数を推測しようとした場合，おそらく間違ったものを推測し，
     バグに遭遇しない可能性があります．

   * 完全な入力ファイルまたは入力ファイルの組で，実際のオブジェクトファ
     イルを送ることは，最も役に立ち，バグがあればuuencodeしてください．
     ユーティリティがオブジェクトファイルやファイルを読み込んでいる場
     合，それをメールシステムに通過させる場合必要です．
     `bug-binutils@gnu.org'はメーリングリストなので，非常に大きなファ
     イルをそこに送ることは避けるよう注意してください．ファイルを
     anonymous FTPで利用可能にするとOKです．

     ソースファイルがGNUプログラム(例えば，`gcc'，`gas'，そして/または，
     GNU `ld')を使用して生成されたことが明らかな場合，オブジェクトファ
     イルよりソースファイルを送ることでOKです．この場合，`gcc'や，それ
     らオブジェクトファイルを生成するために使用したあらゆるもののバー
     ジョンを正確に確実に伝えてください．`gcc'や，それらあらゆるものの
     コンフィグレーションの方法も伝えてください．

   * 適当でないと確信することになった動作の記述．例えば，"致命的なシグ
     ナルを得た"．

     もちろん，バグはユーティリティが致命的なシグナルを得た場合，我々
     はきっとそこに注目します．しかし，バグが不適切な出力の場合，我々
     は，明らかに間違っていない限り注目しないかもしれません．我々が間
     違う機会を与えない方がよいでしょう．

     遭遇した問題が致命的なシグナルの場合でさえ，それを明確に伝えるべ
     きです．ユーティリティのコピーが同期化されていない，または，シス
     テムのCライブラリのバグに遭遇したといった，おそらく何か変なことが
     生じています．(それは発生したのです！) コピーは壊れていて，我々の
     はそうでないかもしれません．壊れることを期待していると我々に告げ，
     我々が壊すことに失敗した場合，我々にバグは発生しないことを知るで
     しょう．壊れることを期待していると我々に告げない場合，我々は自分
     達の観測から全く結論が得られないでしょう．

   * ソースの変更を提案したい場合，`-u'，`-c'，または`-p'オプションを
     用いた`diff'で生成したような，コンテクストのdiffを我々に送ってく
     ださい．古いファイルから新しいファイルへのdiffを，常に送ってくだ
     さい．`ld'のソースについて何か議論したい場合，行番号ではなくコン
     テクストで参照してください．

     我々の開発ソース内の行番号は，あなた方のソースと一致しないでしょ
     う．行番号は我々に全く情報をもたらしません．

不要なものは以下のものです．

   * バグの回りの説明．

     バグに遭遇した人は，バグを無くす入力ファイルへの変更と，効果がな
     い変更を調査するのに多くの時間を費やすことが多いです．

     我々がバグを見つける方法は，単純な例をブレークポイントを用いたデ
     バッガで実行することで，それは一連の例から推測することではないの
     で，これは役に立たないことが多いです．我々は，他のことをすること
     を勧めます．

     もちろん，報告するためのオリジナルの例*ではなく*，それより簡単な
     例が見つかった場合，それはとても役立ちます．出力ファイルのエラー
     は，見つけるのがより簡単，デバッガの実行に余り時間がかからない，
     等々です．

     しかし，簡略化は重要ではありません．こうしたくない場合，いい加減
     にバグを報告し，使用したテストケースを全て我々に送ってください．

   * バグに対するパッチ．

     バグに対するパッチは，それが良いものであれば我々は助かります．し
     かし，テストケースのような，我々全員がパッチを必要だと推測するの
     に必要な情報を省略しないでください．我々は，パッチに関する問題が
     分かり，別の方法で問題を修正することに決めるかもしれませんし，全
     く理解できないかもしれません．

     バイナリユーティリティと同じくらい複雑なプログラムを用いた場合，
     コードを通じて，プログラムに特定の手順をたどらせる例を構成するこ
     とは，とても難しいことです．例を我々に送らない場合，我々はそれを
     構成することができないので，我々はバグが修正されたかどうか検証す
     ることができません．

     そして，あなたが修正しようとしたバグや，パッチの改良点を我々が理
     解できない場合や，我々はそれをインストールしないでしょう．テスト
     ケースは我々の理解を助けます．

   * バグやそれが依存するものに関する推測．

     そのような推測は，通常正しくありません．事実を見つけるために最初
     にデバッガを使用しなければ，我々でも正しく推測できません．



File: binutils-ja.info, Node: GNU Free Documentation License, Next: Index, Prev: Reporting Bugs, Up: Top

GNU Free Documentation License
******************************

                GNU Free Documentation License
                
                   Version 1.1, March 2000

 Copyright (C) 2000 Free Software Foundation, Inc.  59 Temple Place,
Suite 330, Boston, MA 02111-1307 USA
     
 Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (For example, if the Document
is in part a textbook of mathematics, a Secondary Section may not
explain any mathematics.)  The relationship could be a matter of
historical connection with the subject or with related matters, or of
legal, commercial, philosophical, ethical or political position
regarding them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML designed for human modification.  Opaque formats include
PostScript, PDF, proprietary formats that can be read and edited only
by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML produced by some word processors for output
purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.


2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no
other conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must
enclose the copies in covers that carry, clearly and legibly, all
these Cover Texts: Front-Cover Texts on the front cover, and
Back-Cover Texts on the back cover.  Both covers must also clearly and
legibly identify you as the publisher of these copies.  The front
cover must present the full title with all words of the title equally
prominent and visible.  You may add other material on the covers in
addition.  Copying with changes limited to the covers, as long as they
preserve the title of the Document and satisfy these conditions, can
be treated as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions (which
should, if there were any, be listed in the History section of the
Document).  You may use the same title as a previous version if the
original publisher of that version gives permission.  B. List on the
Title Page, as authors, one or more persons or entities responsible
for authorship of the modifications in the Modified Version, together
with at least five of the principal authors of the Document (all of
its principal authors, if it has less than five).  C. State on the
Title page the name of the publisher of the Modified Version, as the
publisher.  D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications adjacent
to the other copyright notices.  F. Include, immediately after the
copyright notices, a license notice giving the public permission to
use the Modified Version under the terms of this License, in the form
shown in the Addendum below.  G. Preserve in that license notice the
full lists of Invariant Sections and required Cover Texts given in the
Document's license notice.  H. Include an unaltered copy of this
License.  I. Preserve the section entitled "History", and its title,
and add to it an item stating at least the title, year, new authors,
and publisher of the Modified Version as given on the Title Page.  If
there is no section entitled "History" in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.  J. Preserve the network
location, if any, given in the Document for public access to a
Transparent copy of the Document, and likewise the network locations
given in the Document for previous versions it was based on.  These
may be placed in the "History" section.  You may omit a network
location for a work that was published at least four years before the
Document itself, or if the original publisher of the version it refers
to gives permission.  K. In any section entitled "Acknowledgements" or
"Dedications", preserve the section's title, and preserve in the
section all the substance and tone of each of the contributor
acknowledgements and/or dedications given therein.  L. Preserve all
the Invariant Sections of the Document, unaltered in their text and in
their titles.  Section numbers or the equivalent are not considered
part of the section titles.  M. Delete any section entitled
"Endorsements".  Such a section may not be included in the Modified
Version.  N. Do not retitle any existing section as "Endorsements" or
to conflict in title with any Invariant Section.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy
that is included in the collection, provided that you follow the rules
of this License for verbatim copying of each of the documents in all
other respects.

You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided for under this License.  Any other
attempt to copy, modify, sublicense or distribute the Document is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

         Copyright (c)  YEAR  YOUR NAME.
         Permission is granted to copy, distribute and/or modify this document
         under the terms of the GNU Free Documentation License, Version 1.1
         or any later version published by the Free Software Foundation;
         with the Invariant Sections being LIST THEIR TITLES, with the
         Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
         A copy of the license is included in the section entitled "GNU
         Free Documentation License".

If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write "no Front-Cover Texts" instead of
"Front-Cover Texts being LIST"; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.



File: binutils-ja.info, Node: Index, Prev: GNU Free Documentation License, Up: Top

索引
****


* Menu:

* DLL:                          dlltool.                4.
* ELF core notes:               readelf.                90.
* ELF dynamic section information: readelf.             109.
* ELF file header information:  readelf.                51.
* ELF file information:         readelf.                5.
* ELF object file format:       objdump.                307.
* ELF program header information: readelf.              59.
* ELF reloc information:        readelf.                96.
* ELF section information:      readelf.                68.
* ELF segment information:      readelf.                59.
* ELF symbol table information: readelf.                77.
* ELF version sections informations: readelf.           115.
* GNU Free Documentation License: GNU Free Documentation License.  4.
* MRI compatibility, `ar':      ar scripts.             7.
* Unix compatibility, `ar':     ar cmdline.             7.
* VMA in objdump:               objdump.                69.
* addr2line:                    addr2line.              5.
* address to file name and line number: addr2line.      5.
* all header information, object file: objdump.         350.
* ar:                           ar.                     5.
* `ar' compatibility:           ar.                     42.
* architecture:                 objdump.                205.
* architectures available:      objdump.                184.
* archive contents:             ranlib.                 5.
* archive headers:              objdump.                62.
* archives:                     ar.                     5.
* base files:                   dlltool.                104.
* bug criteria:                 Bug Criteria.           4.
* bug reports:                  Bug Reporting.          4.
* bugs:                         Reporting Bugs.         4.
* bugs, reporting:              Bug Reporting.          4.
* c++filt:                      c++filt.                5.
* changing object addresses:    objcopy.                278.
* changing section LMA:         objcopy.                299.
* changing section VMA:         objcopy.                312.
* changing section address:     objcopy.                290.
* changing start address:       objcopy.                270.
* collections of files:         ar.                     5.
* compatibility, `ar':          ar.                     42.
* contents of archive:          ar cmdline.             96.
* crash:                        Bug Criteria.           7.
* creating archives:            ar cmdline.             130.
* cxxfilt:                      c++filt.                14.
* dates in archive:             ar cmdline.             161.
* debug symbols:                objdump.                307.
* debugging symbols:            nm.                     121.
* deleting from archive:        ar cmdline.             25.
* demangling C++ symbols:       c++filt.                5.
* demangling in nm:             nm.                     132.
* demangling in objdump:        addr2line.              57.
* demangling in objdump:        objdump.                94.
* disassembling object code:    objdump.                113.
* disassembly architecture:     objdump.                205.
* disassembly endianness:       objdump.                141.
* disassembly, with source:     objdump.                289.
* discarding symbols:           strip.                  5.
* dlltool:                      dlltool.                4.
* dynamic relocation entries, in object file: objdump.  276.
* dynamic symbol table entries, printing: objdump.      337.
* dynamic symbols:              nm.                     147.
* endianness:                   objdump.                141.
* error on valid input:         Bug Criteria.           11.
* external symbols:             nm.                     163.
* external symbols:             nm.                     241.
* external symbols:             nm.                     246.
* extract from archive:         ar cmdline.             112.
* fatal signal:                 Bug Criteria.           7.
* file name:                    nm.                     113.
* header information, all:      objdump.                350.
* input .def file:              dlltool.                98.
* input file name:              nm.                     113.
* libraries:                    ar.                     26.
* listings strings:             strings.                4.
* machine instructions:         objdump.                113.
* moving in archive:            ar cmdline.             34.
* name duplication in archive:  ar cmdline.             105.
* name length:                  ar.                     19.
* `nm' compatibility:           nm.                     126.
* `nm' compatibility:           nm.                     155.
* `nm' format:                  nm.                     126.
* `nm' format:                  nm.                     155.
* nm:                           nm.                     4.
* not writing archive index:    ar cmdline.             184.
* objdump:                      objdump.                5.
* object code format:           addr2line.              50.
* object code format:           nm.                     234.
* object code format:           objdump.                79.
* object code format:           size.                   93.
* object code format:           strings.                82.
* object file header:           objdump.                150.
* object file information:      objdump.                5.
* object file sections:         objdump.                283.
* object formats available:     objdump.                184.
* operations on archive:        ar cmdline.             20.
* printing from archive:        ar cmdline.             48.
* printing strings:             strings.                4.
* quick append to archive:      ar cmdline.             57.
* radix for section sizes:      size.                   76.
* ranlib:                       ranlib.                 5.
* readelf:                      readelf.                5.
* relative placement in archive: ar cmdline.            118.
* relocation entries, in object file: objdump.          269.
* removing symbols:             strip.                  5.
* repeated names in archive:    ar cmdline.             105.
* replacement in archive:       ar cmdline.             77.
* reporting bugs:               Reporting Bugs.         4.
* scripts, `ar':                ar scripts.             7.
* section addresses in objdump: objdump.                69.
* section headers:              objdump.                164.
* section information:          objdump.                191.
* section sizes:                size.                   5.
* sections, full contents:      objdump.                283.
* `size' display format:        size.                   34.
* `size' number format:         size.                   76.
* size:                         size.                   5.
* sorting symbols:              nm.                     188.
* source code context:          objdump.                154.
* source disassembly:           objdump.                289.
* source file name:             nm.                     113.
* source filenames for object files: objdump.           197.
* .stab:                        objdump.                307.
* stab:                         objdump.                307.
* start-address:                objdump.                318.
* stop-address:                 objdump.                323.
* strings, printing:            strings.                4.
* strings:                      strings.                4.
* strip:                        strip.                  5.
* symbol index:                 ar.                     30.
* symbol index, listing:        nm.                     208.
* symbol index:                 ranlib.                 5.
* symbol line numbers:          nm.                     169.
* symbol table entries, printing: objdump.              330.
* symbols, discarding:          strip.                  5.
* symbols:                      nm.                     4.
* undefined symbols:            nm.                     241.
* undefined symbols:            nm.                     246.
* unwind information:           readelf.                102.
* updating an archive:          ar cmdline.             192.
* version:                      Top.                    5.
* wide output, printing:        objdump.                358.
* writing archive index:        ar cmdline.             176.


Tag table:
Node: Top1876
Node: ar3267
Node: ar cmdline4625
Node: ar scripts9391
Node: nm12902
Node: objcopy17979
Node: objdump30556
Node: ranlib38491
Node: size39013
Node: strings41356
Node: strip43012
Node: c++filt45377
Node: addr2line47546
Node: nlmconv49156
Node: windres51147
Node: dlltool54372
Node: readelf60610
Node: Selecting The Target System63330
Node: Target Selection64004
Node: Architecture Selection66008
Node: Linker Emulation Selection66916
Node: Reporting Bugs67550
Node: Bug Criteria68050
Node: Bug Reporting68422
Node: GNU Free Documentation License72137
Node: Index90406

End tag table
