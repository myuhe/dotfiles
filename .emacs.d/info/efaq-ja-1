Info file: efaq-ja,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `faq.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.





INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Emacs FAQ JA: (efaq-ja).	Frequently Asked Questions about Emacs.
END-INFO-DIR-ENTRY





File: efaq-ja, Node: Top, Next: FAQ notation, Prev: (dir), Up: (dir)

   This is the GNU Emacs FAQ, last updated on 7 Aug 2004.

   The FAQ is maintained as a Texinfo document, allowing us to create
HTML, Info, and TeX documents from a single source file, and is slowly
but surely being improved.  Please bear with us as we improve on this
format.  This FAQ is maintained as a part of GNU Emacs.  If you find
any errors, or have any suggestions, please use `M-x report-emacs-bug'
to report them.

* Menu:

* FAQ notation::                表記法
* General questions::           一般的な質問
* Getting help::                ヘルプ
* Status of Emacs::             Emacs の情勢
* Common requests::             普通の人がやりたいこと
* Bugs and problems::           バグや問題点
* Compiling and installing Emacs::  Emacs のコンパイル・インストール
* Finding Emacs and related packages::  Emacs 及び関連ファイルの入手法
* Major packages and programs::  Emacs 関連パッケージ・プログラム
* Key bindings::                キー割り当て
* Alternate character sets::    英語以外の言語
* Mail and news::               メール・ニュース
* Concept index::               概念索引



File: efaq-ja, Node: FAQ notation, Next: General questions, Prev: Top, Up: Top

FAQ notation
************

   この章では Emacs FAQ(このファイル)や Emacs のオンラインマニュアルで
使われる表記法について書かれています。表記法についてわからない場合はこ
こを読んでください。

* Menu:

* Basic keys::                  基本的なキー
* Extended commands::           M-x コマンド
* On-line manual::              オンラインマニュアル
* File-name conventions::       ファイル名
* Common acronyms::             省略名



File: efaq-ja, Node: Basic keys, Next: Extended commands, Prev: FAQ notation, Up: FAQ notation

どんな意味ですか: `C-h', `C-M-a', <RET>, `<ESC> a' など
=======================================================


   * `C-X': <Control> キーを押しながら <X> キーを押す

   * `M-X': <Meta> キーを押しながら <X> キーを押す(<Meta> キーが無い場
     合は *Note No Meta key:: 参照)

   * `M-C-X': <Control> キーと <Meta> キーを両方押しながら<X> キーを押
     す

   * `C-M-X': 上と同じ

   * <LFD>: <Linefeed> キーまたは <Newline> キーまたは `C-j'

   * <RET>: <Return> キーまたは <Enter> キーまたは `C-m'

   * <DEL>: <Delete> キー(<Backspace> キーでは*ありません*) または 
     `C-?'  (文字を削除しようとして Emacs help が起動する場合は*Note
     Backspace invokes help:: 参照)

   * <ESC>: <Escape> キーまたは `C-['

   * <TAB>: <Tab> キーまたは `C-i'

   * <SPC>: スペースキー


   キー入力は次の様に引用符で囲んで記述します。

     M-x frobnicate-while-foo RET

このようなキー入力の表示ではキーの間にスペースが入っていますがそれは無
視して、スペースキーは <SPC> が書かれているところでのみ入力してくださ
い。

   <Control> キーとの組み合わせによるキー入力によってコンピュータに送
られる ASCII コードは <Control> キーを押さない場合に送られる ASCII コー
ドから 96 を引いた値になり(アルファベットの大文字の場合は 64 を引いた
値になり)、その範囲は 0 から 31 です。つまり <Control> キーを押すと第5、
第6ビットをオフにし、<Meta> キーを押すと第7ビットをオンにします。 (1)


   ただし例外として `C-?' (<DEL> と同じです) の ASCII コードは 127 で
す。127 は第5、第6ビットがオンになっているので`C-?' を"コントロール"コー
ドと呼ぶのは間違いです。また、ほとんどのキーボードは `C-?' で ASCII コー
ド 127 を送りません。

   より詳しく知りたいときはオンラインマニュアルの*Note (emacs)Text
Characters:: や*Note (emacs)Keys:: を参照してください。(マニュアルの読
み方については *Note On-line manual:: 参照)

--------- Footnotes ---------

(1)  
DOS や Windows の端末は <Meta> キーを押しても第7ビットをオンにしません。




File: efaq-ja, Node: Extended commands, Next: On-line manual, Prev: Basic keys, Up: FAQ notation

`M-x COMMAND' ってどんな意味?
=============================

   `M-x COMMAND' は `M-x' と入力してからミニバッファにコマンド名を入力
して<RET> でコマンド名を確定する操作を意味します。(`M-x' や <RET> の意
味については *Note Basic keys:: 参照)

   `M-x' は(標準では) `execute-extended-command' を実行します。このコ
マンドは指定したコマンドを実行するためのコマンドです。コマンド名を正確
に記憶していなくても <TAB> や <SPC> で入力を補完することができます。
<?> で補完の候補の一覧を見ることができます。`M-p' または `M-n' で(カー
ソルキーがある場合は上向き/下向きのカーソルキーで) 過去に入力したコマ
ンドを指定できます。Emacs の "コマンド" とは "対話的(interactive)" に
実行できるEmacs の関数のことです。

   システム管理者が `execute-extended-command' を実行するキーを別のキー
にも定義してくれているかもしれません。<Do> キーはその可能性が高いキー
です。

   対話的でない Emacs の関数を実行したい場合については*Note Evaluating
Emacs Lisp code:: 参照。



File: efaq-ja, Node: On-line manual, Next: File-name conventions, Prev: Extended commands, Up: FAQ notation

オンラインマニュアルで XXX について調べる方法は?
================================================

   オンラインマニュアルで TOPIC について調べてください、というときには
(通常) Emacs に次の様に入力することでマニュアルを読むことができます。

   `C-h i m emacs <RET> m TOPIC <RET>'.

   これで Info が起動します。Info は GNU のハイパーテキストブラウザで
す。Info の使い方が良くわからないときは Info の中で <?> を押してくださ
い。

   TOPIC:SUBTOPIC の様に書いてある場合は次の様にしてください。

   `C-h i m emacs <RET> m TOPIC <RET> m SUBTOPIC <RET>'

   もし上記の操作でマニュアルが読めないのなら、システム管理者が Info 
ファイルをインストールしていない可能性が考えられます。またはインストー
ルしてあっても不備があるのかも知れません。その場合は管理者に正しくイン
ストールするように頼みましょう。

   印刷された Emacs のマニュアルが欲しい時は*Note Getting a printed
manual:: を参照してください。



File: efaq-ja, Node: File-name conventions, Next: Common acronyms, Prev: On-line manual, Up: FAQ notation

どんな意味ですか: `etc/SERVICE', `src/config.h', `lisp/default.el' など
=======================================================================

   Emacs には多くのファイル含まれています。Emacs の配布パッケージはい
くつかのサブディレクトリに分類されています。中でも `etc', `lisp',
`src' は特に重要です。

   Emacs を使っているけれども、Emacs がどこにインストールされているか
わからないときには `C-h v data-directory <RET>' と入力して下さい。これ
で `etc' ディレクトリのパスが表示されます。(これは Emacs の変数 
`data-directory' に記録されています。そして変数の値と説明を `C-h v' で
表示させます。)

   Info ディレクトリ(オンラインマニュアルがインストールされているディ
レクトリ) は変数 `Info-default-directory-list' に記録されています。
`C-h v Info-default-directory-list <RET>' で変数の内容を見てください。
表示されたディレクトリのどれかに Info ファイルはインストールされていま
す。おそらく一番下に表示されたディレクトリにほとんどの Info ファイルが
インストールされていることでしょう。標準では Info ファイルは 
`/usr/local/info' にインストールされます。

   Emacs の配布パッケージに含まれるファイルのうちいくつかは個別に ftp 
や電子メールを使って入手することが可能です。詳しくは *Note
Informational files for Emacs:: を参照してください。`etc' ディレクトリ
の多くのファイルは Emacs の Help メニューまたは `C-h ?'(`M-x
help-for-help') で参照できます。

   場合によってはシステム管理者が `src' ディレクトリを削除し、`etc' ディ
レクトリからも多くのファイルを消してしまっているかも知れません。



File: efaq-ja, Node: Common acronyms, Prev: File-name conventions, Up: FAQ notation

FSF, LPF, OSF, GNU, RMS, FTP, GPL ってなんですか?
=================================================


FSF
     Free Software Foundation

LPF
     League for Programming Freedom

OSF
     Open Software Foundation

GNU
     GNU's Not Unix

RMS
     Richard Matthew Stallman

FTP
     File Transfer Protocol

GPL
     GNU General Public License


   FSF と LPF と OSF とを混同しないように。LPF は「ルックアンドフィー
ル」に対する著作権とソフトウェア特許に反対する組織です。FSF は高品質の
フリーソフトウェアをすべての人に提供する為の組織です。OSF は Unix を提
供するベンダの商業団体です。

   Free Software Foundation の「free」は「無料」ではなく「自由」を意味
します。GPL が適用されたソフトウェアを配布することにより対価を受け取る
こともできますが、誰もが支払える程度の低価格であること、再販売または再
配布できることを GPL では要求しています。



File: efaq-ja, Node: General questions, Next: Getting help, Prev: FAQ notation, Up: Top

General questions
*****************

   この章は Emacs や FSF などに関する一般的な質問について書かれていま
す。

* Menu:

* The LPF::                     LPF
* Real meaning of copyleft::    GNU copyleft の意義
* Guidelines for newsgroup postings::  ネットニュース利用のガイドライン
* Newsgroup archives::          ネットニュースの過去の記事のアーカイブ
* Reporting bugs::              バグ報告
* Unsubscribing from Emacs lists::  メーリングリストをやめる方法
* Contacting the FSF::          FSF



File: efaq-ja, Node: The LPF, Next: Real meaning of copyleft, Prev: General questions, Up: General questions

LPF ってなんですか?
===================

   LPF はソフトウェアに関する特許や「ルックアンドフィール」に関する著
作権が広まることに危機感を持ち、反対しています。より詳しい情報は LPF 
にメールを出すなどして調べてください。Joe Wells <jbw@cs.bu.edu> と連絡
を取っても良いでしょう。彼は喜んで LPF について語ってくれることでしょ
う。

   `etc/LPF' から LPF について詳しい情報を得ることができます。LPF の意
見を述べた文書は他にもthe LPF home page (http://lpf.ai.mit.edu/) から
入手できます。



File: efaq-ja, Node: Real meaning of copyleft, Next: Guidelines for newsgroup postings, Prev: The LPF, Up: General questions

GNU copyleft の法的な意義はなんですか?
======================================

   GNU 一般公有許諾(copyleft)の法的な意義は裁判官が法の下に判断したと
きに明らかになるでしょう。GPL を含むような著作権の侵害行為は前例があり
ません。この問題に関しては `news:gnu.misc.discuss' で議論してください。
このニュースグループはこの問題について広範囲にわたる激しい議論をするた
めに作られたものです。

   RMS は次のように書いています:

     GNU copyleft が持つ法的な意味は、それが持つ精神的意味からしたら重
     要ではない。Emacs はフリーソフトウェアのプロジェクトであり、Emacs 
     に付随する作品はすべてフリーソフトウェアであるべきなんだ。ここで
     「フリー」とはすべての利用者が Emacs を研究し、共有し、変更し、そ
     して改善する自由を意味している。すべての人がこの自由を持つことを
     確認するために、Emacs のどんな版を配布するときもソースコードを一
     緒に配布すべきだし、受取った人にもあなたが謳歌しているのと同じ自
     由が与えられるべきなんだ。



File: efaq-ja, Node: Guidelines for newsgroup postings, Next: Newsgroup archives, Prev: Real meaning of copyleft, Up: General questions

`news:gnu.emacs.help', `news:gnu.emacs.bug', `news:comp.emacs' の使い分け方は?
==============================================================================

   `etc/MAILINGLISTS' に GNU のメーリングリストに関する情報が書かれて
います(このファイルの入手法は *Note Informational files for Emacs:: を
参照)。メーリングリストに送られたメールが自動的にネットニュースにも投
稿されるものについてはニュースグループ名とメールアドレスの両方を掲載し
ています。

   `news:comp.emacs' は Emacs プログラム一般について議論するために使い
ます。GNU Emacs だけでなくXEmacs, JOVE, MicroEmacs, Freemacs, MG,
Unipress, CCA, Epsilon などの様々な Emacs についても議論できます。

   Emacs に関する質問は `news:comp.emacs' に投稿します。と言うのは 
`news:gnu.*' ニュースグループを講読していないサイトも多いからです。
`news:comp.emacs' に GNU Emacs のみに関する記事を投稿することに関して
は異論もあるでしょうが、個人の判断に任されています。

   「non-free」ソフトウェアを擁護するいかなる記事も `news:gnu.*' ニュー
スグループに投稿することは容認されません。ただし 
`news:gnu.misc.discuss' はこのような問題について議論するために作成され
たものです。ここで「non-free」ソフトウェアとはユーザがソースコードを入
手して自由に改造することができないものを含みます。そのようなソフトウェ
アを推奨する記事にフォローアップするときは注意深くNewsgroup: 行から 
`news:gnu.*' ニュースグループを削除してください。

   `news:gnu.emacs.bug' はバグレポートを見るためのニュースグループです。
このニュースグループには直接投稿しないでください(*Note Reporting
bugs:: 参照)。



File: efaq-ja, Node: Newsgroup archives, Next: Reporting bugs, Prev: Guidelines for newsgroup postings, Up: General questions

`news:gnu.emacs.help' などの GNU グループの昔の記事はどこで入手できますか?
==========================================================================

   FSF はすべての GNU メーリングリストの記事を何年も保存していますが、
中には不慮の事故で欠落したものもあります。アーカイブは特に編成されてい
ないし、個人の記事を取り出すことも容易ではありませんが、かなり多くのも
のがそこにはあります。アーカイブは ftp で次のところから入手できます。

`ftp://ftp-mailing-list-archives.gnu.org'

   執筆時点ではこのアーカイブはまだ使えていません。

   Google (http://groups.google.com) の様な WWW 検索サービスでも
`news:gnu.*' ニュースグループのアーカイブにアクセスすることができます。



File: efaq-ja, Node: Reporting bugs, Next: Unsubscribing from Emacs lists, Prev: Newsgroup archives, Up: General questions

Emacs のバグ報告などはどこに出せば良いのでしょうか?
===================================================

   Emacs のバグは電子メールで <bug-gnu-emacs@gnu.org> へ報告してくださ
い。送られたメールは同時に `news:gnu.emacs.bug' ニュースグループに投稿
されます。くれぐれもニュースではなくメールでバグを報告してください。こ
れにより信頼できる返信アドレスが得られ、バグの詳細をあなたに確認できま
す。

   <bug-gnu-emacs> へバグレポートを出す前にマニュアルの *Note
(emacs)Bugs:: を良く読んでください。マニュアルには有用なバグレポートの
書き方が詳しく書かれています。(マニュアルの読み方については *Note
On-line manual:: 参照)

   RMS は次のように言っています:

     <help-gnu-emacs@gnu.org> へバグを報告することはやめて欲しい。報告
     は同時に `news:gnu.emacs.help' へも投稿されるが、このニュースグルー
     プを購読しているのはこのような情報は不要なユーザであって、たぶん
     問題を解決できないだろうがそのために余分な時間を割かれることにな
     るからだ。<bug-gnu-emacs@gnu.org> ならもしかしたら問題を解決でき
     るかもしれない精鋭が読んでいて、より詳細な情報を必要とするかもし
     れない。

   しかし RMS は次のような場合には`news:gnu.emacs.help' に投稿しても良
いと言っています:

     もしバグレポートを出しても修正方法が見つからなかったなら、適当に
     間を(例えば一週間)置いてから `news:gnu.emacs.help' に投稿すること
     はかまわない。

   FAQ を参考にしてもバグかどうか良くわからない場合ついて RMS は次のよ
うに言っています:

     もし Emacs がクラッシュするなら、それはバグだ。Emacs をコンパイル
     するときにエラーが出るなら、それもバグだ。Emacs を構築するときに
     クラッシュするなら、やはりバグだ。Lisp コードがドキュメント通りに
     動作しないなら、それもやはりバグだ。



File: efaq-ja, Node: Unsubscribing from Emacs lists, Next: Contacting the FSF, Prev: Reporting bugs, Up: General questions

メーリングリストをやめる方法は?
===============================

   LIST という GNU のメーリングリストに入っているなら、
<LIST-request@gnu.org> にメールを出すことでメーリングリストを辞められ
るかも知れない。しかし、そのメーリングリストに直接参加せず、再配布を受
け取っているならその再配布しているところからあなたのアドレスを削除する
必要があります。メールのReceived:ヘッダを見て、`telnet SITE-ADDRESS
smtp' で `EXPN' や `VRFY' を試してみると良いでしょう。良くわからないと
きはポストマスターに尋ねてみてください。



File: efaq-ja, Node: Contacting the FSF, Prev: Unsubscribing from Emacs lists, Up: General questions

FSF の連絡先はどこですか?
=========================


E-mail
     <gnu@gnu.org>

電話
     +1-617-542-5942

Fax
     +1-617-542-2652

WWW
     `http://www.gnu.org/'

住所
     Free Software Foundation
     59 Temple Place - Suite 330
     Boston, MA 02111-1307
     USA


   FSF に直接注文する方法についてはGNU Web site
(http://www.gnu.org/order/order.html) を参照してください。



File: efaq-ja, Node: Getting help, Next: Status of Emacs, Prev: General questions, Up: Top

Getting help
************

   この章では Emacs に関するヘルプ(マニュアル、その他)について書かれて
います。

* Menu:

* Basic editing::               基本的な編集方法
* Learning how to do something::  使い方を調べる方法
* Getting a printed manual::    紙のマニュアル
* Emacs Lisp documentation::    Emacs Lisp に関するドキュメント
* Installing Texinfo documentation::  Texinfo ドキュメントのインストール
* Printing a Texinfo file::     Texinfo ドキュメントの印刷
* Viewing Info files outside of Emacs::  Info ドキュメントを読む
* Informational files for Emacs::  Emacs に関連する情報
* Help installing Emacs::       Emacs インストール方法
* Obtaining the FAQ::           この FAQ の入手方法



File: efaq-ja, Node: Basic editing, Next: Learning how to do something, Prev: Getting help, Up: Getting help

Emacs を使い始めたばかりなのですが、基本的な操作はどうするのですか?
===================================================================

   `C-h t' を入力するとチュートリアルが起動されます。`C-h' だけを入力
するとヘルプが起動されます。

   システム管理者が `C-h' を <DEL> の様に働くよう設定を変更しているか
も知れません。その時は `M-x help-for-help' でヘルプが起動できます。ど
のキーでヘルプが起動できるか調べるには`M-x where-is <RET>
help-for-help <RET>' としてください。エコーエリアにコンマで区切られて
ヘルプを起動するキー入力方法のリストが表示されます。

   Emacs のヘルプ機能は変数 `help-char' に格納されている単独のキーで起
動されたときに最もうまく働きます。

   Emacs 18 には WWW ベースのチュートリアルがあります。その多くは 
Emacs 20 にも通用します。URL は次の通り。

`http://kufacts.cc.ukans.edu/cwis/writeups/misc/emacsguide.html'



File: efaq-ja, Node: Learning how to do something, Next: Getting a printed manual, Prev: Basic editing, Up: Getting help

Emacs の使い方を調べる方法は?
=============================

   Emacs でどうすればやりたいことができるかを調べるには幾つか方法があ
ります。


   * Emacs のマニュアルは Info を使ってオンラインで参照することができ
     ます。Info を起動するには `C-h i' と入力してください。Info の中で 
     <h> を入力すると Info の使い方が見られます。

   * Emacs のマニュアルで問題点やコマンド、変数などを調べるには`C-h i
     m emacs <RET> i TOPIC <RET>' としてください。ここで TOPIC は調べ
     たいものの名前です。知りたいことが書かれていなければ <,> を何度か
     入力してみてください。(<i> と <,> は索引から検索するコマンドを実
     行します。)

   * `C-h a' (`M-x command-apropos') で特定の文字列(正確には正規表現)
     を含むコマンドの一覧を見ることができます。

   * `C-h C-f' (`M-x Info-goto-emacs-command-node') でコマンドを指定し
     て、マニュアルで説明のされている場所を探します。

   * `M-x apropos' で特定の文字列を含むすべての関数と変数を見ることが
     できます。

   * `M-x apropos-documentation' で正規表現を説明に含むすべての関数と
     変数を見ることができます。

   * FSF に印刷されたマニュアルを注文できます。詳細は *Note Getting a
     printed manual:: 参照。

   * コマンドとコマンドを起動するキー入力の一覧表を入手できます。FSF 
     に 1 部 1 ドル(10 部まとめてなら 5 ドル)で注文するか、配布ファイ
     ルの `etc/refcard.tex' か`etc/refcard.ps' を印刷してください。バー
     ジョン 21.1 からは各国語に翻訳されたものも配布されています。
     `etc/LANG-refcard.*' を見てください。LANG は言語を表す 2 文字のア
     ルファベットです。たとえばドイツ語版は `etc/de-refcard.tex' と
     `etc/de-refcard.ps' です。

   * その他にも情報を得るためのたくさんのコマンドがあります。`C-h' に
     続けて <?> を入力することでそれらのコマンドの一覧を見ることができ
     ます。




File: efaq-ja, Node: Getting a printed manual, Next: Emacs Lisp documentation, Prev: Learning how to do something, Up: Getting help

Emacs の印刷されたマニュアルの入手方法は?
=========================================

   Emacs の印刷されたマニュアルは FSF に注文することができます。詳しく
は GNU Web site (http://www.gnu.org/order/order.html) を参照してくださ
い。

   Emacs の配布パッケージの `man' ディレクトリに Texinfo で書かれたマ
ニュアルのソースがあります。この 620 ページに及ぶマニュアルを印刷して
も良いでしょう。(印刷の方法については *Note Printing a Texinfo file:: 
参照。)

   印刷したいが TeX がない、という場合は PostScript 形式のファイルを次
のところから入手することができます。

`http://www.gnu.org/manual/emacs/ps/emacs.ps.gz'

   HTML 形式のマニュアルは次のところに有ります。

`www.gnu.org/manual/emacs/index.html'

   オンラインでマニュアルを見る方法については*Note Learning how to do
something:: 参照。



File: efaq-ja, Node: Emacs Lisp documentation, Next: Installing Texinfo documentation, Prev: Getting a printed manual, Up: Getting help

Emacs Lisp ドキュメントの入手方法は?
====================================

   Emacs を使っている最中に `C-h f' で関数の説明を、`C-h v' で変数の説
明を読むことができます。

   より詳しい情報を得るには、 `Emacs Lisp Reference Manual' を読んでく
ださい。FSF への注文の方法はGNU Web site
(http://www.gnu.org/order/order.html) を参照してください。

   オンラインで Info 形式の `Emacs Lisp Reference Manual' を参照するこ
とが可能です。Texinfo 形式のソース(と Info 形式のファイル)が次のところ
から入手できます。

`ftp://ftp.gnu.org/pub/gnu/emacs/elisp-manual-21-2.6.tar.gz'

   また `ftp://ftp.gnu.org' のミラーサイト(*Note Current GNU
distributions:: 参照) からも入手できます。Info ファイルのインストール
方法については*Note Installing Texinfo documentation:: 参照。Texinfo 
ファイルを印刷する方法については*Note Printing a Texinfo file:: 参照。

   HTML 形式のマニュアルは次のところに有ります。

`http://www.gnu.org/manual/elisp-manual-21-2.6/elisp.html'



File: efaq-ja, Node: Installing Texinfo documentation, Next: Printing a Texinfo file, Prev: Emacs Lisp documentation, Up: Getting help

Texinfo ドキュメントのインストール方法は?
=========================================

   まず Texinfo 形式のファイルから Info 形式のファイルを作成します。
`makeinfo' という外部コマンドを使って Info ファイルを作成できます。
`makeinfo' は最新の Texinfo パッケージに含まれていて、次のところから入
手できます。

`ftp://ftp.gnu.org/pub/gnu/texinfo/texinfo-4.0.tar.gz'

   また `ftp://ftp.gnu.org' のミラーサイト(*Note Current GNU
distributions:: 参照) からも入手できます。

   Texinfo 形式に関する情報については Emacs の配布パッケージに含まれる
Texinfo についてのマニュアルを読んでください。このマニュアルは Info 形
式でインストールされているはずなので、`C-h i m texinfo <RET>' と入力し
てオンラインで読むことができます。

   別の方法として Emacs の中で Texinfo 形式のソースファイルを読みこん
で`M-x texinfo-format-buffer' とすることでInfo ファイルを作成すること
もできます。

   `texinfo-format-buffer' も `makeinfo' もInfo ファイルを作成するだけ
なので、インストールするには次の様にしてください。

  1. 出来上がった Info ファイルを `info' ディレクトリに移動してくださ
     い。`info' ディレクトリについては *Note File-name conventions:: 
     参照。

  2. Texinfo 配布パッケージに含まれる外部コマンド `install-info' を実
     行してInfo ディレクトリのメニューを更新してください。

          install-info --info-dir=DIR-PATH DIR-PATH/FILE

     ここで DIR-PATH は Info ファイルをコピーしたディレクトリのフルパ
     スで、FILE はインストールする Info ファイルのファイル名です。

     外部コマンド `install-info' がインストールされていない場合はイン
     ストールする Info ファイルを`info/dir' のトップレベルのノードに追
     加してください。既にあるノードを参考にしてください。形式は次の通
     りです。

          * 話題: (相対パス).  話題の短い説明。


   Info ファイルをインストールしたいが、`info' ディレクトリや 
`info/dir' に書き込む権利がないときは次のいずれかの様にしてください。

   * Info ファイルはインストールされていなくても使うことができます。
     `Info-goto-node' コマンドの引数にファイル名を丸括弧で囲んで指定す
     ることができます。`Info-goto-node' コマンドは Info の中で <g> を
     入力してください。このとき指定したファイルの "Top" という名前のノー
     ドに進みます。たとえばホームディレクトリの `INFO-FILE' というファ
     イルを見たいときは次の様に入力します。

     `C-h i g (~/INFO-FILE) <RET>'

   * 自分専用の Info ディレクトリを作ることができます。変数 
     `Info-default-directory-list' にあなたの Info ディレクトリのパス
     を加えてください。たとえばホームディレクトリの `INFO' というサブ
     ディレクトリを自分の Info ディレクトリとして使うには`.emacs' に次
     のように書き加えてください。

          (setq Info-default-directory-list
                (cons "~/INFO" Info-default-directory-list))

     このディレクトリには `dir' という名前のファイルが必要で、そのディ
     レクトリにあるファイルのリストを持ちます。それだけではうまくいか
     ないときはシステムの `dir' ファイルの内容がすべての Info ファイル
     を参照するように書き加えてください。このディレクトリのファイルが
     他の `dir' ファイルから参照されるなら`dir' ファイルを作る必要はあ
     りません。`Info-default-directory-list' のディレクトリにあるすべ
     ての `dir' ファイルは Info によって統合されます。




File: efaq-ja, Node: Printing a Texinfo file, Next: Viewing Info files outside of Emacs, Prev: Installing Texinfo documentation, Up: Getting help

Texinfo ドキュメントの印刷方法は?
=================================

   Info ファイルからは綺麗な印刷結果を得ることはできません。あなたの望
むようなマニュアルを印刷するためには Texinfo ファイルが必要です。

   TeX がインストールされているなら次のようにしてください。


  1. Texinfo ファイルの先頭に次のように書かれていることを確認してくだ
     さい。

          \input texinfo

     この `texinfo' を `texinfo.tex' へのフルパスに変える必要があるか
     も知れません。(あるいはカレントディレクトリにコピーするかリンクを
     貼ってください。)

  2. 外部コマンド `texi2dvi' を次の様に実行してください。Texinfo 形式
     のソースファイルを TEXINFO-SOURCE とします。

          texi2dvi TEXINFO-SOURCE

     外部コマンド `texi2dvi' は Texinfo 配布パッケージに含まれています。
     (*Note Installing Texinfo documentation:: 参照。)

  3. できあがった DVI ファイル `TEXINFO-SOURCE.dvi' をDVI ファイルを普
     通に打ち出す方法で打ち出してください。たとえばポストスクリプトプ
     リンタがあるなら外部コマンド `dvips' で印刷してください。


   より一般的な手順は最新の Texinfo パッケージを入手して調べてください。
(*Note Installing Texinfo documentation:: 参照。)



File: efaq-ja, Node: Viewing Info files outside of Emacs, Next: Informational files for Emacs, Prev: Printing a Texinfo file, Up: Getting help

Info ファイルを Emacs を使わずに読むことはできますか?
=====================================================

   はい。Info を読むためのプログラムは幾つかあります。


   * `info' 単独で Info を読むためのプログラム。Texinfo パッケージの一
     部として入手できます。*Note Installing Texinfo documentation:: 参
     照。

   * `Xinfo' 単独で Info を読むためのプログラム。X Window System で動
     く。`ftp://ftp.gnu.org/pub/gnu/xinfo/xinfo-1.01.01.tar.gz' から入
     手可能。また `ftp://ftp.gnu.org' のミラーサイト(*Note Current GNU
     distributions:: 参照) からも入手できます。

   * `tkinfo' Info ビューア。Tcl/Tk を使い X Window System で動く。
     `http://math-www.uni-paderborn.de/~axel/tkinfo/'.  から入手可能。




File: efaq-ja, Node: Informational files for Emacs, Next: Help installing Emacs, Prev: Viewing Info files outside of Emacs, Up: Getting help

Emacs にはどんなファイルが付属していますか?
===========================================

   これは「しばしば出る質問」ではありませんが、書かずにはいられません!
GNU Emacs と GNU プロジェクトに関連する情報を記した様々なファイルはあ
なたのそばで読まれるのを待っているのです。

   次のファイルは Emacs の配布パッケージの `etc' ディレクトリ(*Note
File-name conventions:: 参照) にあります。


`COPYING'
     Emacs General Public License

`DISTRIB'
     Emacs を入手するための情報"Free Software Foundation Order Form" 
     を含みます

`FTP'
     FTP や UUCP で GNU ソフトウェアを入手するための方法

`GNU'
     GNU 宣言

`INTERVIEW'
     Richard Stallman が BYTE の編集者と交した彼のパブリックドメインで 
     UNIX と互換性のあるソフトウェアシステムに関するインタビュー

`LPF'
     なぜ League for Programming Freedom に参加すべきなのか

`MACHINES'
     Emacs が稼動するマシンとシステムの現状

`MAILINGLISTS'
     GNU プロジェクトのメーリングリスト

`NEWS'
     Emacs に関するニュース、ユーザにわかる変更点

`SERVICE'
     GNU のサポートサービス

`SUN-SUPPORT'
     "Using Emacstool with GNU Emacs" を含む


   これらのファイルの最新版は次のところから入手できます。

`ftp://ftp.gnu.org/pub/gnu/GNUinfo/'

   GNU に関しては、過去の `GNU's Bulletin' を含めて、次のところから入
手できます。

`http://www.gnu.org/bulletins/bulletins.html' と

`http://www.cs.pdx.edu/~trent/gnu/gnu.html'



File: efaq-ja, Node: Help installing Emacs, Next: Obtaining the FAQ, Prev: Informational files for Emacs, Up: Getting help

Emacs のインストールの手助けはどこに頼めば良いのですか?
=======================================================

   インストールに関する基本的なことは *Note Installing Emacs:: 参照。
もしインストールにトラブルがあった場合は*Note Problems building
Emacs:: や *Note Linking with -lX11 fails:: 参照。

   `etc/SERVICE' (*Note File-name conventions:: 参照)にインストールな
どのサービスを有償で提供している会社や個人の情報が含まれています。この
ファイルの最新版は `ftp://ftp.gnu.org' から入手できます。(*Note
Informational files for Emacs:: 参照)



File: efaq-ja, Node: Obtaining the FAQ, Prev: Help installing Emacs, Up: Getting help

この FAQ (英語版 FAQ)の最新版の入手方法は?
==========================================

   Emacs FAQ は幾つかの方法で入手できます。


   * Emacs の Help メニューから Emacs FAQ を選べばFAQ を見ることができ
     ます。`C-h F' (`M-x view-emacs-FAQ') でも見られます。

   * ネットニュースを読むことができるのなら、`news:gnu.emacs.help' か 
     `news:comp.emacs' のスプールからFAQ を読むことができます。以前に
     読んだ記事でもスプールに残ってさえいれば、どんなニュースリーダで
     も記事を読むことはできます。この方法はニュースリーダのマニュアル
     を読んで調べてください。`rn' ならば article selection level で次
     のようにしてください。

     `?GNU Emacs Frequently Asked Questions?rc:m'

     Gnus ならば *Summary* バッファで `C-u C-x C-s' と入力するか
     *Newsgroup* バッファで `C-u <SPC>' と入力するとスプールに残ってい
     るニュースグループの記事をすべて読むことができます。

     FAQ の記事が期限切れでスプールから削除されてしまっていたら、ニュー
     スシステムの管理者に苦情を言ってみてください。最新の FAQ は暫く期
     限切れにならないように設定されているからです。

   * HTTP または FTP で最新版を次のところから入手できます。

     `http://www.lerner.co.il/emacs/' と

     `ftp://ftp.lerner.co.il/pub/emacs/'

   * バージョン 21.1 以降の Emacs ではリリース時点での FAQ が
     `man/faq.texi' (*Note File-name conventions:: 参照) として、それ
     以前のバージョンでバージョン 18.56 以降の Emacs ではリリース時点
     での FAQ が `etc/FAQ' として一緒に配布されています。

   * WWW で html 版 FAQ が参照できます。

     `http://www.lerner.co.il/emacs/'

   * `ftp://rtfm.mit.edu' (とヨーロッパにあるミラーサイト)からftp で 
     FAQ を入手することができます。ここは `news:news.answers' に投稿さ
     れた FAQ などの貯蔵所です。Emacs FAQ は次のところから入手できます。

     `ftp://rtfm.mit.edu/pub/usenet/comp.emacs/' と

     `ftp://ftp.uni-paderborn.de/pub/doc/FAQ/comp/emacs/'

     ftp でアクセスすることができない場合は電子メールでFAQ を取り寄せ
     ることができます。<mail-server@rtfm.mit.edu> にサブジェクト無しで
     本文に次の様に書いてメールを出します。

          send usenet/news.answers/GNU-Emacs-FAQ/diffs
          send usenet/news.answers/GNU-Emacs-FAQ/part1
          send usenet/news.answers/GNU-Emacs-FAQ/part2
          send usenet/news.answers/GNU-Emacs-FAQ/part3
          send usenet/news.answers/GNU-Emacs-FAQ/part4
          send usenet/news.answers/GNU-Emacs-FAQ/part5

     詳しくは <mail-server@rtfm.mit.edu> 宛に`help' や `index' などと
     本文に単独の行として記述したメールを出してください。

   * 最後の手段として <emacs-faq@lerner.co.il> に電子メールで頼むこと
     ができます。しかしこれは最後の手段であり、上記のことを試してもど
     うしてもできない場合以外は実行しないでください。




File: efaq-ja, Node: Status of Emacs, Next: Common requests, Prev: Getting help, Up: Top

Status of Emacs
***************

   この章では Emacs に関する基本的な情報が書かれています。

* Menu:

* Origin of the term Emacs::    Emacs の名前の由来
* Latest version of Emacs::     Emacs の最新版
* New in Emacs 20::             Emacs 20 の新機能
* New in Emacs 21::             Emacs 21 の新機能



File: efaq-ja, Node: Origin of the term Emacs, Next: Latest version of Emacs, Prev: Status of Emacs, Up: Status of Emacs

"Emacs" という名前の由来は?
===========================

   EMACS はもともと Editor MACroS からできた単語です。RMS は次のように
言っています。「<E> は当時 ITS で省略として使われていなかったので 
"Emacs" を選んだ。」最初、 Emacs は PDP-11 の ITS 上で動く TECO (Text
Editor and COrrector, 元は Tape Editor and COrrector)というエディタの
ために RMS によって1976 年に MIT で書かれたマクロセットでした。 RMS は
すでに TECO に変更可能なキーによる「リアルタイム」フルスクリーンモード
に拡張していました。Emacs は MIT の多くの異なる TECO のコマンドとキー
割り当てを統一するための計画として、 Guy Steele <gls@east.sun.com> に
よって始められ、 RMS が完成させました。

   多くの人が TECO のコードはラインノイズに見えると言います。興味があっ
たら `news:alt.lang.teco' を読んでみてください。TECO の実装を Emacs
Lisp で書いた人がいます(*Note Packages that do not come with Emacs:: 
参照)。オリジナルの TECO Emacs を GNU Emacs 内部で走らせるのは興味深い
計画です。

   `etc/JOKES' (*Note File-name conventions:: 参照) に Emacs の名前の
由来がいろいろと書いてあります:-)



File: efaq-ja, Node: Latest version of Emacs, Next: New in Emacs 20, Prev: Origin of the term Emacs, Up: Status of Emacs

Emacs の最新版は?
=================

   これを書いている段階では Emacs 21.3 です。



File: efaq-ja, Node: New in Emacs 20, Next: New in Emacs 21, Prev: Latest version of Emacs, Up: Status of Emacs

Emacs 20 で何が変わったのですか?
================================

   最新版で何が変わったのかを知るには `C-h n' (`M-x view-emacs-news') 
を入力してください。古い変更点は読む必要性は少ないのでファイルの後ろの
方にあります。

   Emacs 18 と 19 の違いは劇的で、frame, face, 色などがウィンドウシス
テムを使っているユーザにはわかりやすいところでしょう。

   Emacs 19 と 20 にも違いはありますが、それに比べると些細な違いで、違
いを見つけるのは難しいでしょう。変更点の中にはMULE (non-latin 文字を使
う言語のサポート、一つの文書に複数の言語を使える)の統合、"cutomize"
(lisp コードを使わずに変数の値を設定できる)、Macintosh, Microsoft,
Unix 間のファイルの自動変換などがあります。

   多くの lisp パッケージ(Gnus, Supercite, calendar/diary など)がEmacs
20 で動くように拡張して更新されました。これらは現在 Emacs の配布パッケー
ジに含まれています。




File: efaq-ja, Node: New in Emacs 21, Prev: New in Emacs 20, Up: Status of Emacs

Emacs 21 で何が変わったのですか?
================================

   Emacs 21 では画面表示機構が完全に書きなおされました。新しい画面表示
機構ではプロポーショナルフォントや画像を表示したり、音声を鳴らしたりで
きます。結果としてウィンドウシステムで実行したときにはモダンな GUI プ
ログラムの様に見えます。モードラインやスクロールバーなどが立体的になり、
ツールバーやツールチップ(バルーンヘルプ)も追加されました。

   また Emacs 21 では文字端末で実行した場合にもface が表示できるように
なりました。つまり GNU/linux のコンソールや xterm 上で `-nw' オプショ
ン付きで実行した場合には色付きの表示が可能になりました。



File: efaq-ja, Node: Common requests, Next: Bugs and problems, Prev: Status of Emacs, Up: Top

Common requests
***************

* Menu:

* Setting up a customization file::  設定ファイル
* Debugging a customization file::  設定ファイルの修正
* Colors on a TTY::             端末でも色をつける
* Displaying the current line or column::  現在位置の表示
* Displaying the current file name in the titlebar::  タイトルバーにファイル名
* Turning on abbrevs by default::  略語モード
* Turning on auto-fill by default::  自動改行モード
* Associating modes with files::  モード指定
* Working with unprintable characters::  印字不能文字
* Highlighting a region::       選択領域の強調表示
* Controlling case sensitivity::  大文字小文字の区別
* Wrapping words automatically::  自動改行
* Spell-checkers::              スペルチェック
* Checking TeX and *roff documents::  TeX や *roff ファイルのスペルチェック
* Changing load-path::          load-path の設定
* Using an already running Emacs process::  Emacs と外部から通信する
* Compiler error messages::     コンパイラの出力の認識
* Indenting switch statements::  C の switch 文のインデント
* Horizontal scrolling::        水平スクロール
* Overwrite mode::              上書きモード
* Turning off beeping::         ベルを鳴らさない
* Turning the volume down::     ベルの音量の調節
* Automatic indentation::       自動インデント
* Matching parentheses::        括弧の対応
* Hiding #ifdef lines::         #ifdef 内部の隠匿
* Repeating commands::          繰り返しのコマンド
* Valid X resources::           X リソース
* Evaluating Emacs Lisp code::  Emacs Lisp 式の評価方法
* Changing the length of a Tab::  タブ位置の変更
* Inserting > at the beginning of each line::  行頭に > を挿入
* Underlining paragraphs::      アンダーライン
* Repeating a command as many times as possible::  操作の繰り返し
* Forcing the cursor to remain in the same column::  表や図を書く
* Forcing Emacs to iconify itself::  アイコン化
* Using regular expressions::   正規表現
* Replacing text across multiple files::  複数ファイル内の置換
* Documentation for etags::     etags ドキュメント
* Disabling backups::           バックアップしない
* Disabling auto-save-mode::    自動セーブしない
* Going to a line by number::   行番号を使った移動
* Modifying pull-down menus::   メニューの変更
* Deleting menus and menu options::  メニューの削除
* Turning on syntax highlighting::  構文の強調表示
* Scrolling only one line::     一行づつスクロール
* Replacing highlighted text::  選択領域の置き換え
* Editing MS-DOS files::        MS-DOS 形式のファイルの編集
* Filling paragraphs with a single space::  文末ごとに自動改行
* Escape sequences in shell output::   シェルモードのエスケープシーケンス



File: efaq-ja, Node: Setting up a customization file, Next: Colors on a TTY, Prev: Common requests, Up: Common requests

`.emacs' ファイルを正しく設定する方法は?
========================================

   オンラインマニュアルの *Note Init File: (emacs)Init File 参照。

   一般に Emacs を初めて使うユーザは `.emacs' ファイルを持たないほうが
良いでしょう。マニュアルの記述とは違う振る舞いに混乱するからです。
<help-gnu-emacs@gnu.org> に Emacs がドキュメント通りに動作しないと質問
するはめになりますよ。 :-)

   Emacs 20.1 以降では "customize" という仕組みがあって、`M-x
customize' で起動することができます。これにより Emacs Lisp に慣れてい
ないユーザでもメニューを使って比較的簡単に `.emacs' を変更することがで
きます。執筆時点では、すべてのパッケージが "customize" に対応している
わけではありませんが、その数は確実に増えています。

   customize によって Emacs の設定が楽になりますが、少しは Emacs Lisp 
を勉強して `.emacs' を直接書き換えることも考えてみてください。オンライ
ンマニュアルの *Note (emacs)Init File:: には基本的な設定をする為の簡単
な方法がほとんど書かれています。

   時々，`.emacs'がどこにあるのか分からないユーザがいるようです．その
場合には，Emacs から `~/.emacs' というファイルを開くと，正しいファイル
を見つけることができます．



File: efaq-ja, Node: Colors on a TTY, Next: Debugging a customization file, Prev: Setting up a customization file, Up: Common requests

文字端末上でも色をつける方法は?
===============================

   Emacs 21.1 では face が文字端末上でもサポートされていて、Unix や 
GNU/Linux の文字端末やコンソール上で実行した場合やX や MS-Windows 上で 
`-nw' オプション付きで実行した場合にもface が表示できます。(face は 
Emacs 19.29 以降の MS-DOS 版でサポートされていました。) Emacs は起動時
に色が表示できるか自動的に判定し、可能ならば色を仕様します。色付き端末
であるにもかかわらず Emacs で色が表示できていない場合には`termcap' の
色表示に関するエントリを調べてください。

   `M-x list-colors-display' で(Emacs の意味での)ウィンドウをポップアッ
プし、利用可能なすべての(名前付きの)色を表示します。

   構文の強調表示は標準では無効になっています。有効にする方法について
は *Note Turning on syntax highlighting:: 参照。



File: efaq-ja, Node: Debugging a customization file, Next: Displaying the current line or column, Prev: Colors on a TTY, Up: Common requests

`.emacs' ファイルを修正する方法は?
==================================

   まず Emacs を `-debug-init' オプションを指定して起動してください。
これで `.emacs' ファイルを評価する前に Emacs Lisp デバッガを有効にし、
エラー検出されたらその場所を表示してくれます。trace-back バッファは一
行目にエラーメッセージを二行目か三行目にエラーになった `.emacs' 中のリ
スプコードを表示します。

   また `.emacs' 中にある個々の関数や引数を式の最後にポイントを移動し
て`C-x C-e' (`M-x eval-last-sexp')を入力して評価することもできます。

   変数の値を調べるには `C-h v' (`M-x describe-variable') としてくださ
い。



File: efaq-ja, Node: Displaying the current line or column, Next: Displaying the current file name in the titlebar, Prev: Debugging a customization file, Up: Common requests

現在行(またはカラム)を表示させる方法は?
=======================================

   モードラインに自動的に現在の行番号を表示させるには`M-x
line-number-mode' としてください。あるいは `.emacs' に次の様に書き加え
てください。

     (setq line-number-mode t)

(行番号は標準で表示されるようになっていますが、サイトの初期化ファイル
で表示させないようにしているかもしれません。) バッファのバイトサイズが
変数 `line-number-display-limit' よりも大きいときは行番号は表示されな
くなることに注意してください。

   Emacs 20 では行番号と同じように `M-x column-number-mode' で現在のカ
ラム位置をモードラインに表示するようになります。起動時に指定するには 
`.emacs' に次のように書き加えてください。

     (setq column-number-mode t)

   変数 `mode-line-format' 中の `"%c"' 書式指定子は現在のカラム位置を
あらわします。詳しくは `mode-line-format' の説明を読んでください(`C-h
v mode-line-format RET' で見られます)。

   Per Abrahamsen <abraham@dina.kvl.dk> の `column' パッケージを使えば 
Emacs のバージョンによらずに現在のカラム位置を表示できます。パッケージ
の入手方法については*Note Packages that do not come with Emacs:: 参照。

   `vi' エミュレーションで `set number' を実現するものはありません(私
の知る限りでは)。Kyle Jones <kyle@wonderworks.com> による`setnu' パッ
ケージはこの機能を提供します．Naoki Nakamura
<naoki.y.nakamura@nifty.com> による `wb-line-number' も同様のものです．



File: efaq-ja, Node: Displaying the current file name in the titlebar, Next: Turning on abbrevs by default, Prev: Displaying the current line or column, Up: Common requests

タイトルバーに編集中のファイル名を表示させる方法は?
===================================================

   Emacs の frame のタイトルバーの文字列は変数 `frame-title-format' に
よって制御されます。この変数の値は変数 `mode-line-format' と同じ形式で
設定します。(変数の説明を読むには`C-h v' (`M-x describe-variable') を
使ってください)

   標準でタイトルバーは複数の frame が有るときは現在のバッファ名になり、
frame が一つしかないときは Emacs を起動した時のコマンド名とマシンの名
前になります。この設定は `frame-title-format' の標準の値を次の様にする
ことで実現されています。

     (multiple-frames "%b" ("" invocation-name "@" system-name))

   frame のタイトルバーに常にバッファ名を表示させる為には`.emacs' に次
のように書き加えてください。

     (setq frame-title-format "%b")



File: efaq-ja, Node: Turning on abbrevs by default, Next: Turning on auto-fill by default, Prev: Displaying the current file name in the titlebar, Up: Common requests

MYMODE モードで略語モードにする方法は?
======================================

   `.emacs' に次のように書き加えてください。

     (condition-case ()
        (quietly-read-abbrev-file)
       (file-error nil))

     (add-hook 'MYMODE-mode-hook
               (lambda ()
                (setq abbrev-mode t)))



File: efaq-ja, Node: Turning on auto-fill by default, Next: Associating modes with files, Prev: Turning on abbrevs by default, Up: Common requests

`auto-fill-mode' にする方法は?
==============================

   `auto-fill-mode' をバッファに対して設定するには、`M-x
auto-fill-mode' と入力します。

   特定のモードに対して常にバッファが `auto-fill-mode' になる様にする
にはそのモードの hook を設定する必要があります。たとえば `text-mode' 
に対して `auto-fill-mode' を設定するには次のよう `.emacs' に書き加えて
ください。。

     (add-hook 'text-mode-hook 'turn-on-auto-fill)

   モードによらずに `auto-fill-mode' にするには次のようにしてください。

     (setq-default auto-fill-function 'do-auto-fill)



File: efaq-ja, Node: Associating modes with files, Next: Working with unprintable characters, Prev: Turning on auto-fill by default, Up: Common requests

特定のファイルに対してメジャーモードを指定する方法は?
=====================================================

   拡張子 .BAR を持つファイルを開いたときに FOO モードにするには次のよ
うに `.emacs' に書き加えてください。

     (setq auto-mode-alist (cons '("\\.BAR\\'" . FOO-mode)
                                 auto-mode-alist))

   拡張子を使わずに特定のファイルを `foo' モードに設定したいときはファ
イルの一行目(が `#!' で始まるなら二行目)のどこかに次の様に書き加えてく
ださい。

     -*- FOO -*-

   Emacs 19 以降では変数 `interpreter-mode-alist' でシェルスクリプトを
読み込んだときにどのモードにするか決定します。(Emacs はファイルの一行
目を見てどのインタープリタを使っているか判断します) この機能はファイル
名からモードを決定できないときにのみ働きます。詳しくは `C-h v' (`M-x
describe-variable') で`interpreter-mode-alist' について調べてください。



File: efaq-ja, Node: Working with unprintable characters, Next: Highlighting a region, Prev: Associating modes with files, Up: Common requests

印字不能文字を検索・削除・置換したりする方法は?
===============================================

   バッファに表示されている、例えば `\237' のような一文字は`C-s C-q 2
3 7' と入力すると検索できます。(これは変数 `search-quote-char' の値が 
17(`C-q')の場合です) *すべての*印字不能文字を検索するには正規表現
("regexp")による検索を行います。印字不能文字を表す最も簡単な正規表現は
印字可能文字の補集合です。


   * 印字可能文字の正規表現: `[\t\n\r\f -~]'

   * 印字不能文字の正規表現: `[^\t\n\r\f -~]'


   `isearch-forward-regexp' や `re-search-forward' の引数に特殊文字を
入力するには `C-q' を使う必要があります。(`\t', `\n', `\r', `\f' はそ
れぞれ<TAB>, <LFD>, <RET>, `C-l' を表します。) `re-search-forward' で
印字不能文字を検索するには次の様にします。

   `M-x re-search-forward <RET> [^ <TAB> C-q <LFD> C-q <RET> C-q C-l
<SPC> -~] <RET>'

   `isearch-forward-regexp' の場合は次の様になります。

   `C-M-s [^ <TAB> <LFD> C-q <RET> C-q C-l <SPC> -~]'

   すべての印字不能文字を削除するには、`replace-regexp' コマンドを使い
ます。

   `M-x replace-regexp <RET> [^ <TAB> C-q <LFD> C-q <RET> C-q C-l
<SPC> -~] <RET> <RET>'

   置換は上と似ています。すべての印字不能文字をコロンと置換するには、
`replace-regexp' コマンドを次のように使います。

   `M-x replace-regexp <RET> [^ <TAB> C-q <LFD> C-q <RET> C-q C-l
<SPC> -~] <RET> : <RET>'


   * <TAB> を `isearch' などでミニバッファに入力するときはクォートする
     必要はありません。




File: efaq-ja, Node: Highlighting a region, Next: Controlling case sensitivity, Prev: Working with unprintable characters, Up: Common requests

選択領域を強調表示させる方法は?
===============================

   選択領域を画面表示に反映させるには、`.emacs' に次の様に書き加えてく
ださい。

     (transient-mark-mode t)

   (*Note Turning on syntax highlighting:: も参考にしてください。)



File: efaq-ja, Node: Controlling case sensitivity, Next: Wrapping words automatically, Prev: Highlighting a region, Up: Common requests

検索・置換のときに大文字と小文字の区別をする方法は?
===================================================

   検索の際には変数 `case-fold-search' の値により大文字と小文字を区別
するか決定されます。

     (setq case-fold-search nil) ; 大文字と小文字を区別する
     (setq case-fold-search t)   ; 大文字と小文字を区別しない

   同様に置換の際には変数 `case-replace' の値により置換後の文字列が大
文字になるか小文字になるかが決定されます。

   特定のモードでのみ大文字と小文字の区別をする(又はしない)場合にはメ
ジャーモードの hook を使ってください。たとえば `FOO-mode' で、大文字と
小文字を区別したい場合には次の様になります。

     (add-hook 'FOO-mode-hook
               (lambda ()
                (setq case-fold-search nil)))



File: efaq-ja, Node: Wrapping words automatically, Next: Spell-checkers, Prev: Controlling case sensitivity, Up: Common requests

自動で改行させる方法は?
=======================

   `M-x auto-fill-mode' で `auto-fill-mode' にして下さい。標準では 70 
桁以下で改行されます。改行位置は `fill-column' で設定できます。自動的
に `auto-fill-mode' にするについては*Note Turning on auto-fill by
default:: を参照。



File: efaq-ja, Node: Spell-checkers, Next: Checking TeX and *roff documents, Prev: Wrapping words automatically, Up: Common requests

Emacs に対応した良いスペルチェッカはありませんか?
=================================================

   Ispell を使ってください。*Note Ispell:: 参照。



File: efaq-ja, Node: Checking TeX and *roff documents, Next: Changing load-path, Prev: Spell-checkers, Up: Common requests

TeX や *roff ドキュメントにスペルチェックをかける方法は?
========================================================

   Ispell を使ってください。Ispell は TeX や *roff 文書のソース*Note
Ispell:: 参照。Ispell can handle TeX and *roff documents.



File: efaq-ja, Node: Changing load-path, Next: Using an already running Emacs process, Prev: Checking TeX and *roff documents, Up: Common requests

`load-path' を設定する方法は?
=============================

   一般的に `load-path' の値を変更するときはディレクトリを `load-path' 
に追加します。/DIR/SUBDIR を `load-path' に追加するには次の様にします。

     (setq load-path (cons "/DIR/SUBDIR/" load-path))

   ホームディレクトリからの相対パスを指定するには次の様にします。

     (setq load-path (cons "~/MYSUBDIR/" load-path)



File: efaq-ja, Node: Using an already running Emacs process, Next: Compiler error messages, Prev: Changing load-path, Up: Common requests

既に起動している Emacs を他のプログラムから利用する方法は?
==========================================================

   Emacs 配布パッケージに付属する `emacsclient' を使えば既に起動してい
る Emacs と通信してファイルを編集するように指示できます。そのために 
Emacs 側で設定をしておく必要があります。


   * 設定:

     `emacsclient' からの要求を受け付けるようにEmacs で関数 
     `server-start' を実行します。コマンドラインから指定するには次の様
     にします。

          emacs -f server-start

     `.emacs' で実行するには次の様にします。

          (if 適当な条件 (server-start))

     これで Emacs は `emacsserver' というプログラムを起動します。
     `emacsserver' は Unix ドメインのソケットを作ります。ソケットはユー
     ザのホームディレクトリの `.emacs_server' か`/tmp' の 
     `esrv-USERID-SYSTEMNAME' に作られます。どちらに作られるからはシス
     テムに依存します．`server-socket-name' を参照のこと．

     ニュースリーダやメーラなどが `emacsclient' を呼び出すようにするに
     は環境変数 `EDITOR' (`VISUAL' かも知れません)の値を `emacsclient' 
     に設定してください。このとき `emacsclient' のフルパスを指定する必
     要があるかもしれません。例:

          # csh の場合
          setenv EDITOR emacsclient

          # フルパスを指定する場合
          setenv EDITOR /usr/local/emacs/etc/emacsclient  

          # sh の場合
          EDITOR=emacsclient ; export EDITOR

   * 使い方:

     `emacsclient' を起動すると、ソケット `.emacs_server' に接続し、コ
     マンドラインオプションを `emacsserver' に渡します。`emacsserver' 
     はこれらの要求を受け取るとその情報を Emacs に送り、Emacs は入力待
     ちになった時に指定したファイルを開きます。(Emacs のコマンドライン
     オプションと同様にして行数を指定することもできます。) 自動的に 
     Emacs のウィンドウに切り替わるとは限りません。ファイルの編集を終
     えたら `c-x #' (`M-x server edit') でサーバに編集が終了したことを
     通知します。もし `emacsclient' の要求で作成されたバッファが他にも
     あるときはそのバッファに切り替わります。なければ `emacsclient' は
     終了し、`emacsclient' を起動したプログラムに続行するようにシグナ
     ルを送ります。

     `emacsclient' と `emacsserver' は同じファイルシステムを共有してい
     るマシン上で走らせる必要があります。`emacsclient' が指定するパス
     名は Emacs が走っているマシンのファイルシステム上で正しいものでな
     ければいけません。Emacs のプロセスは `emacsclient' が起動したとき
     にサスペンドされていてはいけません。Unix や GNU/Linux システム上
     では `emacsclient' は別の X のウィンドウか、Emacs 内部のシェルウィ
     ンドウから呼び出さなくてはなりません。あるいは `screen' や仮想端
     末などを利用して下さい。

     `gnuserv' という `emacsclient'/`emacsserver' の拡張版が Andy
     Norman <ange@hplb.hpl.hp.com> によって作成されたバージョンがあり
     ます(*Note Packages that do not come with Emacs:: 参照)．
     `gnuserv' はインターネットドメインのソケットを使用しているので、
     ネットワーク経由でも接続できます。`gnuserv' は任意の Emacs Lisp 
     式を実行することも可能で、さらに編集が完了するまでクライアントプ
     ログラムが待つ必要はありません。

     拡張版 `gnuserv' は次のところから入手できます。

     `ftp://ftp.wellfleet.com/netman/psmith/emacs/gnuserv-2.1alpha.tar.gz'

     `http://meltin.net/hacks/emacs/' にあるのはもっと新しいもので，
     Emacs 21.2 でテストされています．




File: efaq-ja, Node: Compiler error messages, Next: Indenting switch statements, Prev: Using an already running Emacs process, Up: Common requests

コンパイラが出すエラーメッセージを Emacs に認識させる方法は?
============================================================

   変数 `compilation-error-regexp-alist' によってEmacs はコンパイラの
出力を解釈します。この変数の値はリストで、要素は次のような要素数 3 の
リストです。

   `(REGEXP FILE-IDX LINE-IDX)'

   REGEXP, FILE-IDX, LINE-IDX は文字列です。それぞれの文字列の値を決め
るには `compile.el' をロードし、次のようにして変数の値を調べると良いで
しょう。

   `C-h v compilation-error-regexp-alist <RET>'

   `compile.el' の中のこの変数に関するコメントを読んでみるのも良いでしょ
う。あなたの使っているコンパイラの出力に良く似た正規表現が書かれている
かも知れません。一度正しく値を設定したら、次のように`.emacs' に書き加
えておきましょう。

     (setq compilation-error-regexp-alist
           (cons '(REGEXP FILE-IDX LINE-IDX)
                 compilation-error-regexp-alist))



File: efaq-ja, Node: Indenting switch statements, Next: Customizing C and C++ indentation, Prev: Compiler error messages, Up: Common requests

C の `switch' 文でインデントする方法は?
=======================================

   多くの人は次のように `switch' 文をインデントしたいでしょう。

     f()
     {
       switch(x) {
         case A:
           x1;
           break;
         case B:
           x2;
           break;
         default:
           x3;
       }
     }

   一つの解法は `c-indent-level' を 4 に、`c-label-offset' を -2 に設
定することです。しかしこの方法ではインデントレベルが 2 ではなく4 になっ
てしまいます。

   _本当の_解決方法は `cc-mode' (Emacs 20 以降では C プログラムを編集
するときの標準のモード)を使うことです。そして `.emacs' に次のように書
き加えておきます。

     (c-set-offset 'case-label '+)

   古い `c-mode' では解決方法はありません。



File: efaq-ja, Node: Customizing C and C++ indentation, Next: Horizontal scrolling, Prev: Indenting switch statements, Up: Common requests

C, C++, Java のインデントを変更する方法は?
==========================================

   Emacs の `cc-mode' にはインデントを対話的に設定するためのプログラム
があります。その方法については Emacs 付属の `CC Mode' のマニュアルに説
明があります。*Note (ccmode)Customizing Indentation::参照。簡単な説明
をここに書いておきます。

  1. インデント位置を変えたい行の行頭に移動し、 `C-c C-o' を入力します。
     Emacs は文法を表すシンボルの入力を要求しますが、最初に表示された
     値を利用することにして単に <RET> を入力します。

  2. 次に Emacs がこの文法要素に対するオフセットの入力を要求してきます。
     括弧内に表示されているのは現在の値です。ここで次のいずれかを入力
     します。

     `0'
          インデントなし
     `+'
          インデント一段
     `-'
          アウトデント一段
     `++'
          インデント二段
     `--'
          アウトデント二段
     `*'
          インデント0.5段
     `/'
          アウトデント0.5段

  3. 上記のいずれかを入力したら `C-c C-q' を入力してブロックをインデン
     トしなおします。

  4. 期待通りにインデントされなかったら最初からやり直します。うまくいっ
     たのなら `.emacs' に次の様に書き加えます。

          (c-set-offset 'SYNTACTIC-SYMBOL 'OFFSET)

     SYNTACTIC-SYMBOL は `C-c C-o' の入力の後に指定したシンボルで
     OFFSET はインデントを表すシンボルです。(`+', `/', `0' など)

  5. 他にもインデントを変更したい場所があれば以上の操作を繰り返します。

   `.emacs' に書き加える `(c-set-offset ...)' は`c-mode-hook' で実行す
るほうがお奨めです。そのためには次の様に書き換えます。

     (defun my-c-mode-hook ()
       (c-set-offset ...)
       (c-set-offset ...))
     (add-hook 'c-mode-hook 'my-c-mode-hook)

`c-mode-hook' を利用することで `(require 'cc-mode)' を
`.emacs' に書かずに済みます。
`c-set-offset' は `cc-mode' がロードされていないと利用できません。

   しかし `c-mode-hook' は C のソースファイルを編集する時にしか働かな
いので注意が必要です。C++ に対しては `c++-mode-hook' がJava に対しては 
`java-mode-hook' が対応します。これらの(`cc-mode' のサポートする)言語
すべてに対してインデントを有効にしたければ `c-mode-common-hook' を利用
してください。



File: efaq-ja, Node: Horizontal scrolling, Next: Overwrite mode, Prev: Customizing C and C++ indentation, Up: Common requests

水平方向に自動的にスクロールさせる方法は?
=========================================

   Emacs 21 以降では標準でこの機能が使えます。`truncate-lines' の値が 
non-`nil' なら、ポイントが右端もしくは左端からはみ出した時に自動で横方
向にスクロールします。

   Emacs 20 では `hscroll-mode' を使ってください。`C-h f hscroll-mode
<RET>' で読める説明を書いておきます。

   ポイントがウィンドウの右か左にはみ出たときに自動的に横方向にスクロー
ルします。

   - `M-x hscroll-mode' でカレントバッファで有効になります。

   - `M-x hscroll-global-mode' ですべてのバッファで有効になります。

   - 特定のモードで有効にするには関数 `turn-on-hscroll' を hook で使う
     と良いでしょう。

          (add-hook 'text-mode-hook 'turn-on-hscroll)

   - 変数 `hscroll-margin' でどのくらいまでポイントがウィンドウの端に
     近付いたらスクロールするか決まります。

   - 変数 `hscroll-step-percent' でスクロールの際にどの程度スクロール
     させるか決まります。



File: efaq-ja, Node: Overwrite mode, Next: Turning off beeping, Prev: Horizontal scrolling, Up: Common requests

「挿入」ではなく「上書き」する方法は?
=====================================

   `M-x overwrite-mode' (マイナーモードです)。これで挿入モードと上書き
モードを切り替えられます。

   システムによっては <Insert> キーで挿入モードと上書きモードを切り替
えられます。



File: efaq-ja, Node: Turning off beeping, Next: Turning the volume down, Prev: Overwrite mode, Up: Common requests

端末からビープ音がしないようにする方法は?
=========================================

   Martin R. Frank <martin@cc.gatech.edu> は次の様に書いています。

   音響ベルではなくて視覚ベルを使うように Emacs を設定して、さらに視覚
ベルは何もしないように設定すればいいんだ。

   環境変数 `TERMCAP' に

     ... :vb=: ...

   という設定を追加して

     (setq visible-bell t)

   を評価すれば期待に沿えると思う。



File: efaq-ja, Node: Turning the volume down, Next: Automatic indentation, Prev: Turning off beeping, Up: Common requests

X 上で Emacs を使っている時にベルの音量を調節する方法は?
========================================================

   ベルの音量と持続時間は `xset' というシェルコマンドですべてのプログ
ラムについて調節できます。

   引数なしで `xset' を呼ぶと次のような簡単な説明が出ます。

     usage:  xset [-display host:dpy] option ...
       To turn bell off:
           -b                b off               b 0
       To set bell volume, pitch and duration:
            b [vol [pitch [dur]]]          b on



File: efaq-ja, Node: Automatic indentation, Next: Matching parentheses, Prev: Turning the volume down, Up: Common requests

改行したときに上の行のインデント位置まで自動的にインデントする方法は?
=====================================================================

   Emacs 20 以降では標準でそうなっています。Emacs 20.2 の `etc/NEWS' 
ファイルには次のように書かれています。

     ** `text-mode' では空行が段落の切れ目になっています。
     これにより `adaptive-fill-mode' の特典が `text-mode' と
     それに似たモード(`mail-mode' など)で有効になります。
     `text-mode' では <TAB> は `indent-relative' コマンドを実行します。
     このことはインデントした段落を編集するときにのみ影響します。

     結果的に `indented-text-mode' は `text-mode' と同じことになるので
     それは単なる別名になっています。

     段落のはじめにスペースが欲しい場合は新しくできた
     `paragraph-indent-text-mode' を使ってください。

   もし `auto-fill-mode' (*Note Turning on auto-fill by default:: 参照) 
の設定をしているなら、変数 `fill-prefix' を設定して特定の文字列を行頭
に付加させることができます。行頭に文字列を入力してその文字列の直後にポ
イントを移動させ、`C-x .' (`M-x set-fill-prefix') を入力して下さい。行
頭からポイントまでの文字列が `fill-prefix' に設定されます。これ以降、
自動折り返しの際に `fill-prefix' が新しい行の行頭に付加されます。また 
`M-q' (`M-x fill-paragraph') で段落内の改行位置を再設定する際に
`fill-prefix' は行頭から移動することはありません。

   インデントレベルの異なる段落がある場合は、段落を移動するたびに
`fill-prefix' を設定しなおす必要があります。これを避けるために多くのパッ
ケージがあります (*Note Packages that do not come with Emacs:: 参照)．
"fill" 又は "indent" をキーワードとして検索してください．



File: efaq-ja, Node: Matching parentheses, Next: Hiding #ifdef lines, Prev: Automatic indentation, Up: Common requests

括弧の対応を調べる方法は?
=========================

   Emacs 19 には `paren.el' があります。これは(ロードした後) ポイント
が括弧の上に来たら、自動的に対応する括弧を目立たせるものです。自動的に 
`paren.el' をロードするには `.emacs' に次の様に書き加えてください。

     (require 'paren)

   Alan Shutko <shutkoa@ugsolutions.com> はEmacs 20.1 以降では 
`show-paren-mode' を書き加える必要があると言っています。

     (show-paren-mode 1)

   "customize" を使って `show-paren-mode' にすることもできます。

   `M-x customize-group <RET> paren-showing <RET>'

   直接 "paren-showing" グループを選択できます。

   `paren.el' のほかにも次の様なものがあります。


   * もし右側の括弧を見ているなら一旦消してから入力し直せば対応する左
     側の括弧へカーソルが一時的に移動します。

   * `C-M-f' (`M-x forward-sexp') や`C-M-b' (`M-x backward-sexp') で丸
     括弧で囲まれた部分を飛ばして移動できます。(syntax table によって
     は波括弧や四角括弧でもできます)

   * 次の Emacs Lisp 式を評価すると `vi' の様に <%> キーで対応する括弧
     に移動できます。しかもカーソルが括弧の上にないときは普通に % が挿
     入されます。

          ;; By an unknown contributor

          (global-set-key "%" 'match-paren)

          (defun match-paren (arg)
            "Go to the matching paren if on a paren; otherwise insert %."
            (interactive "p")
            (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
                  ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
                  (t (self-insert-command (or arg 1)))))




File: efaq-ja, Node: Hiding #ifdef lines, Next: Repeating commands, Prev: Matching parentheses, Up: Common requests

C モードで `#ifdef' マクロをプリプロセッサで処理したように表示させる方法は?
===========================================================================

   `M-x hide-ifdef-mode' (マイナーモードです)。Emacs に付属している 
`cpp.el' を調査する方法もあります。



File: efaq-ja, Node: Repeating commands, Next: Valid X resources, Prev: Hiding #ifdef lines, Up: Common requests

vi の `.' コマンドと等価なコマンドはありますか?
===============================================

   (`.' は `vi' では再実行コマンドです。直前の挿入・削除を繰り返します。)

   Emacs 20.3 以降では `repeat' コマンド(`C-x z')で最後のコマンドを再
実行できます。prefix argument 付きで実行した場合は `repeat' コマンドが
呼び出すコマンドに適用されます。

   あるいは `C-x <ESC> <ESC>' (`M-x repeat-complex-command') でミニバッ
ファから引数を読み込んだコマンドを再実行することができます。
`repeat-complex-command' では `M-p' または `M-n' (あるいはキーボードに
あるなら上・下向きの矢印キー)で前後のコマンドを探すことができます。

   いくつかのコマンドをまとめて実行したい時はキーボードマクロを使って
ください。(*Note (emacs)Keyboard Macros:: 参照)

   どうしても `.' コマンドを使いたいなら VIPER (Emacs 付属の `vi' エミュ
レータ)を使ってください。(*Note VIPER:: 参照)



File: efaq-ja, Node: Valid X resources, Next: Evaluating Emacs Lisp code, Prev: Repeating commands, Up: Common requests

X リソースの正しい設定方法は? `.Xdefaults' に書けばいいんですか?
================================================================

   *Note X Resources: (emacs)X Resources 参照。

   Emacs が X toolkit を使ってコンパイルされたものならメニューバーのリ
ソース名などを調べるのにリソースエディタを使うこともできます。X11R5 以
降なら editres が使えます。



