Info file: emacs-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `emacs-ja.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.


Emacs 20.6版対応に改訂した`GNU Emacs Manual' 13版です。

INFO-DIR-SECTION Editors
START-INFO-DIR-ENTRY
* Emacs: (emacs-ja).	The extensible self-documenting text editor.
END-INFO-DIR-ENTRY


Published by the Free Software Foundation 59 Temple Place, Suite 330
Boston, MA 02111-1307 USA

Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995, 1996, 1997, 1998,
1999 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the sections entitled "The GNU Manifesto", "Distribution" and "GNU
General Public License" are included exactly as in the original, and
provided that the entire resulting derived work is distributed under
the terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that the sections entitled "The GNU Manifesto",
"Distribution" and "GNU General Public License" may be included in a
translation approved by the Free Software Foundation instead of in the
original English.





File: emacs-ja.info  Node: Init Examples-Footnotes, Up: Init Examples

(1) 【訳注】日本語環境を設定するには、
     (set-language-environment "Japanese")
とする。



File: emacs-ja.info, Node: Terminal Init, Next: Find Init, Prev: Init Examples, Up: Init File

端末に固有の初期化
------------------

各端末種別ごとに、Emacsがその端末で動くときにロードするライブラリを指
定できます。つまり、TERMTYPEという名前の端末でEmacsを起動するときには、
`term/TERMTYPE'というライブラリがロードされます。ライブラリの探索は通
常どおり`load-path'の各ディレクトリに対して行われ、ファイルの拡張子は
`.elc'か`.el'です。通常、これらのライブラリはほとんどのEmacsライブラリ
を収めたディレクトリの下の`term'というサブディレクトリに置かれます。

端末固有のライブラリの普通の用途は、端末のファンクションキーによって送
出されるエスケープシーケンスを`function-key-map'を使って意味のある名前
に対応付けることです。このような設定を行うファイルの例として、たとえば
ファイル`term/kl201.el'を見てみてください。多くのファンクションキーは
termcapデータベースの情報に基づいて自動的に対応付けがなされます。端末
固有ライブラリでは、termcapで指定されていないファンクションキーだけを
対応付ければよいのです。

端末種別にハイフンが含まれている場合は、ライブラリ名の選択には最初のハ
イフンよりまえの部分だけが使われます。つまり、端末種別`aaa-48'と
`aaa-30-rv'では、どちらも`term/aaa'をロードします。ライブラリ中のコー
ドでは`(getenv "TERM")'を使って必要なら完全な端末種別名を取得できます。

端末ライブラリの名前は、変数`term-file-prefix'と端末種別とを連結して作
られます。ファイル`.emacs'中で`term-file-prefix'を`nil'に設定すると端
末ライブラリのロードを抑止できます。

Emacsは`.emacs'と端末ライブラリを読んだあと、初期化の最後にフック
`term-setup-hook'を実行します。端末ライブラリによる指定を一部変更した
り、端末ライブラリがない端末の初期設定を行いたければ、このフックにフッ
ク関数を追加してください。*Note Hooks::。



File: emacs-ja.info, Node: Find Init, Prev: Terminal Init, Up: Init File

個人の初期化ファイルの探し方
----------------------------

通常、Emacsは環境変数`HOME'に基づいて`.emacs'を探し、ファイル名の`~'の
意味を定めます。しかし、`su'を実行したあとでは、Emacsは（su実行前の）
もとのユーザーの`.emacs'を読もうとし、suした先のユーザーのではありませ
ん。これは、たとえスーパーユーザーになっているとしても、本来のユーザー
独自のエディタのカスタマイズを使うべきだと考えるからです。

より正確には、Emacsはまずどのユーザーの初期化ファイルを使うかを決めま
す。それにはまず環境変数`LOGNAME'および`USER'からユーザー名を取得しま
す。これらの環境変数がみつからなければ、Emacsは実効ユーザーIDを参照し
ます。ユーザー名と実ユーザーIDが一致すれば、Emacsは`HOME'を利用します。
一致しない場合は、システムのユーザーデータベースからそのユーザー名に対
応するホームディレクトリを探して使用します。



File: emacs-ja.info, Node: Quitting, Next: Lossage, Prev: Customization, Up: Top

中断とアボート
==============

`C-g'
`C-BREAK（MS-DOS）'
     中断する。動作中のコマンドや打鍵途中のコマンドを取り消す。
`C-]'
     アボートする。いちばん内側の再帰編集レベルを強制的に終了し、その
     再帰編集レベルを起動したコマンドを取り消す
     （`abort-recursive-edit'）。
`ESC ESC ESC'
     中断かアボートのいずれか意味のあるほうを実行する
     （`keyboard-escape-quit'）。
`M-x top-level'
     現在実行中のすべての再帰編集レベルを強制的に終了する。
`C-x u'
     バッファの内容に対して行った直前の変更を取り消す（`undo'）。

実行を完了していないコマンドを取り消すには、2つの方法があります。 1つ
は`C-g'で"中断"すること、もう1つは`C-]'や`M-x top-level'で"アボート"す
ることです。中断とは、打鍵途中のコマンドや動作中のコマンドを取り消すこ
とをいいます。アボートとは、再帰編集レベルから抜け出し、かつ、その再帰
編集レベルを起動したコマンドを取り消すことをいいます（*Note Recursive
Edit::）。

`C-g'での中断は、打鍵途中のコマンドや不要な数引数を打ってしまったとき
にとりやめるのに使います。また、実行途中のコマンドを比較的安全な方法で
止めますから、長時間かかるコマンドをうっかり始めてしまったときにも使え
ます。特に、キル操作を中断しても安全です。テキストは、まだ*すべて*バッ
ファ内にあるか、または、*すべて*キルリングに入っている（あるいは、その
両方に入っている）からです。なお、インクリメンタルサーチを中断する場合
には、文字列探索のところで説明してあるように、特別な動作を行います。一
般には、サーチから抜け出すには`C-g'を2回連打する必要があります（*Note
Incremental Search::）。

MS-DOSでは、`C-BREAK'は`C-g'と同様に中断として働きます。MS-DOSでは、コ
マンドの実行中にユーザーとのやりとりを行う状態にないときには、`C-g'を
検出できないからです。これに対して、`C-BREAK'はつねに認識*でき*ます。
*Note MS-DOS Input::。

`C-g'はつぎのように動作します。`C-g'が打鍵されると変数`quit-flag'に`t'
が設定されます。Emacs Lispはこの変数を頻繁に調べ、値が`nil'以外だと中
断処理を行います。`C-g'が実際にコマンドとして実行されるのは、Emacsが入
力待ち状態にあるときに`C-g'を打った場合だけです。

最初の`C-g'が認識されないうちに2つめの`C-g'を打って中断すると、『緊急
脱出』機能を発動したことになりシェルに戻ります。*Note Emergency
Escape::。

中断できない場合もありえます。Emacsがオペレーティングシステムに何かを
頼んで待っているときには、待ち状態を起こしたシステムコールを使った
Emacs側で特別な手当てをしない限り中断できません。Emacsでは、ユーザーが
中断しそうなシステムコールには手当てを施してありますが、手当てしていな
い場所を叩く可能性はあります。よくあるのは、NFS経由の入出力を待ってい
るときです。Emacs側ではこれを中断する方法はわかっているのですが、多く
のNFSの実装では、NFSサーバーが固まったときにユーザープログラムがNFSの
待ちを中断することを許していないのです。

`C-]'によるアボート（`abort-recursive-edit'）は、再帰編集レベルから脱
出し、かつ、その再帰編集レベルを起動したコマンドを取り消すのに使います。
`C-g'による中断はこのような目的には使えませんし、このようなことはでき
ません。というのは、`C-g'は、ある再帰編集レベルの*中で* 打ちかけたコマ
ンドを取り消すのに使うからです。どちらの操作も必要なものです。たとえば、
再帰編集中に数引数を入力しようとして`C-u 8'と打鍵した場合、`C-g'で数引
数を取り消しても再帰編集に留まったままです。

コマンド`ESC ESC ESC' （`keyboard-escape-quit'）は、中断かアボートのい
ずれかを行います。このキーを使うのは、多くのPCのソフトでESCが『抜け出
す』の意味に使われているからです。`C-g'と同様に、数引数を取り消したり、
選択したリージョンをクリアしたり、問い合わせ型置換操作から抜け出します。
`C-]'と同様に、ミニバッファや再帰編集から抜け出します。また、`C-x 1'の
ように、フレームを複数ウィンドウに分割しているのをやめることもできます。
しかしながら、実行中のコマンドを止めることはできません。なぜなら、この
コマンドは普通のコマンドとして実行されるので、Emacsがコマンドを読み込
む状態にならないとこのコマンドを認識しないからです。

コマンド`M-x top-level'は、現在入っているすべての再帰編集レベルから抜
け出すのに『十分な』数の`C-]'と同等です。`C-]'は一度に1レベルだけ抜け
出すのに対し、`M-x top-level'はすべてのレベルを一気に抜け出します。
`C-]'も`M-x top-level'も他のコマンドと同様の普通のコマンドですから、
`C-g'とは違って、Emacsがコマンドを受け付ける状態のときだけ動作します。
`C-]'は普通のキーであり、キーマップにそのバインディングがあるのでその
ように動作するのです。*Note Recursive Edit::。

`C-x u'（`undo'）は、正確にいえばコマンドを取り消すわけではありません
が、動作を完了してしまったコマンドを取り消すものと考えることができます。
*Note Undo::。



File: emacs-ja.info, Node: Lossage, Next: Bugs, Prev: Quitting, Up: Top

Emacsのトラブルに対する対処
===========================

本節では、Emacsが正常に動作し損なうさまざまな条件と、それらの見分け方、
直し方について説明します。

* Menu:

* DEL Gets Help::       What to do if DEL doesn't delete.
* Stuck Recursive::     `[...]' in mode line around the parentheses.
* Screen Garbled::      Garbage on the screen.
* Text Garbled::        Garbage in the text.
* Unasked-for Search::  Spontaneous entry to incremental search.
* Memory Full::         How to cope when you run out of memory.
* After a Crash::       Recovering editing in an Emacs session that crashed.
* Emergency Escape::    Emergency escape---
                          What to do if Emacs stops responding.
* Total Frustration::   When you are at your wits' end.



File: emacs-ja.info, Node: DEL Gets Help, Next: Stuck Recursive, Up: Lossage

DELで削除できない
-----------------

DELが文字を削除するかわりに`Control-h'のようにヘルプに入ってしまう場合
には、使っている端末がDELに対してまちがった文字コードを送出しています。
この問題に対処するには、キーボード変換表を変更します（*Note Keyboard
Translations::）。



File: emacs-ja.info, Node: Stuck Recursive, Next: Screen Garbled, Prev: DEL Gets Help, Up: Lossage

再帰編集レベル
--------------

再帰編集レベルはEmacsの重要で有用な機能ですが、それについて理解してい
ない人にとっては、誤動作に見える可能性があります。

モード行のメジャー／マイナモード名を囲む丸括弧の周囲に中括弧`[...]'が
表示されているときは、再帰編集レベルに入っています。意図してそうしたの
でなかったり、再帰編集レベルの意味を理解していないのであれば、再帰編集
レベルから抜け出すべきです。それには`M-x top-level'と打ちます。これを
トップレベルへの抜け出しと呼びます。*Note Recursive Edit::。



File: emacs-ja.info, Node: Screen Garbled, Next: Text Garbled, Prev: Stuck Recursive, Up: Lossage

画面上のゴミ
------------

画面上のデータがまちがっているように見えたら、まず最初にすべきことは、
テキストが本当にまちがっているのかどうか調べることです。`C-l'と打って
画面全体を再描画します。これで画面が正しそうになるのなら、問題は画面更
新にあったのです。（そうでない場合は、*Note Text Garbled::）。

画面更新の問題は、使っている端末に対応するtermcapの定義がまちがってい
る場合が多いです。Emacsの配布に含まれるファイル`etc/TERMS'には、この種
の問題で既知のものに対する修正が入っています。ファイル`INSTALL'には、
この種の問題に対する一般的なアドバイスの節があります。いちばんありがち
なのは、ある種の画面操作に対するパディング (1) (*Note Screen
Garbled-Footnotes::) が不足している場合です。この種の問題があるかどう
か調べるには、他のメーカ製の別の端末でEmacsを動かしてみてください。あ
る機種の端末では頻繁に問題が起きるのに別の機種の端末では問題がないなら、
termcapの定義がまちがっている可能性があります。しかし、ある種の機能を
有するか欠如している端末で現れるEmacsのバグである可能性もあります。



File: emacs-ja.info  Node: Screen Garbled-Footnotes, Up: Screen Garbled

(1) 【訳注】端末にとっては無意味で無害な文字を、（動作が完了するまでの）
時間稼ぎのために送出すること。



File: emacs-ja.info, Node: Text Garbled, Next: Unasked-for Search, Prev: Screen Garbled, Up: Lossage

テキスト内のゴミ
----------------

`C-l'を実行してもテキストが変ならば、正しいと思われる状態になるまで、
`C-x u'を使って変更をもとに戻してみてください。また、どのコマンドで変
になったのか調べるために、`C-h l'を試してみてください。

バッファの先頭や末尾で大量のテキストが失われているようなら、モード行に
単語`Narrow'が表示されていないか確認してください。もしそうなら、おそら
くテキストは失われているのではなく、一時的に見えなくなっているのでしょ
う。見えるようにするには、`C-x n w'と打ってください。*Note Narrowing::。



File: emacs-ja.info, Node: Unasked-for Search, Next: Memory Full, Prev: Text Garbled, Up: Lossage

自発的なインクリメンタルサーチの開始
------------------------------------

Emacsが画面の最下行に自発的に`I-search:'と表示するようなら、劣悪な
xon/xoffの『フロー制御プロトコル』に従って端末が`C-s'と`C-q'を送ってい
るためでしょう。

もしこの状態が起きたら、もっともよいのは端末をフロー制御なしに設定する
か、または、パディングを十分に増やして端末がけっして`C-s'を送らないよ
うにすることです。（パディングを増やす1つの方法は、より大きい値を変数
`baud-rate'に設定すること。この値はボーという単位で表した端末の出力速
度。）

フロー制御を止められない場合の次善の策は、Emacsにフロー制御を処理させ
ることです。それには、関数`enable-flow-control'を呼び出してください。

典型的な場合、ある種の端末タイプに限ってフロー制御を使う必要があります。
`enable-flow-control-on'を使って、そのような種類の端末に限ってフロー制
御を行うようにできます。たとえば、VT-100端末とH19端末にはフロー制御を
行う必要があるのなら、ファイル`.emacs'につぎのものを入れます。

     (enable-flow-control-on "vt100" "h19")

フロー制御を使っている場合には、`C-s'のかわりに`C-\'、`C-q'のかわりに
`C-^'を使う必要があります。（これらの割り当てはキーボード変換によって
行われる。*Note Keyboard Translations::。）



File: emacs-ja.info, Node: Memory Full, Next: After a Crash, Prev: Unasked-for Search, Up: Lossage

メモリ不足
----------

`Virtual memory exceeded'というエラーメッセージが出たら、変更したバッ
ファを`C-x s'で保存してください。この方法で保存する場合、必要なメモリ
は最小限ですみます。Emacsは上記のエラーが起きたときでも使える予備のメ
モリを確保していますから、`C-x s'を完了するのには十分なはずです。

変更済みのバッファを保存したら、Emacsを終了して別のEmacsを起動してもよ
いですし、`M-x kill-some-buffer'を使って現在動いているEmacsのメモリを
解放してもよいです。大量のテキストが入っているバッファを消せば、安全に
編集を続行できます。空きメモリが十分な量になると予備のメモリを自動的に
確保し直し、再度メモリ不足になったときに備えます。

メモリ不足になったときには、`M-x buffer-menu'を使ってバッファを保存し
たり消したりしないでください。このコマンドはけっこうメモリを必要とする
ので、確保した予備のメモリだけでは十分でない可能性があるからです。



File: emacs-ja.info, Node: After a Crash, Next: Emergency Escape, Prev: Memory Full, Up: Lossage

クラッシュからの回復
--------------------

Emacsやコンピュータがクラッシュしても、クラッシュ時に編集していたファ
イルは自動保存ファイルから回復できます。それには、Emacsを再度起動して
から、コマンド`M-x recover-session'を入力してください。

このコマンドは、まず、中断されたセッションファイルの一覧を日付とともに
バッファに表示します。その中からどのセッションを回復するか選んでくださ
い。通常は、最新のセッションを選べばよいでしょう。望みのセッションの行
にポイントを動かして、`C-c C-c'と打ちます。

すると、`recover-session'は、そのセッションで編集中だった各ファイルに
ついて回復するかどうか問い合わせてきます。`y'と答えると、そのファイル
と自動保存ファイルの日付を表示してから、回復するかどうか再度問い合わせ
てきます。再問い合わせに対しては`yes'で答える必要があります。そうする
と、Emacsはそのファイルを訪れますが、テキストは自動保存ファイルから持っ
てきます。

`recover-session'が完了すると、回復を指定したファイルはEmacsバッファに
入っています。そうしたらこれらのバッファを保存してください。保存して始
めてもとのファイルが更新されます。



File: emacs-ja.info, Node: Emergency Escape, Next: Total Frustration, Prev: After a Crash, Up: Lossage

緊急脱出
--------

バグのために、Emacsが`quit-flag'を検査しないループに入ってしまうことも
ありえます。このため、このフラグが設定されている状態で再度`C-g'が打た
れるとただちに実行を休止する特別な機能がEmacsにはあり、いつでもGNU
Emacsから抜け出すことができます。通常、Emacsはすみやかに`quit-flag'を
認識し（中断し）ますから、この特別な機能が使われることはまずありません。
（MS-DOSや互換システムでは、`C-BREAK'を2回連打する。）

`C-g'の連打によって休止したEmacsを再開すると、Emacsは休止直前に実行し
ていた動作に戻るまえに、つぎの2つの質問をしてきます。

     Auto-save? (y or n)
     Abort (and dump core)? (y or n)

それぞれの質問に対し、`y'か`n'に続けてRETで答えてください。

`Auto-save?'に`y'と答えると、自動保存を行う設定になっている変更された
バッファすべてに対してただちに自動保存を実行します。

`Abort (and dump core)?'に`y'と答えると、Emacsは不正命令を実行してコア
ダンプを作ります。コアダンプがあると、Emacsが中断できなかった理由をウィ
ザード (1) (*Note Emergency Escape-Footnotes::) が追究できます。コアダ
ンプを作り終えるとEmacsの実行は終了します。`n'と答えると実行は継続しま
す。運がよければ、Emacsが最終的には`quit-flag'を検査して正常に中断でき
るでしょう。運が悪ければ、またループに入ったままになりますから、再度
`C-g'を打ってEmacsをまた休止します。

本当はEmacsが固まったのではなく単に遅いだけの場合には、意図せずに`C-g'
を連打してしまうことがあります。その場合には、再開して2つの質問に`n'と
答えればもとの状態に戻れます。中断要求はすぐに受け付けられるでしょう。

XウィンドウシステムのもとでEmacsが動作している場合には、`C-g'連打の機
能は切ってあります。というのは、ウィンドウマネージャを使ってEmacsを終
了させたり、別のウィンドウを開いて別のプログラムを動かせるからです。

MS-DOSや互換システムでは、（MS-DOSやBIOSの）システムコールが固まってい
る場合やEmacsが非常にきつい（Lispコードでは*なく*Cのコードで）無限ルー
プに入っている場合には、`C-BREAK'を2回打っても緊急脱出の機能を使えない
場合があります。


File: emacs-ja.info  Node: Emergency Escape-Footnotes, Up: Emergency Escape

(1) 【訳注】「名人、熟練者、魔術師」の意味だが、特定のコンピュータや
（特に）ソフトウェアに精通した人を指す。



File: emacs-ja.info, Node: Total Frustration, Prev: Emergency Escape, Up: Lossage

いらいらしたら…
----------------

Emacsを使うこと（や、その他のこと）がきわめて不愉快になったり、ここま
でにあげたどの方法でも問題が解決しない場合でも、Emacsはまだ手助けがで
きます。

まず、Emacsがコマンドに応答しないようなら、`C-g C-g'と打ってEmacsから
抜け出し、新たに別のEmacsを起動してください。

つぎに、`M-x doctor RET'と打ってください。

doctorプログラムがあなたのいらいらを鎮めてくれるでしょう。doctorに何か
を話すときには、RET RETと打っていい終える必要があります。こうすると、
doctorは患者が話し終えたことを認識します。



File: emacs-ja.info, Node: Bugs, Next: Contributing, Prev: Lossage, Up: Top

バグの報告
==========

Emacsのバグに出会うこともあるでしょう。バグを修正する／できるとは約束
できませんし、そもそもバグだと認めないかもしれませんが、読者が遭遇した
問題については知らせてほしいと考えています。たしかにそれをバグだと認め
て修正しようということになる場合も多いのです。

バグを修正するには、まず、報告してもらう必要があります。効果的に報告し
てもらうためには、報告の仕方を知っていただく必要があります。

* Menu:

* Criteria:  Bug Criteria.	 Have you really found a bug?
* Understanding Bug Reporting::	 How to report a bug effectively.
* Checklist::			 Steps to follow for a good bug report.
* Sending Patches::		 How to send a patch for GNU Emacs.



File: emacs-ja.info, Node: Bug Criteria, Next: Understanding Bug Reporting, Up: Bugs

バグの発生時期
--------------

Emacsが不正命令を実行したり、（『ディスクが満杯』などの外部の問題では
なく）プログラムに問題があるというオペレーティングシステムのメッセージ
を表示して止まった場合には、たしかにバグがあるといえます。

Emacsの画面の更新結果がバッファの内容に対応していないなら、それもたし
かにバグです。コマンドの実行が思わしくなくても`C-l'で再表示させると正
しくなる場合には、画面更新がまちがっているのです。

あるコマンドを実行するのに無限に時間がかかるというのはバグの可能性があ
りますが、たしかにEmacsの責任かどうかを確認する必要があります。コマン
ドによってはとても時間がかかるものもあります。`C-g'（MS-DOSでは
`C-BREAK'）を打ってから`C-h l'を打つことで、Emacsが受け付けた入力がた
しかに読者が意図したものだったかどうか確認できます。すぐに処理されるコ
マンドだという*確信*があるなら、バグを報告してください。そのコマンドが
すごく時間のかかるものかどうかわからないなら、マニュアルで調べるか知っ
ている人に聞いてください。

よく知っているコマンドであって、普通なら問題なく結果が得られるはずなの
に、かわりにEmacsがエラーメッセージを出すようなら、恐らくそれはバグで
しょう。

コマンドが正しくない動作をするのなら、それはバグです。ただし、コマンド
が本当は何をするのが正しいか確認してください。そのコマンドに馴染みがな
いとか、そのコマンドがどう動作するはずなのか確信が持てない場合は、コマ
ンドは実際には正しく動作しているのかもしれません。バグという結論に飛び
つくまえに、よく知っている人に見てもらってください。

最後に、コマンドの意図された定義が編集操作に対して最良でない可能性があ
ります。これは重要な問題ではありますが、ユーザーがどう判断するかの問題
でもあります。既存の機能について無知なために、まちがっていると結論を出
してしまうのも簡単です。まずドキュメントをひととおり調べて、十分に納得
し、それでもなお自分にとって必要な機能がない、と断言できるまでは、コマ
ンドの定義が悪いなどとはいわないほうがよいでしょう。マニュアルを熟読し
てもコマンドが何をするのかよくわからなければ、索引や用語集を活用してよ
くわからない単語について調べましょう。

十分熟読しても、なおコマンドが何をするのかわからないなら、それは「マニュ
アルのバグ」として報告すべきでしょう。マニュアルは、読者を含めて、
Emacsの専門家でない人が読んでもすべてのことが明らかになるようなもので
あるべきです。ドキュメントのバグを報告することも、プログラムのバグを報
告することと同じくらい重要なことです。

関数や変数のオンラインの説明文がマニュアルと一致しない場合は、どちらか
がまちがっていますから、これもバグです。



File: emacs-ja.info, Node: Understanding Bug Reporting, Next: Checklist, Prev: Bug Criteria, Up: Bugs

バグの報告とは
--------------

バグがあると確信したら、それを報告すること、しかも、役立つ形で報告する
ことが重要です。もっとも有用なのは、どのようなコマンドを打ち込んだかを、
Emacsを起動するシェルのコマンドから始めて問題が起きるところまですべて
正確に記述することです。

バグを報告するときもっとも重要なことは*事実*を報告することです。仮説や
口頭説明は、詳細な生データのかわりにはなりません。事実を報告することは
単純なはずなのに、多くの人はかわりに説明をでっちあげてそれを報告したが
ります。その説明がEmacsの実装方式の想像に基づいたものであるならば、そ
の説明はまったく役に立たないでしょう。事実が欠けていたらバグに関する真
の情報を得られません。

たとえば、ユーザーがとても大きなファイルを訪れるために`C-x C-f
/glorp/baz.ugh RET'と打ち込んだら、Emacsが`I feel pretty today'と表示
したとしましょう。もっともよいバグレポートは、まさにこの文のように報告
することです。すべての事実だけを報告できるからです。

問題はファイルの大きさにあると仮定して、「大きなファイルを訪問したら、
Emacsが`I feel pretty today'と表示した」などと書いてはいけません。これ
が『説明をでっちあげた』報告です。問題はファイル名に`z'が含まれていた
ために生じたのかもしれないのです。もしそうだとしたら、報告に基づいて適
当な「大きなファイル」を訪問してみても、そのファイル名に`z'が含まれて
いなければ何も悪いところがみつからないでしょう。報告の文面からは、名前
に`z'を含んだファイルを試しに訪問してみるべきだとはわかりません。

あるいは、ファイルがちょうど25個の空白文字で始まっているために問題が起
きたのかもしれません。ですから、報告に際しては、そのバグを再現させるの
に必要なファイルがあれば、それらのファイルの正確な内容も教えてください。
その問題は、たまたま、`C-x C-a'と打った直後にのみ発生するのだとしたら
どうでしょう？` ' ですから、Emacsを起動してから問題に遭遇するまでに打
ち込んだものすべてを教えてほしいのです。

どの訪問コマンドを使っても同じように問題が発生すると*知っている* ので
ない限り、`C-x C-f'と打ったと報告するかわりに「ファイルを訪問した」と
いうのさえいけません。同様に、「1行に3文字入っているとき」ではなく、
「`RET A B C RET C-p'と打ち込んだあとで」のように、あなたがテキストを
入れたやり方そのものを報告してください。

このように、バグを報告するときには、いかなる説明も推測しないでください。
問題を実際に*デバッグ*して憶測ではない説明を報告してもらえるなら、それ
は有益ですが、事実も含めてください。



File: emacs-ja.info, Node: Checklist, Next: Sending Patches, Prev: Understanding Bug Reporting, Up: Bugs

バグレポートのチェックリスト
----------------------------

バグレポートを送る最良の方法は、電子メイルでEmacs保守チーム
`bug-gnu-emacs@gnu.org'に送ることです。（重要な改良の提案などもここに
送ってください）。

他から出されたバグレポートが読みたければ、ニュースグループ
`gnu.emacs.bug'で読めます。ただし、傍観者として見る場合には、見たもの
について批判するべきではない、ということを承知しておいてください。バグ
レポートの目的はEmacs保守チームに情報を提供することです。傍観者は、こ
の目的に干渉しない限りは、歓迎します。特に、大量のデータが添付されてい
るバグレポートもありますので、傍観者はそのことを非難すべきではありませ
ん。

ネットニュース経由でバグレポートを投稿しないでください。ネットニュース
よりもメイルのほうが送り手のメイルアドレスが確実にわかり信頼できます。
もっと情報が必要なときには、メイルで問い合わせる必要があるかも知れませ
ん。

電子メイルを送れない場合には、紙や他の機械可読な媒体で下記へ送ってくだ
さい。

GNU Emacs Bugs
Free Software Foundation
59 Temple Place, Suite 330
Boston, MA 02111-1307 USA

バグを修正するとは約束できません。しかし、重大なバグや、醜いバグや、簡
単に直せるバグなら、直したいと思います。

Emacsのバグレポートを送るのに便利な方法の1つは、コマンド`M-x
report-emacs-bugs'を使うことです。このコマンドはメイルバッファ（*Note
Sending Mail::）を開いて、自動的に重要な情報*の一部*を書き込みます。し
かし、必要な情報をすべて入れられるわけではありませんから、以下の指針を
読んでそれに従い、メッセージを送るまえに重要な情報を自分で打ち込んでく
ださい。

保守チームがバグの調査を開始するためには、以下のすべてがバグレポートに
含まれている必要があります。

   * Emacsのバージョン番号。これがないと、GNU Emacsの最新版でバグを探
     すべきかどうか判断できない。

     バージョン番号を調べるには、`M-x emacs-version RET'と打つ。このコ
     マンドが動作しないようなら、GNU Emacsではないエディタを使っている
     ようなので、どこか別のところへバグを報告する。

   * 使っているマシンの種類、オペレーティングシステムの名前とバージョ
     ン。`M-x emacs-version RET'でこれらの情報も表示される。
     `*Messages*'バッファからその出力をコピーすれば、すべての情報をま
     ちがいなく送れる。

   * Emacsをインストールしたときの`configure'コマンドの引数。

   * Emacsソースに変更を加えた場合は、そのすべてのリスト。（ソースを修
     正したEmacsで起きたバグまでも調査する時間はない。しかし、修正を加
     えたのにそれを教えてくれなければ、厄介ごとを他人に押し付けている
     だけ。）

     これらの変更については正確に記してほしい。英語での説明では不十分。
     ソースのコンテキストdiffを送ること。

     独自のファイルを追加したり、別のマシンに移植するのも、ソースの変
     更にあたる。

   * その他、GNU Emacsの標準のインストール手順と違っているところがあれ
     ば、すべて詳しく記述する。

   * そのバグを再現するために必要なすべてのファイルの内容。

     ファイルをまったく訪問せずに問題が再現可能なら、ぜひ教えてほしい。
     そのほうがデバッグがずっと楽になる。どうしてもファイルが必要なら、
     必ずその内容が正確にわかるようにすること。たとえば、行末に空白文
     字が付いているかどうかとか、バッファの最終行に改行文字があるかど
     うかが問題になることは頻繁にある（最終行に改行があるかどうかで何
     か違いがあるべきではないのだが、もし違いが生じるようならそれもバ
     グといえる）。

   * バグを再現させるために打ち込む正確なコマンド列。

     Emacsへの入力を正確に記録する簡単な方法は、ドリブルファイルに書く
     ことである。ドリブルファイルを開始するには、Emacsを実行開始した直
     後に、`M-:'かバッファ`*scratch*'でつぎのLisp式を実行する。

          (open-dribble-file "~/dribble")

     それ以降はEmacsプロセスが終了するまで、Emacsはすべての入力をドリ
     ブルファイルにコピーする。

   * 表示に関するバグの可能性がある場合には、端末種別（環境変数`TERM'
     の値）、（すべてのマシンで同じとは限らないので）`/etc/termcap'ファ
     イル中の当該端末のtermcapの定義すべて、および、Emacsが実際に端末
     に送った出力。

     端末への出力を収集するには、Emacsを実行開始した直後に、`M-:'かバッ
     ファ`*scratch*'でつぎのLisp式を実行する。

          (open-termscript "~/termscript")

     それ以降、Emacsはプロセスが終了するまでのすべての端末出力の写しを
     指定されたtermscriptファイルに書き出す。Emacsが起動するときに問題
     が起きるのなら、上の式を`.emacs'ファイルに入れて、Emacsが最初に画
     面を開くときに一緒にtermscriptファイルも書き始めるようにする。

     ただし、端末に依存したバグは、そのバグの出る端末なしで直すことは
     難しいことが多く、ときとして不可能であることも承知しておいてほし
     い。

   * 正しくないと結論したことがどう正しくないのか記述する。たとえば、
     「Emacsプロセスが致命的なシグナルを受け取る」とか「最終的なテキス
     トはつぎのようになるが、これは正しくない。」など。

     もちろん、Emacsが致命的なシグナルを受け取るのなら、それは誰にでも
     わかる。しかし、バグが正しくないテキストだとすると、保守チームに
     はどこが正しくないのかわからない可能性がある。そういう可能性のあ
     る書き方はやめてほしい。

     遭遇する問題が致命的なシグナルだとしても、はっきりとそう書くべき
     である。たとえば、Emacsのソースが一部違っている版だったとか、シス
     テムのCライブラリのバグに遭遇したといった奇妙なことに出会ったとし
     よう（実話！）。あなたが使っているEmacsはクラッシュするが、保守チー
     ムのほうでは何ともない。クラッシュすると*いって*もらえれば、保守
     チームのほうで実行してクラッシュしなければバグが再現しないとわか
     る。しかしそういってもらえないと、バグが再現したのかどうかさえわ
     からずに、試してみた結果からは何の結論も得られない。

   * バグの結果がEmacsのエラーメッセージであれば、そのエラーメッセージ
     の文面を正確に報告することと、Emacs中のLispプログラムがどうやって
     そのエラーの箇所に到達したかを示すバックトレースを報告することが
     重要。

     エラーメッセージの文面を正確に報告するには、`*Message*'バッファか
     らメッセージをバグレポートにコピーする。一部ではなく、全体をコピー
     してほしい。

     エラーのバックトレースを取得するには、エラーが発生するよりまえにLisp式
     `(setq debug-on-error t)'を評価する
     （つまり、まずこのLisp式を実行して、それからエラーを再現させる）。
     すると、エラーが起きたときにLispデバッガが実行され、
     デバッガがバックトレースを表示する。
     このデバッガのバックトレース出力を、バグレポートにコピーする。

     このやり方は、バグを再現できるときだけ使える。再現できない場合は、
     最低限、エラーメッセージだけでもすべてコピーする。

   * 個人のファイル`.emacs'を含めてロードしたLispコードのどれかが、
     Emacsの動作に影響するような変数設定を行っていないか確認する。また、
     （オプション`-q'を指定して初期化ファイルのロードを抑制して）個人
     のファイル`.emacs'をロードせずに起動したEmacsでもエラーが再現する
     かどうか調べる。これでエラーが再現*しない*なら、エラーの再現に必
     要なので、ロードしたすべてのプログラムの内容を正確に報告する。

   * 問題が初期設定ファイルや標準のEmacsシステムに含まれないLispプログ
     ラムに依存するなら、まずそれらを保守している人に相談して、それら
     のプログラムの問題ではないことを確認する。その人たちが、そのコー
     ドはEmacsの正しい使い方をしていると確認したうえで、その人たちがバ
     グを報告するべきである。

   * GNU Emacsのソースに関して何かコメントしたいなら、その部分のコード
     を前後数行を含めて示したうえでコメントする。行番号だけ書くという
     のはやめてほしい。

     開発中のソースの行番号とユーザーが入手するソースの行番号とは同じ
     ではない。あなたが使っているバージョンのソースの何行目が、開発中
     のソースの何行目に対応しているか調べるのは余分な手間であり、正確
     にはわからないかもしれない。

   * GDBなどのC言語用のデバッガからの追加情報があると、保守チームの手
     元にないマシンでもバグの原因がわかることもある。もしGDBの使い方が
     わからないようなら、GDBのマニュアルをぜひ読んでほしい。たいして長
     くないし、GDBを使うのは簡単。GDBのオンライン形式のマニュアルを含
     むGDBの配布は、たいていはEmacsの配布と同じ場所に置いてある。GDBを
     用いてEmacsを実行するには、Emacsをコンパイルしたサブディレクトリ
     `src'に移動してから、`gdb emacs'を行う必要がある。GDBがディレクト
     リ`src'にあるファイル`.gdbinit'を読めるように、このディレクトリが
     カレントディレクトリであることが重要。

     ただし、バグの原因を示すために追加情報を集める場合には、追加情報
     をいつ集めるかをよく考える必要がある。

     たとえば、多くの人はバックトレースだけを送ってくるが、それ単体で
     はあまり役に立たない。引数の記録つきの単純なバックトレースでは、
     GNU Emacsの内部で何が起きているかについての情報はほとんどない。と
     いうのは、バックトレースに表示される引数のほとんどはLispオブジェ
     クトへのポインタだから。それらのポインタの値そのものは、なんら重
     要ではない。重要なのは、ポインタが指している先のオブジェクトの内
     容（そしてその内容もまたポインタであることが多い）。

     役に立つ情報を提供するには、Lispオブジェクトの値をLispの記法で示
     す必要がある。スタックの底付近にある数個のフレームについて、Lisp
     オブジェクトであるような各変数に対してこれを行ってほしい。デバッ
     ガは単なる整数だと思うので、どの変数がLispオブジェクトであるかは
     ソースを見てほしい。

     変数の値をLispの記法で示すには、まず、その値をプリントしてから、
     GDBのユーザー定義コマンド`pr'を使ってLispオブジェクトをLispの記法
     で表示させる。（別のデバッガを使わなければならない場合は、オブジェ
     クトを引数として関数`debug_print'を呼び出す）。コマンド`pr'は、ファ
     イル`.gdbinit'で定義されており、（コアダンプではなく）実行中のプ
     ロセスをデバッグするときだけ使える。

     Lispでエラーが発生したときにEmacsを中断してGDBに戻るようにするに
     は、`Fsignal'にブレークポイントを設定する。

     実行中のLisp関数の簡素な一覧を表示するには、GDBのコマンド
     `xbacktrace'を打つ。

     Lisp関数の引数を調べたい場合には、スタック上を上に移動していき関
     数`Ffuncall'のフレームに到達するごとに、つぎのようなGDBコマンドを
     打つ。

          p *args
          pr

     関数が受け取った最初の引数を出力するには、つぎのようにする。

          p args[1]
          pr

     2番目以降の引数でも同様に出力できる。`Ffuncall'の引数`nargs'は、
     `Ffuncall'が受け取った引数の個数を表す。この個数は、Lisp関数自身
     とその関数に対する引数とを合わせた数。

     ファイル`.gdbinit'は、データタイプやLispオブジェクトの中身を調べ
     るのに役立つコマンド類を定義する。それらのコマンドの名前は`x'で始
     まる。これらのコマンドは`pr'より下位のレベルで動作し使い難いが、
     コアダンプをデバックしたり、Emacsが致命的なシグナルを受理したとき
     のように`pr'がうまく動かないときでも使える。

   * バグの症状がEmacsが応答しなくなるというものでも、Emacsが『ハング』
     した（固まった）と考えてはいけない。無限ループに入っているのかも
     しれない。どちらであるかを調べるには、GDBのもとでバグを再現させ、
     応答しなくなったところでEmacsを止める。（EmacsがXウィンドウシステ
     ムを直接使っている場合は、GDBのジョブに対して`C-z'を打てばEmacsを
     止められる）。そして、コマンド`step'で1ステップずつ実行を試みる。
     固まっているのならコマンド`step'から戻ってこない。ループしている
     なら`step'から戻ってくる。

     こうして調べた結果、Emacsがシステムコールの中で固まっているとわかっ
     たら、Emacsを再度止めて、システムコールの引数を調べる。そしてバグ
     レポートには、ソース中でのシステムコールの正確な位置と、引数が何
     だったかを正確に記入する。

     Emacsが無限ループしているのなら、ループの始まりと終りを調べる。もっ
     とも簡単にこれを調べるには、GDBのコマンド`finish'を使う。このコマ
     ンドを使うたびに、1つのスタックフレームから抜けるまでEmacsは実行
     を継続する。戻ってこなくなるまで、繰り返し`finish'を打つ。戻って
     こないのは、そのフレームで無限ループが起こっているからである。

     ここでEmacsを再度停止し、戻ってこなくなったフレームに*ちょうど戻
     る*まで、繰り返し`finish'を使う。つぎに、`next'を使ってそのフレー
     ム内で1ステップずつ実行する。こうすれば、ループがどこで始まりどこ
     で終るかわかる。さらに、ループ内で使われているデータを調べて、ルー
     プが終るべきところでなぜ終らないかを追求してみてほしい。これらの
     情報すべてを、バグレポートに含める。

以下には、バグレポートに必要ないものをあげておきます。

   * バグの生起条件に関する記述。再現可能なバグに対しては不要。

     バグに出会った人はしばしば、入力をどう変えるとバグが出なくなると
     か、あるいは、相変わらず出るといったことを探求するのに時間をかけ
     る。

     これは時間がかかるわりには、役に立たない。というのは、保守チーム
     がデバッグを行うときには、デバッガのもとでブレークポイントを設定
     しながらバグの出る1つの例を実行するのであって、何通りもの例から帰
     納的に推論するわけではない。だから、別の例を探すのに時間をかけた
     りしないでほしい。

     もちろん、もとの例の*かわりに*使えるもっと簡単な例がみつかれば、
     それは役に立つ。簡単な例なら、出力中のエラーもみつけやすくなり、
     デバッガを使って実行するにも短い時間ですむ。

     ただし、単純化は必須ではない。もし単純化できなかったり、単純化す
     る時間がなければ、もとの例のままでよいので、バグレポートを出して
     ほしい。

   * Emacs実行のシステムコールトレース

     ある特別な種類のバグについては、システムコールトレースは非常に役
     立つが、多くの場合はほとんど有用な情報は得られない。したがって、
     多くの人がシステムコールのトレースこそクラッシュに関する情報を報
     告するのに欠かせないものだと思っているらしいのは、不思議である。
     これはたぶん、ソースコードやデバッグ用シンボルのないプログラムを
     デバッグした経験から生まれた習慣だろう。

     ほとんどのプログラムでは、システムコールのトレースより、バックト
     レースのほうがずっとずっと役に立つ。Emacsでさえ、単純なバックトレー
     スのほうが有用である。しかし、十分な情報を提供するには、バックト
     レースの補記として、変数の値を表示し`pr'でLispオブジェクトとして
     も表示する（上記参照）。

   * バグに対する修正。

     バグに対する修正は、よい品質のものなら有用である。しかし、修正が
     正しいことを示すテスト例などのバグレポートに必要な情報を省かない
     でほしい。修正に問題があるとわかって別のやり方でバグをつぶすかも
     しれないし、報告された修正がまったく理解できないこともありえる。
     そして、どんなバグを修正しようとしているのかわからない、あるいは、
     その修正がなぜ改良になるのかわからなければ、その修正を採用するわ
     けにいかない。

     我々にとって、読者のパッチが理解しやすく、インストールしやすくす
     るための指針については、*Note Sending Patches::。

   * バグが何であるか、また何に依存しているかについての予想。

     こういう予想は、たいていはまちがっている。専門家でさえ、まずデバッ
     ガで事実を調べない限り、正しい予想はできない。



File: emacs-ja.info, Node: Sending Patches, Prev: Checklist, Up: Bugs

GNU Emacsに対する修正を送る
---------------------------

GNU Emacsに対する改良や虫取りのための修正を送ろうということであれば、
おおいに助かります。修正を送るにあたっては、保守チームがそれを役立てや
すいように、以下の指針に従ってください。さもないと、送られた情報は有用
であっても、役立てるには余分な作業が必要になります。GNU Emacsの保守は
最善の環境でやっても手間のかかる仕事ですから、手助けしていただくにして
も十分な配慮が必要なのです。

   * その修正がどのような問題を解決するものか、またはどのような改善を
     もたらすものなのかの説明を送ってほしい。バグに対する修正の場合は、
     バグレポートのコピーと、なぜこの修正でバグが取れるのかの説明を含
     める。

     （バグレポートへのポインタを示すよりも、バグレポートのコピーを含
     めるほうが望ましい。というのは、ポインタだとバグレポートを探す必
     要があるし、そのバグを直し終えていると、バグレポートを消してしまっ
     ているかもしれない。）

   * 修正したと思う問題に対応した適切なバグレポート全体をつねに含めて
     ほしい。保守チームのほうでも修正を適用するまえにその変更が適切な
     ものであることを確信する必要がある。たとえ修正が正しいものであっ
     ても、もとの問題を再現する方法がないと、修正内容を正しく理解でき
     ないかもしれない。

   * 将来そのソースを読むすべての人に、その変更がなぜ必要だったか理解
     するのを助けるに足るだけのコメントをソースに入れる。

   * 異なる理由に基づく変更を混ぜない。あくまでも*別々に*送る。

     異なる理由に基づいて2つの変更を行った場合、その両方を採用すること
     はないだろう。どちらか一方だけを採用するかもしれない。もしそれら
     をいっしょくたに1つのdiffにしてしまうと、それを分離するために余計
     な作業が必要になる。どの部分の変更がどちらの目的に対応しているの
     か調べる必要がある。その時間を割けないと、その変更をまったく採用
     しないということにもなりかねない。

     それぞれの変更を行ってすぐに、別個に、説明を付けて送ってもらえれ
     ば、2つの変更が一緒になるなどということはないし、それぞれの変更を
     分離するなどの余計な作業をせずに適切に考慮できる。

   * それぞれの変更は完成したらすぐに送ってほしい。ときどき、多くの変
     更を溜めておいてまとめて送ったほうがいいと思っている人に出会う。
     上で説明したように、それは最悪のやり方。

     それぞれの変更は別個に送るべきなので、変更を行ったらすぐに送れる
     はず。そうすれば、保守チームのほうでその変更が重要なものだと判断
     したらすぐ取り入れることができる。

   * diffファイルを作るときには、`diff -c'を使う。コンテキストdiffでな
     いdiffファイルは正しく適用するのが難しい。それ以上に、調べるのも
     たいへん。必ず保守チームの人間が修正を適用するかどうか検討する。
     `-u'形式は行番号だけのdiffよりはましだが、いちばん読みやすいのは
     `-c'形式。

     もしGNU diffを使っているのなら、Cのコードのdiffを作るときには
     `diff -c -F'^[_a-zA-Z0-9$]+ *(''を使う。こうすると、変更される各
     関数の名前が一緒に表示される。

   * どっちが古い版でどっちが新しい版か曖昧さがないようにする。diffコ
     マンドの第1引数に古いファイル、第2引数に新しいファイルを指定して
     diffファイルを作成する。そして、それぞれのファイル名を見ればどっ
     ちが古い版でどっちが新しい版かわかるようにファイル名を付ける。

   * 変更に対する変更記録を書く。そうしてあれば、保守チームのほうで書
     く時間が節約でき、保守チームが変更内容を理解する手助けにもなる。

     変更記録の目的は、人が読んでどこが変わったかわかるようにすること。
     だから、どの関数を変更したか具体的に書く。大きい関数の場合は、関
     数の中のどの箇所を変更したかも書いてあると助かる。

     その反面、どこが変更されたかわかるようにさえなっていれば、変更の
     目的は変更記録で説明する必要はない。たとえば、新しい関数を追加し
     たのであれば、その関数が新しいということだけを書けば十分。目的を
     説明したほうがよいと感じるなら、たぶんそのとおりだろう。しかし、
     説明はコード中のコメントに書く。そのほうが役に立つ。

     ディレクトリ`src'とディレクトリ`lisp'のファイル`ChangeLog'を眺め
     て、どのような情報を入れるかとか、どのようなスタイルで書くかの参
     考にしてほしい。誰が変更したかわかるように自分の名前をヘッダの行
     に記録したいなら、ヘッダ行も送ること。

   * 修正を行うにあたっては、他のシステムで動かなくなるような変更は採
     用できないということを承知しておいてほしい。自分が行う変更が、他
     の種類のシステムにおいてはどのような影響をもたらすかについて熟慮
     してほしい。

     ときどき、おおむね改良になる*かも*しれないが、はっきり改良だとは
     いいがたいような変更を送ってくる人がいる。そのような変更は、きわ
     めて慎重に検討しなければならないので、採用するのは難しい。もちろ
     ん、あなたがどのような理由でその変更が正しいのかよい説明を書いて
     くれれば、保守チームがそれを理解する助けになる。

     もっとも安全な変更は、特定のマシンの構成ファイルに対する変更。そ
     れが安全だという理由は、その変更が他のマシンにおいて問題を引き起
     こすことはありえないから。

     修正を採用しても安全だとはっきりわかる形に設計することで、保守チー
     ムの労力を軽減できる。



File: emacs-ja.info, Node: Contributing, Next: Service, Prev: Bugs, Up: Top

Emacsの開発に貢献するには
=========================

Emacsのプレテスト版が正しく動作することの確認を手助けしたかったり、
Emacsの改良作業に加わりたければ、`bug-gun-emacs@gnu.org'の保守チームに
連絡してください。プレテスト参加者は、バグを報告するだけでなく、バグを
探すことも要求されます。Emacsの改良に加わりたければ、保守チームにプロ
ジェクトの示唆を求めるか、あなたのアイデアを提案してください。

すでに改良したコードを書いてしまったのなら、それについて教えてください。
まだ作業を始めていないのなら、始めるまえに`bug-gnu-emacs@gnu.org'に連
絡したほうがよいです。そうすれば、Emacsの残りの部分とよく適合する形で
拡張を行うにはどうしたらよいかのヒントがもらえるでしょう。



File: emacs-ja.info, Node: Service, Next: Command Arguments, Prev: Contributing, Up: Top

GNU Emacsに関する助言を得るには
===============================

GNU Emacsをインストールしたり、使ったり、変更したりするうえで手助けが
必要なら、2つの方法があります。

   * メイリングリスト`help-gnu-emacs@gnu.org'にメッセージを送るか、ニュー
     スグループ`gnu.emacs.help'に投稿する。（これらのメイリングリスト
     とニュースグループは相互乗り入れしているので、どちらを使ってもか
     まわない。）

   * サービスディレクトリで、有償で手助けしてくれるような人を探す。サー
     ビスディレクトリは、Emacs配布物の中のファイル`etc/SERVICE'にある。


File: emacs-ja.info, Node: Command Arguments, Next: Antinews, Prev: Service, Up: Top

コマンド行引数
**************

GNU Emacsでは、コマンド行引数によりEmacs起動時にさまざまな動作を指定で
きます。これらは他のエディタとの互換性のためや洗練されたふるまいを担う
ものです。通常の編集作業にはそれらを使うことはお勧めしません。

`-'で始まる引数は"オプション"（option）です。それ以外の引数は訪れるべ
きファイルを指定します。Emacsは、起動すると指定したファイルを読み込み
ます。コマンド行のいちばん最後のファイル名がカレントバッファとなります
が、それ以外のファイルも別々のバッファに入っています。他のGNUのコマン
ドと同様に、特殊な引数`--'は、これよりあとの引数が`-'で始まっている場
合でも、すべてファイル名であることを指定します。

Emacsのコマンドオプションでは、Emacsが使用するXのウィンドウのサイズや
位置、表示色などのさまざまなことを指定できます。バッチモードでLisp関数
を実行するなどの進んだ利用のためのオプションも若干あります。ここでは、
目的別に利用可能なオプションを説明します。

オプションの書き方は2通りあります。1文字の`-'で始まる短い形式と、`--'
で始まる長い形式です。たとえば、`-d'は短い形式であり、`--display'はこ
れに対応した長い形式です。

`--'で始まる長い形式のほうが覚えやすいですが、打ち込むのは面倒です。し
かし、オプション名を完全にすべて入力する必要はありません。曖昧でないよ
うに省略すれば十分です。長いオプションが引数をとる場合には、オプション
名と引数のあいだに空白か等号を置きます。つまり、`--display
sugar-bombs:0.0'と書くか、`--display=sugar-bombs:0.0'と書きます。関係
が明瞭になることもあり、以下の例でもつねに等号を使っていますので、等号
を使うようお勧めします。

ほとんどのオプションは、Emacsをどう初期化するか、あるいは、Emacsセッショ
ンのパラメータをどう設定するか指示します。これらを"初期化オプション"
（initial options）と呼びます。動作を指定するオプションもいくつかあり
ます。たとえば、ライブラリをロードする、関数を呼び出す、Emacsを終了す
るなどです。これらを"動作オプション"（action options）と呼びます。これ
らとファイル名をあわせて"動作引数"（action arguments）と呼びます。
Emacsはすべての動作引数を書かれた順に処理します。

* Menu:

* Action Arguments::	Arguments to visit files, load libraries,
			  and call functions.
* Initial Options::     Arguments that take effect while starting Emacs.
* Command Example::     Examples of using command line arguments.
* Resume Arguments::	Specifying arguments when you resume a running Emacs.
* Environment::         Environment variables that Emacs uses.

* Display X::           Changing the default display and using remote login.
* Font X::	        Choosing a font for text, under X.
* Colors X::	        Choosing colors, under X.
* Window Size X::       Start-up window size, under X.
* Borders X::	        Internal and external borders, under X.
* Title X::             Specifying the initial frame's title.
* Icons X::             Choosing what sort of icon to use, under X.
* Resources X::         Advanced use of classes and resources, under X.
* Lucid Resources::     X resources for Lucid menus.
* Motif Resources::     X resources for Motif menus.



File: emacs-ja.info, Node: Action Arguments, Next: Initial Options, Up: Command Arguments

動作引数
========

以下は、動作引数とオプションとその引数の一覧です。

`FILE'
     `find-file'を使ってファイルFILEを訪れる。*Note Visiting::。

`+LINENUM FILE'
     `find-file'を使ってファイルFILEを訪れ、その中の行番号LINENUMの行
     に移動する。

`-l FILE'
`--load=FILE'
     関数`load'を使ってFILEという名前のLispライブラリをロードする。
     *Note Lisp Libraries::。ライブラリは、カレントディレクトリか
     `EMACSLOADPATH'（*Note General Variables::）で指定されたEmacsのラ
     イブラリ探索パスから探す。

`-f FUNCTION'
`--funcall=FUNCTION'
     引数なしでLisp関数FUNCTIONを呼び出す。

`--eval EXPRESSION'
     Lisp式EXPRESSIONを評価する。

`--insert=FILE'
     ファイルFILEの内容をカレントバッファに挿入する。これは`M-x
     insert-file'と同じ動作。*Note Misc File Ops::。

`--kill'
     問い合わせずにEmacsを終了する。

初期化ファイルでは、変数`command-line-args'内のリストの要素として動作
引数の値を参照できます。初期化ファイルでは、この変数を読んだり設定する
ことで、動作引数の通常の処理を無効にしたり新たなものを定義したりできま
す。



File: emacs-ja.info, Node: Initial Options, Next: Command Example, Prev: Action Arguments, Up: Command Arguments

初期化オプション
================

初期化オプションはEmacsセッションのパラメータを指定します。ここでは、
より一般的な初期化オプションを説明します。Xウィンドウシステムに関連す
る他のオプションはこのあとの節にあります。

初期化ファイルのロードに影響する初期化オプションもあります。Emacsの通
常の動作は、まず`site-start.el'（が存在すればそれ）をロードし、続いて
個人用の`~/.emacs'（が存在すればそれ）をロードし、最後に`default.el'
（が存在すればそれ）をロードします。これらのファイルのロードを抑制した
り、代替ファイルを指定するオプションがあります。

`-t DEVICE'
`--terminal=DEVICE'
     入出力端末装置としてDEVICEを使う。

`-d DISPLAY'
`--display=DISPLAY'
     Xウィンドウシステムを用い、ディスプレイ名DISPLAYのディスプレイに
     Emacsの初期フレームを開く。

`-nw'
`--no-windows'
     環境変数`DISPLAY'が設定されている場合でもそれを無視し、Xとは直接
     通信しない。

`-batch'
`--batch'
     Emacsを"バッチモード"で実行する。つまり、編集中のテキストを表示せ
     ずに、`C-z'と`C-c'などの標準の端末割り込み文字は通常の効果をもつ。
     バッチモードのEmacsでは、プログラムの制御に従って通常エコー領域に
     表示されるもののみを`stderr'へ出力する。

     バッチモードは、シェルスクリプトやmakefileなどからEmacs Lispで書
     いたプログラムを実行するために使う。バッチ処理を行うLispプログラ
     ムを起動するために、通常、オプション`-l'や`-f'も使われる。

     `-batch'は、（初期化ファイルをロードしない）`-q'を含む。また、す
     べてのコマンドオプションを処理し終えるとEamcsは終了する。さらに、
     明示的に指定しない限りバッファを自動的に保存しない。

`-q'
`--no-init-file'
     個人の初期化ファイル`~/.emacs'も`default.el'もロードしない。

`--no-site-file'
     `site-start.el'をロードしない。オプション、`-q'、`-u'、`-batch'は、
     このファイルのロードには影響しない。ファイル`site-start.el'のロー
     ドを抑止する唯一のオプションである。

`-u USER'
`--user=USER'
     自分の初期化ファイルのかわりにユーザーUSERのEmacs初期化ファイル
     `~USER/.emacs'をロードする。

`--debug-init'
     初期化ファイル内でのエラーに対しEmacs Lispデバッガを利用可能にす
     る。

`--unibyte'
     ユニバイトバッファやユニバイト文字列を使うようにすべてを設定する。
     ユーザー（やLispプログラム）がマルチバイトバッファやマルチバイト
     文字列の使用を明示しない限り、すべてのバッファや文字列はユニバイ
     トである。環境変数`EMACS_UNIBYTE'を設定しても同じ効果になる。

`--multibyte'
     `EMACS_UNIBYTE'の効果を禁止し、通常のように、Emacsはデフォルトで
     マルチバイト文字を使う。



File: emacs-ja.info, Node: Command Example, Next: Resume Arguments, Prev: Initial Options, Up: Command Arguments

コマンド引数の例
================

以下は、引数やオプションを指定したEmacsの使用例です。ファイル
`hack-c.el'にはLispプログラムが入っているものとします。これをロードす
ると、Cのプログラムを内容とするカレントバッファに対してなんらかの有用
な操作を行うものとします。

     emacs -batch foo.c -l hack-c -f save-buffer >& log

この意味は、`foo.c'を訪れ、（訪れたファイルを変更する）`hack-c.el'をロー
ドし、`foo.c'に保存し（`save-buffer'は`C-x C-s'にバインドされた関数）、
（`-batch'があるので）終了してシェルへ戻ります。また、`-batch'により
Emacsは表示端末を利用できないと仮定するので、出力を`log'へリダイレクト
しても問題ないことが保証されます。



File: emacs-ja.info, Node: Resume Arguments, Next: Environment, Prev: Command Example, Up: Command Arguments

引数を指定したEmacsの再開
=========================

Emacsをいったん休止したあとで再開するときには動作引数を指定できます。
その準備として、個人の`.emacs'につぎのコードを入れておきます（*Note
Hooks::）。

     (add-hook 'suspend-hook 'resume-suspend-hook)
     (add-hook 'suspend-resume-hook 'resume-process-args)

さらに、（cshを使っているなら）シェルスクリプト`emacs.csh'か、（bashを
使っているなら）`emacs.bash'を実行する必要があります。これらのスクリプ
トは`edit'という別名（エイリアス）を定義します。この別名は、訪れるべき
ファイルなどのコマンド行引数を新たに与えてEmacsを（休止状態から）再開
します。

Emacsを再開する場合には動作引数しか使えません。初期化引数は認識されま
せん。なぜなら、初期化を行うには遅すぎるのです。

（引数の有無に関わらず）Emacsの再開はEmacsジョブの親であるシェルから行
う必要があります。`edit'が、プログラムやシェルスクリプトではなく、別名
であるのはこのためです。シェルの別のサブジョブから実行できる再開コマン
ドを実現することは不可能です。たとえば、環境変数`EDITOR'の値に指定でき
るコマンドを定義する方法はありません。したがって、この機能でEmacsサー
バーの機能（*Note Emacs Server::）を置き換えることはできません。

別名`edit'は、Emacsサーバーが稼働中ならEmacsサーバーの機能を使います。
しかし、このことを完全に正確に調べる方法はありません。実際にはEmacsが
終了していても、ファイル`/tmp/.esrv...'が存在するとサーバーが稼働中で
あると誤認してしまいます。そのような場合には、そのファイルを探して削除
してください。



File: emacs-ja.info, Node: Environment, Next: Display X, Prev: Resume Arguments, Up: Command Arguments

環境変数
========

ここでは、Emacsがどうのように環境変数を使うか説明します。環境変数とは、
オペレーティングシステムからEmacsへ渡される文字列であり、環境変数の集
まりが環境です。環境変数名では大文字小文字を区別し大文字だけを使う習慣
があります。

環境変数はオペレーティングシステムが与えるものなので、それらを設定する
一般的な方法はありません。設定方法は、オペレーティングシステム、特に、
使用するシェルに依存します。たとえば、bashを使って環境変数
`ORGANIZATION'に`not very much'を設定するにはつぎのようにします。

     export ORGANIZATION="not very much"

cshやtcshの場合にはつぎのようにします。

     setenv ORGANIZATION "not very much"

EmacsがXウィンドウシステムを使うようになっている場合には、EmacsはXライ
ブラリから非常に多数の環境変数を受け継ぎます。詳しくはXのドキュメント
を参照してください。

* Menu:

* General Variables::   Environment variables that all versions of Emacs use.
* Misc Variables::      Certain system-specific variables.



File: emacs-ja.info, Node: General Variables, Next: Misc Variables, Up: Environment

一般的な変数
------------

`AUTHORCOPY'
     GNUSパッケージで投稿したニュース記事の保管用ファイルの名前。
`CDPATH'
     相対ディレクトリ名を指定したときに、そのディレクトリを探索するた
     めに`cd'コマンドが使う。
`DOMAINNAME'
     Emacsが動いているマシンが属するInternetのドメイン名。GNUSパッケー
     ジが使う。
`EMACS_UNIBYTE'
     この環境変数を定義すると、Emacsはユニバイトバッファやユニバイト文
     字列を使うようにすべてを設定する。起動時に、毎回、コマンド行オプ
     ション`--unibyte'を使うのと等価である。*Note Initial Options::。
`EMACSDATA'
     Emacsに付属の機種独立なファイルを探すために使う変数
     `data-direcotry'の初期化に用いる。Emacs作成時の`paths.h'での設定
     に優先する。
`EMACSLOADPATH'
     ロードすべきEmacs Lispファイルを探索するディレクトリをコロンで区
     切った並び。Emacs作成時の`paths.h'での設定に優先する。
`EMACSLOCKDIR'
     複数のユーザーが同じファイルを同時に編集するの防ぐために用いるロッ
     クファイルを置くディレクトリ。Emacs作成時の`paths.h'での設定に優
     先する。
`EMACSPATH'
     Emacsに特有のバイナリファイルを置く場所。Emacs作成時の`paths.h'で
     の設定に優先する。
`ESHELL'
     シェル（shell）モードで使い、環境変数`SHELL'の設定に優先する。
`HISTFILE'
     ログインとつぎのログインのあいだでシェルコマンドを保存しておくファ
     イルの名前。この変数のデフォルトは、シェルとしてcshやtcshを使う場
     合は`~/.history'、bashの場合は`~/.bash_history'、kshの場合は
     `~/.sh_history'、その他の場合には`~/.history'である。
`HOME'
     ディレクトリ木構造上でのユーザーのファイルの置き場所。ティルダ
     （`~'）で始まるファイル名の展開に使われる。MS-DOSでは、Emacsが起
     動されたディレクトリがデフォルトであるが、`/bin'で終る場合には
     `/bin'は取り除く。
`HOSTNAME'
     Emacsが動いているマシンの名前。
`INCPATH'
     コロンで区切ったディレクトリの並び。`complete'パッケージがファイ
     ルを探すために使う。
`INFOPATH'
     infoファイルを収めたディレクトリをコロンで区切った並び。Emacs作成
     時の`paths.h'での設定に優先する。
`LANG'
`LC_ALL'
`LC_CTYPE'
     ユーザーの好みのローケル。ローケル名に、Nを1から4として、`8859-N'、
     `8859_N'、`8859N'が含まれると、自動的に`Latin-N'をEmacs起動時の言
     語環境に指定する。Nが9であると`Latin-5'を指定する。
`LOGNAME'
     ユーザーのログイン名。`USER'も参照。
`MAIL'
     ユーザーのシステムメイルスプールの名前。
`MAILRC'
     メイルの別名を収めたファイルの名前。デフォルトは`~/.mailrc'。
`MH'
     mhシステムの設定ファイルの名前。デフォルトは`~/.mh_profile'。
`NAME'
     ユーザーの実世界での名前。
`NNTPSERVER'
     ニュースサーバーの名前。mhやGNUSパッケージで用いる。
`ORGANIZATION'
     読者が所属している組織の名前。GNUSパッケージで投稿する記事のヘッ
     ダ「Organization:」の設定に使う。
`PATH'
     実行ファイルを置いたディレクトリをコロンで区切った並び。（MS-DOS
     ではセミコロンで区切る。）この変数はEmacs Lispの変数`exec-path'の
     設定に使われる。Emacsの中ではこのLisp変数の値を使うことになる。
`PWD'
     設定すると、Emacs起動時のデフォルトディレクトリになる。
`REPLYTO'
     設定すると、変数`mail-default-reply-to'の初期値を指定する。*Note
     Mail Headers::。
`SAVEDIR'
     ニュース記事を保存するデフォルトのディレクトリ名。GNUSパッケージ
     が使う。
`SHELL'
     Emacs内から起動するプログラムの解析や実行に用いるインタープリタの
     名前。
`TERM'
     Emacsが動いている端末の名前。バッチモードでの実行でなければこの変
     数を設定する必要がある。MS-DOSではデフォルトは`internal'であり、
     マシン固有の画面を扱う内蔵の端末エミュレータを意味する。
`TERMCAP'
     変数`TERM'で指定した端末をどのように制御するか記述したtermcapライ
     ブラリファイルの名前。デフォルトは`/etc/termcap'。
`TMPDIR'
     Emergeパッケージが使い、作業用ファイルの接頭辞。
`TZ'
     現在のタイムゾーン（時刻帯）を指定し必要なら夏時間も指定する。
     MS-DOSではデフォルトは国別コードに基づく。詳しくはファイル
     `msdos.c'を参照。
`USER'
     ユーザーのログイン名。`LOGNAME'も参照。MS-DOSではデフォルトは
     `root'。
`VERSION_CONTROL'
     変数`version-control'（*Note Backup Names::）の初期化に使う。



File: emacs-ja.info, Node: Misc Variables, Prev: General Variables, Up: Environment

その他の変数
------------

これらの変数は特定の場合に限って使われます。

`COMSPEC'
     MS-DOSにおいて、使用するコマンドインタープリタの名前。環境変数
     `SHELL'のデフォルト値になる。

`NAME'
     MS-DOSにおいて、この変数は変数`USER'のデフォルト値になる。

`TEMP'
`TMP'
     MS-DOSにおいて、作業用ファイルを置くディレクトリの名前を指定する。

`EMACSTEST'
     MS-DOSにおいて、内蔵の端末エミュレータの動作を記録するために使う
     ファイルを指定する。この機能はバグレポートを提出するときに有益で
     ある。

`EMACSCOLORS'
     MS-DOSシステムにおいて、スクリーンの初期表示色を設定してEmacs起動
     時に瞬間的にデフォルトの表示色が閃かないようにする。この変数の値
     は、デフォルトのフェイスの（1文字目で）前景色と（2文字目で）背景
     色を符号化した2文字であること。それぞれの文字は、標準的なPCのテキ
     ストモード画面の表示色を表す16進符号であること。

     PCの画面では、通常、8色の背景色しか扱えない。しかし、EmacsはDOSの
     画面を16色の背景色のモードに切り替えるので、背景色の下位4bitすべ
     てが実際に使われる。

`WINDOW_GFX'
     Sunのウィンドウシステムを初期化するときに使う。



File: emacs-ja.info, Node: Display X, Next: Font X, Prev: Environment, Up: Command Arguments

ディスプレイ名の指定
====================

環境変数`DISPLAY'は、Emacsを含むすべてのXクライアントにウィンドウをど
こに表示するかを教えます。普通の状況では、Xサーバーを起動してローカル
でジョブを走らせると、この変数の値はデフォルトで設定されます。場合によっ
ては、自分でディスプレイを指定する必要があるでしょう。たとえば、リモー
トログインしてリモート側でクライアントプログラムを実行し、表示はローカ
ルの画面にする場合です。

Emacsを使う場合、デフォルトのディスプレイを変更する主な理由は、他のシ
ステムにログインしてそのシステム上でEmacsを実行し、ウィンドウはローカ
ルの画面に表示するためです。他のシステムにログインするのは、そのシステ
ム上に編集したいファイルがあるか、あるいは、実行したいEmacsの実行ファ
イルがそのシステムにあるからでしょう。

環境変数`DISPLAY'の書式は`HOST:DISPLAY.SCREEN'です。HOSTはXウィンドウ
システムのサーバーマシンの名前、DISPLAYは同じマシンの別のサーバーと読
者のサーバー（X端末）を区別するために任意に割り振られた番号、SCREENは
稀にしか使いませんが1つのXサーバーで複数の端末画面を制御する場合に使い
ます。ピリオドとSCREENは省いてかまいません。指定する場合、SCREENは普通
はゼロです。

たとえば、読者のホストの名前は`glasperle'であり、読者のサーバーは使用
できるサーバーのうちで最初（でたぶん唯一）のものであるとすれば、
`DISPLAY'は`glasperle:0.0'となります。

Emacsを実行するときに明示的にディスプレイ名を指定できます。変数
`DISPLAY'を変更する、あるいは、オプションの`-d DISPLAY'や
`--display=DISPLAY'を指定します。たとえばつぎのようにします

     emacs --display=glasperle:0 &

オプション`-nw'を指定するとXを直接使用することを禁止できます。これも初
期化オプションです。Emacsに対して制御端末に通常のASCII文字を表示するよ
うに指示します。

セキュリティの設定によっては、リモートシステムのプログラムから読者のロー
カルのシステムに表示するのが禁止されます。この場合、Emacsを走らせると
つぎのようなメッセージが出力されます。

     Xlib:  connection to "glasperle:0.0" refused by server

この問題は、`xhost'コマンド (1) (*Note Display X-Footnotes::) を用いて、
ローカルマシンにリモートシステムからのアクセス許可を与えれば解決できま
す。


File: emacs-ja.info  Node: Display X-Footnotes, Up: Display X

(1) 【訳注】ホスト単位でアクセスを制御する`xhost'コマンドより、ユー
ザー単位でアクセスを制御する`xauth'のほうが望ましいだろう。



File: emacs-ja.info, Node: Font X, Next: Colors X, Prev: Display X, Up: Command Arguments

フォント指定オプション
======================

デフォルトでは、Emacsは`9x15'という名前のフォントでテキストを表示しま
す。この場合、各文字の幅は9ピクセル、高さは15ピクセルです。コマンド行
のオプション`-fn NAME'で別のフォントを指定できます。

`-fn NAME'
     デフォルトのフォントとしてフォントNAMEを使う。

`--font=NAME'
     `--font'は、`-fn'の別名。

Xにおいては、各フォントはダッシュで区切った11個の単語や数字からなる長
い名前を持ちます。短い愛称を持つフォントもあり、`9x15'はそのような愛称
です。どちらの名前を用いてもかまいません。フォント名にはワイルドカード
パターンを使えますが、その場合には、EmacsはXにパターンに一致するフォン
トを1つ選ばせます。以下の例は、`6x13'という愛称を持つフォントを指定す
ることになります。

     emacs -fn "-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1" &

個人のファイル`.Xdefaults'でもフォントを指定できます。

     emacs.font: -misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1

長いフォント名はつぎのような形式です。

     -MAKER-FAMILY-WEIGHT-SLANT-WIDTHTYPE-STYLE...
     ...-PIXELS-HEIGHT-HORIZ-VERT-SPACING-WIDTH-CHARSET

FAMILY
     フォントファミリ名。たとえば`courier'。
WEIGHT
     通常、`bold'、`medium'、`light'のいずれか。フォントによっては他の
     単語もありえる。
SLANT
     `r'（roman）、`i'（italic）、`o'（oblique）、`ri'（reverse itali
     c）、`ot'（other）のいずれか。
WIDTHTYPE
     通常、`condensed'、`extended'、`semicondensed'、`normal'のいずれ
     か。フォントによっては他の単語もありえる。
STYLE
     付加的な書体名。この部分は普通は空であり、ほとんどの長いファイル
     名では2つのハイフンである。
PIXELS
     ピクセル単位でのフォントの高さ。
HEIGHT
     印刷機の「ポイント」の1/10（約1/720インチ）を単位とした画面上での
     フォントの高さ。いいかえれば、フォントのポイントサイズの10倍。垂
     直解像度を指定すれば、HEIGHTとPIXELSは比例する。したがって、どち
     らか一方を指定して他方には`*'を用いるのが一般的である。
HORIZ
     フォントが仮定するインチあたりのピクセル数で表した画面の水平解像
     度。
VERT
     フォントが仮定するインチあたりのドット数で表した画面の垂直解像度。
     通常、読者のシステムのフォントの解像度は読者の画面に適しているは
     ずなので、これとHORIZには普通は`*'を指定する。
SPACING
     `m'（monospace）、`p'（proportional）、`c'（character cell）のい
     ずれか。Emacsでは`m'と`c'のフォントを利用できる。
WIDTH
     ピクセル単位で表した文字の平均幅の10倍。
CHARSET
     フォントの描く文字集合。通常は`iso8859-1'を使うであろう。 (1)
     (*Note Font X-Footnotes::)

固定幅フォント、つまり、すべての文字が同じ幅のフォントだけを使ってくだ
さい。Emacsはまだ可変幅のフォントを正しく表示できません。長いフォント
名のSPACING欄が`m'や`c'のフォントは固定幅フォントです。読者のシステム
で利用可能な固定幅フォントをすべて表示するには、プログラム`xlsfotns'を
用いてつぎのようにします。

     xlsfonts -fn '*x*' | egrep "^[0-9]+x[0-9]+"
     xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-m*'
     xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-c*'

特定のフォントの字形を見るにはコマンド`xfd'を使います。たとえば、

     xfd -fn 6x13

とするとフォント`6x13'全体を表示します。

Emacsが動作中のときは、カレントフレーム（*Note Frame Parameters::）、
あるいは、特定の種類のテキスト（*Note Faces::）のフォントを設定できま
す。


File: emacs-ja.info  Node: Font X-Footnotes, Up: Font X

(1) 【訳注】日本語の場合は、通常、`jisx0208.1983-0'などを使
うであろう。



File: emacs-ja.info, Node: Colors X, Next: Window Size X, Prev: Font X, Up: Command Arguments

ウィンドウ表示色オプション
==========================

カラーディスプレイでは、Emacsの表示画面のさまざまな部分に使う表示色を
指定できます。システムで利用可能な表示色を調べるにはファイル
`/usr/lib/X11/rgb.txt' (1) (*Note Colors X-Footnotes::)を見ます。表示
色を指定しないと、背景色のデフォルトは白、それ以外の表示色のデフォルト
は黒です。モノクロディスプレイでは、前景色は黒、背景色は白、ディスプレ
イで表示できるなら境界部分は灰色です。

以下は、表示色を指定するオプションの一覧です。

`-fg COLOR'
`--foreground-color=COLOR'
     前景色を指定する。
`-bg COLOR'
`--background-color=COLOR'
     背景色を指定する。
`-bd COLOR'
`--border-color=COLOR'
     Xのウィンドウの境界部分の表示色を指定する。
`-cr COLOR'
`--cursor-color=COLOR'
     ポイント位置を表すEmacsのカーソルの表示色を指定する。
`-ms COLOR'
`--mouse-color=COLOR'
     マウスがEmacsのウィンドウ内にあるときのマウスカーソルの表示色を指
     定する。
`-r'
`--reverse-video'
     反転表示する。背景色と前景色を入れ替える。

たとえば、珊瑚色のマウスカーソルと青石板色のテキストカーソルを用いるに
は、つぎのように入力します。

     emacs -ms coral -cr 'slate blue' &

オプション`-r'かXリソースの`reverseVideo'で前景色と背景色を入れ替えら
れます。


File: emacs-ja.info  Node: Colors X-Footnotes, Up: Colors X

(1) 【訳注】表示色として指定できる『名前』がわかるだけ。どのような色に
表示されるかは`xcolors'などのコマンドで調べるとよい。




File: emacs-ja.info, Node: Window Size X, Next: Borders X, Prev: Colors X, Up: Command Arguments

ウィンドウジオメトリオプション
==============================

オプション`-geometry'は、Emacsの初期フレームのサイズと位置を制御します。
ウィンドウのジオメトリ（サイズと位置）を指定する書式はつぎのとおりです。

`-g WIDTHxHEIGHT{+-}XOFFSET{+-}YOFFSET'
     WIDTHとHEIGHTでウィンドウの（文字の桁数と行数で数えた）サイズを、
     XOFFSETとYOFFSETで（ピクセル単位で）位置を指定する。

`--geometry=WIDTHxHEIGHT{+-}XOFFSET{+-}YOFFSET'
     同じことを記述する別の方法。

`{+-}'はプラス記号かマイナス記号のいずれかを意味します。XOFFSETのまえ
のプラス記号で画面左端からの距離を、マイナス記号で右端からの距離を意味
します。YOFFSETのまえのプラス記号で画面上端からの距離を、マイナス記号
で下端からの距離を意味します。XOFFSETとYOFFSETの値自体は正でも負でもよ
いのですが、その意味は変わらずに方向を変えるだけです。

Emacsがジオメトリを解釈する単位は、`xterm'と同じ単位です。WIDTHと
HEIGHTは文字数で数えますから、大きなフォントでは小さいフォントよりも大
きなフレームになります。XOFFSETとYOFFSETはピクセル単位で数えます。

モード行とエコー領域はフレームの最後の2行を占めるので、初期のテキスト
ウィンドウの高さはジオメトリで指定した高さより2だけ小さくなります。Xツー
ルキット版でないEmacsでは、指定した数からさらに1行をメニューバーに利用
します。

ジオメトリ指定のすべての部分を指定する必要はありません。

XOFFSETとYOFFSETの両方を省くとウィンドウマネージャがEmacsのフレームの
位置を決めますが、マウスで置き場所を指定できる場合もあります。たとえば、
`164x55'は（普通の幅のウィンドウを横に並べて2つ置けるサイズの）164桁で
55行のウィンドウを指定します。

デフォルトではEmacsの幅は80文字で高さは40行です。いずれか一方、あるい
は、両方を省略できます。ジオメトリを数で始めると幅であると解釈します。
`x'で始まり数が続けば高さであると解釈します。したがって、`81'は幅だけ
を指定し、`x45'は高さだけを指定します。

`+'か`-'で始まれば位置指定となり、幅と高さの両方を省いたことを意味しま
す。したがって、`-3'はXOFFSETのみを指定します。（位置指定の要素が1つだ
けの場合にはつねにXOFFSETです。）`+3-3'はXOFFSETとYOFFSETを指定し、画
面の左底近くにフレームを置きます。

ファイル`.Xdefaults'ですべての部分か一部分のデフォルトを指定し、オプショ
ン`--geometry'で特定の部分を上書きできます。



File: emacs-ja.info, Node: Borders X, Next: Title X, Prev: Window Size X, Up: Command Arguments

内部境界と外部境界
==================

Emacsのフレームには内部境界と外部境界があります。内部境界はフレームの4
辺の周りに付いた背景色の縁取りです。Emacs自身が内部境界を付加します。
外部境界は、内部境界の外側にウィンドウマネージャが付加します。これには、
ウィンドウを移動したりアイコン化するためにクリックできるさまざまな箱が
付く場合もあります。

`-ib WIDTH'
`--internal-border=WIDTH'
     内部境界の幅としてWIDTHを指定。

`-bw WIDTH'
`--border-width=WIDTH'
     外部境界の幅としてWIDTHを指定。

フレームのサイズ指定には境界は含みません。フレームの位置は外部境界の外
側から測ります。

内部境界の幅をNピクセルにするには、オプション`-ib N'を使います。デフォ
ルトは1です。外部境界の幅を指定するには、（ウィンドウマネージャが指定
を無視するかもしれませんが）`-bw N'を使います。外部境界のデフォルトの
幅は2です。



File: emacs-ja.info, Node: Title X, Next: Icons X, Prev: Borders X, Up: Command Arguments

フレームタイトル
================

Emacsのフレームには、指定したタイトルがあるかもしれないし、ないかもし
れません。フレームタイトルを指定すると、ウィンドウの装飾部分やアイコン
にフレーム名として表示されます。Emacsのフレームにタイトルが指定されて
いなければ、デフォルトのタイトルは、（フレームが1つしかない場合には）
実行プログラムの名前、あるいは、（複数のフレームがあれば）選択したウィ
ンドウのバッファの名前になります。

コマンド行オプションでEmacsの初期フレームのタイトルを指定できます。

`-title TITLE'
`--title=TITLE'
`-T TITLE'
     Emacsの初期フレームのタイトルとしてTITLEを指定する。

オプション`--name'（*Note Resources X::）もEmacsの初期フレームのタイト
ルを指定します。



File: emacs-ja.info, Node: Icons X, Next: Resources X, Prev: Title X, Up: Command Arguments

アイコン
========

ほとんどのウィンドウマネージャは、フレームを『アイコン化』することを許
しています。つまり、フレームを見えなくしてから、その場所に小さな識別し
やすい『アイコン』を置きます。アイコンウィンドウをクリックするとフレー
ム自体が再度表示されます。一度にたくさんのクライアントを動かしておく場
合、クライアントのほとんどをアイコンにしておけば画面が乱雑にならずにす
みます。

`-i'
`--icon-type'
     Emacsのアイコンとしてヌーの絵を使う。

`-iconic'
`--iconic'
     Emacsをアイコン化した状態で起動する。

オプション`-i'や`--icon-type'は、GNUのヌーの絵を表示したアイコンウィン
ドウを使う指定です。省略すると、Emacsは使用するアイコンの種類をウィン
ドウマネージャに選ばせます。これは、通常、フレームのタイトルを含んだ小
さな長方形のウィンドウです。 (1) (*Note Icons X-Footnotes::)

オプション`-iconic'は、すぐにはフレームを開かずにアイコンで始めるよう
にEmacsを起動します。この場合、アイコンウィンドウはEmacsが起動したこと
だけを教えてくれます。アイコンを開くまで通常のテキストフレームは表示さ
れません。


File: emacs-ja.info  Node: Icons X-Footnotes, Up: Icons X

(1) 【訳注】uwm、twmなど古典的なウィンドウマネージャのふるまい。



File: emacs-ja.info, Node: Resources X, Next: Lucid Resources, Prev: Icons X, Up: Command Arguments

Xリソース
=========

Xウィンドウシステムで動いているプログラムでは、クラスとリソースの階層
によってユーザーのオプションを取りまとめます。これらのオプションのデフォ
ルト値は、`~/.Xdefaults'という名前の個人のXリソースファイルで指定でき
ます。

ファイル内の各行は、1つのオプション、関連したオプション群、1つのプログ
ラム、あるいは、複数（または全部）のプログラムの値を指定します。

プログラムは特定の意味を持ったリソース名を定義します。リソースをどのよ
うにクラス名にグループ化するかも定義します。たとえば、Emacsでは、リソー
ス`internalBorder'は内部境界の幅を制御し、リソース`borderWidth'は外部
境界の幅を制御します。どちらのリソースもクラス`BorderWidth'の一部です。
これらの名前では大文字小文字を区別します。

`~/.Xdefaults'では、以下のように1行に1つのリソースを指定します。

     emacs.borderWidth: 2

あるいは、クラス内のすべてのリソースに同じ値を指定するにはクラス名を使
います。たとえば、つぎのようにします。

     emacs.BorderWidth: 2

クラスに値を指定すると、それはそのクラス内のすべてのリソースのデフォル
ト値になります。個別にリソースの値を指定することもできます。その場合、
特定のリソースの値はクラスの値に優先します。したがって、つぎの例では、
すべての境界のデフォルトの幅として2を指定しますが、外部境界の値は4にな
ります。

     emacs.Borderwidth: 2
     emacs.borderwidth: 4

ファイル内での行の順番は関係ありません。また、コマンド行オプションはつ
ねにXリソースファイルに優先します。

上の例の文字列`emacs'もリソース名です。この名前は、Emacsを起動するため
に指定した実行ファイルの名前を表します。Emacsを別の名前でインストール
したならば、`emacs'のかわりにその名前のリソースを探します。

`-name NAME'
`--name=NAME'
     Emacsの初期フレームのリソース名（およびタイトル）としてNAMEを使う。
     このオプションは、初期フレーム以外には影響しないが、Lispプログラ
     ムからはフレーム作成時にフレーム名を指定できる。

     このオプションを指定しないと、デフォルトではEmacsの実行ファイル名
     をリソース名として使う。

`-xrm RESOURCE-VALUES'
`--xrm=RESOURCE-VALUES'
     EmacsのこのジョブだけのXリソースの値を指定する。（以下を参照）。

整合性のために、`-name'は、どの特定のフレームにも属さないリソースの値
を探すときの名前も指定します。

Emacsを起動するコマンド名と同じ名前のリソースはクラスにも属します。そ
の名前は`Emacs'です。`emacs'のかわりに`Emacs'と書けば、実行ファイルの
名前やフレームタイトルに関わらず、すべてのEmacsジョブのすべてのフレー
ムにリソースが適用されます。たとえば、つぎのようにします。

     Emacs.BorderWidth: 2
     Emacs.borderWidth: 4

コマンド行オプション`-xrm RESOURCES'を使えば、追加のリソースの値を
Emacsに指定できます。テキストRESOURCESは、Xリソースファイルの中で使う
ものと同じ書式です。DATAで複数のリソースを指定するには、ファイルの場合
と同様に、そのあいだに改行を置きます。また、`#include "FILENAME"'を使
えば、ファイル内のリソース指定を取り込めます。`-xrm'で指定したリソース
の値は、これ以外のリソース指定に優先します。

以下は、Emacsのオプションを指定するリソース名とそれが属するクラスの一
覧です。

`background'（クラス`Background'）
     背景の表示色名。

`bitmapIcon'（クラス`BitmapIcon'）
     `on'ならば（ヌーの絵の）ビットマップアイコンを使う。`off'ならばウィ
     ンドウマネージャにアイコンを選ばせる。

`borderColor'（クラス`BorderColor'）
     外部境界の表示色名。

`borderWidth'（クラス`BorderWidth'）
     外部境界の（ピクセル単位の）幅。

`cursorColor'（クラス`Foreground'）
     テキストカーソル（ポイント）の表示色名。

`font'（クラス`Font'）
     テキストのフォント名（あるいはフォントセット名 *Note Fontsets::）。

`foreground'（クラス`Foreground'）
     テキストの表示色名。

`geometry'（クラス`Geometry'）
     ウィンドウのサイズと位置。Emacsフレームだけでなく個々のメニューに
     も影響するので、このリソースを`emacs*geometry'とは指定しないよう
     に注意すること。

     このリソースで指定した位置は、Emacsの初期フレーム（あるいは、特定
     のフレーム名を指定したリソースはそのフレーム）だけに適用される。
     しかし、サイズはすべてのフレームに適用される。

`iconName'（クラス`Title'）
     アイコンに表示する名前。

`internalBorder'（クラス`BorderWidth'）
     内部境界の（ピクセル単位の）幅。

`menuBar'（クラス`MenuBar'）
     `on'ならばフレームにメニューバーを付ける。`off'ならばメニューバー
     を付けない。

`minibuffer'（クラス`Minibuffer'）
     `none'ならばこのフレームにミニバッファを付けない。かわりに、独立
     したミニバッファフレームを使う。

`paneFont'（クラス`Font'）
     ツールキット版でないEmacsのメニューのタイトルに使うフォント名。

`pointerColor'（クラス`Foreground'）
     マウスカーソルの表示色。

`reverseVideo'（クラス`ReverseVideo'）
     `on'ならば前景色と背景色を入れ替え、`off'ならば指定された表示色を
     用いる。

`verticalScrollBars'（クラス`ScrollBars'）
     `on'ならばフレームにスクロールバーを付ける。`off'ならばスクロール
     バーを付けない。

`selectionFont'（クラス`Font'）
     ツールキット版でないEmacsのポップアップメニューの項目に使うフォン
     ト名。（ツールキット版では、*Note Lucid Resources::、あるいは、
     *Note Motif Resources::を参照。）

`title'（クラス`Title'）
     Emacsの初期フレームのタイトルバーに表示する名前。

以下は、特定のフェイス（*Note Faces::）の見え方を制御するリソースです。

`FACE.attributeFont'
     フェイスFACEのフォント。
`FACE.attributeForeground'
     フェイスFACEの前景色。
`FACE.attributeBackground'
     フェイスFACEの背景色。
`FACE.attributeUnderline'
     フェイスFACEの下線フラグ。下線を使うには`on'か`true'を指定する。



File: emacs-ja.info, Node: Lucid Resources, Next: Motif Resources, Prev: Resources X, Up: Command Arguments

LucidメニューのXリソース
========================

Lucidメニューウィジェットを含めたXツールキットを使うEmacsがインストー
ルされている場合には、メニューバーは別のウィジェットであり独自のリソー
スを持ちます。リソース名には（Emacsの起動名かすべてのEmacsの起動を意味
する`Emacs'に続けて）`pane.menubar'が含まれます。これらはつぎのように
指定します。

     Emacs.pane.menubar.RESOURCE:  VALUE

たとえば、メニューバーの項目に`8x16'フォントを指定するには、つぎのよう
に書きます。

     Emacs.pane.menubar.font:  8x16

*メニューバーを使わない*ツールキットのポップアップメニューの項目のリソー
スには、同様に、`menu*'があります。たとえば、ポップアップメニューに
`8x16'のフォントを指定するには、つぎのように書きます。

     Emacs.menu*.font:	8x16

対話ボックスのフォントを指定するには、`menu'のかわりに`dialog'を使って
つぎのように書きます。

     Emacs.dialog*.font:	8x16

経験によれば、`pane.menubar'や`menu*'のまえに`shell.'を付ける必要があ
るシステムもあります。他のシステムでは`shell.'を付加してはいけません。

以下は、メニューバーとポップアップメニューのリソースの一覧です。

`font'
     メニュー項目のテキストのフォント。
`foreground'
     前景色。
`background'
     背景色。
`buttonForeground'
     メニューバーにおいて、選択した項目の前景色。
`horizontalSpacing'
     項目間の横方向のピクセル単位の間隔。デフォルトは3。
`verticalSpacing'
     項目間の縦方向のピクセル単位の間隔。デフォルトは1。
`arrowSpacing'
     （サブメニューを表す）矢印とそれに関連したテキストとの横方向のピ
     クセル単位の間隔。デフォルトは10。
`shadowThickness'
     ウィジェットの周りの影付けの厚み。



File: emacs-ja.info, Node: Motif Resources, Prev: Lucid Resources, Up: Command Arguments

MotifメニューのXリソース
========================

Motifウィジェットを含めたXツールキットを使うEmacsがインストールされて
いる場合には、メニューバーは別のウィジェットであり独自のリソースを持ち
ます。リソース名には（Emacsの起動名かすべてのEmacsの起動を意味する
`Emacs'に続けて）`pane.menubar'が含まれます。これらはつぎのように指定
します。

     Emacs.pane.menubar.SUBWIDGET.RESOURCE:  VALUE

メニューバーの個々の文字列はサブウィジェットです。サブウィジェットの名
前はメニュー項目の文字列と同じです。たとえば、メニューバーの中の単語
`Files'は`emacs.pane.menubar.Files'という名前のサブウィジェットの一部
です。ほとんどの場合、メニューバー全体に同じリソースを指定するでしょう。
それには、特定のサブウィジェット名のかわりに`*'を使います。たとえば、
`8x16'フォントをメニューバーの項目に使うには、つぎのようにします。

     Emacs.pane.menubar.*.fontList:  8x16

これは、サブメニューのリソース値も指定します。

メニューバー内のサブメニューの各項目には、それぞれ独自のXリソース名が
あります。たとえば、`Files'サブメニューには項目`Save Buffer'があります。
サブメニューの項目のリソース指定はつぎのようになります。

     Emacs.pane.menubar.popup_*.MENU.ITEM.RESOURCE: VALUE

たとえば、`Save Buffer'のフォントを指定するには、つぎのようにします。

     Emacs.pane.menubar.popup_*.Files.Save Buffer.fontList: 8x16

`Edit'の下の`Spell'の下にある`Check Message'のような2段下のサブメニュー
の項目では、リソースの雛型はつぎのようになります。

     Emacs.pane.menubar.popup_*.popup_*.MENU.RESOURCE: VALUE

たとえば、つぎのようになります。

     Emacs.pane.menubar.popup_*.popup_*.Spell.Check Message: VALUE
  
サブメニューのリソースを指定せずに、すべてのメニューバーの項目のリソー
スを指定することは不可能です。サブメニューの項目をメニューバー自体とは
異なる見え方にするには、2段階の指定が必要です。まずメニューバーのリソー
スを指定し、そのあとでサブメニューの値だけを上書きします。たとえば、つ
ぎのようにします。

     Emacs.pane.menubar.*.fontList:  8x16
     Emacs.pane.menubar.popup_*.fontList: 8x16

ツールキットのポップアップメニューでは、`pane.menubar'のかわりに
`menu*'を使います。たとえば、ポップアップメニューの項目に`8x16'フォン
トを指定するには、つぎのように書きます。

     Emacs.menu*.fontList:  8x16

以下は、メニューバーとポップアップメニューのリソース指定の一覧です。

`armColor'
     押せるボタンの表示色。
`fontList'
     使用するフォント。
`marginBottom'
`marginHeight'
`marginLeft'
`marginRight'
`marginTop'
`marginWidth'
     境界内で項目の周りに置く空白の量。
`borderWidth'
     メニュー項目を縁取る境界の幅。
`shadowThickness'
     境界の影付けの幅。
`bottomShadowColor'
     境界の下端と右端の影付けの表示色。
`topShadowColor'
     境界の上端と左端の影付けの表示色。




