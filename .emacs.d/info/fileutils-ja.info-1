Info file: fileutils-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `fileutils-ja.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.






START-INFO-DIR-ENTRY
* File utilities(ja): (fileutils-ja).  GNU file utilities.
* chgrp(ja): (fileutils-ja)chgrp invocation.         Change file groups.
* chown(ja): (fileutils-ja)chown invocation.         Change file owners/groups.
* chmod(ja): (fileutils-ja)chmod invocation.         Change file permissions.
* cp(ja): (fileutils-ja)cp invocation.               Copy files.
* dd(ja): (fileutils-ja)dd invocation.               Copy and convert a file.
* df(ja): (fileutils-ja)df invocation.               Report filesystem disk usage.
* dir(ja): (fileutils-ja)dir invocation.             List directories briefly.
* dircolors(ja): (fileutils-ja)dircolors invocation. Color setup for ls.
* du(ja): (fileutils-ja)du invocation.               Report on disk usage.
* install(ja): (fileutils-ja)install invocation.     Copy and change attributes.
* ln(ja): (fileutils-ja)ln invocation.               Make links between files.
* ls(ja): (fileutils-ja)ls invocation.               List directory contents.
* mkdir(ja): (fileutils-ja)mkdir invocation.         Create directories.
* mkfifo(ja): (fileutils-ja)mkfifo invocation.       Create FIFOs (named pipes).
* mknod(ja): (fileutils-ja)mknod invocation.         Create special files.
* mv(ja): (fileutils-ja)mv invocation.               Rename files.
* rm(ja): (fileutils-ja)rm invocation.               Remove files.
* rmdir(ja): (fileutils-ja)rmdir invocation.         Remove empty directories.
* shred(ja): (fileutils-ja)shred invocation.         Remove files more securely.
* sync(ja): (fileutils-ja)sync invocation.           Synchronize memory and disk.
* touch(ja): (fileutils-ja)touch invocation.         Change file timestamps.
* vdir(ja): (fileutils-ja)vdir invocation.           List directories verbosely.
END-INFO-DIR-ENTRY

This file documents the GNU set of file utilities.

Copyright 1994, 95, 96, 1999, 2001 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled "GNU
Free Documentation License".







File: fileutils-ja.info, Node: Top, Next: Introduction, Prev: (dir), Up: (dir)

GNU file utilities
******************


このマニュアルは，GNUファイルユーティリティのバージョン4.1を説明します．

* Menu:

* Introduction::                Caveats, overview, and authors.
* Common options::              Common options.
* File permissions::            Access modes.
* Date input formats::          Specifying date strings.
* Directory listing::           ls dir vdir d v dircolors
* Basic operations::            cp dd install mv rm shred
* Special file types::          ln mkdir rmdir mkfifo mknod
* Changing file attributes::    chgrp chmod chown touch
* Disk usage::                  df du sync
* Index::                       General index.



File: fileutils-ja.info, Node: Introduction, Next: Common options, Prev: Top, Up: Top

はじめに
********


このマニュアルは不完全です．初心者に対して適切な方法でファイルの基本的
な概念を説明する試みがなされていません．このため，興味があれば，このマ
ニュアルの改善に参加してください．GNUコミュニティ全体が利益を得るでしょ
う．

GNUファイルユーティリティは，POSIX.2標準とほとんど互換性があります．

<bug-fileutils@gnu.org>にバグを報告してください．バージョンナンバー，
マシンアーキテクチャ，そしてバグの報告に必要なあらゆる情報，例えば入力，
期待したもの，得たもの，そして何が間違っているのかという情報を含めるこ
とを忘れないでください．差分は歓迎しますが，推測することが難しいときも
あるので，問題の記述も含めてください．*Note Bugs: (gcc)Bugs.

このマニュアルは，元々Unix配布物のmanページから得られ，それはDavid
MacKenzieによって書かれ，Jim Meyeringによって更新されました．現在読ん
でいるものは，これらのユーティリティに対する正式なドキュメントです．
manページはもはや保守されてません．Franc,ois Pinardは，最初にTexinfo書
式に変換しました．Karl Berryは，索引，いくつかの再構成，そして結果の編
集を行いました．Richard Stallmanは全体的な処理に，彼のいつもの貴重な洞
察を寄与しました．




File: fileutils-ja.info, Node: Common options, Next: File permissions, Prev: Introduction, Up: Top

共通のオプション
****************


ある特定のオプションはこれらのプログラムの全てで利用可能です(実際，全
てのGNUプログラムはそれらを受け入れるべきです)．それぞれのプログラムの
個別の記述で書くのではなく，ここで記述します．

`--help'
     全ての利用可能なオプションをリストアップする使用方法のメッセージ
     を出力し，正しく終了します．

`--version'
     バージョンナンバーを出力し，正しく終了します．

* Menu:

* Backup options::              -b -S -V, in some programs.
* Block size::                  BLOCK_SIZE and --block-size, in some programs.
* Target directory::            --target-directory, in some programs.
* Trailing slashes::            --strip-trailing-slashes, in some programs.




File: fileutils-ja.info, Node: Backup options, Next: Block size, Prev: Common options, Up: Common options

バックアップオプション
======================


GNUプログラムには(少なくとも，`cp'，`install'，`ln' と`mv'は)追加で，
新しいバージョンを書く前に，ファイルのバックアップを作成するものもあり
ます．これらのオプションは，これらのバックアップを詳細に制御します．オ
プションは，特定のプログラムでも簡単に記述します．


`-b'
``--backup'[=METHOD]'
     バックアップを作成しない場合，上書きされたり削除されたりするそれ
     ぞれのファイルのバックアップを作成します．このオプションを使用し
     ない場合，元のバージョンは破壊されます．このオプションが使用され，
     METHODが指定されていないときは，`VERSION_CONTROL'環境変数の値が使
     用されます．そして`VERSION_CONTROL'が設定されていない場合は，デフォ
     ルトのバックアップ形式は`existing'になります．


     このオプションの短い形式`-b'は，引数を全く受け入れないことに注意
     してください．`-b'の使用は，`--backup=existing'の使用と等価です．

     このオプションは，Emacs変数の`version-control'に対応します．
     METHODに対する値は，Emacsで使用されるものと同じです．このオプショ
     ンも，より記述的な名前を受け入れます．有効なMETHODは以下の通りで
     す(ユニークに識別できる省略も受け入れます)．

     `none'
     `off'
          バックアップを作成しません．

     `numbered'
     `t'
          常に番号付のバックアップを作成します．

     `existing'
     `nil'
          既に番号付のバックアップファイルがある場合，番号付のバックアッ
          プを作成し，それ以外では単純にバックアップします．

     `simple'
     `never'
          常に単純なバックアップを作成します．`never'と`none'を混同し
          ないように注意してください．

`-S SUFFIX'
`--suffix=SUFFIX'
     `-b'で作成されるそれぞれのバックアップファイルにSUFFIXを追加しま
     す．このオプションが指定されない場合，`SIMPLE_BACKUP_SUFFIX'環境
     変数の値が使用されます．また，`SIMPLE_BACKUP_SUFFIX'が設定されて
     いない場合，デフォルトで`~'となり，それはちょうどEmacsと同じです．

`--version-control=METHOD'
     このオプションは時代遅れで，将来のリリースで削除されるでしょう．それは，
     `--backup'で置換されました．





File: fileutils-ja.info, Node: Block size, Next: Target directory, Prev: Backup options, Up: Common options

ブロックサイズ
==============


GNUプログラム(少なくとも，`df'，`du'と，`ls')には，ファイルサイズを"ブ
ロック"で表示するものもあります．ファイルサイズをより読みやすくするた
め，ブロックサイズを調整できます．表示で使用するブロックサイズは，あら
ゆるファイルシステムのブロックサイズから独立しています．

通常，ディスク使用のサイズは切り上げ，ディスクフリーサイズは切り捨て，
そして，それ以外は，偶数に丸めたときの最も近いブロックで丸められます．


デフォルトブロックサイズは，以下の環境変数を順番に調べることで選択され
ます．最初のものはブロックサイズを決定します．


`DF_BLOCK_SIZE'
     これは，`df'コマンドに対するデフォルトのブロックサイズを指定しま
     す．同様に，`DU_BLOCK_SIZE'は`du'に対するデフォルト，
     `LS_BLOCK_SIZE'は`ls'に対するデフォルトを指定します．

`BLOCK_SIZE'
     上記のコマンド指定の環境変数が設定されていない場合，これは，三つ
     のコマンド全てに対するデフォルトブロックサイズを指定します．

`POSIXLY_CORRECT'
     `COMMAND_BLOCK_SIZE'も`BLOCK_SIZE'変数も設定されていなくて，この
     変数が設定されている場合，ブロックサイズのデフォルトは512になりま
     す．


上記の環境変数がどれも設定されていない場合，ブロックサイズは現在のデフォ
ルトの1024バイトですが，この数は将来変更されるかもしれません．


ブロックサイズの指定は，ブロック毎のバイト数を指定することで，正の整数
にしたり，人間が可読な書式を選択することで，`human-readable'や`si'にし
たりできます．

人間が可読な書式を用いた場合，出力サイズは，メガバイトに対する`M'のよ
うな大きさを示す文字が続きます．`BLOCK_SIZE=human-readable'は1024 乗を
使用します．`M'は1,048,576バイトを意味します．`BLOCK_SIZE=si'は似てい
ますが，1000乗を使用します．`M'は1,000,000を意味します．(SI，国際単位
系は，これらの1000乗の前置を定義します．)

整数のブロックサイズは，そのサイズの倍数を指定する大きさを示す文字を続
けることができます．この注釈が用いられた場合，大きさを示す文字は，通常
1024 倍を意味し，オプションで"バイト"に対する`B'を続けることができます．
しかし，("10進バイト"に対する)`D'が続く場合，それらは1000倍を意味しま
す．例えば，`BLOCK_SIZE=4MB'は`BLOCK_SIZE=4194304'と同じで，
`BLOCK_SIZE=4MD'は`BLOCK_SIZE=4000000'と同じです．

以下の大きさを示す文字は定義されています．`1Y'のような大きなサイズは，
その計算の限界のためコンピュータで拒絶されるかもしれません．

`k'
     キロ：`human-readable'に対する2^10 = 1024，または，`si' に対する
     10^3 = 1000．
`M'
     メガ：2^20 = 1,048,576，または，10^6 = 1,000,000．
`G'
     ギガ：2^30 = 1,073,741,824，または，10^9 = 1,000,000,000．
`T'
     テラ：2^40 = 1,099,511,627,776，または，10^12 = 1,000,000,000,000．

`P'
     ペタ：2^50 = 1,125,899,906,842,624，または，10^15 =
     1,000,000,000,000,000．

`E'
     エクサ：2^60 = 1,152,921,504,606,846,976，または，10^18 =
     1,000,000,000,000,000,000．

`Z'
     ゼータ：2^70 = 1,180,591,620,717,411,303,424，または，10^21
     = 1,000,000,000,000,000,000,000．

`Y'
     ヨット：2^80 = 1,208,925,819,614,629,174,706,176，または，10^24 =
     1,000,000,000,000,000,000,000,000．


ブロックサイズのデフォルトは，`--block-size=SIZE'オプションを明示する
ことで優先できます．`-k'や`--kilobytes'オプションは，`--block-size=1k'
と同じで，それは`POSIXLY_CORRECT'環境変数が指定されていない場合デフォ
ルトです．`-h'や`--human-readable'オプションは，
`--block-size=human-readable'と同じです．`--si'オプションは，
`--block-size=si'と同じです．




File: fileutils-ja.info, Node: Target directory, Next: Trailing slashes, Prev: Block size, Up: Common options

ターゲットディレクトリ
======================


GNUプログラム(少なくとも`cp'，`install'，`ln'，そして`mv')には，このオ
プションによってターゲットディレクトリを指定することが可能なものもあり
ます．


``--target-directory'=DIRECTORY'
     対象となるDIRECTORYを指定します．

     ほとんどのプログラムに対するインターフェースは，オプションと，有
     限(おそらくゼロの)数の固定した位置の引数を処理した後，残りの引数
     リストは空であることを期待される，または，同じように扱われる(通常
     ファイルとなる)項目のリストとなります．`xargs'プログラムは，この
     慣習を用いてより良く動作するように設計されています．

     *終り*に特例で様々な数の引数(すなわち，ターゲットディレクトリ)を持
     つため，`mv'の類のコマンドは普通ではありません．これは`mv *
     ../d/'が引数の空間を使い果たし，`ls | xargs ...'は，それぞれの従属
     するコマンドの呼び出しのために，特別な最終的な引数を指定するため
     の明確な方法ではないため，例えば"全てのファイルをここから../d/に
     移動する" のようないくつかの処理を実行するときに，これは明確では
     なくなります．(それは，シェルコマンドを通じて動作可能ですが，それ
     はそうするより人間の労働と能力を必要とします．)

     `--target-directory'オプションは，`cp'，`install'，
     `ln'，そして`mv'プログラムが，`xargs'を用いて便利に使用す
     ることを可能にします．例えば，現在のディレクトリから同胞のディレクトリ，
     ここでは`d'にファイルを移動することが可能です．(しかし，これは
     `.'で始まる名前のファイルを移動しません．)

          ls |xargs mv --target-directory=../d

     GNU `find'プログラムを使用している場合，このコマンドで*全ての*ファ
     イルを移動できます．

          find . -mindepth 1 -maxdepth 1 \
            | xargs mv --target-directory=../d

     しかし，現在のディレクトリにファイルがない場合や，改行文字を含む
     名前を持つファイルがある場合，それは失敗するでしょう．以下の例は，
     これらの制限を取り除き，GNU `find'とGNU `xargs'の両方を必要としま
     す．

          find . -mindepth 1 -maxdepth 1 -print0 \
            | xargs --null --no-run-if-empty \
                mv --target-directory=../d





File: fileutils-ja.info, Node: Trailing slashes, Prev: Target directory, Up: Common options

末尾のスラッシュ
================


GNUプログラム(少なくとも`cp'と`mv')には，それぞれの
SOURCE引数を処理する前に末尾のスラッシュを取り除くことを可能にする
ものもあります．`--strip-trailing-slashes'オプションはこの動作を
可能にします．

SOURCE引数が末尾にスラッシュがあり，ディレクトリへのシンボリックリンク
を指定しているとき，これは役に立ちます．シェルには，シンボリックリンク
のようなものに対してファイル名の補完を実行しているとき，末尾のスラッシュ
を自動的に追加することができるものもあるので，このシナリオ筋書きは現実
となります．このオプションがない場合，例えば(システムの名前変更機能の
ための)`mv'は，末尾のスラッシュをシンボリックリンク先を参照しないよう
に要求するよう解釈する必要があり，そして，そのためシンボリックリンクで
はなく，間接的に参照される*ディレクトリ*の名前を変更するはずです．その
ような動作がデフォルトということにびっくりするかもしれませんが，それは
POSIX.2で要求されていて，その標準のそれ以外の部分と一貫しています．




File: fileutils-ja.info, Node: File permissions, Next: Directory listing, Prev: Common options, Up: Top

ファイルのパーミッション
************************


それぞれのファイルには，ファイルに対してユーザ持つアクセスの種類を制御
する"許可"の設定があります．ファイルに対する許可は"アクセスモード" と
も呼ばれます．それらは，抽象的な形式または8進数で表示可能です．

* Menu:

* Mode Structure::              Structure of file permissions.
* Symbolic Modes::              Mnemonic permissions representation.
* Numeric Modes::               Permissions as octal numbers.



File: fileutils-ja.info, Node: Mode Structure

ファイルの許可の構造
====================

ユーザがファイルに対して持つ3種類の許可があります．

  1. ファイルを読み込む許可です．ディレクトリに対しては，これはディレ
     クトリの内容をリストアップする許可という意味があります．
  2. ファイルを書き込む(変更する)許可です．ディレクトリに対しては，こ
     れはディレクトリでのファイルの作成と削除の許可を意味します．
  3. ファイルを実行(それをプログラムとして実行)する許可です．ディレク
     トリに対しては，これはディレクトリのファイルにアクセスする許可を
     意味します．

ファイル上で上記のあらゆる処理を行うため，異なる許可を持つ，3つのユー
ザの分類があります．

  1. ファイルの所有者．
  2. ファイルのグループにいるその他のユーザ．
  3. その他全員．

ファイルが作成されるとき，所有者とグループが与えられます．通常，所有者
は現在のユーザで，グループはファイルがあるディレクトリのグループですが，
これはオペレーティングシステム，ファイルが作成されるファイルシステム，
そしてファイルが作成される方法で変化します．`chown'と`chgrp'コマンドを
使用してファイルの所有者とグループを変更可能です．

上記でリストアップされた3つの許可の3つの設定に加えて，ファイルの許可は
3 つの特別な構成部分があり，それは実行可能なファイル(プログラム)と，い
くつかのシステムのディレクトリにのみ効果があります．

  1. プロセスの事実上のユーザIDを，実行時にファイルのものに設定します
     ("setuid bit"と呼ばれます)．ディレクトリには効果がありません．
  2. プロセスの事実上のグループIDを，実行時にファイルのものに設定しま
     す("setgid bit"と呼ばれます)．いくつかのシステムのディレクトリに
     対しては，そのディレクトリで作成されたファイルを同じグループのディ
     レクトリとして置いたとしても，それを作成したユーザのグループは問
     題ありません．
  3. スワップデバイス上のプログラムのテキストイメージを保存するので，
     実行時により速くロードされます("sticky bit"と呼ばれます)．いくつ
     かのシステムのディレクトリに対しては，ユーザが所有していないファ
     イルやディレクトリ場合，そのディレクトリ内でのファイルの削除や名
     前の変更を妨げます．これは，ディレクトリに対する"限定削除フラグ"
     と呼ばれます．



File: fileutils-ja.info, Node: Symbolic Modes

象徴的なモード
==============

"象徴的なモード"は，単一文字のシンボルの演算子として，ファイルの許可を
変更することを表します．それは，ファイルの許可の部分のどれかまたは全て
を編集可能にし，オプションでそれらに前置される値と，おそらく現在の
`umask'にも基づきます(*Note Umask and Protection::)．

抽象的なモードの書式は以下の通りです．

     [ugoa...][[+-=][rwxXstugo...]...][,...]

以下のセクションで，抽象的なモードのその他の詳細の処理を記述します．

* Menu:

* Setting Permissions::          Basic operations on permissions.
* Copying Permissions::          Copying existing permissions.
* Changing Special Permissions:: Special permissions.
* Conditional Executability::    Conditionally affecting executability.
* Multiple Changes::             Making multiple changes.
* Umask and Protection::              The effect of the umask.



File: fileutils-ja.info, Node: Setting Permissions

許可の設定
----------

ファイルの許可での基本的な抽象的処理で，特定ユーザのファイルの読み込み，
書き込み，実行の許可を，加えたり，削除したり，設定します．これらの処理
は以下の書式です．

     USERS OPERATION PERMISSIONS

上記の3つの部分の間のスペースは，可読性のみのために表示しています．抽
象的なモードではスペースを含めることはできません．

USERS部は，ファイルアクセスを変更されるユーザを伝えます．それは以下の，
一つ以上の文字から成り立ちます(または，空にすることもできます．そのと
き生じることは，*Note Umask and Protection::)．これらの文字の一つ以上
が与えられたとき，その順番は重要ではありません．

`u'
     ファイルを所有しているユーザ．
`g'
     ファイルのグループのその他のユーザ．
`o'
     その他全部のユーザ．
`a'
     全てのユーザで，`ugo'と同じです．

OPERATION部は，ファイルにアクセスするユーザの効果を変更する方法を伝え，
以下のシンボルの一つになります．

`+'
     USERSが既に持つ，そのファイルに対するあらゆる許可に，PERMISSIONS
     を加えます．
`-'
     USERSが既に持つ，そのファイルに対するあらゆる許可から，
     PERMISSIONSを削除します．
`='
     USERSが持つ，そのファイルに対する許可を，PERMISSIONSのみにします．

PERMISSIONS部は，ファイルが変更されるアクセスの種類を伝えます．ゼロ以
上の文字になります．USERS部を用いた場合，1文字以上与えられたときは，そ
の順序は重要ではありません．PERMISSIONS部の省略は，`='の時のみ役に立ち，
それは指定されたUSERSにそのファイルに対する全てのアクセス権を取り除き
ます．

`r'
     USERSがファイルを読み込むのに必要な許可です．
`w'
     USERSがファイルに書き込むのに必要な許可です．
`x'
     USERSがファイルを実行するのに必要な許可です．

例えば，全員にファイルの読み込みと書き込みの許可を与え，実行を与えない
ために，以下を使用してください．

     a=rw

ファイルの所有者以外の全てのユーザから書き込み許可を削除するため，以下
を使用してください．

     go-w

上記のコマンドは，ファイルの所有者のアクセス権に効果が無く，その他のユー
ザが，ファイルの読み込みと実行が可能かどうかにも効果がありません．

ファイルの所有者以外全員に，そのファイルに対しあらゆる許可を与えないた
めに，以下のモードを使用してください．他のユーザは，ファイルがあるディ
レクトリに書き込み許可がある場合，ファイルを削除可能です．

     go=

同じことを指定するもう1つの方法です．

     og-rxw




File: fileutils-ja.info, Node: Copying Permissions

既存の許可をコピー
------------------

ファイルの許可を，既存の許可を基準にすることができます．こうするために，
オペレータの後に`r'，`w'や`x'を使用する代わりに，文字`u'，`g'や`o'を使
用します．例えば以下のモードです．o+g それは，ファイルのグループにいる
ユーザに対する許可を，その他のユーザがそのファイルに対して持っている許
可に加えます．このため，ファイルが最初にモード664 (`rw-rw-r--')の場合，
上記のモードは，それを666 (`rw-rw-rw-')に変更します．ファイルが最初に
モード741 (`rwxr----x')の場合，上記のモードは，それを745 (`rwxr--r-x')
に変更します．`-'と`='の処理は同様に働きます．




File: fileutils-ja.info, Node: Changing Special Permissions

特別な許可を変更
----------------

ファイルの読み込み，書き込み，そして実行の許可の変更に加えて，特別な許
可を変更できます．許可の概要は，*Note Mode Structure::.

実行時にファイルの許可をユーザIDに設定するため，象徴的なモードのUSERS
部での`u'と，PERMISSIONS部での`s'を使用してください．

実行時にファイルの許可をグループIDに設定するため，象徴的なモードの
USERS部での`g'とPERMISSIONS部での`s'を使用してください．

スワップデバイスに永久に残すファイルの許可を変更するため，象徴的なモー
ドのUSERS部での`o'とPERMISSIONS部での`t'を使用してください．

例えば，ユーザID許可をプログラムに加えるため，以下のモードを使用可能で
す．

     u+s

ユーザIDのとグループIDの許可の設定をそれから削除するため，以下のモード
を使用可能です．

     ug-s

プログラムがスワップデバイスに保存されるようにするため，以下のモードを
使用可能です．

     o+t

特別な許可は実行形式のファイルと，いくつかのシステムのディレクトリ(そ
こでは異なる意味を持ちます．*Note Mode Structure::)のみに効果があるこ
とを，覚えておいてください．また，`u+t'，`g+t'，そして`o+s'の様な組合
わせには効果はありません．

`='オペレータは，特別な許可に用いる場合，全く役に立ちません．例えば，
モードを以下のようにします．

     o=t

これは，ファイルをスワップデバイスに保存するようにしますが，それは，ファ
イルのグループにいないユーザが持っている可能性のある，全ての，読み込み，
書き込み，そして実行の許可を削除します．




File: fileutils-ja.info, Node: Conditional Executability

実行可能の条件
--------------

象徴的な許可の特別な形式がもう1つあります．`x'の代わりに`X'を用いた場
合，実行許可は，既に実行形式があるファイル，またはディレクトリのみに効
果があります．それは，ディレクトリが最初にあらゆる実行許可を持っていな
い場合でも，ディレクトリの実行許可に効果があります．

例えば，このようなモードにします．

     a+X

これは，全てのユーザに，それまでに持っていなかった，ファイルの実行(や
ディレクトリの検索)の許可を与えます．




File: fileutils-ja.info, Node: Multiple Changes

複数の変更
----------

象徴的なモードの書式は，実際に上記で記述したより複雑です(*Note Setting
Permissions::)．それは，ファイルの許可を複数変更する2つの方法を提供し
ます．

最初の方法は，象徴的なモードで，複数のOPERATION部とPERMISSIONS部を
USERS部の後で指定する方法です．

例えば，以下のようなモードにします．

     og+rX-w

これは，ファイルの所有者以外のユーザに，ファイルの読み込み許可を与え，
それがディレクトリの場合や，既に誰かに実行形式の許可がある場合，実行許
可を与えます．そして，それはファイルの書き込み許可を禁止します．それは
ファイルの所有者が持つ許可に影響しません．上記のモードは以下の2つのモー
ドと同じです．

     og+rX
     og-w

複数の変更をするための2番目の方法は，カンマで分けられた，単純な象徴的
なモードを1つの以上の指定することです．例えば，以下のようなモードにし
ます．

     a+r,go-w

これは，全員にファイルの読み込み許可を与え，所有者以外全員の書き込み許
可を削除します．もう1つの例です．

     u=rwx,g=rx,o=

これは，ファイルに明示的に特別でない許可の全てを設定します．(それはファ
イルのグループではないユーザに，許可を全く与えません．)

2つの方法は組み合わせ可能です．以下のモードになります．

     a+r,g+x-w

これは，全てのユーザに，ファイルの読み込み許可を与え，ファイルのグルー
プにいるユーザに実行許可も与えますが，書き込み許可は与えません．上記の
モードは異なる方法で書くこともできます．その1つは以下になります．

     u+r,g+rx,o+r,g-w




File: fileutils-ja.info, Node: Umask and Protection

umaskと保護
-----------

象徴的なモードのUSERS部が省略された場合，システム変数`umask' で*無効に
**設定されている*あらゆる許可以外，デフォルトは`a'になります(全てのユー
ザに影響します)．`umask'の値は`umask'コマンドを使用して設定できます．
そのデフォルト値は，システム毎に異なります．

象徴的なモードのUSERS部の省略は，`+'以外のオペレーションでは一般に役に
立ちません．希望しないファイルに対する余分な許可を与えることに対して，
簡単にカスタマイズ可能な保護として`umask'が使用可能になるので，それは
`+'とともに用いると役に立ちます．

例として，`umask'の値が2の場合，それはファイルのグループ以外のユーザに
対し書き込み許可を削除します．以下のモードを考えます．

     +w

これは，その所有者とファイルのグループのユーザに対する書き込み許可を加
えますが，それ以外のユーザには与え*ません*．対照的に，以下のモードを考
えます．

     a+w

これは`umask'を無視し，全てのユーザに対し，書き込み許可を与える*のです
*．




File: fileutils-ja.info, Node: Numeric Modes

数値的なモード
==============

ファイルの許可は，内部では整数で保存されます．象徴的なモードの代わりと
して，新しいモードの内部に対応した適切な8進数(基数8)で与えることができ
ます．この数は常に8進数で処理されます．Cで行うような，前置される0は不
要です．モード0055はモード55と同じです．

数値的なモードは，通常対応する象徴的なモードより短くなりますが，ファイ
ルの前の許可を考慮にいれることに制限されます．それは絶対的に設定が可能
なだけです．

ほとんどのシステム上では，ユーザ，ファイルのグループのその他のユーザ，
そしてファイルのグループではないその他のユーザに応じた許可は，それぞれ
3つのビットになり，それは1つの8進数として表現されます．ここにビットを
整える方法があり，それは最下位ビットからはじめます．

     対応する値
     モード    許可

               ファイルのグループにいないその他のユーザ：
        1      実行
        2      書き込み
        4      読み込み

               ファイルのグループのその他のユーザ：
       10      実行
       20      書き込み
       40      読み込み

               ファイルの所有者：
      100      実行
      200      書き込み
      400      読み込み

               特別な許可：
     1000      テキストイメージをスワップデバイスに保存
     2000      実行時のグループIDを設定
     4000      実行時のユーザIDを設定

例えば，数値的なモードの4755は，象徴的なモードの`u=rwxs,go=rx'に，数値
的なモードの664は，象徴的なモードの`ug=rw,o=r'に対応します．数値的なモー
ドの0は，象徴的なモードの`ugo='に対応します．



File: fileutils-ja.info, Node: Date input formats

日付入力の書式
**************


最初の引用：

     我々の時間を計る単位は，秒から月まであり，かなり複雑で，非対称で，
     連結できないので，徹頭徹尾，頭の計算で間に合わせることは，ほとん
     ど不可能です．本当に，非道な神が我々を時間の奴隷にし，ぼんやりし
     た繰り返し仕事と不快な驚きへの従属から，我々が逃げることをほとん
     ど不可能にしようと企てたので，彼は我々の現在のシステムを伝える以
     上のことを行うことができませんでした．それは，台形の建築用ブロッ
     クの集合に似ていて，垂直や水平の表面が無く，最も単純な考えで，建
     造物を飾り立てることを要求された言語に似ていて，役に立たない微粒
     子と長い遠回しな表現です．我々がはっきりとした，または，少なくと
     も頭打ちな経験に直面することを可能にした，より成功した言語と科学
     ののパターンと異なり，我々の時間を計るシステムは，静かにそして繰
     り返し，時間の恐怖を呼び起こします．

     ... それは，建築家がフィートで長さを，メートルで幅を，そしてellで
     高さを計る必要があるかのようなものです．基本的な指示用のマニュア
     ルで，五つの異なる言語の知識を必要とするかのようなものです．我々
     が，どうにもならない混乱した気分で，この間の火曜日や日曜日からの
     一週間といった，短い過去あるいは近い将来を調査することがよくある
     のは，不思議ではありません． ... (1) (*Note Date input
     formats-Footnotes::)

     --- Robert Grudin, `Time and the Art of Living'.

このセクションでは，GNUプログラムが受け入れる，文章上での日付の表現を
記述します．これらは，様々なプログラムの引数としてユーザが供給可能な文
字列です．(`getdate'関数による)Cのインターフェースはここでは述べません．

ここでの日付の構文は，0年から表現することは可能ですが，コンピュータの
整数は，そのような長い範囲を表現することができないことがよくあります．
POSIXシステム上では，時刻は1970-01-01 00:00:00 UTCから始まります．
POSIXは，POSIX エポック時間より前と，遠い将来の時間のサポートを要求し
ません．伝統的なUnixシステムは，32ビットの符号付き`time_t'があり，
1901-12-13 20:45:52から2038-01-19 03:14:07 UTC まで表現可能です．64ビッ
トの符号付き`time_t'を用いたシステムでは，知られている宇宙の一生の全て
の時間を表現可能です．

* Menu:

* General date syntax::            Common rules.
* Calendar date items::            19 Dec 1994.
* Time of day items::              9:20pm.
* Time zone items::                EST, PDT, GMT, ...
* Day of week items::              Monday and others.
* Relative items in date strings:: next tuesday, 2 years ago.
* Pure numbers in date strings::   19931219, 1440.
* Authors of getdate::             Bellovin, Eggert, Salz, Berets, et al.



File: fileutils-ja.info  Node: Date input formats-Footnotes, Up: Date input formats

(1) この引用の訳は，訳者本人が理解できていません．



File: fileutils-ja.info, Node: General date syntax

一般的な日付の構文
==================


"日付"は，空白で分けられた多くの項目を含む，空も可能な文字列です．曖昧
にならないとき，空白は省略できます．空の文字列は今日の始まり(すなわち
真夜中)を意味します．項目の順序は重要ではありません．日付の文字列は，
項目の多くの特色を含むことができます．

   * カレンダーの日付項目
   * その日の時間の項目
   * タイムゾーンの項目
   * 曜日の項目
   * 相対的な項目
   * 純粋な数字

我々は，これらの項目形式のそれぞれを，以下で順番に記述します．

いくつかの数字は，ほとんどの文脈で単語で書き出すことができます．これは
曜日の項目や相対的な項目を指定するとき，最も役に立ちます(以下を参照し
てください)．ここにリストがあります．1に対する`first'，2に対する`next'，
3に対する`third'，4に対する`fourth'，5に対する`fifth'，6に対する
`sixth'，7に対する`seventh'，8に対する`eighth'，9に対する`ninth'，10に
対する`tenth'，11に対する`eleventh'，そして12に対する`twelfth'です．ま
た`last'は，正確に-1を意味します．

月をこの方法で書くとき，"完全な綴り"の代わりに，それは数字で書かれてい
ると考えられます．これは文字に変更することもできます．

現在の実装では，`AM'，`DST'，`EST'，`first'，`January'，`Sunday'，
`tomorrow'，そして`year'のような，単語と省略は英語のみサポートされてい
ます．

`date'の出力は，言語の問題だけでなく，`IST'のようなタイムゾーン項目に
対する標準的な意味がないため，日付文字列として常に受け入れ可能ではあり
ません．後でパースする目的で日付文字列を生成するために`date'を使用する
とき，言語に独立して，`UTC'と`Z'以外のタイムゾーン項目を使用しない日付
の書式を指定してください．こうするための方法が，ここにいくつかあります．

     $ LC_ALL=C TZ=UTC0 date
     Fri Dec 15 19:48:05 UTC 2000
     $ TZ=UTC0 date +"%Y-%m-%d %H:%M:%SZ"
     2000-12-15 19:48:05Z
     $ date --iso-8601=seconds  # a GNU extension
     2000-12-15T11:48:05-0800
     $ date --rfc-822  # a GNU extension
     Fri, 15 Dec 2000 11:48:05 -0800
     $ date +"%Y-%m-%d %H:%M:%S %z"  # %z is a GNU extension.
     2000-12-15 11:48:05 -0800

英文字の大文字小文字は，日付では完全に無視されます．コメントは，適切に
入れ子状になった丸カッコに含まれる限り，丸カッコの間で導入可能です．数
字に続かないハイフンは，現在無視されます．数字の前に前置されるゼロは無
視されます．




File: fileutils-ja.info, Node: Calendar date items

カレンダーの日付の項目
======================


"カレンダーの日付の項目"は年の日付を指定します．それは，月が数字で指定
されるか，文字で指定されるかによって異なりますこれら全ての文字列は，同
じカレンダーの日付を指定します．

     1972-09-24     # ISO 8601．
     72-9-24        # 69から99では19xx
                    # 68から00では20xxと仮定します．
     72-09-24       # 前置されるゼロは無視されます．
     9/24/72        # U.S.の一般的な表記です．
     24 September 1972
     24 Sept 72     # Septemberの省略指定です．
     24 Sep 72      # 三文字の省略は常に利用可能です．
     Sep 24, 1972
     24-sep-72
     24sep72

年も省略できます．この場合，最後に指定された年，または，無ければ現在の
年が利用されます．例えば，以下のようになります．

     9/24
     sep 24

ここに規則があります．

数字の月に対し，ISO 8601書式`YEAR-MONTH-DAY' が可能で，YEARは正の数，
MONTHは01と12の間の数，そしてDAYは01と31の間の数です．数字が10未満の場
合，前置されるゼロが存在する必要があります．YEARが68以下の場合，2000が
加えられます．それ以外の場合で，YEARが100未満の場合，1900が加えられま
す．合州国でよく使用される`MONTH/DAY/YEAR'の構成も受け入れられます．同
様に，年を削除すると`MONTH/DAY'です．

文字の月は完全に綴ることもできます．`January'，`February'，`March'，
`April'，`May'，`June'，`July'，`August'，`September'，`October'，
`November'，または，`December'です．文字の月は最初の三文字で省略でき，
省略のドットの後置も可能です．`September'の代わりに`Sept'と書くことも
許可されています．

月が文字で書かれるとき，カレンダーの日付は以下のようにして与えられます．

     DAY MONTH YEAR
     DAY MONTH
     MONTH DAY YEAR
     DAY-MONTH-YEAR

または，年を省略します．

     MONTH DAY




File: fileutils-ja.info, Node: Time of day items

日付の時間の項目
================


日付文字列での"日付の時間の項目"は，与えられた日付の時間を指定します．
ここにいくつか例があり，全て同じ時間を表現しています．

     20:02:0
     20:02
     8:02pm
     20:02-0500      # EST (合州国東部標準時)

より一般的に，日付の時間は，`HOUR:MINUTE:SECOND' として与えることがで
き，HOURは0と23の間の数字，MINUTEは0と59 の間の数字，そしてSECONDは0と
59の間の数字です．代わりに，`:SECOND'は省略でき，その場合，それは0です．

時間に`am'や`pm'(または，`a.m.'や`p.m.')が続く場合，HOURは1から12まで
の実行に限定され，`:MINUTE'は省略できます(ゼロとされます)．`am'は午前
を示し，`pm'は午後を示します．この注釈で，12は1の前になります．真夜中
は`12am'で，一方正午は`12pm'です．(これは，`12m'を正午，`12pm'を真夜中
として使用する，ラテン語に由来する古い伝統の反対となる，`12am'と`12pm' 
のゼロを起点にした解釈です．)

時刻は，代わりにタイムゾーン修正を続けることができ，それは`SHHMM'とし
て表現され，Sは`+'または`-'，HHは時間の数字，そしてMMは地域の分の数字
になります．タイムゾーン修正がこのように与えられるとき，それは，世界標
準時(UTC) に関連する時間として解釈され，タイムゾーンや地域的タイムゾー
ンに対する，あらゆる前置される指定に優先します．日付の時間のMINUTEの部
分は，タイムゾーン修正が使用されるとき省略できません．これは，時間の分
数部分でタイムゾーン修正を指定する唯一の方法です．

`am'/`pm'やタイムゾーン修正は，どちらか一方のみ指定でき，両方はできま
せん．




File: fileutils-ja.info, Node: Time zone items

タイムゾーンの項目
==================


"タイムゾーンの項目"は，国際的なタイムゾーンを指定し，例えば世界標準時
に対する`UTC'や`Z'のような小さな文字集合で示されます．含まれるピリオド
は全て無視されます．別々の(すなわち，いくつかの空白で区切られている)単
語内の文字列`DST'が夏時間でないタイムゾーンに続くことで，対応する夏時
間のタイムゾーンが指定可能です．

`UTC'と`Z'以外のタイムゾーンの項目は時代遅れで，曖昧なので推奨されませ
ん．例えば，`EST'はオーストラリアと合州国では異なる意味を持ちます．代
わりに，前のセクションで記述されている，`-0500'のような曖昧でない数字
のタイムゾーンコレクションを使用した方が良いでしょう．




File: fileutils-ja.info, Node: Day of week items

曜日の項目
==========


曜日の明示的な記述は，将来，曜日に到達するよう，(必要なら)日付に前置さ
れます．

曜日は，完全に綴ることができます．`Sunday'，`Monday'，`Tuesday'，
`Wednesday'，`Thursday'，`Friday'，または，`Saturday'です．曜日は，最
初の三文字で省略でき，追加のピリオドを続けることができます．特別な省略
として，`Tuesday'に対する`Tues'，`Wednesday'に対する`Wednes'，そして，
`Thursday'に対する`Thur'や`Thurs'も許可されます．

前置された追加分の週を移動するため，数字を曜日項目に前置することができ
ます．それは，`third monday'のような表現が最も良い使用法です．この文脈
では，`last DAY'や`next DAY'も受け入れられます．それらはDAYで表現され
ている日付の1週間前，または後になります．

曜日に続くカンマは無視されます．




File: fileutils-ja.info, Node: Relative items in date strings

日付文字の相対的な項目
======================


`相対的な項目'は，日付(それが無い場合は現在の日付)を前後に調整します．
相対的な項目の効果は蓄積されます．ここにいくつか例があります．

     1 year
     1 year ago
     3 years
     2 days

時間の置換の単位は，年や月全体を移動するため，文字列`year'や`month'が
選択できます．年や月は全てが同じ期間ではないので，これらは曖昧な単位で
す．より正確な単位は，14日と等価な`fortnight'，7日と等価な`week'，24時
間と等価な`day'，60分と等価な`hour'，60秒と等価な`minute'や`min'，そし
て1秒と等価な`second'や`sec'です．これらの単位の`s'接尾子は受け入れら
れ，無視されます．

時間の単位は乗数を前置でき，それは追加の符号付きの数字で与えられます．
符号無しの数字は，正の符号として扱われます．全く数字が無いものは，乗数
として1が暗示されます．文字列`ago'が続く相対的な項目は，値-1の乗数が前
置された単位と等価です．

文字列`tomorrow'は，未来の1日と等価で(`day'と等価)，文字列`yesterday'
は，過去の1日と等価です(`day ago'と等価)．

文字列`now'や`today'は，ゼロ値の時間を置換する相対的な項目で，これらの
文字列は，ゼロ値の時間を置換することは，前の項目で変化されていないとき
の現在時間を表現するという事実に由来します．それらは`12:00 today'のよ
うに，他の項目を強調するために使用できます．文字列`this' もゼロ値の時
間を置換する意味を持ちますが，`this thursday'のような日付文字列で好ま
れます．

相対的な項目が，調整された時刻を跨るために結果として日付が生成されると
き，特に夏時間では，結果として生じる日付と時間は，それに応じて調整され
ます．




File: fileutils-ja.info, Node: Pure numbers in date strings

日付文字列の純粋な数字
======================


純粋な10進数の正確な解釈は，日付文字列の文脈に依存します．

10進数が，形式YYYYMMDDで，他のカレンダーの日付項目(*Note Calendar date
items::)が，その日付項目の前に現われない場合，YYYYは年，MMは月の数字，
そしてDDは月の日付として，指定されたカレンダーの日付として読み込まれま
す．

10進数が形式HHMMで，他の日付の時間の項目がその日付文字列の前に現われな
い場合，HHは日付の時間，そしてMMは時間の分として，指定された日付の時間
として読み込まれます．MMは省略もできます．

カレンダーの日付と日付の時間が，両方とも日付文字列の数字の左に現われ，
そして相対的な項目が無い場合，数字は年に優先します．




File: fileutils-ja.info, Node: Authors of getdate

`getdate'の著者
===============


`getdate'は元々，Chapel HillのNorth Carolina大学にいるときに，Steven
M. Bellovin (<smb@research.att.com>)によって実装されました．コードはそ
の後Usenetの2人に捻りを加えられ，Rich $alz (<rsalz@bbn.com>)とJim
Berets (<jberets@bbn.com>)が，1990 年8月に完全に点検しました．GNUシス
テムに対する様々な修正は，David MacKenzie，Jim Meyering他によってなさ
れました．

この章は元々，Franc,ois Pinard (<pinard@iro.umontreal.ca>)が
`getdate.y'ソースコードから生成し，K. Berry (<kb@cs.umb.edu>)が編集し
ました．




File: fileutils-ja.info, Node: Directory listing, Next: Basic operations, Prev: File permissions, Up: Top

ディレクトリのリストアップ
**************************

この章では，`ls'コマンドとその変形の`dir'と`vdir'を記述し，それはファ
イルに関する情報をリストアップします．

* Menu:

* ls invocation::               List directory contents.
* dir invocation::              Briefly ls.
* vdir invocation::             Verbosely ls.
* dircolors invocation::        Color setup for ls, etc.




File: fileutils-ja.info, Node: ls invocation, Next: dir invocation, Prev: Directory listing, Up: Directory listing

`ls': ディレクトリの内容をリストアップ
======================================


`ls'プログラムは，ファイル(の形式で，ディレクトリを含む)に関する情報を
リストアップします．オプションとファイル引数は，通常のものと同様，任意
に混ぜることができます．

オプションの無いコマンドラインのディレクトリ引数に対し，`ls'はデフォル
トで，ディレクトリの内容をリストアップし，それは再帰的ではなく，`.'で
始まる名前を持つファイルは除きます．他のオプションの無い引数に対し，
`ls'はデフォルトで，そのファイル名のみをリストアップします．オプション
ではない引数が指定されない場合，`ls'は現在のディレクトリの内容をリスト
アップします．

デフォルトで，出力はアルファベット順に出力されます．標準出力が端末の場
合，出力は(垂直方向にソートされた)列になり，制御文字は疑問符として出力
されます．それ以外の場合，出力は1行毎にリストアップされ，制御文字は同
様になります．

`ls'はこのような基本的なプログラムなので，それは数年かけて多くのオプショ
ンを蓄積してきました．それらは以下のサブセクションで記述します．それぞ
れのセクションで，オプションはアルファベット順に(大文字小文字を無視し
て)リストアップされています．オプションをサブセクションに分けることは
絶対ではなく，それは，1つ以上の`ls'の処理の局面で影響するためです．

`-g'オプションは受け入れられますが無視され，それはUnixの移植性のためで
す．*Note Common options::,も参照してください．

* Menu:

* Which files are listed::
* What information is listed::
* Sorting the output::
* More details about version sort::
* General output formatting::
* Formatting the file names::




File: fileutils-ja.info, Node: Which files are listed, Next: What information is listed, Prev: ls invocation, Up: ls invocation

リストアップされるファイル
--------------------------

これらのオプションは，`ls'がリストアップするファイルの情報を決定します．
デフォルトで，コマンドラインのあらゆるファイルとディレクトリの内容が表
示されます．


`-a'
`--all'
     `.'で始まるファイルを含め，ディレクトリの全てのファイルをリストアッ
     プします．

`-A'
`--almost-all'
     `.'と`..'以外の，ディレクトリの全てのファイルをリストアップします．

`-B'
`--ignore-backups'
     コマンドラインで与えられない限り，`~'で終るファイルをリストアップ
     しません．

`-d'
`--directory'
     ディレクトリの名前のみリストアップし，それはファイルの他の形式と
     同様で，その内容をリストアップしません．

`-I PATTERN'
`--ignore=PATTERN'
     それらがコマンドラインで与えられていない限り，シェルパターン(正規
     表現ではありません)PATTERNに一致する名前のファイルをリストアップ
     しません．シェルと同様に，ファイル名の最初の`.'は，PATTERNの最初
     のワイルドカードに一致しません．このオプションを複数回与えると便
     利なときもあります．例えば，以下のようにします．

          $ ls --ignore='.??*' --ignore='.[^.]' --ignore='#*'

     最初のオプションは，`.'で始まる長さが3文字以上の名前を無視し，2番
     目は`..'以外の`.'で始まる全ての2文字の名前を無視し，3番目は`#'で
     始まる名前を無視します．

`-L'
`--dereference'
     長いリストで，シンボリックリンク自身ではなくシンボリックリンクの
     参照のファイル情報(例えば，時間や許可)を表示します．

`-R'
`--recursive'
     全てのディレクトリの内容を，再帰的にリストアップします．





File: fileutils-ja.info, Node: What information is listed, Next: Sorting the output, Prev: Which files are listed, Up: ls invocation

リストアップされる情報
----------------------

これらのオプションは，`ls'が表示する情報に影響します．デフォルトで，ファ
イル名のみ表示されます．


`-D'
`--dired'
     長いリスト(`-l')の書式を用いた場合，主な出力の後に追加して以下を
     出力します．

          //DIRED// BEG1 END1 BEG2 END2 ...

     BEGNとENDNは，出力のそれぞれのファイル名の始めと終りのバイト位置
     を記録する符号無し整数です．これで，たとえスペースや改行といった
     通常用いない文字を含むときも，異常な検索をすること無く，Emacsは簡
     単に名前を見つけるようになります．

     ディレクトリが再帰的(`-R')にリストアップされる場合，出力はそれぞ
     れのサブディレクトリの後に，良く似た行を出力します．
          //SUBDIRED// FORMAT BEG1 END1 ...

     最終的に以下の形式の行を出力します．//DIRED-OPTIONS//
     --quoting-style=WORD WORDは引用形式です(*Note Formatting the file
     names::)．

`-G'
`--no-group'
     長い書式のディレクトリのリスト表示で，グループ情報の表示を禁止し
     ます．(これはGNUではないバージョンの`ls'ではデフォルトで，我々は
     互換性のためにこのオプションを提供します．)

`-h'
`--human-readable'
     それぞれの大きさに，メガバイトに対する`M'のようなサイズ文字を追加
     します．1000倍ではなく1024倍が使用されます．`M'は1,048,576バイト
     を意味します．1000倍を望む場合，`--si'オプションを使用してくださ
     い．

`-H'
`--si'
     それぞれの大きさに，メガバイトに対する`M'のようなサイズ文字を追加
     します．(SIは国際単位系で，それはこれらの文字を接頭辞として定義し
     ています．1024倍ではなく1000倍が使用されます．`M'は1,000,000バイ
     トを意味します．1024倍を望む場合，`-h'または`--human-readable'オ
     プションを使用してください．

     警告：`-H'の意味は，将来POSIXに従い変更されます．古い意味に対して
     は`--si'を使用してください．

`-i'
`--inode'
     それぞれのファイルのinode番号(ファイルシリアル番号とインデックス
     番号とも呼ばれています)を，ファイル名の左に出力します．(この番号
     は，特定のファイルシステム内の，それぞれのファイルを単一のものと
     して識別します．)

`-l'
`--format=long'
`--format=verbose'
     それぞれのファイル名に加えて，ファイル形式，許可，ハードリンク数，
     所有者名，バイトのサイズ，そしてタイムスタンプ(デフォルトで編集し
     た時間)を出力します．6ヵ月以上前の時間や，未来のファイルについて
     は，タイムスタンプは日付の時間の代わりに年を含みます．タイムスタ
     ンプが日付ではなく，年と今日の日付を含む場合，ファイルの時間は未
     来で，それはおそらく，ファイルの時間に依存する`make'のようなプロ
     グラムを破壊する可能性のある，時刻のずれの問題があることを意味し
     ます．

     リストアップされたそれぞれのディレクトリに対し，`total BLOCKS'と
     いう行をファイルに前置し，そこでのBLOCKSは，そのディレクトリの全
     てのファイルが占めるディスク全体です．ブロックサイズは，現在デフォ
     ルトで1024バイトですが，これに優先可能です(*Note Block size::)．
     BLOCKSは，それぞれのハードリンクを別々に数えて計算します．これは
     おそらく欠陥です．

     リストアップされる許可は，象徴的なモードでの指定に似ています
     (*Note Symbolic Modes::)．しかし，`ls'は，それぞれの許可の設定を
     複数のビットを3番目の文字に組み合わせ，以下のようにします．
     `s'
          setuidやsetgidビットと対応する実行可能ビットが，両方設定され
          ている場合．

     `S'
          setuidやsetgidビットは設定されているが，対応する実行可能ビッ
          トが設定されていない場合．

     `t'
          stickyビットとotherの実行可能ビットが両方設定されている場合．

     `T'
          stickyビットは設定されているが，otherの実行可能ビットが設定
          されていない場合．

     `x'
          実行可能ビットが設定されていて，上記は何も適応されない場合．

     `-'
          それ以外．

     許可ビットに続くものは，ファイルに適用するアクセス手法の変更を指
     定する単一の文字です．文字がスペースのとき，アクセス手法の変更は
     ありません．印刷可能な文字(例えば`+')のとき，そのような手法があり
     ます．

`-o'
     長いディレクトリのリストの書式を生成しますが，グループ情報は表示
     しません．それは，`--no-group'を用いた`--format=long'の使用と同じ
     です．このオプションは，`ls'の他のバージョンとの互換性のために供
     給されています．

`-s'
`--size'
     ファイル名の左側に，それぞれのファイルのディスク占有量を出力しま
     す．これは，ファイルが使用しているディスクスペースの総量で，それ
     は通常ファイルサイズよりわずかに多くなりますが，ファイルに欠陥が
     ある場合は，より小さくなるはずです．

     通常ディスクの占有量は1024バイト単位で出力されますが，これに優先
     することは可能です(*Note Block size::)．

     HP-UXシステムからBSDシステムに，NFSでマウントされているファイルに
     対し，このオプションは，正しい値の半分のサイズを報告します．HP-UX
     システムでは，BSDシステムからNFSでマウントされているファイルに対
     し，正しい値の2倍のサイズを報告します．これは，HP-UXの欠点のため
     です．それはHP-UXの`ls' プログラムにも影響します．





File: fileutils-ja.info, Node: Sorting the output, Next: More details about version sort, Prev: What information is listed, Up: ls invocation

出力の並べ替え
--------------

これらのオプションは，`ls'が並べ替える出力の情報の順序を変更します．デ
フォルトで，並べ替えは文字コードによって行われます(例えば，ASCIIの順番
です)．


`-c'
`--time=ctime'
`--time=status'
`--time=use'
     長いリスト書式(例えば，`-l'，`-o')が使用されている場合，編集時間
     の代わりにステータス変更時間(inodeの`ctime')が出力されます．時間
     (`--sort=time'または`-t')で明示的に並べ替えをしたり，長いリストの
     書式を使用しないとき，ステータスの変更時間によって並べ替えます．

`-f'
     主に，`-U'に似ています--並べ替えしません．ディレクトリに保存され
     ているファイルの順番に，それらをリストアップします．しかし，`-a'
     (すべてのファイルをリストアップ)も利用可能で，(前に`-f'が指定され
     ている場合)`-l'，`--color'，そして`-s'は利用不可能です．

`-r'
`--reverse'
     並べ替えのあらゆる手法を反転します--例えば，アルファベットの逆順，
     新しいものを最初，小さいものを最初，またはすべて逆順にリストアッ
     プします．

`-S'
`--sort=size'
     ファイルサイズで，大きいものを最初にして並べ替えます．

`-t'
`--sort=time'
     編集時間(inodeの`mtime')で，新しいものを最初にして並べ替えます．

`-u'
`--time=atime'
`--time=access'
     長いリスト書式(例えば，`--format=long')が使用されている場合，最後
     にアクセスした時間(inodeの`atime')が出力されます．時間
     (`--sort=time'または`-t')で明示的に並べ替えをしたり，長いリストの
     書式を使用しないとき，アクセスした時間によって並べ替えます．

`-U'
`--sort=none'
     並べ替えしません．ディレクトリに保存されている順番にファイルをリ
     ストアップします．(`-f'が行う，他と関連することは何もしません．) 
     並べ替えを行わないことで，目立って速くすることが可能なので，非常
     に大きなディレクトリをリストアップするとき，これは特に便利です．

`-v'
`--sort=version'
     バージョン名と数字で，小さいものを最初にして並べ替えます．それは
     デフォルトの並べ替えに似ている動作で，それぞれの10進数の並びが，
     索引/バージョン番号として数値的に扱われることが期待されます．
     (*Note More details about version sort::.)

`-X'
`--sort=extension'
     ディレクトリの内容を，ファイルの拡張子(最後の`.'の後の文字)で，ア
     ルファベット順に並べ替えます．ファイルの拡張子がないものが最初に
     なります．




File: fileutils-ja.info, Node: More details about version sort, Next: General output formatting, Prev: Sorting the output, Up: ls invocation

バージョンの並べ替えの詳細
--------------------------

バージョンの並べ替えは，ファイル名が索引やバージョン番号を含むことが多
いという事実を考慮にいれています．標準的な並べ替え機能は，1文字づつを
基本に比較するため，通常，人々が期待する順序を生成しません．バージョン
の並べ替えは，この問題を提出し，その名前に索引/バージョン番号を伴うファ
イルを多く含むディレクトリを眺めるとき特に役に立ちます．

           > ls -1            > ls -1v
           foo.zml-1.gz       foo.zml-1.gz
           foo.zml-100.gz     foo.zml-2.gz
           foo.zml-12.gz      foo.zml-6.gz
           foo.zml-13.gz      foo.zml-12.gz
           foo.zml-2.gz       foo.zml-13.gz
           foo.zml-25.gz      foo.zml-25.gz
           foo.zml-6.gz       foo.zml-100.gz

数字の部分にゼロが前置されていても，分数として考慮されることに注意して
下さい．

           > ls -1            > ls -1v
           abc-1.007.tgz      abc-1.007.tgz
           abc-1.012b.tgz     abc-1.01a.tgz
           abc-1.01a.tgz      abc-1.012b.tgz




File: fileutils-ja.info, Node: General output formatting, Next: Formatting the file names, Prev: More details about version sort, Up: ls invocation

一般的な出力書式
----------------

これらのオプションは，出力の外観に影響します．


`-1'
`--format=single-column'
     ファイルを1行毎にリストアップします．これは，標準出力が端末でない
     ときのデフォルトです．

`-C'
`--format=vertical'
     列で縦方向に並べ替えされてリストアップされます．標準出力が端末の
     場合，これはデフォルトです．`dir'と`d'プログラムに対し，それは常
     にデフォルトです．GNU `ls'は，最も少ない行で可能な限り多くのファ
     イルを表示できるように，列の幅を変更して使用します．

`--color [=WHEN]'
     ファイル形式を区別するため使用する色を指定します．WHENは省略され
     る，または以下の一つになります．* none - 色を全く使用しません．こ
     れはデフォルトです．* auto - 標準出力が端末の場合のみ色を使用しま
     す．* always - 常に色を使用します．`--color'を指定しWHENが無いこ
     とは，`--color=always'と同じです．色付きのリストを`more' や`less'
     の様なページャにパイプで渡すと，通常読むことができない結果を生成
     します．しかし，`more -f'を使用すると動作するでしょう．

`-F'
`--classify'
`--indicator-style=classify'
     ファイル形式を示す文字を，それぞれのファイル名に追加します．また，
     実行可能な標準ファイルに対し，`*'を加えます．ファイル形式表示子は，
     ディレクトリに対する`/'，シンボリックリンクに対する`@'，FIFOに対
     する`|'，ソケットに対する`='で，標準ファイルは何もありません．

`--full-time'
     標準的な省略の経験則を用いるのではなく，完全な時間をリストアップ
     します．書式は現在，`date'に似ていますが，これは将来のリリースで
     変更される予定で，それは近代的なファイルタイムスタンプが，部分的
     により正確なためです．これを変更することは不可能ですが，`cut'で日
     付文字列を抽出して，結果を`date -d'に渡すことができます．*Note
     `date' invocation: (sh-utils)date invocation.

     これは，時間出力が秒を出力するので，最も役に立ちます．(Unix ファ
     イルシステムは，最も近い秒でファイルのタイムスタンプを記録し，そ
     のため，このオプションは存在するすべての情報を表示します．)例えば，
     正しくファイルを再生させていないMakefileがあるとき，これは役に立
     つはずです．

`--indicator-style=WORD'
     エントリー名にスタイルWORD文字表示子を以下のように追加します．
     `none'
          あらゆる文字表示子を追加しません．これはデフォルトです．
     `file-type'
          ディレクトリに対し`/'，シンボリックリンクに対し`@'，FIFOに対
          し`|'，ソケットに対し`='を追加し，標準ファイルには何も追加し
          ません．これは`-p'や`--file-type'オプションと同じです．
     `classify'
          実行可能な標準ファイルに`*'を加え，それ以外は`file-type'とし
          て動作します．これは，`-F'や`--classify'オプションと同じです．

`-k'
`--kilobytes'
     ファイルの大きさを1024バイトブロックで出力し，デフォルトのブロッ
     クサイズ(*Note Block size::)に優先します．

`-m'
`--format=commas'
     それぞれの行にできるだけ多くフィットするように，`, ' (カンマとス
     ペース)で分けて，水平方向にリストアップします．

`-n'
`--numeric-uid-gid'
     名前の代わりに，数値のUIDとGIDをリストアップします．

`-p'
`--file-type'
`--indicator-style=file-type'
     それぞれのファイル名にファイル形式を示す文字を追加します．これは
     `-F'に似ていますが，実行可能なものは印を付けません．

`-x FORMAT'
`--format=across'
`--format=horizontal'
     ファイルを列に，水平にソートしてリストアップします．

`-T COLS'
`--tabsize=COLS'
     それぞれのタブストップがCOLS列の幅だと考えます．デフォルトは8です．
     `ls'は，効率のために出力可能なところではタブを使用します．COLSが0
     の場合はタブを全く使用しません．

`-w'
`--width=COLS'
     画面がCOLS列の幅だと考えます．可能な場合，デフォルトは端末の設定
     で与えられます．それ以外で，環境変数`COLUMNS'が設定されている場合，
     それが使用されます．それ以外の場合，デフォルトの80です．





File: fileutils-ja.info, Node: Formatting the file names, Prev: General output formatting, Up: ls invocation

ファイル名の書式化
------------------

これらのオプションは，ファイル名自身を出力する方法を変更します．


`-b'
`--escape'
`--quoting-style=escape'
     ファイル名の表示不可能な文字を，Cで使用されるような，アルファベッ
     トと8進数のバックスラッシュシーケンスを用いて引用符で囲みます．

`-N'
`--literal'
     ファイル名を引用符で囲みません．

`-q'
`--hide-control-chars'
     ファイル名の表示不能な文字の代わりに疑問符を出力します．出力が端
     末の場合と，プログラムが`ls'の場合，これはデフォルトです．

`-Q'
`--quote-name'
`--quoting-style=c'
     2重引用符でファイル名を囲み，表示不可能な文字をCのように引用符で
     囲みます．

`--quoting-style=WORD'
     出力名の引用符に形式WORDを使用します．WORDは以下の一つになります．
     `literal'
          現状のまま名前を出力します．
     `shell'
          名前にシェルメタ文字を含んでいたり，不明瞭な出力を生じる場合，
          引用符で囲みます．
     `shell-always'
          シェルのため，通常は引用符が不要な場合でも名前を引用符で囲み
          ます．
     `c'
          C言語の文字列で名前を引用符で囲みます．これは`-Q'や
          `--quote-name'オプションと同じです．
     `escape'
          周囲の二重引用符を省略した`c'を引用符として用います．これは，
          `-b'や`--escape'オプションと同じです．
     `clocale'
          ロケールに適切な引用符を使用する以外は，`c'を用いたように引
          用符で囲みます．
     `locale'
          `clocale'に似ていますが，デフォルトのCロケール"like this"の
          代わりに，`like this'で囲みます．これは多くのディスプレイで
          より良く見えます．

     `--quoting-style'オプションのデフォルト値を，環境変数
     `QUOTING_STYLE'で指定することが可能です．環境変数が設定されていな
     い場合，デフォルト値は`literal'ですが，このデフォルトは，このパッ
     ケージの将来のバージョンで`shell'に変更されるかもしれません．

`--show-control-chars'
     ファイル名の出力不可能な文字をそのまま出力します．出力が端末の場
     合やプログラムが`ls'の場合以外では，これがデフォルトです．




File: fileutils-ja.info, Node: dir invocation, Next: vdir invocation, Prev: ls invocation, Up: Directory listing

`dir': ディレクトリの内容の短いリスト
=====================================


`dir'(と`d'としてインストールされるもの)は， `ls -C -b'と同じです．す
なわち，デフォルトでファイルは列にリストアップされ，縦方向に並べ替えさ
れ，そして特殊文字はバックスペースエスケープシーケンスで再表現されます．

*Note `ls': ls invocation.




File: fileutils-ja.info, Node: vdir invocation, Next: dircolors invocation, Prev: dir invocation, Up: Directory listing

`vdir': ディレクトリの内容の冗長なリスト
========================================


`vdir'は(`v'としてインストールされるものも)，`ls -l -b'と同じです．す
なわち，デフォルトでファイルは長い書式でリストアップされ，特殊文字はバッ
クスペースエスケープシーケンスで再表現されます．




File: fileutils-ja.info, Node: dircolors invocation, Prev: vdir invocation, Up: Directory listing

`dircolors': `ls'の色をセットアップ
===================================


`dircolors'は，`ls' (と`dir'等)から出力する色のために端末を設定するシェ
ルコマンドの順番を出力します．典型的な使用方法は以下の通りです．

     eval `dircolors [OPTION]... [FILE]`

FILEが指定された場合，`dircolors'は，ファイル形式と拡張子に対して使用
する色を決定するために，それを読み込みます．それ以外の場合，前もってコ
ンパイルされたデータベースが使用されます．これらのファイルの書式の詳細
のため，`dircolors --print-database'を実行してください．

出力は，`LS_COLORS'環境変数を設定するためのシェルコマンドです．コマン
ドラインで使用するシェル構文を指定することが可能で，そうでなければ
`dircolors'は`SHELL'環境変数の値から判別します．

プログラムは以下のオプションも受け入れます．*Note Common options::,も
参照してください．

`-b'
`--sh'
`--bourne-shell'
     Bourneシェルコマンドを出力します．`SHELL'環境変数が設定されていて，
     `csh'や`tcsh'で終わらない場合，これはデフォルトです．

`-c'
`--csh'
`--c-shell'
     Cシェルコマンドを出力します．`SHELL'が`csh'や`tcsh'で終わる場合，
     これがデフォルトです．

`-p'
`--print-database'
     組み込みデフォルトカラー設定データベースを出力します．この出力は，
     それ自身有効な設定ファイルで，可能性をかなり記述しています．




File: fileutils-ja.info, Node: Basic operations, Next: Special file types, Prev: Directory listing, Up: Top

基本処理
********


この章は，基本的なファイル操作に対するコマンドを記述します．コピー，移
動(名前の変更)，そして削除(リムーブ)です．

* Menu:

* cp invocation::               Copy files.
* dd invocation::               Convert and copy a file.
* install invocation::          Copy files and set attributes.
* mv invocation::               Move (rename) files.
* rm invocation::               Remove files or directories.
* shred invocation::            Remove files more securely.




File: fileutils-ja.info, Node: cp invocation, Next: dd invocation, Prev: Basic operations, Up: Basic operations

`cp': ファイルとディレクトリのコピー
====================================


`cp'は，ファイル(または追加でディレクトリ)をコピーします．コピーはオリ
ジナルから完全に独立しています．一つのファイルをもう一つにコピーする，
または，任意の多くのファイルをコピー先のディレクトリにコピーすることの
いずれかが可能です．構文は以下の通りです．

     cp [OPTION]... SOURCE DEST
     cp [OPTION]... SOURCE... DIRECTORY

最後の引数が既存のディレクトリを指す場合，`cp'はそれぞれのSOURCEファイ
ルをそのディレクトリに(同じ名前のままで)コピーします．それ以外で，2つ
のファイルが与えられた場合，最初のものを2番目のものにコピーします．最
後の引数がディレクトリでなく，2つ以上のオプションでない引数が与えられ
た場合エラーとなります．

一般的に，ファイルは読み込まれたとおりに書き込まれます．例外は，以下の
`--sparse'オプションを参照してください．

デフォルトで，`cp'はディレクトリをコピーしません．しかし，`-R'，`-a'，
そして`-r'オプションでは，`cp' は元のディレクトリを下り，対応するコピー
先のディレクトリにファイルをコピーすることで，再帰的にコピーします．

デフォルトで，`cp'は再帰的にコピーしないときのみ，シンボリックリンクを
たどります．このデフォルトは，`--no-dereference' (`-d')，
`--dereference' (`-L')，そして`-H'オプションで優先することが可能です．
これらのオプションの一つ以上が指定されている場合，最後のものが他のもの
に対して，そのまま優先します．

`cp'は一般的に，以下の例外はありますが，ファイルの自分自身へのコピーを
拒絶します．`--force --backup'が同一のSOURCEとDESTで指定して，通常のファ
イルを参照する場合，`cp'は，通常の方法(*Note Backup options::)で指定さ
れたように，通常または番号付きのバックアップファイルを作成します．これ
は，変更前に既存のファイルのバックアップを単に作成したいとき役に立ちま
す．

プログラムは以下のオプションも受け入れます．*Note Common options::,も
参照してください．

`-a'
`--archive'
     コピー時に元のファイルの構造と属性を可能な限り保持します(しかし，
     ディレクトリ構造の保持は試みません．すなわち，`ls -U'はコピーされ
     ているディレクトリの項目を，異なる順序でリストアップすることが可
     能です)．`-dpR'と同じです．

`-b'
``--backup'[=METHOD]'
     *Note Backup options::.  上書きされたり削除されたりするそれぞれの
     ファイルのバックアップを作成します．特殊な場合として，強制とバッ
     クアップのオプションが指定され，SOURCEとDESTが同じ名前で存在して
     いるとき，通常のファイルとして，`cp'はSOURCEのバックアップを作成
     します．このオプションの組合わせの役に立つ応用の一つは，以下の小
     さなBourneシェルスクリプトです．

          #!/bin/sh
          # Usage: backup FILE...
          # Create a GNU-style backup of each listed FILE.
          for i in "$"; do
            cp --backup --force "$i" "$i"
          done

`-d'
`--no-dereference'
     シンボリックリンクを，それが示すファイルをコピーするのではなく，
     シンボリックリンクとしてコピーし，コピーのソースファイル間のハー
     ドリンクを保持します．

`-f'
`--force'
     このオプションを使用せずコピーし，コピー先のファイルが存在し書き
     込みで開くことができないとき，コピーは失敗します．しかし，
     `--force'を用いた場合，コピー先のファイルが開けないとき，`cp'はそ
     れをアンリンクし，もう一度開こうとします．この動作と`--link'と
     `--symbolic-link' でそれを可能にすることと異なり，それによってコ
     ピー先ファイルは開かれることなく，無条件にアンリンクされます．
     `--remove-destination'の記述も参照してください．

`-H'
     コマンドライン引数がシンボリックリンクを指定している場合，シンボ
     リックリンクではなく，ファイルをその位置にコピーします．しかし，
     再帰的な横断で遭遇するあらゆるシンボリックリンクを(その元を保存し
     て)コピーします．

`-i'
`--interactive'
     既存の通常のコピー先のファイルを上書きするかどうか，プロンプトを
     表示します．

`-l'
`--link'
     ディレクトリ以外はコピーの代わりにハードリンクを作成します．

`-L'
`--dereference'
     常にシンボリックリンクをたどります．

`-p'
`--preserve'
     元のファイルの所有者，グループ，許可，そしてタイムスタンプを保持
     します．このオプションがないとき，それぞれのコピー先のファイルは，
     元のファイルに対応するパーミッションで作成され，umaskで設定されて
     いるビットがなくなります．*Note File permissions::.

`-P'
`--parents'
     ターゲットディレクトリに，スラッシュと指定されたソースファイルの
     名前を追加した，それぞれのコピー先のファイル名を作成します．`cp'
     に与える最後の引数は，既存のディレクトリ名にする必要があります．
     例えば，以下のようなコマンドを入力します．

          cp --parents a/b/c existing_dir

     これはファイル`a/b/c'を`existing_dir/a/b/c'にコピーし，存在しない
     あらゆる中間ディレクトリを作成します．

     警告：`-P'の意味はPOSIXに従うため，将来変更されるでしょう．古い意
     味に対しては`--parents'を使用し，新しい意味に対しては
     `--no-dereference'を使用してください．

`-r'
     再帰的にディレクトリをコピーし，ディレクトリでないものと特殊なファ
     イル(例えば，シンボリックリン，FIFO，そしてデバイスファイル)を，
     通常のファイルのようにコピーします．これは，それぞれのソースファ
     イルでデータを読み込み，コピー先のものにそれを書き出すということ
     を意味します．FIFOのような特殊ファイルと，特に`/dev'で見つかるディ
     レクトリに`cp -r'を適用すると通常失敗します．ほとんどの場合，`cp
     -r'はFIFOと`/dev/console' のような特殊ファイルからいつまでも読み
     込むことで待ち続け，`/dev/zero'をコピーする場合，それはコピー先の
     ディスクをいっぱいにします．特殊ファイルをコピーしたい場合，その
     内容をコピーするためそれらを読み込む代わりに，特殊な性質を妨げる
     ため，`--recursive' (`-R') を使用してください．

`-R'
`--recursive'
     ディレクトリ以外のものを避けながら，再帰的にディレクトリをコピー
     します(真上の`-r'とは異なります)．

`--remove-destination'
     それぞれの既存のコピー先ファイルを，それを開く前に削除します(上記
     の`-f'とは異なります)．

`--sparse=WHEN'
     "まばらなファイル"は"穴"---物理的なディスクブロックで発生しないゼ
     ロバイトの列--を含みます．`read'システムコールはこれらをゼロとし
     て読み込みます．多くのバイナリファイルは多くのゼロバイトの連続を
     含むので，ディスクスペースの保存と速度を増加の両方が，これでかな
     り可能となります．デフォルトで`cp'は，情報の発見的手法を用い，入
     力ソースファイルで穴を見付け，対応する出力ファイルに同様にまばら
     にします．

     WHENの値は以下の一つになります．
     `auto'
          デフォルトの動作:入力ファイルがまばらの場合，出力ファイルは
          まばらになります．

     `always'
          常に，出力ファイルをまばらにします．まばらなファイルをサポー
          トしないファイルシステム(最も顕著な例は，SGI IRIX 5.3とそれ
          以前の`efs'ファイルシステム)に存在する入力ファイルで，出力ファ
          イルはそれ以外のファイルシステムのときこれは役に立ちます．

     `never'
          出力ファイルをまばらにしません．`mkswap'コマンドを用いてファ
          イルを作成するとき，そのようなファイルには穴があってはならな
          いので，これが役に立ちます．

``--strip-trailing-slashes''
     それぞれのSOURCE引数から，後置されるスラッシュを削除します．*Note
     Trailing slashes::.

`-s'
`--symbolic-link'
     ディレクトリでないものをコピーする代わりにシンボリックリンクを作
     成します．すべてのソースファイル名は，リンク先のファイルが現在の
     ディレクトリにある場合以外，絶対的である(`/'で始まる)必要がありま
     す．シンボリックリンクをサポートしないシステムでは，このオプショ
     ンは結果としてエラーメッセージを返すだけです．

`-S SUFFIX'
`--suffix=SUFFIX'
     それぞれの`-b'でのバックアップファイルにSUFFIXを追加します．*Note
     Backup options::.

``--target-directory'=DIRECTORY'
     コピー先のDIRECTORYを指定します．*Note Target directory::.

`-v'
`--verbose'
     コピーする前にそれぞれのファイル名を出力します．

`-V METHOD'
`--version-control=METHOD'
     `-b'で作成するバックアップの形式を変更します．METHOD引数は，
     `none' (または`off')，`numbered' (または`t')，`existing' (または
     `nil')，または`never' (または`simple')が可能です．*Note Backup
     options::.

`-x'
`--one-file-system'
     コピーを開始したファイルシステムと異なるサブディレクトリを省略し
     ます．しかし，マウントポイントのディレクトリはコピー*されます*．





File: fileutils-ja.info, Node: dd invocation, Next: install invocation, Prev: cp invocation, Up: Basic operations

`dd': ファイルの変換とコピー
============================


`dd'は，変更可能なI/Oブロックサイズを用いて，(デフォルトで，標準入力か
ら標準出力に)ファイルをコピーし，オプションの動作でそれを変更します．
構文は以下のとおりです．

     dd [OPTION]...

プログラムは，以下のオプションも受け入れます．*Note Common options::,
も参照してください．

以下(BYTESとBLOCKS)の数値的な値のオプションは，乗算を続けることができ
ます．それは，`b'=512，`c'=1，`w'=2，`xM'=Mや，`k'=1024のようなあらゆ
るブロックサイズ接尾子です(*Note Block size::)．

スキップとI/Oに対し，異なるブロックサイズを使用するために，異なる`dd'
の呼び出しを使用してください．例えば，以下のシェルコマンドはディスクと
テープの間で，512 kBブロックでデータをコピーしますが，ディスクの最初の
4 kBのラベルは，保存されたり復元されたりしません．

     disk=/dev/rdsk/c0t1d0s2
     tape=/dev/rmt/0

     # Copy all but the label from disk to tape.
     (dd bs=4k skip=1 count=0 && dd bs=512k) <$disk >$tape

     # Copy from tape back to disk, but leave the disk label alone.
     (dd bs=4k seek=1 count=0 && dd bs=512k) <$tape >$disk


`if=FILE'
     標準入力の代わりにFILEから読み込みます．

`of=FILE'
     標準出力の代わりにFILEに書き出します．`conv=notrunc'が与えられて
     いない場合，`dd'はFILEをゼロバイト(または，`seek='で指定されたサ
     イズ)に切り詰めます．

`ibs=BYTES'
     一度にBYTESバイト読み込みます．

`obs=BYTES'
     一度にBYTESバイト書き出します．

`bs=BYTES'
     一度にBYTESバイト読み書きします．これは`ibs'と`obs'に優先します．

`cbs=BYTES'
     一度にBYTESバイト変換します．

`skip=BLOCKS'
     コピーする前に入力ファイルで，BLOCKS `ibs'バイトブロックを省略し
     ます．

`seek=BLOCKS'
     コピーする前に出力ファイルで，BLOCKS `ibs'バイトブロックを省略し
     ます．

`count=BLOCKS'
     ファイルの終りまでのすべての代わりに，入力ファイルからBLOCKS
     `ibs'バイトブロックコピーします．

`conv=CONVERSION[,CONVERSION]...'
     CONVERSION引数で指定されたようにファイルを変換します．(カンマの回
     りにスペースはありません．)

     以下の変換です．


     `ascii'
          EBCDICをASCIIに変換します．

     `ebcdic'
          ASCIIをEBCDICに変換します．

     `ibm'
          ASCIIを別のEBCDICに変換します．

     `block'
          入力のそれぞれの行に対し，入力の改行をスペースに置換し，必要
          なスペースを埋め込みながら，`cbs'バイト出力します．

     `unblock'
          それぞれの`cbs'の大きさの入力ブロックで，末尾のスペースを改
          行に置換します．

     `lcase'
          大文字を小文字に変換します．

     `ucase'
          小文字を大文字に変換します．

     `swab'
          入力バイトのすべての組を入れ替えます．GNU `dd'は他と異なり，
          偶数バイトを読み込んだとき働きます--最後のバイトは，単にコピー
          されます．(入れ替えるバイトがないからです)．

     `noerror'
          読み込みエラー後も続けます．

     `notrunc'
          出力ファイルを切り詰めません．

     `sync'
          すべての入力ブロックを，後置するゼロバイトを埋め込み`ibs'サ
          イズにします．`block'や`unblock'を使用するとき，ゼロバイトの
          代わりにスペースで埋め込みます．





File: fileutils-ja.info, Node: install invocation, Next: mv invocation, Prev: dd invocation, Up: Basic operations

`install': ファイルのコピーと属性の設定
=======================================


`install'は，許可モードと，可能な場合は所有者とグループ設定しながらファ
イルをコピーします．構文は以下のとおりです．

     install [OPTION]... SOURCE DEST
     install [OPTION]... SOURCE... DIRECTORY
     install -d [OPTION]... DIRECTORY...

これらの最初のものは，SOURCEファイルはDESTターゲットファイルにコピーさ
れます．２番目では，それぞれのSOURCEファイルはコピー先のDIRECTORYにコ
ピーされます．最後では，それぞれのDIRECTORY(と足りない親ディレクトリ)
がコピーされます．

`install'は`cp'に似ていますが，コピー先のファイルの属性を制御すること
が可能です．それは，プログラムをコピー先のディレクトリにコピーするとき，
Makefileで一般的に使用されます．それ自身にファイルをコピーすることは拒
否されます．

プログラムは，以下のオプションも受け入れます．*Note Common options::,
も参照してください．


`-b'
``--backup'[=METHOD]'
     *Note Backup options::. 上書きされたり削除されたりするファイルの
     バックアップを作成します．

`-c'
     無視されます．古いUnixバージョンの`install'の互換性のためです．

`-d'
`--directory'
     与えられたそれぞれのディレクトリと足りない親ディレクトリを，コマ
     ンドラインで与えられたやデフォルトの所有者，グループとモードに設
     定しながら作成します．親ディレクトリも与えられた属性で作成されま
     す．(これはSunOS 4.x `install'と異なり，そこではディレクトリはデ
     フォルトの属性が与えられます．)

`-g GROUP'
`--group=GROUP'
     インストールされるファイルやディレクトリのグループ所有権を，GROUP 
     に設定します．デフォルトは，プロセスの現在のグループです．GROUPは，
     グループ名や数値的なグループIDが可能です．

`-m MODE'
`--mode=MODE'
     インストールされるファイルやディレクトリの許可をMODEに設定し，そ
     れは8進数や`chmod'の象徴的なモードが可能で，0が出発点となります
     (*Note File permissions::)．デフォルトモードは`u=rwx,go=rx'です--- 
     所有者の読み書き実行，グループとそれ以外は読み込みと実行です．

`-o OWNER'
`--owner=OWNER'
     `install'が適切な特権(ルートとして実行)を持つ場合，インストールさ
     れるファイルやディレクトリの所有権はOWNERに設定されます．デフォル
     トは`root'です．OWNERは，ユーザ名または，数値のユーザIDが可能です．

`-p'
`--preserve-timestamps'
     インストールされたそれぞれのファイルの，最後にアクセスした時間と
     最後に編集した時間を，対応するそれぞれの元ファイルに一致させます．
     このオプションなしでファイルがインストールされたとき，最後にアク
     セスした時間と最後に編集した時間は，どちらもインストールされた時
     間に設定されます．このオプションは，最後にインストールされた時で
     はなく，最後にビルドされた時を追跡し続けるため，インストールされ
     たファイルの最後に編集された時間を使用する場合，役に立ちます．

`-s'
`--strip'
     インストールされたバイナリ実行形式から，シンボルテーブルを取り除
     きます．

`-S SUFFIX'
`--suffix=SUFFIX'
     `-b'で作成されるそれぞれのバックアップファイルに，SUFFIXを追加し
     ます．*Note Backup options::.

``--target-directory'=DIRECTORY'
     コピー先のDIRECTORYを指定します．*Note Target directory::.

`-v'
`--verbose'
     コピーする前に，それぞれのファイル名を出力します．

`-V METHOD'
`--version-control=METHOD'
     `-b'で作成されるバックアップの形式を変更します．METHOD引数は，
     `none' (または`off')，`numbered' (または`t')，`existing' (または
     `nil')，または，`never' (または`simple')が可能です．*Note Backup
     options::.





