Info file: gnus-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus-ja.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006, 2007 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契
     約書第 1.2 版またはそれ以降の版が定める条件の下で複製、配布、ある
     いは変更することを許可します。変更不可部分は指定しません。“A GNU
     Manual”は表表紙テキスト、以下の (a) は裏表紙テキストです。この利
     用許諾契約書の複写は“Emacs manual”の「GNU フリー文書利用許諾契約
     書」という章に含まれています。

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     (a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフト
     ウェアのように複製したり変更する自由があります。複製はフリーソフト
     ウェア財団によって出版されました。(フリーソフトウェア財団は) GNU
     の開発のために必要な資金を集めています。」

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.

     この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集
     著作物の一部です。もしあなたがこの文書を収集著作物から分離して配布
     したいときは、契約書の第 6 章に記述されているように、文書に契約書
     の複写を付加することによって、行なうことができます。



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus-ja: (gnus-ja).           The newsreader Gnus (Japanese).
END-INFO-DIR-ENTRY





File: gnus-ja.info, Node: BBDB Whitelists, Next: Gmane Spam Reporting, Prev: Blacklists and Whitelists, Up: Spam Back Ends

BBDB ホワイトリスト
...................

 -- Variable: spam-use-BBDB
     `spam-use-whitelist' (*Note Blacklists and Whitelists::) に似てい
     ますが、ホワイトリストのアドレスの源として BBDB を使います。正規表
     現はありません。`spam-use-BBDB' をちゃんと動作させるには BBDB を読
     み込まなければ (load しなければ) なりません。その送信者が BBDB に
     載っていないメッセージは、次の spam-split 規則 (による検査工程) に
     送られます。これは、BBDB に載っていない誰かのメッセージは spam と
     も ham とも見なされないことを意味する、明示的な濾過器です。

 -- Variable: spam-use-BBDB-exclusive
     送信者が BBDB に載っていないすべてのメッセージが spam だと見なされ
     ることを意味する暗黙の濾過器として BBDB を使いたい場合は、この変数
     を `t' にして下さい。注意して使って下さい。BBDB に載っている送信者
     だけが通行を許され、他のすべては spammers として分類されます。

     `spam.el' に関する限りは、`spam-use-BBDB' の別名として
     `spam-use-BBDB-exclusive' を使うことができますが、それは別のバック
     エンドではありません。`spam-use-BBDB-exclusive' を `t' に設定すれ
     ば、BBDB による分割はすべて排他的になります。

 -- Variable: gnus-group-ham-exit-processor-BBDB
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、ham 印が付い
     た *ham* グループの記事の送信者が BBDB に追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-BBDB' の代わりに、`(ham
     spam-use-BBDB)' を使うことを推奨します。すべて同等に動作することは
     保証されます。



File: gnus-ja.info, Node: Gmane Spam Reporting, Next: Anti-spam Hashcash Payments, Prev: BBDB Whitelists, Up: Spam Back Ends

Gmane Spam 報告
...............

 -- Variable: gnus-group-spam-exit-processor-report-gmane
     グループパラメーターか変数 `gnus-spam-process-newsgroups' をカスタ
     マイズして、このシンボルをグループの `spam-process' パラメーターに
     加えて下さい。これが加えられると、spam 印が付いた記事のグループが
     HTTP 経由で Gmane の管理者に報告されます。

     Gmane は `http://gmane.org' で見つけることができます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-report-gmane' の代わりに
     `(spam spam-use-gmane)' を使うことを推奨します。すべて同等に動作す
     ることは保証されます。

 -- Variable: spam-report-gmane-use-article-number
     この変数はディフォルトで `t' です。例えばあなた自身がニュースサーバー
     を運営しているなどの理由によって、ローカルな記事番号が Gmane の記事番号
     と合わない場合は、`nil' に設定して下さい。
     `spam-report-gmane-use-article-number' が `nil' であると、
     `spam-report.el' はその番号を記事のヘッダーから取得します。

 -- Variable: spam-report-user-mail-address
     Gmane への spam の報告に付加される User-Agent に現れるメールアドレ
     スです。これは、誤った報告が行なわれたときに、Gmane の管理者があな
     たに連絡できるようにするためのものです。ディフォルトは
     `user-mail-address' です。



File: gnus-ja.info, Node: Anti-spam Hashcash Payments, Next: Blackholes, Prev: Gmane Spam Reporting, Up: Spam Back Ends

非-spam Hashcash 印
...................

 -- Variable: spam-use-hashcash
     `spam-use-whitelist' (*Note Blacklists and Whitelists::) に似てい
     ますが、送信者のアドレスの代わりに、潔白なメッセージの証しとして
     hashcash の印 (tokens) を使います。Hashcash 印が無いメッセージは次
     の spam-分割 (spam-split) 規則 (による検査工程) に送られます。これ
     は hashcash 印が見当たらないメッセージは spam とも ham とも見なさ
     れないことを意味する、明示的な濾過器です。



File: gnus-ja.info, Node: Blackholes, Next: Regular Expressions Header Matching, Prev: Anti-spam Hashcash Payments, Up: Spam Back Ends

ブラックホール
..............

 -- Variable: spam-use-blackholes
     このオプションはディフォルトで無効になっています。このオプションを
     セットすると、Gnus にブラックホール型の分散 spam 処理システム (例
     えば DCC) を調べさせることができます。変数
     `spam-blackhole-servers' は、Gnus が意見を求めるブラックホール・サー
     バーのリストを持ちます。現在のリストはかなり広範囲に渡っていますが、
     もし時代遅れなサーバーを含んでいたら必ず私たちに知らせるようにして
     下さい。

     ブラックホール・チェックは `dig.el' パッケージを使います。しかし
     `spam-use-dig' を `nil' に設定すれば、より良い性能のために
     `dns.el' を代わりに使うことを `spam.el' に指示することができます。
     現状では `spam-use-dig' を `nil' に設定することは、いく人かの利用
     者が使えないかもしれないので、それが可能な性能改善であるにもかかわ
     らず推奨されません。しかし、それが動くかどうかを確かめることはでき
     ます。

 -- Variable: spam-blackhole-servers
     ブラックホール・チェックのために意見を求めるサーバーのリストです。

 -- Variable: spam-blackhole-good-server-regex
     ブラックホール・サーバーのリストと照合されてはならない IP の正規表現です。
     `nil' に設定されると無効になります。

 -- Variable: spam-use-dig
     `dns.el' パッケージの代わりに `dig.el' パッケージを使います。ディ
     フォルトの設定である `t' が推奨されます。

ブラックホール・チェックは入って来るメールに対してだけ行なわれます。ブ
ラックホールに spam または ham プロセッサーはありません。



File: gnus-ja.info, Node: Regular Expressions Header Matching, Next: Bogofilter, Prev: Blackholes, Up: Spam Back Ends

正規表現によるヘッダーの合致検査
................................

 -- Variable: spam-use-regex-headers
     このオプションはディフォルトで無効になっています。このオプションを
     セットすると、Gnus に正規表現のリストとメッセージヘッダーを照合さ
     せることができます。変数 `spam-regex-headers-spam' および
     `spam-regex-headers-ham' が正規表現のリストを持ちます。メッセージ
     が spam か ham かどうかをそれぞれの変数を使って決めるために、Gnus
     はメッセージヘッダーを検査します。

 -- Variable: spam-regex-headers-spam
     メッセージヘッダーの中で一致した時に、それが spam であることを断定
     するための正規表現のリストです。

 -- Variable: spam-regex-headers-ham
     メッセージヘッダーの中で一致した時に、それが ham であることを断定
     するための正規表現のリストです。

正規表現によるヘッダーの検査は、入ってきたメールに対してだけ行なわれま
す。正規表現のために特有な spam または ham プロセッサーはありません。



File: gnus-ja.info, Node: Bogofilter, Next: SpamAssassin back end, Prev: Regular Expressions Header Matching, Up: Spam Back Ends

Bogofilter
..........

 -- Variable: spam-use-bogofilter
     Eric Raymond の迅速な Bogofilter を `spam-split' に使用したい場合
     は、この変数をセットして下さい。

     Spam 記事に `$' 印を関連付ける最小限度の世話だけで、Bogofilter ト
     レーニングはすべてかなり自動的になります。Spam とそうでないものそ
     れぞれの種類について数百通ずつの記事を入手するまで、これをやらなけ
     ればなりません。デバッグまたは好奇心のどちらかのために概略モードで
     `S t' コマンドを使うことによって、現在の記事の *spam 度*
     (spamicity) スコア (0.0〜1.0) を表示させることができます。

     Bogofilter はメッセージが spam かどうかを、ある明確な閾値に基づい
     て見極めます。閾値はカスタマイズできます。Bogofilter のドキュメン
     トを調べて下さい。

     Path に `bogofilter' の実行ファイルが無い場合、Bogofilter の処理は
     取り消されます。

     `spam-use-bogofilter-headers' を使う場合は、これを有効にしてはいけ
     ません。

`M s t'
`S t'
     Bogofilter の spam 度スコアを得ます (`spam-bogofilter-score')。

 -- Variable: spam-use-bogofilter-headers
     メッセージヘッダーだけを調べるために Eric Raymond の迅速な
     Bogofilter を `spam-split' に使用したい場合は、この変数をセットし
     て下さい。これは `spam-use-bogofilter' と同じように動作しますが、
     あらかじめ `X-Bogosity' ヘッダーがメッセージに存在しなければなりま
     せん。通常これは procmail の技法か、何かそれに似たもので行なうこと
     になるでしょう。Bogofilter のインストールに関する文書を調べて下さ
     い。

     `spam-use-bogofilter' を使う場合は、これを有効にしてはいけません。

 -- Variable: gnus-group-spam-exit-processor-bogofilter
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、spam 印が付
     いた記事が bogofilter の spam データベースに加えらます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-bogofilter' の代わりに
     `(spam spam-use-bogofilter)' を使うことを推奨します。すべて同等に
     動作することは保証されます。

 -- Variable: gnus-group-ham-exit-processor-bogofilter
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、ham 印が付い
     た *ham* グループの記事が非-spam 記事用の Bogofilter データベース
     に追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-bogofilter' の代わりに
     `(ham spam-use-bogofilter)' を使うことを推奨します。すべて同等に動
     作することは保証されます。

 -- Variable: spam-bogofilter-database-directory
     これは Bogofilter がそのデータベースを格納するディレクトリーです。
     ディフォルトでは設定されていないので、Bogofilter はそれ自身のディ
     フォルトのデータベース・ディレクトリーを使います。

Bogofilter のメール分類器は、意図と目的の点で `ifile' に似ています。
Ham および spam のプロセッサーが提供され、記事で Bogofilter が使われる
べきか、または既に使われたかを spam-split に示すための
`spam-use-bogofilter' 変数と `spam-use-bogofilter-headers' があります。
この機能を検査するために Bogofilter のバージョン 0.9.2.1 が使われました。



File: gnus-ja.info, Node: SpamAssassin back end, Next: ifile spam filtering, Prev: Bogofilter, Up: Spam Back Ends

SpamAssassin back end
.....................

 -- Variable: spam-use-spamassassin
     `spam-split' に SpamAssassin を使いたい場合は、この変数をセットし
     て下さい。

     SpamAssassin は、規則と分析のセット (ベイジアンフィルタを含む) に
     基づいて、それぞれの記事のスコアを裁定します。ベイジアンフィルタは、
     spam 記事に `$' 印を関連させることによって訓練することができます。
     Spam のスコアは、概略モードで `S t' コマンドを使うことによって見る
     ことができます。

     この変数をセットすると、それぞれの記事は `spam-split' が呼ばれると
     きに SpamAssassin によって処理されます。メールが SpamAssassin で処
     理されるようになっていて、SpamAssassin ヘッダーだけを使いたいのな
     らば、代わりに `spam-use-spamassassin-headers' をセットして下さい。

     `spam-use-spamassassin-headers' を使う場合、これを有効にしてはいけ
     ません。

 -- Variable: spam-use-spamassassin-headers
     メールが SpamAssassin で処理されるようになっている場合に、
     SpamAssassin ヘッダーに基づいて `spam-split' に分割を行なわせたい
     のならば、この変数をセットして下さい。

     `spam-use-spamassassin' を使う場合、これを有効にしてはいけません。

 -- Variable: spam-spamassassin-program
     この変数は SpamAssassin の実行形式を指します。`spamd' を稼働してい
     るならば、より速い処理のために、この変数に `spamc' の実行形式を設
     定することができます。`spamd'/`spamc' の更なる情報は、
     SpamAssassin のドキュメントを見て下さい。

SpamAssassin は、spam を同定するために広範な分析を行なう、強力で融通性
のある spam 濾過器です。Ham および spam のプロセッサーが提供され、記事
で SpamAssassin が使われるべきか、または既に使われたかを spam-split に
示すための `spam-use-spamassassin' 変数と
`spam-use-spamassassin-headers' 変数があります。この機能を検査するため
に SpamAssassin のバージョン 2.63 が使われました。



File: gnus-ja.info, Node: ifile spam filtering, Next: Spam Statistics Filtering, Prev: SpamAssassin back end, Up: Spam Back Ends

ifile による spam の濾過
........................

 -- Variable: spam-use-ifile
     Bogofilter に似た統計分析器である `ifile' を `spam-split' に使いた
     い場合は、この変数を有効にして下さい。

 -- Variable: spam-ifile-all-categories
     `spam-use-ifile' に、単なる spam/非-spam ではなくて ifile のすべて
     の区分 (カテゴリー) を与えてもらいたいならば、この変数を有効にして
     下さい。これを使う場合は、その文献に書かれているように ifile をト
     レーニングしておかなければなりません。

 -- Variable: spam-ifile-spam-category
     ifile に関する限り、これは spam メッセージのカテゴリーです。実際に
     使われる文字列は無関係ですが、たぶんあなたは `spam' のデフォルト値
     を残しておきたいでしょう。

 -- Variable: spam-ifile-database
     これは ifile データベースのファイル名です。ディフォルトでは定義さ
     れていないので、ifile はそれ自身のディフォルトのデータベース名を使
     います。

ifile のメール分類器は、意図と目的の点で Bogofilter に似ています。Spam
と ham のプロセッサーが提供され、ifile が使われるべきであることを
spam-split に示すための `spam-use-ifile' 変数があります。この機能を検査
するために ifile のバージョン 1.2.1 が使われました。



File: gnus-ja.info, Node: Spam Statistics Filtering, Next: SpamOracle, Prev: ifile spam filtering, Up: Spam Back Ends

Spam 統計濾過
.............

このバックエンドは、統計に基づいた濾過を行なう Spam 統計 Emacs Lisp パッ
ケージを使います (*Note Spam Statistics Package::)。これを使う前に、あ
なたの Spam 統計辞書を初期化するための、いくつかの追加の処理を行なう必
要があるでしょう。*Note Creating a spam-stat dictionary::.

 -- Variable: spam-use-stat

 -- Variable: gnus-group-spam-exit-processor-stat
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、spam 印が付
     いた記事が spam 記事用の spam-stat データベースに追加されます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-stat' の代わりに `(spam
     spam-use-stat)' を使うことを推奨します。すべて同等に動作することは
     保証されます。

 -- Variable: gnus-group-ham-exit-processor-stat
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、ham 印が付い
     た *ham* グループの記事が非-spam 記事用の spam-stat データベースに
     追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-stat' の代わりに `(ham
     spam-use-stat)' を使うことを推奨します。すべて同等に動作することは
     保証されます。

これは `spam.el' が `spam-stat.el' と働き合うことを可能にします。
`spam-stat.el' は (Lisp だけの) spam 内部データベースを提供しますが、そ
れは ifile や Bogofilter と違って外部プログラムを必要としません。Spam
と ham のプロセッサー、および `spam-split' のための `spam-use-stat' 変
数が提供されます。



File: gnus-ja.info, Node: SpamOracle, Prev: Spam Statistics Filtering, Up: Spam Back Ends

Gnus で SpamOracle を使うには
.............................

気軽に spam を濾過する一つのやり方は SpamOracle を使うことです。統計的
にメールを濾過するための道具である SpamOracle は、Xavier Leroy によって
書かれました。これは別にインストールする必要があります。

Gnus で SpamOracle を使うには、複数のやり方があります。すべての場合に、
メールは *mark* モードで動作している SpamOracle にパイプされます。する
と SpamOracle は、そのメールを spam だと見なしたかどうかを示す
`X-Spam' ヘッダーを記入します。

実現可能な一つは、SpamOracle を `:prescript' として *Note Mail Source
Specifiers:: から走らせることです。この方法には、利用者が *X-Spam* ヘッ
ダーを見ることができるという利点があります。

もっとも手軽な方法は、`spam.el' (*Note Spam Package::) が SpamOracle を
呼ぶようにすることです。

`spam.el' で SpamOracle を利用できるようにするためには、変数
`spam-use-spamoracle' を `t' にして、`nnmail-split-fancy' または
`nnimap-split-fancy' を設定して下さい。*Note Spam Package::.  この例で
は nnimap サーバーの `INBOX' が SpamOracle を使って濾過されます。Spam
であると認定されたメールは、`spam-split-group' (この場合は `Junk') に移
動させられます。Ham なメッセージは `INBOX' に残ります:

     (setq spam-use-spamoracle t
           spam-split-group "Junk"
           nnimap-split-inbox '("INBOX")
           nnimap-split-rule 'nnimap-split-fancy
           nnimap-split-fancy '(| (: spam-split) "INBOX"))

 -- Variable: spam-use-spamoracle
     Gnus に SpamOracle を使って spam の濾過をさせたい場合に `t' にして
     下さい。

 -- Variable: spam-spamoracle-binary
     Gnus は利用者の PATH で見つかった `spamoracle' という SpamOracle
     のバイナリーを使います。これにはカスタマイズ可能な変数
     `spam-spamoracle-binary' を使います。

 -- Variable: spam-spamoracle-database
     SpamOracle はその解析結果をデータベースとして格納するために、ディフォル
     トで `~/.spamoracle.db' ファイルを使います。これは変
     数 `spam-spamoracle-database' で制御され、ディフォルト
     は `nil' です。それは、ディフォルトの SpamOracle データベースが使わ
     れることを意味します。データベースがどこか特別な場所に置きたい場合は、
     `spam-spamoracle-database' をそのパスに設定して下さい。

SpamOracle はメッセージが spam か ham かを見極めるために統計的な手法を
使います。間違いや見逃しの少ない良い結果を得るために、SpamOracle はトレー
ニングを必要とします。SpamOracle は spam メールの特徴を学びます。*add*
モード (トレーニング・モード) を使って、良いメール (ham) と spam を
SpamOracle に与えなければなりません。これは、概略バッファーで `|' を押
すことによってメールを SpamOracle のプロセスにパイプするか、または
`spam.el' の spam および ham プロセッサーを使うことによって行なうことが
できます。*Note Spam Package::.

 -- Variable: gnus-group-spam-exit-processor-spamoracle
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、spam 印が付
     いた記事が spam のサンプルとして SpamOracle に送られます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-spamoracle' の代わりに
     `(spam spam-use-spamoracle)' を使うことを推奨します。すべて同等に
     動作することは保証されます。

 -- Variable: gnus-group-ham-exit-processor-spamoracle
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えて下さい。このシンボルが
     グループの `spam-process' パラメーターに加えられると、*ham* グルー
     プにある ham 印が付いた記事が ham の記事のサンプルとして
     SpamOracle に送られます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-spamoracle' の代わりに
     `(ham spam-use-spamoracle)' を使うことを推奨します。すべて同等に動
     作することは保証されます。

*例:* これらは ham グループとして分類された、つまり ham の記事しかない
グループのためのグループパラメーターです。

      ((spam-contents gnus-group-spam-classification-ham)
       (spam-process ((ham spam-use-spamoracle)
                      (spam spam-use-spamoracle))))

このグループでは `spam-use-spamoracle' が ham と spam の両方の処理を行
ないます。このグループに spam 記事があって (SpamOracle が十分なサンプル
を食べさせてもらっていなければ、そうなりますね)、かつ利用者がいくつかの
記事に spam の印を付けたならば、それらの記事は SpamOracle によって処理
されます。そのプロセッサーは、新しい spam のサンプルとして SpamOracle
に記事を送ります。



File: gnus-ja.info, Node: Extending the Spam package, Next: Spam Statistics Package, Prev: Spam Back Ends, Up: Spam Package

Spam パッケージの拡張
---------------------

Blackbox という新しいバックエンドを追加したいとしましょう。入ってくるメー
ルを濾過するために以下のものを用意して下さい:

  1. コード

          (defvar spam-use-blackbox nil
            "Blackbox を使うときは t にする。")

     Blackbox が入ってくるメールを検査できるのであれば、
     `spam-check-blackbox' を書いて下さい。

     Blackbox が spam と ham を登録または登録解除できるのであれば、手始
     めに bogofilter の登録/解除ルーチンを使って、またはもっと
     Blackbox にふさわしい他の登録/解除ルーチンを使って
     `spam-blackbox-register-routine' および
     `spam-blackbox-unregister-routine' を書いて下さい。

  2. 関数

     `spam-check-blackbox' 関数は、他の習慣に倣って `nil' か
     `spam-split-group' を返さなければなりません。あなたに何ができるか
     の例として、既存の `spam-check-*' 関数を参照して下さい。また、あな
     たがそうでない理由を完全に理解していないならば、テンプレートに齧り
     付いて下さい。

Spam と ham メッセージを処理するために、以下のものを用意して下さい:

  1. コード

     Spam または ham のプロセッサーを用意する必要はありません。
     Blackbox が spam または ham の処理をサポートする場合だけ、それらを
     用意して下さい。

     さらに ham と spam のプロセッサーは単一の変数ではなくされつつあり、
     代わりに `(spam spam-use-blackbox)' または `(ham
     spam-use-blackbox)' の形式が推奨されます。今のところ spam/ham プロ
     セッサー変数はまだあちこちにありますが、長く存続することはないでしょ
     う。

          (defvar gnus-group-spam-exit-processor-blackbox "blackbox-spam"
            "概略を出るときに呼ばれる blackbox の spam プロセッサー。
          Spam グループだけに適用される。")

          (defvar gnus-group-ham-exit-processor-blackbox "blackbox-ham"
            "概略を出るときに呼ばれる blackbox の ham プロセッサー。
          Spam ではない (未分類または ham) グループだけに適用される。")

  2. Gnus のパラメーター

     `gnus.el' にあるグループパラメーター `spam-process' に

          (const :tag "Spam: Blackbox" (spam spam-use-blackbox))
          (const :tag "Ham: Blackbox"  (ham spam-use-blackbox))

     を加えて下さい。それを必ずパラメーターと変数のカスタマイズの二回に
     ついて行なうようにして下さい。

     Blackbox が入ってくるメールが spam かどうかを検査できるのであれば、

          (variable-item spam-use-blackbox)

     を `gnus.el' のグループパラメーター `spam-autodetect-methods' に加
     えて下さい。

     最後に、`spam.el' にある適切な `spam-install-*-backend' 関数を使っ
     て下さい。利用できる関数は次の通りです。

       1. `spam-install-backend-alias'

          この関数は、オリジナルのバックエンドのようにすべてを行なうバッ
          クエンドのために、別名を使うことができるようにするだけです。
          今のところ、これは `spam-use-BBDB-exclusive' を
          `spam-use-BBDB' のように働かせるためだけに使われます。

       2. `spam-install-nocheck-backend'

          この関数は、検査する機能は無いけれども ham または spam を登録
          /解除することができるバックエンドになります。
          `spam-use-gmane' がそのようなバックエンドです。

       3. `spam-install-checkonly-backend'

          この関数は、入ってくるメールが spam かどうかの検査だけを行な
          うことができるバックエンドになります。それはメッセージを登録
          または登録解除することができません。`spam-use-blackholes' と
          `spam-use-hashcash' がそのようなバックエンドです。

       4. `spam-install-statistical-checkonly-backend'

          この関数は、入ってくるメールの検査だけを行なうことができる、
          統計処理を行なうバックエンド (検査のためにメッセージの本文全
          体を必要とします) になります。`spam-use-regex-body' がそのよ
          うな濾過器です。

       5. `spam-install-statistical-backend'

          この関数は、入ってくるメールの検査と登録/解除ルーチンを持つ、
          統計処理を行なうバックエンドになります。
          `spam-use-bogofilter' は、そのように仕立てられています。

       6. `spam-install-backend'

          これは最も普通なバックエンドになります。それは検査とメッセージの
          登録/解除を行なうことができ、統計処理の能力はありません。
          `spam-use-BBDB' がそのようなバックエンドです。

       7. `spam-install-mover-backend'

          移動させる (mover) バックエンドは `spam.el' の内部で、概略バッ
          ファーを出るときにある明確なやり方で記事を移動させます。おそ
          らくそのようなバックエンドを使うことは無いでしょう。



File: gnus-ja.info, Node: Spam Statistics Package, Prev: Extending the Spam package, Up: Spam Package

Spam 統計パッケージ
-------------------

Paul Graham は統計を使った spam の濾過に関する優れたエッセイを書きまし
た: A Plan for Spam (http://www.paulgraham.com/spam.html)。そこで彼は
SpamAssassin によって使われているような規則ベースの濾過に固有な欠陥につ
いて述べています。例えば: 誰かが規則を書かなければならないし、他のすべ
ての人はこれらの規則をインストールしなければなりません。あなたはいつも
遅れをとってしまいます。それよりも、それが spam または非-spam に何とな
く似ているかどうかに基づいてメールを濾過する方が遥かに良いだろうと彼は
主張しています。これを測定する一つの手段は単語の分布です。その後で彼は、
新着メールがあなたの他の spam メールに似ているかどうかをチェックする方
法を述べています。

基本的な考えはこうです: あなたのメールの二つの集合を作ります。一方は
spam を、もう一方は spam ではないメールを集めたものです。両方の集合にお
ける各単語の出現頻度を数えて、集合のメールの総数で重み付けを行ない、こ
の情報を辞書に格納します。新着メールのすべての単語について、spam か
spam ではないメールに属する確率を判定します。15 の最も顕著な単語を使っ
て、そのメールが spam であることの確率の総計を計算します。この確率があ
る閾値より高かったら、そのメールは spam であると見なされます。

Spam 統計パッケージは、この種の濾過のためのサポートを Gnus に追加します。
Spam パッケージ (*Note Spam Package::) のバックエンドの一つとして、また
はそれ自体を使うことができます。

Spam 統計パッケージを使う前に、それを使うための準備を行なう必要がありま
す。第一に、あなたのメールの二つの集合が要ります。一方は spam を、もう
一方は spam ではないメールを集めたものです。そして、それらの二つの集合
を使って辞書を作り、それをセーブして下さい。そして特に最後に、あなたの
特級分割の規則でこの辞書を使って下さい。

* Menu:

* Creating a spam-stat dictionary::
* Splitting mail using spam-stat::
* Low-level interface to the spam-stat dictionary::



File: gnus-ja.info, Node: Creating a spam-stat dictionary, Next: Splitting mail using spam-stat, Prev: Spam Statistics Package, Up: Spam Statistics Package

spam-統計 (spam-stat) 辞書を作る
................................

統計に基づいた spam 濾過を始めるには、前もって二つのメールの集合 (一方
は spam を、もう一方は spam ではないメールを集めたもの) に基づいた統計
を作らなければなりません。そしてそれらの統計は、後で利用するために辞書
に格納されます。それらの統計を意味のあるものにするために、両方の集合に
つき数百通のメールが必要です。

今のところ Gnus は nnml バックエンドでだけ辞書の自動生成をサポートしま
す。nnml バックエンドは一通のメールにつき一つのファイルで、すべてのメー
ルを一つのディレクトリーに格納します。以下を使って下さい:

 -- Function: spam-stat-process-spam-directory
     このディレクトリーにあるすべてのファイルについて spam の統計を生成
     します。すべてのファイルは一つの spam メールとして扱われます。

 -- Function: spam-stat-process-non-spam-directory
     このディレクトリーにあるすべてのファイルについて非-spam の統計を生
     成します。すべてのファイルは一つの spam ではないメールとして扱われ
     ます。

普通は `~/Mail/mail/spam' のようなディレクトリー (通常
`nnml:mail.spam' グループに対応) について
`spam-stat-process-spam-directory' を呼ぶことになるでしょう。また
`~/Mail/mail/misc' のようなディレクトリー (通常 `nnml:mail.misc' グルー
プに対応) について `spam-stat-process-non-spam-directory' を呼びましょ
う。

IMAP を使っている場合はメールをローカルには持っていないので、それは働き
ません。一つの解決策は、Gnus エージェントで記事をキャッシュすることです。
そうすれば `spam-stat-process-spam-directory' として
`"~/News/agent/nnimap/mail.yourisp.com/personal_spam"' のようなものを使
うことができます。*Note Agent as Cache::.

 -- Variable: spam-stat
     この変数はすべての統計のハッシュテーブル--辞書と言っているもの--を
     保持します。このハッシュテーブルは、双方の集合のすべての単語につい
     て spam および spam ではないメールにおける出現頻度を表すベクトルを
     格納します。

統計を最初から作り直したいときは、辞書をリセットする必要があります。

 -- Function: spam-stat-reset
     すべての統計を削除して `spam-stat' ハッシュテーブルをリセットしま
     す。

行なったら辞書をセーブしなければなりません。辞書はかなり大きくなるかも
しれません。辞書を追加更新しない場合 (言い換えると、例えば毎月一回作り
直す場合)、頻繁に現れないか、または spam か spam ではないメールのどちら
に属するかがはっきりしないすべての単語を削除することによって、辞書のサ
イズを小さくすることができます。

 -- Function: spam-stat-reduce-size
     辞書のサイズを小さくします。これは辞書を追加更新したくない場合だけ
     使って下さい。

 -- Function: spam-stat-save
     辞書をセーブします。

 -- Variable: spam-stat-file
     辞書の格納に使うファイル名です。ディフォルトは `~/.spam-stat.el'
     です。



File: gnus-ja.info, Node: Splitting mail using spam-stat, Next: Low-level interface to the spam-stat dictionary, Prev: Creating a spam-stat dictionary, Up: Spam Statistics Package

spam-統計 (spam-stat) を使ってメールを分割する
..............................................

この章は Spam 統計パッケージを Spam パッケージ (*Note Spam Package::)
とは *独立して* 使う方法について説明します。

最初に以下を `~/.gnus.el' ファイルに追加して下さい:

     (require 'spam-stat)
     (spam-stat-load)

これは必要な Gnus のコードとあなたが作った辞書を読み込みます。

次に、特級分割の規則を改造する必要があります: どうやって `spam-stat' を
使うかを決めて下さい。以下の例は nnml バックエンド用です。nnimap バック
エンドでもまったく同様に動作します。単に `nnmail-split-fancy' の代わり
に `nnimap-split-fancy' を使って下さい。

`mail.misc' と `mail.spam' の二つのグループだけがある、最も単純な事例を
想定しましょう。以下の式は、メールが spam でなかったら `mail.misc' に行
くことを示します。もし spam だったら、`spam-stat-split-fancy' は
`mail.spam' を返します。

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               "mail.misc"))

 -- Variable: spam-stat-split-fancy-spam-group
     Spam 用のグループです。ディフォルトは `mail.spam' です。

特定の表題を持つメールを他のグループに入れる濾過をも行ないたいならば、
以下の式を使って下さい。正規表現に合致しないメールだけに spam の可能性
があると考えます。

     (setq nnmail-split-fancy
           `(| ("Subject" "\\bspam-stat\\b" "mail.emacs")
               (: spam-stat-split-fancy)
               "mail.misc"))

最初に spam の濾過をしたい場合、辞書を作るときに十分に注意しなければな
りません。`spam-stat-split-fancy' は `mail.emacs' と `mail.misc' のどち
らのメールも spam ではないと解釈しなければならないので、辞書を作るとき
に spam ではない集合に両方とも入っていなければならないことに注意して下
さい。

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))

これを伝統的な濾過と組み合わせることもできます。ここではすべての HTML
だけのメールを `mail.spam.filtered' グループに入れるものとしましょう。
`spam-stat-split-fancy' はそれらのメールを見ないので、辞書を作るときに、
`mail.spam.filtered' のメールが spam の集合または spam ではない集合のど
ちらにも入るべきではないことに注意して下さい!

     (setq nnmail-split-fancy
           `(| ("Content-Type" "text/html" "mail.spam.filtered")
               (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))



File: gnus-ja.info, Node: Low-level interface to the spam-stat dictionary, Prev: Splitting mail using spam-stat, Up: Spam Statistics Package

spam-統計 (spam-stat) 辞書への低階層インターフェース
....................................................

`spam-stat' を使うための主なインターフェースは以下の関数群です:

 -- Function: spam-stat-buffer-is-spam
     Spam であると考えられる新着メールがあるバッファーで呼ばれます。ま
     だ処理されていない新着メールに対して使って下さい。

 -- Function: spam-stat-buffer-is-no-spam
     Spam ではないと考えられる新着メールがあるバッファーで呼ばれます。
     まだ処理されていない新着メールに対して使って下さい。

 -- Function: spam-stat-buffer-change-to-spam
     それが spam ではなくて通常のものだとはもはや考えられないメールがあ
     るバッファーで呼ばれます。すでに spam ではないものとして処理されて
     しまったメールの地位の変更に使って下さい。

 -- Function: spam-stat-buffer-change-to-non-spam
     それが通常のものではなくて spam だとはもはや考えられないメールがあ
     るバッファーで呼ばれます。すでに spam であるものとして処理されてし
     まったメールの地位の変更に使って下さい。

 -- Function: spam-stat-save
     ハッシュテーブルをファイルにセーブします。変数 `spam-stat-file' で
     設定されたファイル名が使われます。

 -- Function: spam-stat-load
     ハッシュテーブルをファイルから読み込みます。変数 `spam-stat-file'
     で設定されたファイル名が使われます。

 -- Function: spam-stat-score-word
     単語の spam スコアを返します。

 -- Function: spam-stat-score-buffer
     バッファーの spam スコアを返します。

 -- Function: spam-stat-split-fancy
     特級メール分割のためにこの関数を使って下さい。
     `nnmail-split-fancy' に規則 `(: spam-stat-split-fancy)' を追加しま
     しょう。

それを使う前に、必ず辞書が読み込まれているようにして下さい。これには
`~/.gnus.el' ファイルに以下が必要です:

     (require 'spam-stat)
     (spam-stat-load)

以下は一般的なテストのための関数呼び出しです:

     リセット: (setq spam-stat (make-hash-table :test 'equal))
     Spam の学習: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     非-spam の学習: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     辞書をセーブ: (spam-stat-save)
     辞書ファイルのサイズを確認: (nth 7 (file-attributes spam-stat-file))
     単語数を確認: (hash-table-count spam-stat)
     Spam の検査: (spam-stat-test-directory "~/Mail/mail/spam")
     非-spam の検査: (spam-stat-test-directory "~/Mail/mail/misc")
     辞書のサイズを小さくする: (spam-stat-reduce-size)
     辞書をセーブ: (spam-stat-save)
     辞書ファイルのサイズを確認: (nth 7 (file-attributes spam-stat-file))
     単語数を確認: (hash-table-count spam-stat)
     Spam の検査: (spam-stat-test-directory "~/Mail/mail/spam")
     非-spam の検査: (spam-stat-test-directory "~/Mail/mail/misc")

以下は辞書を生成する方法です:

     リセット: (setq spam-stat (make-hash-table :test 'equal))
     Spam の学習: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     非-spam の学習: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     別の必要な非-spam グループに対して繰り返し...
     辞書のサイズを小さくする: (spam-stat-reduce-size)
     辞書をセーブ: (spam-stat-save)



File: gnus-ja.info, Node: Other modes, Next: Various Various, Prev: Spam Package, Up: Various

他のモードとの相互作用
======================


Dired
-----

`gnus-dired-minor-mode' は dired バッファーで使えるいくつかの便利な機能
を提供します。これは次の式で有効になります:

     (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

`C-c C-m C-a'
     Dired で印を付けたものを添付ファイルとして送信します
     (`gnus-dired-attach')。どの message バッファーに添付するかを尋ねら
     れます。

`C-c C-m C-l'
     適切な mailcap 項目に従ってファイルを開きます
     (`gnus-dired-find-file-mailcap')。接頭引数を付けると、ファイルを新
     しいバッファーで (単に) 開きます。

`C-c C-m C-p'
     mailcap 項目に従ってファイルを印刷します (`gnus-dired-print')。印
     刷コマンドが無い場合は PostScript 画像として印刷します。



File: gnus-ja.info, Node: Various Various, Prev: Other modes, Up: Various

いろいろのいろいろ
==================

`gnus-home-directory'
     すべての Gnus のファイル名とディレクトリー名の変数は、これを基点に
     して初期値が決定されます。ディフォルトは `~/' です。

`gnus-directory'
     Gnus がデータを格納するほとんどのファイルとディレクトリーの名前の
     変数は、これを基点にして初期値が決定されます。ディフォルトは
     `SAVEDIR' 環境変数の値か、その変数が設定されていない場合は
     `~/News/' です。

     `~/.gnus.el' ファイルが読まれたときは Gnus のほとんどはすでに読み
     込まれているということに注意して下さい。これはつまり、この変数を
     `~/.gnus.el' の中で設定しても、この変数によって初期化される他のディ
     レクトリー変数は正しく設定されないだろうということです。この変数は
     代わりに `.emacs' で設定して下さい。

`gnus-default-directory'
     上記の変数にはまったく関係ありません--この変数はすべての Gnus バッ
     ファーのディフォルトディレクトリーをどうすべきかを設定します。もし
     `C-x C-f' のような命令を実行すると、現在のバッファーのディフォルト
     ディレクトリーを起点にしたプロンプトが出てくるでしょう。この変数が
     `nil' (これがディフォルト) であれば、Gnus を起動したときにあなたが
     いたバッファーのディフォルトディレクトリーがディフォルトディレクト
     リーになるでしょう。

`gnus-verbose'
     この変数は 0 から 10 までの間の整数です。数値が大きいほどたくさん
     のメッセージが表示されます。この変数が 0 であれば Gnus は何のメッ
     セージも見せません。これが 7 (ディフォルト) であれば特に重要なメッ
     セージが表示され、10 であれば Gnus は決してお喋りを止めず、たくさ
     んのメッセージであなたにめまいを起こさせるでしょう。

`gnus-verbose-backends'
     この変数は `gnus-verbose' と同様の効果をもたらしますが、Gnus 本体
     ではなく Gnus のバックエンドに対して適用されます。

`gnus-add-timestamp-to-message'
     この変数は `gnus-verbose' と `gnus-verbose-backends' で制御されて
     出力されるメッセージに、時刻 (タイムスタンプ) を付加するかどうかを
     制御します。ディフォルト値は時刻を付加しないことを意味する `nil'
     です。`log' だったら `*Messages*' バッファー (XEmacs では `
     *Message-Log*' バッファー) に入るメッセージだけに時刻を付加します。
     もし `nil' でも `log' でもなければ、ログに入るメッセージだけでなく、
     エコーエリアに表示されるものにも時刻を付加します。

`nnheader-max-head-length'
     バックエンドが記事の連続したヘッダー部を読んでいるときは、できる限
     り少ない量だけを読もうとします。この変数 (ディフォルト 8192) は、
     バックエンドがヘッダーと本文の間の区切り行の捜索を諦める前に読み込
     む絶対最大長を指定します。この変数が `nil' であれば、読み込み上限
     はありません。もし `t' であれば、バックエンドは記事を部分部分で読
     み込もうとはせず、記事全体を読み込みます。これは `ange-ftp' や
     `efs' のあるバージョンで意味を持ちます。

`nnheader-head-chop-length'
     この変数 (ディフォルト 2048) は、前記の操作を行なっているときに、
     どれくらいの大きさの単位で各記事を読み込むかを設定します。

`nnheader-file-name-translation-alist'
     これはファイル名の文字をどのように変換するかを指定する連想リストで
     す。例えば、もし `:' があなたのシステムではファイル名の文字として
     は使えない場合 (あなたは OS/2 利用者ですね)、以下のようにすること
     ができます。

          (setq nnheader-file-name-translation-alist
                '((?: . ?_)))

     実際には、これは OS/2 と MS Windows (ちぇっ!) システム上でのこの変
     数のディフォルト値です。

`gnus-hidden-properties'
     これは「不可視」テキストを隠すために使われる属性のリストです。ほと
     んどのシステムではディフォルトは `(invisible t intangible t)' で、
     これは不可視テキストを見えなくして触れないようにします。

`gnus-parse-headers-hook'
     ヘッダーを解釈する前に呼び出されるフック。これは例えば、取得したヘッ
     ダーの統計情報を取るとか、あるいはある種のヘッダーを取り除くことに
     使うことができます。まあ、私は何でこんなものが欲しいかよくわかんな
     いんだけどね。

`gnus-shell-command-separator'
     二つのシェル命令を区切るのに使用される文字列。ディフォルトは `;'
     です。

`gnus-invalid-group-regexp'
     利用者にグループ名を尋ねるときに使う、「無効な」グループ名に合致す
     る正規表現です。ディフォルト値は Gnus の内部動作をめちゃめちゃにし
     てしまうかもしれない、いくつかの *本当に* 使えないグループ名を引っ
     かけます。(通常、選択方法とグループの境界に使っている `:' などを許
     してしまうとまずい、ということです。)

     IMAP の利用者はグループ名に `/' を使いたいかもしれませんが。



File: gnus-ja.info, Node: The End, Next: Appendices, Prev: Various, Up: Top

終わり
******

はい、以上がマニュアルです--あなたはもう自分自身の人生を送ることができ
ます。連絡をとって下さい。あなたの猫によろしく伝えて下さい。

おお、*神よ*---さよならを耐えることはできません。(すすり泣き。)

チャールズ・レズニコフはそれを非常によく表しているので、ここは彼のため
に譲ります:

     賛美の歌 (テデウム)

     勝利ゆえにぼくは
     歌うのではない、
     勝利などひとつもないから、
     ありふれた日光のため、
     そよ風のため、
     春の気前よさのために歌う。

     勝利のためではなく
     僕としては精一杯やった
     一日の仕事のために。
     玉座のためではなく
     みんなのテーブルの席で。

(新潮文庫「空腹の技法」著:ポールオースター、訳:柴田元幸、畔柳和代、
ISBN:4102451080 より引用)



File: gnus-ja.info, Node: Appendices, Next: GNU Free Documentation License, Prev: The End, Up: Top

付録
****

* Menu:

* XEmacs::                      XEmacs でインストールするための要件
* History::                     どうやって Gnus が今日のようになったか
* On Writing Manuals::          なぜこれが初心者用の案内でないか
* Terminology::                 ここにあるような本当に難しい語を使う
* Customization::               あなたの要求に沿って Gnus を仕立てる
* Troubleshooting::             うまくいかないときに何を試すか
* Gnus Reference Guide::        色々な技術的なもの
* Emacs for Heathens::          Emacs の用語の手短かな紹介
* Frequently Asked Questions::  Gnus の FAQ



File: gnus-ja.info, Node: XEmacs, Next: History, Prev: Appendices, Up: Appendices

XEmacs
======

XEmacs はパッケージの集合として配布されています。Gnus の XEmacs パッケー
ジが必要とするものは何であれ、あなたはインストールすべきです。今のところ
必要なのは `gnus', `mail-lib', `xemacs-base',
`eterm', `sh-script', `net-utils', `os-utils',
`dired', `mh-e', `sieve', `ps-print', `W3',
`pgg', `mailcrypt', `ecrypto' および `sasl' です。



File: gnus-ja.info, Node: History, Next: The Manual, Prev: XEmacs, Up: Appendices

歴史
====

GNUS は梅田政信氏によって書かれました。1994年の秋が忍び寄ってくるころ、
退屈していたラルス・マッグヌ・イングブリグットスン (Lars Magne
Ingebrigtsen) は Gnus を書き直そうと決心しました。

この非道な行為の責任者を調べてみたいのなら、あなたの (いまいましい!) ウェ
ブブラウザーを `http://quimby.gnus.org/' に向けることができます。これは
新しくて粋な版の Gnus の第一配布場所で、Newsrc をぶっ壊して人々を激怒さ
せるサイトとしても知られています。

最初のアルファ版の開発期間に、新しい Gnus は“(ding) Gnus”と呼ばれてい
ました。"(ding)" はもちろん、"ding is not Gnus" の短縮形で、これはまっ
たく完全な嘘ですが、だれがそんなことを気にするでしょうか? (ところで、こ
の短縮形の“Gnus”はおそらく梅田さんの意図通り「ニュース」と発音される
べきで、そうするともっと適切な名前になります。そう思いませんか?)

どちらにせよ、すべてのエネルギーを新しい元気の良い名前を付けるのに使い
果たした後で、その名前は *あまりに* 元気が良すぎるということになり、そ
れを“Gnus”と再び命名しました。でも、今回は大文字と小文字を混ぜていま
す。“Gnus”と“GNUS”です。新しいもの と 古いもの。

* Menu:

* Gnus Versions::               どんなバージョンの Gnus がリリースされているか
* Other Gnus Versions::         リリースされている他のバージョンの gnus
* Why?::                        Gnus の目的は何?
* Compatibility::               Gnus は GNUS とどれくらい互換性があるの?
* Conformity::                  Gnus はすべての標準を満たそうとする
* Emacsen::                     Gnus は少数の現代的な Emacs で実行できる
* Gnus Development::            Gnus が開発されている方法
* Contributors::                たくさんの人々
* New Features::                Gnus の新しいことに関する手がかり



File: gnus-ja.info, Node: Gnus Versions, Next: Other Gnus Versions, Prev: History, Up: History

Gnus Versions
-------------

最初の「正しい」Gnus 5 のリリースは 1995年11月に Emacs 19.30 の配布に含
まれたときになされました (132 の (ding) Gnus のリリース 足すことの
Gnus 5.0 の 15 リリース)。

1996年3月に次の世代の Gnus (別名“September Gnus”(99 リリースの後で))
が“Gnus 5.2”という名前でリリースされました (40 リリース)。

1996年の 7月28日に Red Gnus の作業が始まり、それは 1997年1月25日に (84
リリースの後で)“Gnus 5.4”としてリリースされました (67 リリース)。

1997年9月13日に、Quassia Gnus が開始され、37 リリース続きました。それは
“Gnus 5.6”として 1998年3月8日にリリースされました (46 リリース)。

1998年8月29日に Gnus 5.6 から Pterodactyl Gnus が生まれ、1999年12月3日
に (99 リリースと CVS リポジトリでの作業の後)“Gnus 5.8”としてリリース
されました。

2000年10月26日に Oort Gnus が開始され、2003年5月1日に Gnus 5.10 として
リリースされました (24 リリース)。

2004年1月4日に No Gnus が始まりました。

接頭語を持った版の Gnus---“(ding) Gnus”,“September Gnus”,“Red
Gnus”,“Quassia Gnus”,“Pterodactyl Gnus”,“Oort Gnus”,“No
Gnus”---に出会っても、混乱しないで下さい。あなたが恐がっていることを知
られてはいけません。後ろに下がりなさい。ゆっくりと。他に何をしても、走っ
てはいけません。それが届かくなるまで、静かに歩き去りなさい。正しくリリー
スされた版の Gnus を見つけて、代わりにそれにすり寄りなさい。



File: gnus-ja.info, Node: Other Gnus Versions, Next: Why?, Prev: Gnus Versions, Up: History

他の Gnus のバージョン
----------------------

Lars さんが調製してリリースした Gnus に加えて、日本では Semi-gnus の開
発が行なわれています。これは SEMI という MIME の機能を実現するためのラ
イブラリーを使うことを前提としています。

これらの gnus は、主に Gnus 5.6 と Pterodactyl Gnus を元にしています。
それらは“Semi-gnus”と総称され、T-gnus, Nana-gnus および Chaos の異なっ
た系統があります。これらは強力な MIME の機能と各国語対応の機能を提供す
るもので、特に日本人の利用者にとって大事なものです。



File: gnus-ja.info, Node: Why?, Next: Compatibility, Prev: Other Gnus Versions, Up: History

なぜ?
-----

Gnus の目的は何ですか?

私は、あなたの考え付くことをすべてできる「いかす」「盛り上がってる」
「かっこいい」「しゃれた」ニュースリーダーを提供したいと思います。これ
は私の大元の動機だったのですが、Gnus の作業をしている間に、この世代の
ニュースリーダーは本当に石器時代に属していることが明らかになりました。
ニュースリーダーは、インターネットの揺籃期からほとんど発展していません
でした。もし現在の増加率で流通量が増加しつづければ、すべての現在のニュー
スリーダーはまったく役に立たなくなるでしょう。毎日何千もの新しい記事が
やってくるニュースグループを扱うにはどうすれば良いのでしょう? 数百万の
投稿者に遅れないように付いていくにはどうすれば良いのでしょう?

Gnus はこれらの質問に真の解決を提供するわけではありませんが、私は Gnus
がニュースを読み、取得するための新しい方法を実験する場として使われるこ
とを、是非とも見届けたいのです。ニュースリーダーをバックエンドから分離
するという梅田さんの賢明な方針を拡張することによって、今や Gnus はメー
ルを取得したり、異なる出所からニュースを取得するための新しいバックエン
ドを書きたい人のために、シンプルなインターフェースを提供しています。私
は役に立ちそうなすべての場所に、カスタマイズのためのフックを加えました。
それによって、探検し、発明したいすべての人を招いているのです。

おそらく Gnus は完成することはないのかもしれません。`C-u 100 M-x
all-hail-emacs' と `C-u 100 M-x all-hail-xemacs' です。



File: gnus-ja.info, Node: Compatibility, Next: Conformity, Prev: Why?, Up: History

互換性
------

Gnus は GNUS と完全に互換性があるように設計されています。ほとんどすべて
のキーの割り当てはそのまま残っています。もちろん、多くのキーの割り当て
が追加されましたが、一つか二つの目に付かないものを除いて、古い割り当て
が変更されたことはありません。

私たちのモットーは:

                           鋼鉄の骨組みの空高く

です。(訳注: チャールズ・レズニコフの詩“The Bridge”の引用。この詩の本
体はたった一行“In a cloud bones of steel.”だけ。直訳すれば「雲の中に
鋼の骨たち」。)

すべての命令は名前が変わっていません。いくつかの内部関数は名前を変えま
した。

`gnus-uu' パッケージは劇的に変化しています。*Note Decoding Articles::.

主要な互換性の問題の一つは、複数の概略バッファーが存在することです。グ
ループを読んでいるときに関連するすべての変数は、それが属する概略バッ
ファーでバッファーローカルです。概略バッファーでコマンドが実行されると
きはいつでも、多くの重要な変数がそれのグローバルな値にも複製されますが、
あなたが注意していないと、その変更は正しくない値が使われることをもたら
すかもしれません。

GNUS の内部の知識に依存したすべてのコードは実行できないでしょう。二つ例
を挙げます: `gnus-newsrc-alist' の並べ替え (もしくは、実際は何らかの方
法でそれを変更すること) は厳しく禁止されています。Gnus はこの連想リスト
の項目を指し示すハッシュテーブルを維持しており (それは多くの関数の速度
を上げます)、直接連想リストを変更することは異常な結果をもたらすでしょう。

古い hilit19 のコードはまったく動作しません。実際のところ、おそらくすべ
ての hilit コードをすべての Gnus のフック (`gnus-group-prepare-hook' お
よび `gnus-summary-prepare-hook') から取り除くべきです。Gnus はハイライ
トのためのいろいろな統合された関数を提供します。これらはもっと速くもっ
と正確です。すべての人の人生を楽にするために、Gnus はディフォルトですべ
ての hilit フックからすべての hilit 呼び出しを取り除きます。きたないも
の! 失せろ!

`expire-kill' のようなパッケージはもう動作しません。実際 Gnus を使い始
めたときには、おそらくすべての古い GNUS パッケージ (と他のコード) を消
去するべきでしょう。GNUS に実行させるために書いたコードは、Gnus がすで
に実行しているということは良くあることです。(くすくす。)

ものごとを実行する古いやり方はまだ使うことができますが、新しいやり方だ
けがこのマニュアルに記載されています。もしこのマニュアルを読んでいる間
に何かをする新しいやり方を発見しても、古いやり方を止めなければならない
ということではありません。

Gnus はすべての GNUS の起動ファイルを理解します。

全体として、GNUS の内部に依存したコードをほとんど書いていない普通の利用
者は、問題に苦しむことはないでしょう。もし問題が起こったら、魔法の
`M-x gnus-bug' 命令を実行することによって私に知らせて下さい。

*非常に* よくバグ報告を送る習慣があるのなら、あなたの役に立とうとす
る help バッファーが、しばらくするとうるさく感じるかもしれません。そうな
らば、それが表示されないようにするために、
`gnus-bug-create-help-buffer' を `nil' に設定して下さい。



File: gnus-ja.info, Node: Conformity, Next: Emacsen, Prev: Compatibility, Up: History

標準への準拠
------------

理由無き反抗などと申すものはございませんよ、奥様。私たちはすべての知ら
れている標準に準拠しています。もちろん私たちが賛成できない標準と/もしく
は習慣は除きますが。

*RFC (2)822*
     この標準への知られている違反はありません。

*RFC 1036*
     この標準も知られている違反はありません。

*Son-of-RFC 1036*
     これにはいくつかの違反があります。

     *X-Newsreader*
     *User-Agent*
          これらは「つまらないヘッダー」と見なされていますが、私は消費
          者の情報であると考えています。`tin' と `Netscape' から送られ
          てくる非常に多くの酷い記事を見た後では、私は記事を投稿するた
          めにはそれらを使わない方が良いということを知っています。もし
          `X-Newsreader' ヘッダーが無ければ、私はその情報を得ることはな
          かったでしょう。

*USEFOR*
     USEFOR は、Son-of-RFC 1036 に基づいて IETF の作業部会が RFC 1036
     の後継として書いているものです。ニュース記事の様式に対して、いろい
     ろな変更を提案した草稿を作成しました。その草稿が RFC として受け入
     れられたときに、Gnus タワーはその変更の実装を調べることになるでしょ
     う。

*MIME - RFC 2045-2049 etc*
     MIME 関連のすべての RFC がサポートされています。

*Disposition Notifications - RFC 2298*
     Message Mode は受信者からの開封確認を要求することができます。

*PGP - RFC 1991 and RFC 2440*
     RFC 1991 は最初の PGP メッセージの規格で、Informational RFC (訳注:
     後述の標準化トラックではないが有用な情報) として発行されました。現
     在 Open PGP と呼ばれる後継の RFC 2440 が、標準化トラック (訳注:
     Standards Track--国際標準とすべき仕様) に乗せられました。どちらも
     非-MIME メッセージのための PGP の様式を定義します。Gnus はエンコー
     ド (署名および暗号化) とデコード (認証および暗号のデコード) の両方
     をサポートします。

*PGP/MIME - RFC 2015/3156*
     RFC 2015 (RFC 1991 の代わりに RFC 2440 に基づいた 3156 で置き換え
     られました) は、RFC 1991/2440 を MIME で囲う様式について述べていま
     す。Gnus はエンコードとデコードの両方をサポートします。

*S/MIME - RFC 2633*
     RFC 2633 は S/MIME の形式について述べています。

*IMAP - RFC 1730/2060, RFC 2195, RFC 2086, RFC 2359, RFC 2595, RFC 1731*
     RFC 1730 は IMAP バージョン 4 で、RFC 2060 (IMAP 4 改定 1) で多少
     更新されています。RFC 2195 は IMAP の CRAM-MD5 認証について述べて
     います。RFC 2086 は IMAP の使用制限一覧 (ACL) について述べています。
     RFC 2359 は IMAP のプロトコルの拡張について述べています。RFC 2595
     は IMAP における適切な TLS の統合 (STARTTLS) について述べています。
     RFC 1731 は IMAP の GSSAPI/Kerberos4 の手法について述べています。

上に書かれている文章に関することで、Gnus がそれを満たしていないような動
作をしていることに気付いたら、ためらわずに Gnus タワーと私たちに知らせ
て下さい。



File: gnus-ja.info, Node: Emacsen, Next: Gnus Development, Prev: Conformity, Up: History

Emacsen
-------

Gnus は以下のもので動作します:

   * Emacs 21.1 とそれ以上。

   * XEmacs 21.4 とそれ以上。

この Gnus の版はこれより古いどんな Emacsen でも完全に動作しないでしょう。
少なくとも信頼できる動作はしないでしょう。古い版の Gnus は古い Emacs の
版でも動作するでしょう。特に Gnus 5.10.8 は Emacs 20.7 と XEmacs 21.1
でも動くはずです。

いろいろなプラットフォームの Gnus の間にはいくつかの漠然とした違いがあ
ります--XEmacs には画像機能 (ロゴとツールバー) の特徴があります--しかし、
その他はすべての Emacsen でほとんど同じはずです。



File: gnus-ja.info, Node: Gnus Development, Next: Contributors, Prev: Emacsen, Up: History

Gnus の開発
-----------

Gnus は二つのサイクルで開発されています。最初のサイクルでは
`ding@gnus.org' でたくさんの議論を行ないます。そこでは人々が変更や新し
い機能の提案をしたり、パッチや新しいバックエンドを投稿します。この段階
は「アルファ」段階と呼ばれています。というのは、この段階でリリースされ
た Gnusae は「アルファリリース」もしくは (他の団体ではより良く使われ
る)「スナップショット」と呼ばれるものだからです。この段階では Gnus は不
安定で、一般の利用者によって使われるべきではないと考えられています。
Gnus のアルファリリースは“Red Gnus”や“Quassia Gnus”のような名前になっ
ています。

のらくらと 50-100 くらいのアルファリリースをした後で、Gnus は「凍結」さ
れたと宣言され、バグ修正のみが適用されます。Gnus は接頭語を失い、その代
わりに“Gnus 5.6.32”のように呼ばれます。これらは普通の人が使うことがで
きるものと考えられ、主に `gnu.emacs.gnus' ニュースグループで議論されて
います。

アルファ Gnusae とリリースされた Gnusae では、変数のディフォルトが違う
ものがあります。特に `mail-source-delete-incoming' は、アルファ Gnusae
では `nil' で、リリースされた Gnusae では `t' です。これはメールを扱っ
ている際に、アルファリリースがしゃっくりをしてメールを失なうことを避け
るためです。

ding メーリングリストと Gnus ニュースグループにおける議論は、純粋に公衆
の関心によって分離されているわけではありません。アルファ Gnus リリース
が (ときどき) するかもしれない恐ろしいことを公衆の場で書くのは、皆を恐
れさせるというのも真実ですが、もっと重要なことは、導入された新しい実験
的な機能について話すことが、一般の利用者を混乱させるかもしれないという
ことです。新しい機能は頻繁に導入され、いじくられ、不十分であると判断さ
れ、そうすると捨てられるか、完全に書き換えられるかのどちらかです。メー
リングリストを読んでいる人は普通はこの速い変更に付いていきますが、ニュー
スグループの人もそうであると見なすことはできません。



File: gnus-ja.info, Node: Contributors, Next: New Features, Prev: Gnus Development, Up: History

貢献者
------

新しい Gnus の版は (ding) メーリングリストのすべての人たちの助けが無け
ればできなかったでしょう。一年以上にわたって、私は毎日彼らから莫大な数
の素敵なバグレポートを受け取り、そのそれぞれが私を喜びで満たしました。
投げキッス。このリストの人たちは、私のリリース方針のために耐え難きを耐
える試練に遭いました: 「あぁ、それはすばらしい考えだ <かしゃかしゃか
しゃ…> よしっ、すぐにリリースだ <えいやっ> あれれっ、まったく動かない
ぞ <かしゃかしゃかしゃ…> よしっ、すぐに出そう <ほらよっ> おっと、待っ
た、ぜんぜん動作しない…」。Micro$oft--あっかんべーだ。アマチュアめ。私
は *もっと* 悪い。(それとも「より悪い」?「もっと悪い」?「最悪」?)

私はこの機会に学会に感謝を... おおっと、違った。

   * 梅田政信--元の GNUS を書いた人です。

   * Shenghuo Zhu--uudecode.el, mm-uu.el, rfc1843.el, webmail.el,
     nnwarchive, それに一般的なバグ修正、新しい機能などはもとより MIME
     と他の形式のエンコード/デコードに関連するほんとうに多くのもの。

   * Per Abrahamsen--custom、スコア、ハイライトと SOUP コード (他の多く
     のことと共に)。

   * Luis Fernandes--デザインとグラフィック。

   * Joe Reiss--スマイリーの顔の作者。

   * Justin Sheehy---FAQ のメインテイナー。

   * Erik Naggum--手助け、アイデア、支援、コード他。

   * Wes Hardaker---`gnus-picon.el' とマニュアルの "picon" の章 (*Note
     Picons::)。

   * Kim-Minh Kaplan--picon コードにおける更なる作業。

   * Brad Miller---`gnus-gl.el' とマニュアルの Grouplens の章。

   * Sudish Joseph--数え切れないほどのバグの修正。

   * Ilja Weis---`gnus-topic.el'。

   * Steven L. Baur--たくさんのたくさんのたくさんのバグの発見と修正。

   * Vladimir Alexiev--refcard とリファレンスの小冊子。

   * Felix Lee & Jamie Zawinski--私は Felix Lee と JWZ の XGnus 配布か
     らいくつかの部分を盗みました。

   * Scott Byer---`nnfolder.el' の拡張と改訂。

   * Peter Mutsaers--孤児記事のスコアコード。

   * Ken Raebburn---POP メールサポート。

   * Hallvard B Furuseth--いろいろな小さな物や部分、特に .newsrc ファイ
     ルを扱う部分。

   * Brian Edmonds---`gnus-bbdb.el'。

   * David Moore---`nnvirtual.el' の改訂と多くの他のこと。

   * Kevin Davidson---"ding" の名前を思い付きました。ですから、彼を責め
     て下さい。

   * Fran,Agois Pinard--多くの、多くの興味深く完全なバグレポートと
     autoconf のサポート。

このマニュアル (Gnus 英語版) は Adrian Aichner と Ricardo Nassif, Mark
Borges によって校正され、Jost Krieger によって一部分を校正されました。

以下の人々は多くのパッチと提案で貢献しました:

Christopher Davis, Andrew Eskilsson, Kai Grossjohann, Kevin Greiner,
Jesper Harder, Paul Jarc, Simon Josefsson, David K,Aegedal, Richard
Pieri, Fabrice Popineau, Daniel Quinlan, Michael Shields, Reiner
Steib, Jason L. Tibbitts, III, Jack Vinson, 山岡 克美, and Teodor
Zlatanov.

それと、以下の人にもパッチやその他のものを感謝します:

Jari Aalto, Adrian Aichner, Vladimir Alexiev, Russ Allbery, Peter
Arius, Matt Armstrong, Marc Auslander, Miles Bader, Frank Bennett,
Alexei V. Barantsev, Robert Bihlmeyer, Chris Bone, Mark Borges, Mark
Boyns, Rob Browning, Lance A. Brown, Kees de Bruin, Martin Buchholz,
Joe Buehler, Kevin Buhr, Alastair Burt, Joao Cachopo, Zlatko Calusic,
Massimo Campostrini, Castor, David Charlap, Dan Christensen, Kevin
Christian, Jae-you Chung, James H. Cloos, Jr., Laura Conrad, Michael
R. Cook, Glenn Coombs, Andrew J. Cosgriff, Neil Crellin, Frank
D. Cringle, Geoffrey T. Dairiki, Andre Deparade, Ulrik Dickow, Dave
Disser, Rui-Tao Dong, Joev Dubach, Michael Welsh Duggan, Dave
Edmondson, Paul Eggert, Mark W. Eichin, Karl Eichwalder, 榎並 嗣智,
Michael Ernst, Luc Van Eycken, Sam Falkner, Nelson Jose dos Santos
Ferreira, Sigbjorn Finne, Sven Fischer, Paul Fisher, Decklin Foster,
Gary D. Foster, Paul Franklin, Guy Geens, Arne Georg Gleditsch, David
S. Goldberg, Michelangelo Grigni, Dale Hagglund, D. Hall, Magnus
Hammerin, 半田 剣一, Raja R. Harinath, 林 芳樹, P. E. Jareth Hein, ひさ
しげ けんじ, Scott Hofmann, Tassilo Horn, Marc Horowitz, Gunnar
Horrigmo, Richard Hoskins, Brad Howes, Miguel de Icaza, Fran,Agois Felix
Ingrand, 市川 達哉, 石川 一郎, Lee Iverson, 岩室 元典, Rajappa Iyer,
Andreas Jaeger, Adam P. Jenkins, Randell Jesup, Fred Johansen, Gareth
Jones, Greg Klanderman, Karl Kleinpaste, Michael Klingbeil, Peter Skov
Knudsen, 小林 修平, Petr Konecny, 小関 吉則, Thor Kristoffersen, Jens
Lautenbacher, Martin Larose, Seokchan Lee, Joerg Lenneis, Carsten
Leonhardt, James LewisMoss, Christian Limpach, Markus Linnala, Dave
Love, Mike McEwan, Tonny Madsen, Shlomo Mahlab, Nat Makarevitch,
Istvan Marko, David Martin, Jason R. Mastaler, Gordon Matzigkeit, Timo
Metzemakers, Richard Mlynarik, Lantz Moore, 守岡 知彦, Erik Toubro
Nielsen, Hrvoje Niksic, Andy Norman, Fred Oberhauser, C. R. Oldham,
Alexandre Oliva, Ken Olstad, 大西 雅晴, 小野 秀貴, Ettore Perazzoli,
William Perry, Stephen Peters, Jens-Ulrik Holger Petersen, Ulrich
Pfeifer, Matt Pharr, Andy Piper, John McClary Prevost, Bill
Pringlemeir, Mike Pullen, Jim Radford, Colin Rafferty, Lasse Rasinen,
Lars Balker Rasmussen, Joe Reiss, Renaud Rioboo, Roland B. Roberts,
Bart Robinson, Christian von Roques, Markus Rost, Jason Rumney,
Wolfgang Rupprecht, Jay Sachs, Dewey M. Sasser, Conrad Sauerwald,
Loren Schall, Dan Schmidt, Ralph Schleicher, Philippe Schnoebelen,
Andreas Schwab, Randal L. Schwartz, Justin Sheehy, Danny Siu, Matt
Simmons, Paul D. Smith, Jeff Sparkes, Toby Speight, Michael Sperber,
Darren Stalder, Richard Stallman, Greg Stark, Sam Steingold, Paul
Stevenson, Jonas Steverud, Paul Stodghill, 須藤 清一, Kurt Swanson,
Samuel Tardieu, Teddy, 戸沢 晶彦, Chuck Thompson, Philippe Troin,
James Troup, Trung Tran-Duc, Jack Twilley, Aaron M. Ucko, Aki Vehtari,
Didier Verna, Vladimir Volovich, Jan Vroonhof, Stefan Waldherr, Pete
Ware, Barry A. Warsaw, Christoph Wedler, Joe Wells, Lee Willis, and
Lloyd Zusman.

Gnus のアルファ配布に含まれている ChangeLog は、それぞれの人たちが行なっ
たことの完全な大要を伝える豊かな読み物です。(550KB といくらか)。(訳注:
非常に古い ChangeLog の記述が何度かばっさり捨てられましたが、それでも現
在は非常に大きなサイズになっています。)

私が忘れてしまったすべての人に謝罪します。間違いなくたくさんの人を忘れ
てしまったことでしょう。

わぁ、こんなに人がいるとは思わなかった。これは本当に Gnus を使っている
人がいるということなんでしょう。そんなことを誰が想像したでしょうか!



File: gnus-ja.info, Node: New Features, Prev: Contributors, Up: History

新しい機能
----------

* Menu:

* ding Gnus::                   最初の新しい Gnus である Gnus 5.0/5.1 の新しいこと
* September Gnus::              公式に Gnus 5.2/5.3 として知られているもの
* Red Gnus::                    三番目の最上のもの--Gnus 5.4/5.5
* Quassia Gnus::                2 かける 2 は 4、もしくは Gnus 5.6/5.7
* Pterodactyl Gnus::            神秘の数も P で始まるけれど。Gnus 5.8/5.9 の別名
* Oort Gnus::                   巨大な。遠く遥かな。Gnus 5.10/5.11。
* No Gnus::                     超やばい

これらのリストは、もちろん *たいていの* 重要な新しい機能に関する *短い
* 要約でしかありません。いいえ、実は違います。もっともっとたくさんのも
のがあるのです。そう、事実上私たちは十分に用の無いもの (feeping
creaturism) を持っているのです。



File: gnus-ja.info, Node: ding Gnus, Next: September Gnus, Prev: New Features, Up: New Features

(ding) Gnus
...........

Gnus 5.0/5.1 の新しい機能:

   * すべてのバッファーの外観は、フォーマットのような変数 (*Note Group
     Buffer Format:: and *Note Summary Buffer Format::) によって設定を
     変えることができるようになりました。

   * ローカルスプールと、いくつかの NNTP サーバーを同時に使うことができ
     るようになりました (*Note Select Methods::)。

   * 複数のグループを仮想グループに合併できるようになりました (*Note
     Virtual Groups::)。

   * 多くの異なるメール様式を読めるようになりました (*Note Getting
     Mail::)。すべてのメールバックエンドは、便利なメール期限切れ消去機
     構を実装しています (*Note Expiring Mail::)。

   * Gnus は根っこ (root) を失ったスレッドを集めるためのいろいろな戦略
     (それによってまばらな副スレッドを一つのスレッドにする) を使ったり、
     完全なスレッドを組み上げるのに十分なヘッダーをいったん戻って取得す
     ることができます (*Note Customizing Threading::)。

   * 切られたグループ (killed groups) はグループバッファーに表示するこ
     とができて、それらも読むことができます (*Note Listing Groups::)。

   * Gnus はグループを部分的に更新することができます--2,3 のグループの
     新しい記事を調べるために、アクティブファイル全体を取得する必要はあ
     りません (*Note The Active File::)。

   * Gnus はグループの段階的購読度を実装しました (*Note Group
     Levels::)。

   * 何種類もの基準に従って、記事にスコアを付けることができます (*Note
     Scoring::)。どのように記事にスコアを付けるかを、Gnus に見つけさせ
     ることもできます (*Note Adaptive Scoring::)。

   * Gnus は普通の Emacs の方法で自動保存されるドリブルバッファーを維持
     するので、あなたが何を読んだかのデータをマシンが落ちたときでもあま
     り失わないでしょう (*Note Auto Save::)。

   * Gnus は `.emacs' ファイルをぐちゃぐちゃにすることを避けるために、
     今では専用の起動ファイル (`~/.gnus.el') を持つようになりました。

   * グループと記事の両方にプロセス印を付けることができ、すべての印の付
     いた項目で処理を実行することができます (*Note Process/Prefix::)。

   * グループ群の一部を grep して、その結果から一つのグループを作ること
     ができます (*Note Kibozed Groups::)。

   * グループの一覧を、えーと、どんな条件ででも、表示することができます
     (*Note Listing Groups::)。

   * 外部サーバーを概観して、それらのサーバーのグループを購読することが
     できます (*Note Browse Foreign Server::)。

   * Gnus はサーバーとの二つ目の接続で、記事を非同期に取ってくることが
     できます (*Note Asynchronous Fetching::)。

   * 記事をローカルにキャッシュすることができます (*Note Article
     Caching::)。

   * uudecode の関数が拡張され、一般化されました (*Note Decoding
     Articles::)。

   * uuencode された記事をまだ投稿することができます。これは過去に
     GNUS のあまり知られていない機能でした (*Note Uuencoding and
     Posting::)。

   * 親記事 (と他の記事) の取得は、今では調子が悪くなることも無く、実際
     に動作するようになりました (*Note Finding the Parent::)。

   * Gnus は FAQ とグループの説明を取得することができます (*Note Group
     Information::)。

   * まとめ送りされた記事 (および他のファイル) を、グループとして使える
     ようになりました (*Note Document Groups::)。

   * 記事をハイライトし、カスタマイズすることができます (*Note
     Customizing Articles::)。

   * URL と他の外部参照がボタンになるようになりました (*Note Article
     Buttons::)。

   * Gnus のウィンドウとフレームの設定でたくさんの変なことをできるよう
     になりました (*Note Window Layout::)。

   * キーボードを使う代わりに、ボタンをクリックできるようになりました
     (*Note Buttons::)。



File: gnus-ja.info, Node: September Gnus, Next: Red Gnus, Prev: ding Gnus, Up: New Features

September Gnus
..............

Gnus 5.2/5.3 の新しい機能:

   * 新しいメッセージ作成モードが使われます。`mail-mode',
     `rnews-reply-mode' と `gnus-msg' のすべての古いカスタマイズ変数は
     今や旧式になりました。

   * Gnus は「まばら」スレッドを作成することができるようになりました--
     スレッドの失われた記事があるところは、空の節で表現されるようになっ
     ています (*Note Customizing Threading::)。

          (setq gnus-build-sparse-threads 'some)

   * 外に出ていく記事は、特別な保管サーバーに保存されるようになりました
     (*Note Archived Messages::)。

   * 記事が参照されたときに、スレッドの部分作成が行なわれるようになりま
     した。

   * Gnus は GroupLens の予測を利用することができるようになりました。

   * Picons (personal icons) (個人アイコン) が XEmacs で表示できるよう
     になりました (*Note Picons::)。

   * `trn' のような木バッファーを表示できるようになりました (*Note
     Tree Display::)。

          (setq gnus-use-trees t)

   * ニュースリーダー `nn' のような、選んで読むマイナーモードを概略バッ
     ファーで使うことができるようになりました (*Note Pick and Read::)。

          (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

   * バイナリーグループで特別なバイナリーマイナーモードを使うことができ
     るようになりました (*Note Binary Groups::)。

   * グループ群を折り畳みトピック階層にグループ分けできるようになりまし
     た (*Note Group Topics::)。

          (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

   * メールの再送と、弾かれたメールを送り直すことができるようになりまし
     た (*Note Summary Mail Commands::)。

   * グループがスコアを持つことができるようになり、訪れる回数に基づいた
     並べ替えが可能になりました (*Note Group Score::)。

          (add-hook 'gnus-summary-exit-hook 'gnus-summary-bubble-group)

   * グループにプロセス印を付けられるようになり、グループのグループに対
     して命令を実行できるようになりました (*Note Marking Groups::)。

   * 仮想グループでキャッシュができるようになりました。

   * `nndoc' はすべての種類のまとめ送り、メールボックス、rnews ニュース
     の一括配送、ClariNet の要約集、そしてその他のすべてを理解できるよ
     うになりました (*Note Document Groups::)。

   * Gnus は SOUP パケットを作成/読み込みをするための新しいバックエンド
     (`nnsoup') を持っています。

   * キャッシュがずっと速くなりました。

   * グループを多くの基準に従って並べ替えることができるようになりました
     (*Note Sorting Groups::)。

   * メーリングリストのアドレスと期限切れ消去の時間を設定する、新しいグ
     ループパラメーターが導入されました (*Note Group Parameters::)。

   * すべてのフォーマット指定で、フェースを指定できるようになりました
     (*Note Formatting Fonts::)。

   * `M P' 副キーマップに、プロセス印の付いた記事の設定/削除/実行のため
     の複数の命令が追加されました (*Note Setting Process Marks::)。

   * 広範囲の基準に基づいて、概略バッファーが利用可能な記事の一部だけを
     表示するように制限できるようになりました。これらの命令は `/' 副マッ
     プのキーにバインドされています (*Note Limiting::)。

   * `*' 命令によって、記事を永続させることができるようになりました
     (*Note Persistent Articles::)。

   * 記事の要素を隠すすべての関数は、トグルになりました。

   * 記事のヘッダーにボタンを付けることができるようになりました (*Note
     Article Washing::)。

   * すべてのメールバックエンドで、`Message-ID' による記事の取得をサポー
     トするようになりました。

   * 重複メールを適切に扱うことができるようになりました (*Note
     Duplicates::)。

   * すべての概略モード命令を、記事バッファーから直接使用できるようにな
     りました (*Note Article Keymap::)。

   * フレームが `gnus-buffer-configuration' の部分になることができるよ
     うになりました (*Note Window Layout::)。

   * デーモンのプロセスによって、新着メールを検査できるようになりました
     (*Note Daemons::)。

   * Gnus は spam を根絶やしにするために、NoCeM ファイルを利用できるよ
     うになりました (*Note NoCeM::)。

          (setq gnus-use-nocem t)

   * グループを常に見えるようにしておくことが (訳注: そのグループに未読
     記事が無くても)、できるようになりました (*Note Listing Groups::)。

          (setq gnus-permanently-visible-groups "^nnml:")

   * カスタマイズを楽にするために、多くの新しいフックが導入されました。

   * Gnus は `Mail-Copies-To' ヘッダーを尊重するようになりました。

   * `References' ヘッダーを調べることによって、スレッドを集めることが
     できるようになりました (*Note Customizing Threading::)。

          (setq gnus-summary-thread-gathering-function
                'gnus-gather-threads-by-references)

   * 再取得を避けるために、既読記事を特別なバックログ・バッファーに貯め
     ることができるようになりました (*Note Article Backlog::)。

          (setq gnus-keep-backlog 50)

   * 簡単にトリートメントを行なうことができるようにするために、現在の記
     事の完全な複製がいつも別バッファーに置かれるようになりました。

   * Gnus がどこに記事を保存するかを提案できるようになりました (*Note
     Saving Articles::)。

   * 記事を保存するときに、多くを入力しなくても良いようになりました
     (*Note Saving Articles::)。

          (setq gnus-prompt-before-saving t)

   * `gnus-uu' は記事を取得している間に、非同期でデコードされたファイル
     を表示できるようになりました (*Note Other Decode Variables::)。

          (setq gnus-uu-grabbed-file-functions 'gnus-uu-grab-view)

   * 記事バッファーで、引用されたテキストの折り返しが適切に動作するよう
     になりました (*Note Article Washing::)。

   * 引用されたテキストを表示するか隠すかを切り替えるためのボタンが追加
     されました。また、どのくらいの引用文を隠すかをカスタマイズできるよ
     うになりました (*Note Article Hiding::)。

          (setq gnus-cited-lines-visible 2)

   * 興味の無いヘッダーを隠すことができます (*Note Article Hiding::)。

   * スコアのディフォルト値をメニューバーから設定できるようになりました。

   * 送信される記事の更なる構文チェックが追加されました。



