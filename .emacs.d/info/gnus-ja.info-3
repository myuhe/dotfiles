Info file: gnus-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus-ja.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus-ja: (gnus-ja).           The newsreader Gnus (Japanese).
END-INFO-DIR-ENTRY






File: gnus-ja.info, Node: Symbolic Prefixes, Next: Formatting Variables, Prev: Interactive, Up: Various

シンボルの接頭引数
==================

非常に多くの Emacs の命令が (数値) 接頭引数に反応します。例えば `C-u 4
C-f' はポイントを 4 文字先に移動し、`C-u 9 0 0 I s s p' は 900 のスコア
(永続、`Suject'、文字列の一部、という規則) を現在の記事に加えます。

これはすべて素敵で良いのですが、命令にもう少し追加の情報を与えたいとき
はどうすれば良いのでしょう?  えーと、たいていの命令がしていることは「生
の」接頭引数を何らかの特別な方法で解釈することです。例えば `C-u 0 C-x
C-s' は、現在の記事を保存するときにバックアップファイルを作らないで欲し
いことを意味します。でも、バックアップファイルを作らないで保存するのと
同時に、Emacs に閃光を放って、素敵な音楽を演奏して欲しいときはどうすれ
ば良いでしょう?  それができなくても、あなたは申し分なく幸せですね(?)。

私はそうではありません。そこで、私は二つめの接頭引数「シンボル接頭引数」
を加えました。接頭キーは `M-i' (`gnus-symbolic-argument') で、次に押さ
れる文字が値です。いくらでも `M-i' 接頭語を積み重ねることができます。
`M-i a C-M-u' は「`C-M-u' 命令にシンボル接頭引数 `a' を与える」というこ
とです。`M-i a M-i b C-M-u' は「`C-M-u' 命令にシンボル接頭引数 `a' `b'
を与える」ということです。趣旨はわかりましたね。

シンボル接頭引数を受け付けない命令にそれを打ち込んでも何も悪いことをし
ませんが、良いことも何もしません。現在のところ、あまり多くの関数がシン
ボル接頭引数を利用しているわけではありません。

Gnus がこれを実装しているやり方に興味があるなら、
*Note Extended Interactive:: を見てください。



File: gnus-ja.info, Node: Formatting Variables, Next: Window Layout, Prev: Symbolic Prefixes, Up: Various

書法仕様変数
============

このマニュアルを通して、おそらく `gnus-group-line-format' または
`gnus-summary-mode-line-format' のように呼ばれるたくさんの変数があるこ
とに気付いたでしょう。これらは Gnus が色々なバッファーでどのように行を
出力するかを制御します。非常にたくさんのものがあります。幸運なことに、
それらはすべて同じ構文を使うので、あまり嫌な目には会わないでしょう。

書法仕様 (format) 指定の例です (グループバッファーより):
`%M%S%5y: %(%g%)\n'。それは極めて醜く、たくさんのパーセント記号がい
たるところにあります。

* Menu:

* Formatting Basics::           書法仕様変数は基本的に書法指定文字列である
* Mode Line Formatting::        モード行の書法仕様変数に関するいくつかの規則
* Advanced Formatting::         色々な方法で出力を変化させる
* User-Defined Specs::          Gnus にあなた自身の関数を呼ばせる
* Formatting Fonts::            仕様を多彩で素敵に見せる
* Positioning Point::           操作の後でポイントを移動する
* Tabulation::                  出力の整列
* Wide Characters::             幅が広い文字を扱う

現在のところ Gnus は以下の書法仕様変数を使います:
`gnus-group-line-format', `gnus-summary-line-format',
`gnus-server-line-format', `gnus-topic-line-format',
`gnus-group-mode-line-format', `gnus-summary-mode-line-format',
`gnus-article-mode-line-format', `gnus-server-mode-line-format', および
`gnus-summary-pick-line-format'。

これらすべての書法仕様変数は任意の elisp 式であることもできます。その場
合、それらは要求される行に挿入するために `eval' (評価) されます。

Gnus は、あなたが自分用の書法仕様指定を作っているときに、手助けをする命
令を備えています。`M-x gnus-update-format' は現在の式を `eval' し、当の
仕様を更新し、行を生成するための Lisp 式を検査することができるバッファー
に移動します。



File: gnus-ja.info, Node: Formatting Basics, Next: Mode Line Formatting, Prev: Formatting Variables, Up: Formatting Variables

書法仕様の基本
--------------

それぞれの `%' の要素は、当のバッファーが作成されるときに何らかの文字列
や他のもので置き換えられます。`%5y' は「`y' 指定を挿入して、5 文字の場
所を得るために空白を詰め込みなさい」ということです。

普通の C や Emacs Lisp の書法仕様 (format) 文字列と同じように、`%' と書
法仕様の型の文字の間の数値修飾子は、常に少なくともその長さになるように、
出力に (空白文字などを)「詰め込み」ます。`%5y' はその場所が常に (少なく
とも) 5 文字の長さになるように、左に空白を詰め込みます。もし `%-5y' と
すれば、代わりに右側に詰め込みます。

特に広い幅の値に対して保護するために、その場所の長さを制限したいことも
あるでしょう。そのために `%4,6y' などと指定することができます。これは、
その場所は決して 6 文字を超える幅にはならず、かつ 4 文字より少ない幅に
もならないということです。

Gnus は `%&user-date;' のような、いくつかの拡張様式指示もサポートします。



File: gnus-ja.info, Node: Mode Line Formatting, Next: Advanced Formatting, Prev: Formatting Basics, Up: Formatting Variables

モード行書法仕様
----------------

モード行書法仕様変数 (例えば `gnus-summary-mode-line-format') は、以下
の二つの違い以外は、バッファー行に適応した書法仕様変数 (*Note
Formatting Basics::) と同じ規則に従います:

  1. 最後に改行 (`\n') があってはなりません。

  2. 特別な `%%b' 仕様をバッファー名を表示するために使うことができます。
     えーと、実はそれは仕様ではないのです---`%%' というものは、Emacs が
     `%b' を受け取って、そのモード行表示機能に「バッファー名を表示しな
     さい」と解釈させるために、単に書法仕様の処理系を無傷で通り抜けるこ
     とができるように `%' を囲う方法なのです。Emacs が理解するモード行
     指定の完全な一覧については、変数 `mode-line-format' の説明文を見て
     ください。



File: gnus-ja.info, Node: Advanced Formatting, Next: User-Defined Specs, Prev: Mode Line Formatting, Up: Formatting Variables

上級書法仕様
------------

表示された領域を後で何らかの方法で処理するのは、しばしば役に立ちます。詰
め込み、制限、切り取り、および特定の値の抑制は、「チルダ修飾子」を使うこ
とによって実現することができます。よくあるチルダ仕様は、
`%~(cut 3)~(ignore "0")y' のように見えるでしょう。

これらは有効な修飾子です:

`pad'
`pad-left'
     領域の左側に、要求された長さになるまで空白を詰め込みます。

`pad-right'
     領域の右側に、要求された長さになるまで空白を詰め込みます。

`max'
`max-left'
     指定された長さになるように、文字列の左側を切り取ります。

`max-right'
     指定された長さになるように、文字列の右側を切り取ります。

`cut'
`cut-left'
     指定された数の文字を左側から切り落とします。

`cut-right'
     指定された数の文字を右側から切り落とします。

`ignore'
     領域が指定された値と等しい (equal) ならば、空文字列を返します。

`form'
     `@' 仕様が使われたときに、指定された式を領域の値として使います。

     これは例です:

          "~(form (current-time-string))@"

例を出してみましょう。概略モード行での `%o' 仕様は ISO0861 様式の凝縮さ
れた日付 (`19960809T230410' のようなもの) を返します。これはとても発音
しにくいので、世紀を表す数と時刻を削ぎ落として、6 文字の日付を残したい
と思います。それは `%~(cut-left 2)~(max-right 6)~(pad 6)o' となるでしょ
う。(切り落とし (cutting) は 最大幅の制限 (maxing) より先に行なわれるの
で、表示欄での見栄えを良くするために、日付が 6 文字より少なくならないこ
とを保証する詰め込み (padding) が必要になります。)

無視 (ignore) が最初に行なわれます。それから切り落とし (cutting)、次に
最大幅の制限 (maxing)、そして最後の操作である詰め込み (padding) が行な
われます。

もしあなたが、これらの上級参照をたくさん使っているなら、Gnus がとても遅
くなるのがわかるでしょう。これはあなたが行の外見に満足したときに `M-x
gnus-compile' を実行することによって、格段に速度低下を減らすことができ
ます。*Note Compilation::.



File: gnus-ja.info, Node: User-Defined Specs, Next: Formatting Fonts, Prev: Advanced Formatting, Up: Formatting Variables

利用者定義の指定
----------------

すべての仕様に、利用者が定義した `u' で始まる述語を挿入することができま
す。書法仕様文字列の次の文字は、アルファベットでなければなりません。
`%u' に続くアルファベットが `X' だったら、Gnus は関数
`gnus-user-format-function-'`X' を呼びます。関数には単一の引数が与えら
れますが、その引数の意味は関数がどのバッファーから呼ばれているかによっ
て変わります。関数は文字列を返さなければなりません。それは他の述語によっ
て生成される情報とまったく同じように、バッファーに挿入されます。関数は
意味の無い値と共に呼ばれる場合もあるので、それの対策をしておくべきです。

Gnus は利用者定義仕様を拡張した `%u&foo;' のような形式もサポートします。
この場合は `gnus-user-format-function-'`foo' という関数を呼び出します。

新しい関数を定義しなくても、ほとんど同じことをチルダ修飾子 (*Note
Advanced Formatting::) を使って達成できるでしょう。例です:

`%~(form (count-lines (point-min) (point)))@'

ここで与えられた式は評価されて現在の行番号をもたらし、それから挿入され
ます。



File: gnus-ja.info, Node: Formatting Fonts, Next: Positioning Point, Prev: User-Defined Specs, Up: Formatting Variables

書法仕様フォント
----------------

すべての書法仕様変数によって共有される、ハイライト (強調表示) のための
仕様があります。述語 `%(' と 述語 `%)' で囲まれたテキストには特別な
`mouse-face' 属性が与えられ、そこにマウスのポインターを置いたときに
(`gnus-mouse-face' によって) ハイライトされます。

述語 `%{' と 述語 `%}' で囲まれたテキストには、普通のフェー
スである `gnus-face-0' (ディフォルトで `bold') が与えられます。
`%1{' を使うと、代わりに `gnus-face-1' が与えられ、以下同様で
す。欲しいだけたくさんのフェースを作ってください。同じこと
が `mouse-face' 仕様にも言えます。`hello' がマウスを置いたとき
に `gnus-mouse-face-3' でハイライトされるためには、
`%3(hello%)' とすれば良いでしょう。

述語 `%《' と 述語 `%》' で囲まれたテキストでは、特別な `balloon-help'
属性が `gnus-balloon-face-0' に設定されます。`%1《' とすると、
`gnus-balloon-face-1' が使われ、以下同様です。`gnus-balloon-face-*' 変
数は、文字列か文字列を返す関数を指すシンボルのどちらかでなければなりま
せん。この属性が設定されているテキストの上をマウスが通過すると、吹き出
しが現れて文字列を表示します。これの詳しい情報は *Note Tooltips:
(emacs)Tooltips, (GNU Emacs) または `balloon-help-mode' (XEmacs) の説明
を参照してください。(技術的な理由のために、ギィメ (guillemets) はこの節
では `《' と `》' で近似されました。)

     訳注: guillemets (仏語) はギュメとも表記されます。実際に Gnus で有
     効なのは次の二つです:

          (string (make-char 'latin-iso8859-1 43)) ;; 《
          (string (make-char 'latin-iso8859-1 59)) ;; 》

     日本語の「」に当たるもので、口頭表現を表記したり、強調したい単語を
     囲む、何かからの引用部分を囲む、書物等のタイトルを記す等様々に使わ
     れます。

これはグループバッファーで使うことができる、もう一つの調理法です:

     ;; 三つのフェースを作ります。
     (setq gnus-face-1 'bold)
     (setq gnus-face-3 'italic)

     ;; 記事の数をボールドで緑のフェースにしたいので、
     ;; `my-green-bold' という新しいフェースを作ります。
     (copy-face 'bold 'my-green-bold)
     ;; 色を設定します。
     (set-face-foreground 'my-green-bold "ForestGreen")
     (setq gnus-face-2 'my-green-bold)

     ;; 新しい特製の書法仕様を設定します。
     (setq gnus-group-line-format
           "%M%S%3{%5y%}%2[:%] %(%1{%g%}%)\n")

あなたがこの案を使って、完全に読めなくて非常に下品な表示を作ることがで
きることを確信しています。楽しんでください!

`%(' 指定 (やその類のもの) は、モード行変数ではまったく意味をなさないこ
とに注意してください。



File: gnus-ja.info, Node: Positioning Point, Next: Tabulation, Prev: Formatting Fonts, Up: Formatting Variables

ポイントの移動
--------------

Gnus は通常ほとんどのバッファーで、ポイントを各行のあらかじめ決められた
場所に移動します。ディフォルトでは、ポイントは行の最初のコロンに移動し
ます。この振るまいは、三つの違う方法でカスタマイズすることができます。

また、コロンを行のどの場所にでも移動することができます。

コロンの位置にポイントを移動させるための関数を定義し直すことができます。
その関数は `gnus-goto-colon' と呼ばれています。

でも、行にコロンを含めたくないならば、これを扱うためのおそらく最も手ご
ろな方法は `%*' という述語を使うことです。あなたの行の書法仕様の定義に
`%*' を入れておけば、Gnus はそこにポイントを置きます。



File: gnus-ja.info, Node: Tabulation, Next: Wide Characters, Prev: Positioning Point, Up: Formatting Variables

整列
----

通常は、空白文字を詰め込んだり端を切り落とすことによって、文字列をディ
スプレイに並べることができます。でも大きさが違う異なる文字列を連結させ
る場合は、単に文字列を出力してしまうのがより手ごろであることが多いはず
で、しかしそうするとその後に続くテキストを並べるのに悩むことになります。

それを行なうために、Gnus は整列子 (tabulator) の仕様 `%=' を備えていま
す。これには二つの形式 "hard tabulators" および "soft tabulators" があ
ります。

`%50=' は文字列が 50桁までの場所を占めるように空白文字を詰め込みます。
もし挿入するテキストの末端が 50桁より後ろになる場合は何も挿入しません。
これは穏やか (soft) な整列子です。

`%-50=' もまた、文字列が 50桁までの場所を占めるように空白文字を詰め込み
ます。ですが、もし挿入するテキストの末端が 50桁より後ろになる場合は、
50桁より後ろになる過剰なテキストは削除されます。これは厳密 (hard) な整
列子です。



File: gnus-ja.info, Node: Wide Characters, Prev: Tabulation, Up: Formatting Variables

Wide Characters
---------------

多くの地域において、固定幅フォントは同じ幅の文字を持っています。しかし
いくつかの地域、よく知られている東アジアの国々では、ラテン文字と幅の広
い文字が混在して使われています。

整形において、Gnus は文字列が 10個の文字の幅だとしたら、スクリーンでも
10個分のラテン文字の幅になると仮定しますが、それは問題です。かの国々で
は、それは正しくありません。

それを救済するために、あなたは `gnus-use-correct-string-widths' を `t'
に設定することができます。これはバッファーの生成を遅くしますが、より美
しい結果を得ることができるでしょう。ディフォルト値は XEmacs では `t' で
すが Emacs では `nil' です。(訳注: 日本語などを Emacs で表示する場合に、
書法仕様によっては `t' にしないと概略バッファーの表示が不揃いになること
があります。)



File: gnus-ja.info, Node: Window Layout, Next: Faces and Fonts, Prev: Formatting Variables, Up: Various

ウィンドウの配置
================

いえ、X に関することはありませんから、おとなしくしてください。

もし `gnus-use-full-window' が `nil' でないと、Gnus はすべての他のウィ
ンドウを消して、Emacs の画面全体を占有します。これはディフォルトで `t'
です。

この変数を `nil' に設定してもそれなりに動作しますが、問題もあります。危
険を覚悟の上で使ってください。

`gnus-buffer-configuration' はそれぞれの Gnus のバッファーがどのくらい
の空間を与えられるべきかを現します。これはこの変数の抜粋です:

     ((group (vertical 1.0 (group 1.0 point)
                           (if gnus-carpal (group-carpal 4))))
      (article (vertical 1.0 (summary 0.25 point)
                             (article 1.0))))

これは連想リストです。「キー」は何らかの動作を名付けるためのシンボルで
す。例えば、グループバッファーを表示するときは、ウィンドウを設定するた
めの関数は `group' をキーとして使います。使用可能な名前の完全な一覧は下
に挙げられています。

「値」(すなわち「分割」) は、それぞれのバッファーがどれくらいの空間を占
めるべきかを指定します。`article' の分割を例に取ると

     (article (vertical 1.0 (summary 0.25 point)
                            (article 1.0)))

この「分割」は概略バッファーが画面の上の 25% を占めるべきで、それは記事
バッファーの上に配置されると言っています。お気づきのように、100% + 25%
は実際は 125% です (えぇ、皆さんの計算はこの様になったと思います。) し
かし、特別な数値 `1.0' は、残りのバッファーが必要なものを取り去った後に、
使用可能な残りの空間すべてを吸い取る、ということを合図するために使われ
ます。`1.0' の大きさを指定するバッファーは、一つの分割につき一つだけで
なくてはなりません。

ポイント (カーソル) は省略可能な三つ目の要素、`point' を持つバッファー
に置かれます。`frame' 分割では、`frame-focus' タグが含まれている枝葉の
分割を持っている副分割の、最後のもののフレームがフォーカスを得ることに
なります (`frame-focus' タグは、それを含んでいる枝葉リストにおいて、
`point' タグが無ければ三番目の、あれば四番目の要素になります。

次はもっと複雑な例です:

     (article (vertical 1.0 (group 4)
                            (summary 0.25 point)
                            (if gnus-carpal (summary-carpal 4))
                            (article 1.0)))

もし大きさの指定が浮動小数点数の代わりに整数だったなら、それは割合では
なく、どのくらい多くの行をバッファーが占めるべきかを指定するために使わ
れます。

もし「分割」が `eval' (評価) されるもののように見えるときは (正確に言う
と--分割の `car' が関数か原始関数 (subr) であるときは)、この分割は
`eval' されます。結果が `nil' でないなら、それは分割として用いられます。
これは、`gnus-carpal' が `nil' であれば三つのバッファーが、
`gnus-carpal' が `nil' でないなら、四つのバッファーが存在することになる
ということです。

まだ複雑ではないですって? それでは、大きさとしてこれを試してみてくださ
い:

     (article (horizontal 1.0
                  (vertical 0.5
                      (group 1.0)
                      (gnus-carpal 4))
                  (vertical 1.0
                      (summary 0.25 point)
                      (summary-carpal 4)
                      (article 1.0))))

おぉっと。二つのバッファーに謎の 100% タグが付いています。そして
`horizontal' って何でしょう?

もし分割の一つの最初の要素が `horizontal' であったなら、Gnus はウィンド
ウを水平に分割し、二つのウィンドウを横に並べます。これらのそれぞれの小
片の中では、あなたのやりたいことをすべて普通の流儀で行なうことができま
す。`horizontal' の後の数値は、この小片に画面のどれくらいの割合が与えら
れるかを指定します。

それぞれの分割では、100% のタグを持つ要素が *必ず* 一つある必要がありま
す。分割は決して正確ではないので、分割によって余ったすべての行を、この
バッファーが分捕ります。

もう少し形式的に、有効な分割がどのようになるかの定義を挙げておきましょ
う:

     split      = frame | horizontal | vertical | buffer | form
     frame      = "(frame " size *split ")"
     horizontal = "(horizontal " size *split ")"
     vertical   = "(vertical " size *split ")"
     buffer     = "(" buf-name " " size *[ "point" ] *[ "frame-focus"] ")"
     size       = number | frame-params
     buf-name   = group | article | summary ...

制限として、`frame' は最も上位階層の分割としてしか現れることができない
というものがあります。`form' は有効な分割を返す Emacs Lisp の式 (form)
でなければなりません。それぞれの分割は完全に再帰的で、任意の数の
`vertical' と `horizontal' 分割を含むことができます。

正しい大きさを見つけることは、少し複雑になります。どのウィンドウも
`gnus-window-min-height' (ディフォルトは 1) の文字の高さよりも小さくて
はならないし、少なくとも `gnus-window-min-width' (ディフォルトは 1) の
文字幅でなくてはなりません。Gnus は分割を適用する前にこれを強制しようと
試みます。もし標準の Emacs のウィンドウの幅/高さ制限を使いたいなら、こ
の二つの変数を `nil' にするだけで良いです。

Emacs の用語になじんでいないのなら、`horizontal' と `vertical' の分割は、
期待したものと反対の動作をするでしょう。`horizontal' 分割の中のウィンド
ウは横に並んで表示され、`vertical' 分割の中のウィンドウは上下に表示され
ます。

ウィンドウの配置に関して実験をしてみたいのであれば、良い方法は分割を引
数にして直接 `gnus-configure-frame' を呼ぶことです。これはバッファーを
分割するときにすべての実際の仕事をする関数です。下のものは五つのウィン
ドウを作るかなりばかげた設定です。二つをグループバッファーに、三つを記
事バッファーのために充てます。(だから、ばかげていると言ったでしょ。) も
し下の文を `評価' すると、普通の Gnus の経路を使わないで、すぐにそれが
どのように見えるかの直観を得ることができます。満足するまでそれで遊んで、
それから `gnus-add-configuration' を使って新しい作品をバッファー配置リ
ストに加えてください。

     (gnus-configure-frame
      '(horizontal 1.0
         (vertical 10
           (group 1.0)
           (article 0.3 point))
         (vertical 1.0
           (article 1.0)
           (horizontal 4
             (group 1.0)
             (article 10)))))

複数のフレームも欲しいかもしれません。問題ありません---`frame' 分割を使
うだけです:

     (gnus-configure-frame
      '(frame 1.0
              (vertical 1.0
                        (summary 0.25 point frame-focus)
                        (article 1.0))
              (vertical ((height . 5) (width . 15)
                         (user-position . t)
                         (left . -1) (top . 1))
                        (picon 1.0))))

この分割の結果は、最初の (もしくは「主たる」) フレームに見慣れた概略/記
事ウィンドウを配置し、小さな追加のフレームが picon を表示するために作ら
れます。ご覧の通り、普通の最上位階層の `1.0' の定の代わりに、それぞれの
追加の分割が大きさの指定として、フレームパラメーターの連想リストを持た
なければなりません (*Note Frame Parameters: (elisp)Frame Parameters.)。
XEmacs では、フレームプロパティーリストも使えます--例えば `(height 5
width 15 left -1 top 1)' がそのような plist です。
`gnus-buffer-configuration' で使うことができるすべてのキーの一覧は、そ
のディフォルト値で見つけることができます。

キー `message' は `gnus-group-mail' および
`gnus-summary-mail-other-window' の両方で使われることに注意してください。
もし二つを区別するほうが望ましいなら、このような物を使うことができます:

     (message (horizontal 1.0
                          (vertical 1.0 (message 1.0 point))
                          (vertical 0.24
                                    (if (buffer-live-p gnus-summary-buffer)
                                        '(summary 0.5))
                                    (group 1.0))))

良くある複数のフレーム分割の要望は、メールとニュースの作成には別のフレー
ムを使い、元のフレームはそのままに残すというものです。これの達成には、
以下のようなものでできます。

     (message
       (frame 1.0
              (if (not (buffer-live-p gnus-summary-buffer))
                  (car (cdr (assoc 'group gnus-buffer-configuration)))
                (car (cdr (assoc 'summary gnus-buffer-configuration))))
              (vertical ((user-position . t) (top . 1) (left . 1)
                         (name . "Message"))
                        (message 1.0 point))))

訳注: これを高度に発展させたものが
`http://www.jpl.org/elips/message-multiple-frames.el.gz' として入手でき
ます。使い方はファイルの冒頭に書かれています。

変数 `gnus-buffer-configuration' はとても長く複雑なので、単一の設定の変
更を簡単にするための関数があります: `gnus-add-configuration' です。例え
ば `article' の設定を変えたいのなら、次のようにできます:

     (gnus-add-configuration
      '(article (vertical 1.0
                    (group 4)
                    (summary .25 point)
                    (article 1.0))))

普通はこれらの `gnus-add-configuration' の呼び出しを `~/.gnus.el' ファ
イルに入れるか、何らかの起動時のフックに入れるでしょう--それらは Gnus
が読み込まれた後で実行されなければなりません。

もし分割の設定で指定されたすべてのウィンドウがすでに見えているのであれ
ば、Gnus はウィンドウの配置を変更しません。常に「正しい」ウィンドウ設定
を強制したいのであれば、`gnus-always-force-window-configuration' を
`nil' でない値に設定してください。

木表示 (*Note Tree Display::) を使っていて、木ウィンドウが垂直方向に次
の別のウィンドウで表示されるなら、ウィンドウの大きさが変更されることを
避けるために `gnus-tree-minimize-window' をいじるのが良いでしょう。


ウィンドウ配置の例
------------------

   * 左側を狭めてグループバッファーに。右側を分割して概略バッファー (上
     1/6) と記事バッファー (下) に。

          +---+---------+
          | G | Summary |
          | r +---------+
          | o |         |
          | u | Article |
          | p |         |
          +---+---------+

          (gnus-add-configuration
           '(article
             (horizontal 1.0
                         (vertical 25 (group 1.0))
                         (vertical 1.0
                                   (summary 0.16 point)
                                   (article 1.0)))))

          (gnus-add-configuration
           '(summary
             (horizontal 1.0
                         (vertical 25 (group 1.0))
                         (vertical 1.0 (summary 1.0 point)))))



File: gnus-ja.info, Node: Faces and Fonts, Next: Compilation, Prev: Window Layout, Up: Various

フェースとフォント
==================

かつてフォントとフェースをいじくるのは非常に難しかったのですが、今日で
は非常に簡単です。単に `M-x customize-face' とやって、変えたいフェース
を選び出して、標準のカスタマイズインターフェースを使って変更することが
できます。



File: gnus-ja.info, Node: Compilation, Next: Mode Lines, Prev: Faces and Fonts, Up: Various

コンパイル
==========

あの行書法仕様指定変数を覚えていますか? `gnus-summary-line-format',
`gnus-group-line-format' などなどです。さて、Gnus はこれらの変数が何で
あっても注意を払いますが、残念ながらそれらを変更すると大変重大な速度低
下を引き起こすことになります。(これらの変数のディフォルト値は、それらに
関連付けられたバイトコンパイルされた関数を持っていますが、利用者作成の
ものはもちろんそうではありません。)

これを改善するために、変数をいじくりまわして、(なんとなく) 満足したと感
じた後で、`M-x gnus-compile' を実行することができます。これは新しい指定
がバイトコンパイルされ、もう一度最高速度に復帰できるということです。
Gnus はこれらのバイトコンパイルされた指定を `.newsrc.eld' ファイルに保
存します。(もっとも利用者が定義した関数は、この関数によってコンパイルさ
れません--それらを `~/.gnus.el' ファイルに突っ込んでから、自分でそのファ
イルをバイトコンパイルしなければなりません。)



File: gnus-ja.info, Node: Mode Lines, Next: Highlighting and Menus, Prev: Compilation, Up: Various

モード行
========

`gnus-updated-mode-lines' はどのバッファーがそれらのモード行を常に最新
のものにしておくかを指定します。それはシンボルのリストです。使うことの
できるシンボルは `group', `article', `summary', `server', `browse',
`tree' などです。もし対応するシンボルが存在すると、Gnus は該当する情報
でモード行を更新します。この変数が `nil' ならば、画面の再描画はもっと速
いでしょう。

ディフォルトでは、Gnus は概略バッファーと記事バッファーのモード行に現在
の記事の情報を表示します。Gnus が表示したい情報 (例えば記事の表題) はし
ばしばモード行よりも長いことがあるので、どこかで切り落とされなければな
りません。変数 `gnus-mode-non-string-length' はその行の他の要素 (すなわ
ち情報でない部分) がどのくらいの長さであるかを指定します。もしモード行
に追加の要素を入れたなら、この変数を修正する必要があります:

     (add-hook 'display-time-hook
               (lambda () (setq gnus-mode-non-string-length
                                (+ 21
                                   (if line-number-mode 5 0)
                                   (if column-number-mode 4 0)
                                   (length display-time-string)))))

もしこの変数が `nil' であるなら (これがディフォルトですが)、モード行は
切り落とされず、詰め込みもされません。ディフォルトでは、バッファーの完
全なパーセント表示さえもモード行から追いやられる可能性もあるので、おそ
らく望ましい設定ではないことに注意してください。利用者が自分の設定に合
うようにこの変数を適切に設定しなければなりません。



File: gnus-ja.info, Node: Highlighting and Menus, Next: Buttons, Prev: Mode Lines, Up: Various

ハイライトとメニュー
====================

変数 `gnus-visual' は Gnus を素敵にするたいていの方面の操作をします。
`nil' であると、Gnus はメニューを作ったり、素敵な色やフォントを使ったり
しようとしません。これはさらに `gnus-vis.el' ファイルを読み込むことも禁
止します。

この変数は有効にされている視覚的なプロパティーのリストであることができ
ます。以下の要素は有効で、ディフォルトですべて含まれています:

`group-highlight'
     グループバッファーでハイライト (強調表示) をします。
`summary-highlight'
     概略バッファーでハイライトをします。
`article-highlight'
     記事バッファーでハイライトをします。
`highlight'
     すべてのバッファーでハイライトをするようにします。
`group-menu'
     グループバッファーでメニューを作成します。
`summary-menu'
     概略バッファーでメニューを作成します。
`article-menu'
     記事バッファーでメニューを作成します。
`browse-menu'
     ブラウズバッファーでメニューを作成します。
`server-menu'
     サーバーバッファーでメニューを作成します。
`score-menu'
     スコアバッファーでメニューを作成します。
`menu'
     すべてのバッファーでメニューを作成します。

ですから、記事バッファーだけをハイライトしたくて、すべてのバッファーで
メニューを作りたい場合は、このようにすることができます:

     (setq gnus-visual '(article-highlight menu))

もしハイライトだけで、メニューの類は欲しくないときは、次のようにできま
す:

     (setq gnus-visual '(highlight))

`gnus-visual' が `t' であると、ハイライトとメニューはすべての Gnus のバッ
ファーで使用されます。

他のすべてのバッファーの外見に影響する総合的な変数は:

`gnus-mouse-face'
     これは Gnus でマウスのハイライトに使われるフェース (すなわちフォン
     ト) です。`gnus-visual' が `nil' であると、マウスハイライトはなさ
     れません。

まったく違ったメニューを作成するために、関連するフックがあります:

`gnus-article-menu-hook'
     記事モード (article mode) のメニューを作成した後に呼ばれるフックで
     す。

`gnus-group-menu-hook'
     グループモード (group mode) のメニューを作成した後に呼ばれるフック
     です。

`gnus-summary-menu-hook'
     概略モード (summary mode) のメニューを作成した後に呼ばれるフックで
     す。

`gnus-server-menu-hook'
     サーバーモード (server mode) のメニューを作成した後に呼ばれるフッ
     クです。

`gnus-browse-menu-hook'
     概観モード (browse mode) のメニューを作成した後に呼ばれるフックで
     す。

`gnus-score-menu-hook'
     スコアモード (score mode) のメニューを作成した後に呼ばれるフックで
     す。



File: gnus-ja.info, Node: Buttons, Next: Daemons, Prev: Highlighting and Menus, Up: Various

ボタン
======

最新流行のマウス "mouse" 装置が、近ごろではちゃんとした操作法を学びたが
らない若者やかっこいいこどもたちの間で大人気です。それでは私が Tops 20
システム上で Emacs を使っていた頃の、'89 年の夏を思い起こしてみましょう。
300 人の利用者が、一つのマシン上で、みんなが Simula コンパイラを走らせ
ていました。ああ、ばかばかしい!

ほんとうに。

さて、`gnus-carpal' を `t' に設定することによって、クリックするだけで何
でもできるボタンだらけのバッファーを Gnus に表示させることができます。
とっても簡単です、ほんとうに。指圧療法の先生に教えてあげてください (訳
注: carpal とは手首の骨のこと)。

`gnus-carpal-mode-hook'
     すべての手首モードバッファーで実行するフックです。

`gnus-carpal-button-face'
     ボタンに使われるフェースです。

`gnus-carpal-header-face'
     手首バッファーのヘッダーで使用されるフェースです。

`gnus-carpal-group-buffer-buttons'
     グループバッファーのボタンです。

`gnus-carpal-summary-buffer-buttons'
     概略バッファーのボタンです。

`gnus-carpal-server-buffer-buttons'
     サーバーバッファーのボタンです。

`gnus-carpal-browse-buffer-buttons'
     閲覧バッファーのボタンです。

すべての `buttons' 変数はリストです。これらのリストの要素は、その
`car' の項が表示される文を含んでいて、その `cdr' の項が関数シンボルになっ
ている cons セルか、もしくはただの文字列のどちらかです。



File: gnus-ja.info, Node: Daemons, Next: NoCeM, Prev: Buttons, Up: Various

デーモン
========

Gnus、それは (言い伝えによれば) かつて書かれたいかなるプログラムよりも
大きく、あなたがやって欲しいと思うさまざまな奇妙なことを、あなたのいな
いところで行なってくれるものです。例えば、あなたは時たま新着メールを
チェックしてもらいたいかもしれません。あるいは Emacs をしばらく放ってお
いたときすべてのサーバーの接続を切断してもらいたくなるかもしれません。
他にも何かそういったことです。

Gnus はさまざまな「ハンドラー」(処理を行なわせるためのもの) を定義する
ことによってそのようなことを可能にします。各ハンドラーは三つの要素から
成ります:「関数」、「時間」、「アイドル」(何もしていない状態を示すもの)
パラメーターです。

これは Emacs のアイドル状態が三十分続いたときに接続を切断するハンドラー
の例です:

     (gnus-demon-close-connections nil 30)

これは Emacs がアイドルのとき、一時間毎に PGP ヘッダーを走査するハンド
ラーです:

     (gnus-demon-scan-pgp 60 t)

この「時間」パラメーターと「アイドル」パラメーターは、奇妙かつ素晴らし
いやり方で一緒に動作します。基本的に「アイドル」が `nil' だったら、関数
は「時間」分毎に呼び出されます。

「アイドル」が `t' だったら、関数は Emacs がアイドルだったときに限って
「時間」分後に呼び出されます。したがって Emacs がアイドルにならなければ、
関数は呼び出されません。いったん Emacs がアイドル状態になると、この関数
は「時間」分毎に呼び出されます。

「アイドル」が数値で「時間」も数値だった場合、Emacs のアイドル状態が
「アイドル」分続いた場合に限って、「時間」分毎に関数が呼び出されます。

「アイドル」が数値で「時間」が `nil' だった場合、関数は Emacs のアイド
ル状態が「アイドル」分続く度に一度呼び出されます。

そして「時間」が文字列だった場合 (それは `07:31' のような形式でなければ
なりません)、関数は毎日その時刻の頃になると一度呼び出されます。もちろん
「アイドル」パラメーターによって動作が変わります。

(ここで「分」と言ったとき、それは実際には `gnus-demon-timestep' 秒のこ
とです。これはディフォルトでは 60 です。もしこの変数を変更すると、すべ
てのハンドラーの計時に影響を与えます。)

というわけで、ハンドラーを追加したければ、`~/.gnus.el' ファイルに以下の
ようなものを書き込めば良いでしょう:

     (gnus-demon-add-handler 'gnus-demon-close-connections 30 t)

このための既製の関数がいくつか作成されています:
`gnus-demon-add-nocem', `gnus-demon-add-disconnection',
`gnus-demon-add-nntp-close-connection',
`gnus-demon-add-scan-timestamps', `gnus-demon-add-rescan', および
`gnus-demon-add-scanmail' です。これらの機能を必要とするならば、単にこ
れらの関数を `~/.gnus.el' に入れてください。

`gnus-demon-handlers' に直接ハンドラーを追加した場合には、それを効かせ
るために `gnus-demon-init' を実行してください。すべてのデーモンを取り消
すには、`gnus-demon-cancel' 関数を使うことができます。

デーモンの追加をやりすぎるのはかなりマズいことです。すべてのサーバーか
らすべてのニュースとメールを二秒毎に調べまわす関数を付け加えたりするこ
とは、どんな立派なシステムからも確実に追い出される方法です。お行儀良く
しましょう。



File: gnus-ja.info, Node: NoCeM, Next: Undo, Prev: Daemons, Up: Various

NoCeM
=====

"Spam" とは、同じ記事を何回も何回も何回も投稿することです。Spam は悪い
ことです。Spam は凶悪です。

Spam はさまざまな反 spam 機関によって、通常一日かそこらで取り消しされま
す。通常これらの機関は、一緒に "NoCeM" メッセージも送り出します。
NoCeM" は“no see-'em”(それらを見たくない) と発音され、意味はその名前
の通りです--これらのメッセージは気に触る記事を、つまり、消してしまいま
す。

どうせそれらの記事が取り消しされてしまうのなら、これらの NoCeM メッセー
ジは何の役に立つのでしょう? あるサイトでは取り消しメッセージを重視しま
せん。また、あるサイトでは特定の数人からの取り消しメッセージだけを尊重
します。そこで、あなたは NoCeM メッセージを使いたくなるかもしれないわけ
です。これらは `news.lists.filters' や `alt.nocem.misc' などのニュース
グループで配布されています (訳注: `fj.news.lists.filters' も、そのため
のニュースグループです)。

Gnus はこのグループのメッセージを自動的に読み、解釈することができ、これ
で spam を消し去ります。

もちろん、これらをカスタマイズするための変数がいくつかあります:

`gnus-use-nocem'
     ものごとを始めさせるには、この変数を `t' に設定してください。ディ
     フォルトでは `nil' です。

     この変数にグループレベルとして正の数値を設定することもできます。そ
     の場合、この値が `gnus' や `gnus-group-get-new-news' などのコマン
     ドの接頭引数として与えるグループレベル以下だったら、Gnus は新着
     ニュースをチェックするときに NoCeM メッセージを走査します。さもな
     ければ、それらのコマンドにこの値より小さいグループレベルを与えると、
     Gnus は NoCeM メッセージを走査しません。例えば、メールグループで
     1 か 2 を使っていてニュースグループのレベルがディフォルトのままだっ
     たら、3 が最も良い選択です。

`gnus-nocem-groups'
     Gnus はこのグループのリストから NoCeM メッセージを探します。ディフォ
     ルトは次の通りです:

          ("news.lists.filters" "alt.nocem.misc")

`gnus-nocem-issuers'
     NoCeM メッセージを発行する人はたくさんいます。このリストでは、誰の
     言うことに従いたいかを指定します。ディフォルトは次の通りです:

          ("Adri Verhoef"
           "alba-nocem@albasani.net"
           "bleachbot@httrack.com"
           "news@arcor-online.net"
           "news@uni-berlin.de"
           "nocem@arcor.de"
           "pgpmoose@killfile.org"
           "xjsppl@gmx.de")

     このリストに含められる有名な反 spam 家たちは
     `http://www.xs4all.nl/~rosalind/nocemreg/nocemreg.html' に載ってい
     ます。

     これらすべての人々の NoCeM メッセージに留意する必要はありません--
     言うことを聞きたい人だけで良いのです。また、それらの人たちからの
     NoCeM メッセージを、すべて受け入れる必要もありません。それぞれの
     NoCeM メッセージは、そのメッセージの厳密な (多少は厳密、たいていは
     そうでもない) 定義を与える種別 "type" ヘッダーを持っています。一般
     的な種別は `spam', `spew', `mmf', `binary', および `troll' です。
     これを指定するには、リストの中で `(発行者 条件...)' という要素を使
     う必要があります。それぞれの条件は、文字列 (使いたい種別に合致する
     正規表現) または `(not 文字列)' という形式のリスト (この場合の「文
     字列」は使いたくない種別に合致する正規表現) のどちらかです。

     例えば、Chris Lewis からの、`troll' メッセージ以外のすべての
     NoCeM メッセージを欲しい場合には、こうすれば良いでしょう:

          ("clewis@ferret.ocunix.on.ca" ".*" (not "troll"))

     一方、彼の `spam' と `spew' メッセージ以外は何も要らないのであれば、
     以下のようにできます:

          ("clewis@ferret.ocunix.on.ca" (not ".*") "spew" "spam")

     この指定は左から右に適用されます。

`gnus-nocem-verifyer'
     これは NoCeM 発行者が本人であることを検証する関数でなくてはなりま
     せん。EasyPG が利用できる場合、この変数はディフォルトで
     `gnus-nocem-epg-verify' になりますが、そうでなければ `pgg-verify'
     になります。その関数は、検証に成功したら非-`nil' を、そうでなけれ
     ば (NoCeM メッセージが署名されていない場合を含みます) `nil' を返さ
     なければなりません。もしこれが非常に遅くて、検証結果を気にしない
     (これはたぶん危険です) のであれば、この変数を `nil' にすることがで
     きます。

     以前、ディフォルトは Mailcrypt の関数である `mc-verify' でした。ま
     だそれを使うことができますが、PGP の公開鍵を GnuPG の鍵束に加える
     ことを厭わなければ、GnuPG とともに動作する
     `gnus-nocem-epg-verify' または `pgg-verify' に変えることができます。

`gnus-nocem-directory'
     これは Gnus が NoCeM キャッシュファイルを保存する場所です。ディフォ
     ルトは `~/News/NoCeM/' です。

`gnus-nocem-expiry-wait'
     古い NoCeM 項目をキャッシュから消すまでの日数。ディフォルトは 15
     です。これを短くするほど Gnus は速くなりますが、古い spam を見るこ
     とになってしまうかもしれません。

`gnus-nocem-check-from'
     非-`nil' では、記事のボディーにある発行人の正当性を調べます。そう
     でない場合は、著者が正しい発行人でなくても気にせずに記事を取り込み
     ますが、もしあなたが正しい発行人を見分けられるならば、そうした方が
     とても速くなるでしょう。

`gnus-nocem-check-article-limit'
     すべての NoCeM グループにおけるチェックする記事の最大数を指定しま
     す。`nil' で無制限になります。NoCeM グループは巨大になることがあり、
     そうなると処理がとても遅くなります。

NoCeM を使うと、もしかするとメモリ喰いになるかもしれません。あなたがた
くさんの生きたグループ (つまり購読あるいは非購読グループ) を持っている
と、Emacs のプロセスは大きくなってしまうでしょう。もしこれが問題であれ
ば、非購読のグループを全部 (あるいはその多くを) 消し去って (kill して)
しまうべきです (*Note Subscription Commands::)。



File: gnus-ja.info, Node: Undo, Next: Predicate Specifiers, Prev: NoCeM, Up: Various

やり直し
========

実行したことのやり直しができると、とても便利です。Emacs の普通のバッ
ファーでは十分に簡単です--単に `undo' ボタンを押すだけです。しかし
Gnus のバッファーでは、それは簡単ではありません。

Gnus がバッファー内に表示しているものは、Gnus にとってはまったく何の価
値もありません--これはみんな、利用者に奇麗に見えるようにデザインされて
いるただのデータなのです。`C-k' でグループバッファーからグループを消去
すると、その行は消え去りますが、それは実際の動作--当のグループを Gnus
の内部構造体から削除すること、の単なる副作用でしかありません。これらの
やり直しは、通常の Emacs の `undo' 関数では行なうことができません。

Gnus は利用者がすることを憶えておいて、利用者がすることの逆を行なうこと
によって、これを多少は救済しようとします。利用者が `undo' キーを押すと、
一段階または数段階前までの操作を元に戻すコードを実行します。しかし、す
べての操作が簡単に逆戻りできるわけではないので、現在 Gnus は、やり直し
可能なキーの機能を僅かしか提供していません。これらはグループの削除、グ
ループの貼り付け、およびグループの既読記事のリストの変更です。実際それ
だけです。将来はもっと機能が追加されるかもしれませんが、追加されるそれ
ぞれの機能は保存するべきデータを増やすので、決して Gnus は完全にやり直
し可能にはならないでしょう。

やり直し機能は `gnus-undo-mode' マイナーモードによって提供されます。こ
れは `gnus-use-undo' が `nil' 以外であれば使用され、これがディフォルト
です。`C-M-_' キーが `gnus-undo' 命令を実行します。これは通常の Emacs
の `undo' 命令にいくぶん似ているはずです。



File: gnus-ja.info, Node: Predicate Specifiers, Next: Moderation, Prev: Undo, Up: Various

述語指示子
==========

いくつかの Gnus の変数は「述語指示子」(predicate specifiers) です。これ
は、その多くをすべて記述する必要なしに、述語の仕様に融通を効かせること
ができる特別な形式です。

これらの指示子は関数、シンボルおよびリストからなるリストです。

例です:

     (or gnus-article-unseen-p
         gnus-article-unread-p)

利用できるシンボルは `or'、`and' および `not' です。関数はすべて一つの
パラメーターを受け取ります。

呼ぶことができる関数を作るために、Gnus はこれらの指示子について内部的に
`gnus-make-predicate' を使います。この関数へのこの入力パラメーターは、
述語指示子の中のすべての関数に渡されます。



File: gnus-ja.info, Node: Moderation, Next: Fetching a Group, Prev: Predicate Specifiers, Up: Various

司会役
======

もしあなたが司会者 (モデレーター) ならば、`gnus-mdrtn.el' パッケージを
使うことができます。これは標準の Gnus パッケージには含まれていません。
`larsi@gnus.org' に、どのグループの司会を行なうのかを述べたメールを書い
てください。そうすればコピーを手に入れることができます。

司会者用パッケージは概略バッファーのマイナーモードとして実装されていま
す。

     (add-hook 'gnus-summary-mode-hook 'gnus-moderate)

をあなたの `~/.gnus.el' ファイルに入れてください。

あなたが `rec.zoofle' の司会者だとすると、これは以下のように動作するよ
うになっています:

  1. 受信したメールを `Newsgroups:.*rec.zoofle' に合致させることによっ
     て分割します。これは投稿されようとしているすべての記事を、あるメー
     ルグループ--例えば `nnml:rec.zoofle' に入れます。

  2. あなたは時折このグループに入り、`e' (edit-and-post) あるいは `s'
     (just send unedited) 命令を使って記事を投稿します。

  3. `rec.zoofle' ニュースグループを読んでいる途中で、もしあなたが承認
     していない記事をたまたま見つけたとしたら、`c' 命令で取り消しできま
     す。

二つのグループで司会者モードを使うとすれば、こうなります:

     (setq gnus-moderated-list
           "^nnml:rec.zoofle$\\|^rec.zoofle$")



File: gnus-ja.info, Node: Fetching a Group, Next: Image Enhancements, Prev: Moderation, Up: Various

グループを取得する
==================

時々「Gnus が起動しているかどうかを気にしないでこのグループを読みたい。」
ということができれば便利なことがあります。これは、利用者よりもプログラ
ムのコードを書く人に便利な機能ですが、どちらにしろ `gnus-fetch-group'
コマンドはこの機能を提供します。それはグループの名前を引数としてとりま
す。



File: gnus-ja.info, Node: Image Enhancements, Next: Fuzzy Matching, Prev: Fetching a Group, Up: Various

画像の拡張
==========

XEmacs それに v21 以上の Emacs は絵やその種のものを表示することができる
(1) (*Note Image Enhancements-Footnotes::)ので、Gnus はこれを利用するこ
とにしました。
* Menu:

* X-Face::                      ファンキーでちっちゃな白黒の絵を表示する
* Face::                        よりファンキーでちっちゃなカラーの絵を表示する
* Smileys::                     幸せな顔をまさにそのように表示する
* Picons::                      あなたが読んでいるものの絵を表示する方法
* XVarious::                    XEmacs のための Gnus の変数


File: gnus-ja.info  Node: Image Enhancements-Footnotes, Up: Image Enhancements

(1) MS ウィンドウズの Emacs 21 は画像をサポートしていません。Emacs 22
はします。



File: gnus-ja.info, Node: X-Face, Next: Face, Prev: Image Enhancements, Up: Image Enhancements

X-Face
------

`X-Face' ヘッダーは、メッセージの著者を表わすことになっている 48×48 画
素の白黒 (深さ 1 bit の) の絵を描きます。これは進化し続けるあまたのメー
ルとニュースリーダーによってサポートされるでしょう。

`X-Face' ヘッダーを見るには `compface' をサポートしている Emacs (ほとん
どの XEmacs の版がサポート) か、変換または表示のための適切なプログラム
をインストールしてあることが必要です。あなたの Emacs が自前で画像の表示
をサポートしているならば、ディフォルトで `From' ヘッダーの前に顔が表示
されます。Emacs が自前で `X-Face' をサポートしていない場合、Gnus は
`pbmplus' パッケージとその仲間の外部プログラム (下記参照) を使って
`X-Face' ヘッダーを変換しようとします。`X-Face' をサポートするようにコ
ンパイルされている XEmacs は速いです。画像をサポートしていない Emacs で
は、ディフォルトでは表示のための処理を `display' というプログラムに委ね
ます。

GNU/Linux システムの場合、ImageMagick パッケージに含まれてい
る `display' プログラムを使います。外部プログラムとして
は `netpbm'、`libgr-progs' および `compface' のような名前
のものを探します。Windows では `http://gnuwin32.sourceforge.net' に
ある `netpbm' および `compface' パッケージを使っても良いです。
`PATH' 環境変数に `bin' ディレクトリーを追加する必要があります。

変数 `gnus-article-x-face-command' で、`X-Face' ヘッダーを表示するため
に何のプログラムを使うかを制御します。この変数が文字列ならば、この文字
列がサブシェルで実行されます。関数ならば、この関数が顔を引数として呼ば
れます。もし `gnus-article-x-face-too-ugly' (これは正規表現です) が
`From' 欄に合致すれば、顔は表示されません。

(注: 変数/関数名には `xface' ではなく `x-face' が使われます。)

フェースと変数:

`gnus-x-face'
     X-Face を表示するためのフェース。このフェースの色が表示される
     X-Face の前景色と背景色として使われます。ディフォルトの色は黒と白
     です。

`gnus-face-properties-alist'
     Face (*Note Face::) と X-Face 画像に適用される、画像の形式とプロパ
     ティーの連想リストです。ディフォルト値は Emacs 用の
     `((pbm . (:face gnus-x-face)) (png . nil))' または XEmacs 用の
     `((xface . (:face gnus-x-face)))' です。例を挙げましょう:

          ;; From ヘッダーにおける Face と X-Face の高さを指定します。
          (setq gnus-face-properties-alist
                '((pbm . (:face gnus-x-face :ascent 80))
                  (png . (:ascent 80))))

          ;; Face と X-Face を凹んだボタンのように表示します。
          (setq gnus-face-properties-alist
                '((pbm . (:face gnus-x-face :relief -2))
                  (png . (:relief -2))))

     いろいろな画像の形式で利用可能なプロパティーについては *Note
     Image Descriptors: (elisp)Image Descriptors, を参照してください。
     今のところ Emacs では `pbm' が X-Face 画像に使われ、 `png' が
     Face 画像に使われます。XEmacs では、それが `libcompface' ライブラ
     リーとともに構築されていれば、`xface' 画像形式に `:face' プロパ
     ティーだけが効果を及ぼします。

投稿様式 (posting style) を使うのであれば、`gnus-posting-styles' に
`x-face-file' の項を加えれば良いでしょう (*Note Posting Styles::)。さも
なけば、外に出すメッセージに X-Face ヘッダーを簡単に挿入できるようにす
るために Gnus が提供する、いくつかの便利な関数と変数を利用することがで
きます。これらの機能のためには、前述の ImageMagick、netpbm または他の画
像を変換するパッケージ (何が必要かは、下記の変数群の値によります) も必
要です。

`gnus-random-x-face' は `gnus-x-face-directory' にあるすべての `pbm' ファ
イルをくまなく探してランダムに一つを選び取り、シェルコマンド
`gnus-convert-pbm-to-x-face-command' を使ってそれを X-Face の形式に変換
します。`pbm' ファイルは 48×48 画素の大きさでなければなりません。それ
は X-Face ヘッダーのデータを文字列で返します。

`gnus-insert-random-x-face-header' は `gnus-random-x-face' を呼んで、ラ
ンダムに生成されたデータによる X-Face ヘッダーを挿入します。

`gnus-x-face-from-file' はパラメーターとして GIF ファイルを受け取り、シェ
ルコマンド `gnus-convert-image-to-x-face-command' を使ってそのファイル
を X-Face の形式に変換します。

一番目の関数の一般的な使い方を示します。以下のようなものを
`~/.gnus.el' ファイルに書き込んでください:

     (setq message-required-news-headers
           (nconc message-required-news-headers
                  (list '(X-Face . gnus-random-x-face))))

最後の関数を使うのは、このようになるでしょう:

     (setq message-required-news-headers
           (nconc message-required-news-headers
                  (list '(X-Face . (lambda ()
                                     (gnus-x-face-from-file
                                      "~/My-face.gif"))))))



File: gnus-ja.info, Node: Face, Next: Smileys, Prev: X-Face, Up: Image Enhancements

Face
----

`Face' ヘッダーは、本質的に `X-Face' をよりファンキーに変形したものです。
それらは、メッセージを書いた人を象徴することになっている 48×48 画素の
カラー画像を描きます。

`Face' ヘッダーの内容は base64 でエンコードされた PNG の画像でなけ
ればなりません。正確な仕様について、
`http://quimby.gnus.org/circus/face/' を参照してください。

変数 `gnus-face-properties-alist' は表示される Face 画像の外観に影響し
ます。*Note X-Face::.

`Face' ヘッダーを見るには Emacs が PNG 画像を表示できる必要があります。

Gnus は外に出すメッセージに Face ヘッダーを簡単に挿入できるようにするた
めの、便利な関数と変数を少しばかり提供します。

`gnus-convert-png-to-face' は 726-byte 以下の 48×48 の PNG の画像を受
け取って、それを Face に変換します。

`gnus-face-from-file' は JPEG ファイルの名前をパラメーターとして受け取
り、シェルコマンド `gnus-convert-image-to-face-command' を使ってそのファ
イルを Face フォーマットに変換します。

この関数の代表的な使い方を挙げておきましょう。以下のようなものを
`~/.gnus.el' ファイルに入れてください:

     (setq message-required-news-headers
           (nconc message-required-news-headers
                  (list '(Face . (lambda ()
                                   (gnus-face-from-file "~/face.jpg"))))))



File: gnus-ja.info, Node: Smileys, Next: Picons, Prev: Face, Up: Image Enhancements

スマイリー
----------

スマイリー "smiley" は Gnus とは別のパッケージですが、スマイリーを使っ
ているパッケージは現在 Gnus だけなので、ここで説明します。

ひとことで言えば--Gnus でスマイリーを使うには、以下を `~/.gnus.el' ファ
イルに書き込んでください。

     (setq gnus-treat-display-smileys t)

スマイリーは、文字の顔マーク---`:-)', `8-)', `:-(' などといったもの--を
絵に割り当てて、文字の顔マークの代わりにその絵を表示します。この変換は
文字に合致する正規表現と、それに割り当てられたファイル名のリストで制御
されます。

使われる連想リストは、変数 `smiley-regexp-alist' で設定します。各要素の
最初の項目は合致する正規表現で、二番目の要素は絵で置き換えられる正規表
現のグループ番号、そして三番目の要素は表示されるファイルの名前です。

以下の変数でスマイリーの見栄えをカスタマイズします:

`smiley-style'
     スマイリーの形式を指定します。あらかじめ定義されている形式は
     `low-color' (13×14 画素で 3 色の小さい画像)、`medium' (16×16 画
     素でもっとカラフルな画像) および `grayscale' (14×14 画素のグレー
     スケール画像) です。ディフォルトはディフォルト face の高さに依存し
     ます。

`smiley-data-directory'
     スマイリーが顔ファイルを探す場所です。もうこの変数はいじらないで、
     代わりに `smiley-style' をカスタマイズしてください。

`gnus-smiley-file-types'
     スマイリーのファイル名として試してみる拡張子のリストです。



File: gnus-ja.info, Node: Picons, Next: XVarious, Prev: Smileys, Up: Image Enhancements

Picons
------

それで…、あなたはこのニュースリーダーをさらにもっと遅くしたいってわけ
ですね! これはそうするのにぴったりな方法です。さらにこれは、あなたが
ニュースを読んでいるんだということを、あなたの肩越しに見つめている人に
印象づけるための素晴らしい方法でもあります。

Picon とはなんでしょう? Picons ウェブサイトから直接引用しましょう。

     "Picon" とは「個人アイコン (personal icons)」の略です。これは、あ
     る電子メールアドレスのための適切な画像を見つけることができるように、
     無理矢理小さくしてデータベースにまとめられた画像たちで、ネット上の
     利用者やドメインを表現するために使われます。利用者とドメイン以外に、
     Usenet ニュースグループや天気予報のための picon データベースがあり
     ます。picon は白黒の `XBM' 形式、またはカラーの `XPM' 形式および
     `GIF' 形式のいずれでも構いません。

Picon データベースの入手とインストールの手順については、ウェブブラウザー
で `http://www.cs.indiana.edu/picons/ftp/index.html' を訪ねてみてくださ
い。

もし Debian GNU/Linux を使っているのなら、`apt-get install picons.*' と
言えば、Gnus が見つけることができる picon がインストールされます。

Picon の表示ができるようにするためには、picon データベースがあるディレ
クトリーが、ただ単に `gnus-picon-databases' に設定されているようにして
ください。

変数 `gnus-picon-style' は picon をどのように表示するかを制御します。
`inline' だったらテキスト形式の表現が置き換えられます。
`right' だったら、テキスト形式の表現の右側に picon が加えられます。

ものごとの所在を管理するために、以下の変数を設けています。

`gnus-picon-databases'
     Picon データベースの場所です。これは `news', `domains', `users'
     (などなど) のサブディレクトリーが含まれているディレクトリーのリス
     トです。`("/usr/lib/picon" "/usr/local/faces")' がディフォルトです。

`gnus-picon-news-directories'
     `gnus-picon-databases' からニュースグループ用のフェースを探すため
     のサブディレクトリーのリストです。ディフォルトは `("news")' です。

`gnus-picon-user-directories'
     `gnus-picon-databases' から利用者のフェースを探すためのサブディレ
     クトリーのリストです。`("local" "users" "usenix" "misc")' がディフォ
     ルトです。

`gnus-picon-domain-directories'
     `gnus-picon-databases' からドメイン名のフェースを探すためのサブディ
     レクトリーのリストです。ディフォルトは `("domains")' です。このリ
     ストに `"unknown"' を追加しておきたくなる人もいるでしょう。

`gnus-picon-file-types'
     Picon のファイル名として試してみる順に並べられた拡張子のリストです。
     ディフォルトは `("xpm" "gif" "xbm")' から Emacs に組み込まれていな
     いものを除外したものです。



File: gnus-ja.info, Node: XVarious, Prev: Picons, Up: Image Enhancements

さまざまな XEmacs 変数
----------------------

`gnus-xmas-glyph-directory'
     これは Gnus が絵を探す場所です。Gnus は通常このディレクトリーを自
     動検出しますが、もし標準的でないディレクトリー構造を持っている場合
     は、これを手動で設定することができます。

`gnus-xmas-modeline-glyph'
     すべての Gnus のモード行で表示される画像。これはディフォルトではち
     いさなヌー (gnu) の頭です。


ツールバー
..........

`gnus-use-toolbar'
     この変数はツールバーを表示する位置を指定します。`nil' だったらツー
     ルバーを表示しません。非-`nil' の場合、それは `default', `top',
     `bottom', `right' または `left' の中の一つのシンボルでなければなり
     ません。`default' だったらディフォルトのツールバーを使い、他のもの
     だったらその名前が示す場所にツールバーを表示します。ディフォルトは
     `default' です。

`gnus-toolbar-thickness'
     高さと幅のコンス (cons) で、ツールバーの厚さを指定します。高さは上
     辺か下辺に表示するツールバーで使われ、幅は右端か左端に表示するツー
     ルバーで使われます。ディフォルトはディフォルトのツールバーの値です。

`gnus-group-toolbar'
     グループバッファー内のツールバーです。

`gnus-summary-toolbar'
     概略バッファー内のツールバーです。

`gnus-summary-mail-toolbar'
     メールグループの概略バッファー内のツールバーです。




File: gnus-ja.info, Node: Fuzzy Matching, Next: Thwarting Email Spam, Prev: Image Enhancements, Up: Various

ファジーな一致
==============

Gnus はスコア付け、スレッドの形成、およびスレッドの比較などを行なうとき
に、`Subject' 行のファジーな合致 "fuzzy matching" を提供します。

正規表現による合致とは違って、ファジーな合致はとってもファジーです。あ
まりにもファジーすぎて、何がファジーであるかという定義さえ無いし、実装
も何度も変更されています。

基本的に、これは比較の前に行から邪魔物を取り除こうとします。`Re: '、挿
入句の印、および空白文字等々が文字列から除去され、その結果を比較します。
これはほとんどの場合妥当な結果をもたらします--たとえニュースリーダーの
仮面をかぶった文字列切り刻み機で生成された文字列が差し出されても、です。



File: gnus-ja.info, Node: Thwarting Email Spam, Next: Spam Package, Prev: Fuzzy Matching, Up: Various

spam メールの裏をかく
=====================

ここ最近の USENET では、宣伝のハゲタカどもが彼らの詐欺や製品を押し付け
るための電子メールアドレスを探そうとして、気違いのようにニュース上をう
ろついて grep しまくっています。これに対する反動として、多くの人々が無
意味なアドレスを `From' 行に入れはじめるようになってしまいました。私は
これは逆効果を招くと思います--あなたが書いたことに対する返信として人々
が正当なメールを送ることを面倒にさせるだけでなく、誰が書いたものなのか
を分かりづらくします。こんな書き換えは、結局は押し付け宣伝メールそれ自
身よりも大きな脅威となるかもしれません。

私にとっての spam メールの最大の問題は、嘘の口実で入ってくるからです。
私が `g' を押すと、Gnus は十通の新着メールがありますと陽気に私に教えて
くれます。私は「おおっ、わーい! 僕って幸せ!」と言ってメールグループを選
択します。しかしそこには、二つのネズミ講と、七つの広告 (「最新! 奇跡の
育毛トニック、ふさふさでつやつやの髪をあなたのつま先(※)に!」) と、悔い
改め神を信じよ、という一つのメールがあるだけなのです。

これは迷惑千万です。あなたがそれに関してできることがあります。

     訳注※: ホビット族用の育毛トニック。たぶん。

* Menu:

* The problem of spam::         背景、そして解決
* Anti-Spam Basics::            たくさんの spam を減らす簡単な方法
* SpamAssassin::                Spam 対策ツールの使い方
* Hashcash::                    CPU 時間を費やして spam 退治する



File: gnus-ja.info, Node: The problem of spam, Next: Anti-Spam Basics, Prev: Thwarting Email Spam, Up: Thwarting Email Spam

Spam の問題
-----------

初めに spam の背景から。

あなたが電子メールを使っているならば、spam (専門用語としては Unsolicited
Commercial E-mail--望まれない商用電子メール--の頭文
字 UCE) のことはよく知っているでしょう。簡単に言えばそれは紙の
メールに比べて電子メールの配送がとても安くつくために存在し、非常に小さな
割合の人々が UCE に応答するだけで広告主に利益をもたらすのです。皮肉なこ
とに最も一般的な spam の一つは、さらに spam を助長するための電子メールア
ドレスのデータベースを提供します。Spam の送信者はふつ
う *spammers* と呼ばれますが、*vermin*、*scum*、
*sociopaths* および *morons* のような用語もよく使われています。

Spam は種々さまざまな出どころからやって来ます。有用なメッセージを捨てず
にすべての spam を単に始末することは不可能です。良い例は TMDA (訳注: 送
信する度にユニークなアドレスを使う) システムで、それは、あなたが知らな
い送信者からの電子メールがあなたのもとに届くことができる前に、彼らに対
して彼ら自身が正当な送信者であることの確認を求めます。正当な出どころか
らの電子メールが、それらの出どころが TMDA システムを通して確認できない、
または行なわれない場合は捨てられてしまうかもしれないというマイナス面は、
TMDA の技術的な側面に立ち入らなくても明白です。もう一つの TMDA の問題は、
電子メールの配送と処理への基本的な理解を、利用者に求めていることです。

Spam の除去 (filtering) への最も単純な取り組みは、メールサーバーで、あ
るいは入ってきたメールを分類するときに濾過すること (filtering) です。毎
日 `random-address@vmadmin.com' から 200通の spam メッセージを受け取る
のならば、`vmadmin.com' を阻止すれば良いでしょう。「バイアグラ」に関す
るメッセージを 200通受け取るのならば、「バイアグラ」を含むすべてのメッ
セージを捨ててしまえば良いでしょう。例えばブルガリアからたくさんの
spam がやって来るのならば、ブルガリアの IP から来るすべてのメールを濾過
すれば良いでしょう。

これは、残念ながら正当な電子メールを捨てるためのすぐれた方法です。あな
たに連絡しようとする国 (ブルガリア、ノルウェー、ナイジェリア、中国、等)
全体、または大陸 (アジア、アフリカ、ヨーロッパ、等) さえも封じ込めてし
まう危険は明らかなので、あなたに選択権があるのならば、そんなことはしな
いでください。

もう一つの例として、とても示唆に富んで有益な RISKS ダイジェストは、それ
が spam メッセージと共通の語を *含んで* いるために、熱心すぎるメール濾
過器によって阻止されてしまいます。それでもなお孤立した環境では、注意深
く使うことによって直接の濾過は有益になり得ます。

もう一つの電子メール濾過への取り組みは分散型 spam 処理で、DCC (訳注:
Distributed Checksum
Clearinghouse---`http://www.rhyolite.com/anti-spam/dcc/') がそのような
システムを導入しています。本質的には、世界中の N 個のシステムが、ガーナ、
エストニアあるいはカリフォルニアにあるマシン X が spam 電子メールを送出
していることを認めたら、それら N 個のシステムは X または X からやって来
た spam メールをデータベースに記入します。Spam 検出の基準は一様ではあり
ません。それは送られたメッセージの数やメッセージの内容などであるかもし
れません。メッセージが spam かどうかを分散処理システムの利用者が知りた
い場合、彼はそれらの N 個のシステムのうちの一つを調べます。

分散型 spam 処理は一度にたくさんのメッセージを送る spammers と非常によ
く戦ってくれますが、それには利用者がかなり複雑なチェックを設定すること
が必要です。商用とフリーな分散型 spam 処理システムがあります。分散型
spam 処理は、それ自体の危険もはらんでいます。例えば、正当な送信者が
spam を送ったかどで非難され、彼らのウェブサイトやメーリングリストがその
事件のために暫くの間閉鎖されてしまう、とか。

Spam の濾過への統計的な取り組みもまた普及しています。それは過去の spam
メッセージの統計的な分析に基づいています。通常その分析は、おそらく単語
の対か三つの単語の組合せの合成による、単語の出現頻度の単純な計数です。
Spam の統計分析はほとんどの場合にとてもよく働くのですが、時として正当な
電子メールを spam として分類してしまうことがあります。分析には時間がか
かります。すべてのメッセージを分析しなければなりません。そして利用者は
spam を分析するためのデータベースを蓄えなければなりません。サーバーでの
統計分析は人気を得ています。これには、利用者は単にメールを読めば良いと
いう長所と、しかしサーバーにそれが過ってメールを分類したことを伝えるの
が困難だという短所があります。

余人の言を待たずとも、spam との戦いは楽ではありません。ママからの電子メー
ルとバイアグラ広告を区別する魔法のスイッチはありません。人々は非-spam
と spam を区別するのに手を焼いているというのに。それは、spammers が懸命
にそれらをママだと思わせようとしているのが本質だからです。Spamming は、
世界が彼らに恩義があると思っている人々の一団からの、腹立たしく、無責任
で、ばかげた行為です。以下の各章が spam なる疫病との戦いの助けになるこ
とを望みます。



File: gnus-ja.info, Node: Anti-Spam Basics, Next: SpamAssassin, Prev: The problem of spam, Up: Thwarting Email Spam

Spam 退治の基礎
---------------

Spam に対処する一つの方法は、Gnus にすべての spam を `spam' メールグルー
プに分離させてしまうことです (*Note Splitting Mail::)。

最初に、あなたに連絡することができる正しいメールアドレスを一つ選び、そ
れをすべてのあなたのニュース記事の `From' ヘッダーに入れましょう。(ここ
では `larsi@trym.ifi.uio.no' を選びましたが、`larsi+usenet@ifi.uio.no'
の形式のたくさんのアドレスの方が良い選択です。あなたのサイトの
sendmail の設定がメールアドレスのローカル部としてどんなキーワードを受け
付けるかは、あなたのサイトのシステム管理者に聞いてください。)

     (setq message-default-news-headers
           "From: Lars Magne Ingebrigtsen <larsi@trym.ifi.uio.no>\n")

そして `nnmail-split-fancy' に以下の分割規則を入てください (*Note
Fancy Mail Splitting::)。

     (...
      (to "larsi@trym.ifi.uio.no"
          (| ("subject" "re:.*" "misc")
             ("references" ".*@.*" "misc")
             "spam"))
      ...)

この意味は、このアドレスに届いたすべてのメールが疑わしいが、`Re:' で始
まる `Subject' が付いているか、`References' ヘッダーが付いていればおそ
らく OK だろう、ということです。残りはすべて `spam' グループに行きます。
(このアイデアはおそらく Tim Pierce 氏によるものです。)

これに加えて、多くのメール spam 屋は、あなたのところの SMTP サーバーと
直接話して、`To' ヘッダーにあなたのメールアドレスが明示されないようにし
ます。なんでそんなことをするのかはわかりませんが--もしかしたら、この裏
をかく機構の裏をかくためかな? どちらにしても、対処は簡単なことです--特
級分割規則を以下のように終端させることによって、あなた宛てでないものを
全部 `spam' グループに入れるだけです:

     (
      ...
      (to "larsi" "misc")
      "spam")

私の経験では、これで実質的にはすべてが正しいグループに分類されます。ま
あ、それでもときどき `spam' グループをチェックして、正しいメールがある
かチェックしなくてはいけませんけどね。あなたが自分が良いネットワーク市
民であると思っているなら、それぞれの押し付け宣伝メールの関係当局に苦情
を送り付けることさえもできます--暇なときにでもね。

これで私のところでは動いています。これでみんなは簡単な方法で私に連絡を
取ることができ (普通に `r' を押すだけでできる)、私は spam に煩わされる
ことはまったくありません。お互いに有利な状況です。私に言わせれば、
`From' ヘッダーを偽造して存在しないドメインに送らせるのはすごく良くない
です。

     訳注: 以上の文章は 1997年4月に書かれました。

この手法には注意してください。Spammers はそれに気付いています。



File: gnus-ja.info, Node: SpamAssassin, Next: Hashcash, Prev: Anti-Spam Basics, Up: Thwarting Email Spam

SpamAssassin, Vipul's Razor, DCC, etc
-------------------------------------

Spam を避けるための前章のヒントが十分だった日々は過ぎ去りました。今では
受け取ったたくさんの spam を減らすという触れ込みの多くの道具があります。
この章は、新しい道具が古いものに取って代わって行くにつれてすぐに時代遅
れになってしまうでしょうが、幸いなことにこれらのほとんどの道具は類似の
インターフェースを持っているようです。この章は例として SpamAssassin を
使っていますが、他のほとんどの道具にも簡単に適合するはずです。

この章は `spam.el' パッケージとは関係無いことに注意してください。それは
次の章で論じられます。すべての `spam.el' の機能に関心が無いのならば、こ
れらの単純なレシピで間に合わせることができます。

もしあなたが使う道具がメールサーバーにインストールされていないならば、
あなた自身がそれを呼び出す必要があります。以下に `:postscript' メールソー
ス指示子 (*Note Mail Source Specifiers::) を使う場合の考え方を示します。

     (setq mail-sources
           '((file :prescript "formail -bs spamassassin < /var/mail/%u")
             (pop :user "jrl"
                  :server "pophost"
                  :postscript
                  "mv %t /tmp/foo; formail -bs spamc < /tmp/foo > %t")))

いったんメールを受けるスプールをどうにかして処理する、例えばそのメール
に spam であることを表示するヘッダーを含めるようにすれば、それをふるい
落とす準備は完了です。使うのは普通の分割方式 (*Note Splitting Mail::)
です:

     (setq nnmail-split-methods '(("spam"  "^X-Spam-Flag: YES")
                                  ...))

または特級分割方式 (*Note Fancy Mail Splitting::) です:

     (setq nnmail-split-methods 'nnmail-split-fancy
           nnmail-split-fancy '(| ("X-Spam-Flag" "YES" "spam")
                                  ...))

いくらかの人たちは `:prescript' を使ってメールをいろんなプログラムにパ
イプすることを嫌うかもしれません (もし何かのプログラムにバグがあったら、
すべてのメールを失ってしまうかもしれません)。あなたがそれらの一人ならば、
別の解は分割するときに外部の道具を呼ぶことです。特級分割方式の例です:

     (setq nnmail-split-fancy '(| (: kevin-spamassassin)
                                  ...))
     (defun kevin-spamassassin ()
       (save-excursion
         (widen)
         (if (eq 1 (call-process-region (point-min) (point-max)
                                        "spamc" nil nil nil "-c"))
             "spam")))

Nnimap バックエンドの場合、ディフォルトでは記事のボディーがダウンロード
されないことに注意してください。それをするためには
`nnimap-split-download-body' を `t' に設定する必要があります (*Note
Splitting in IMAP::)。

以上がこれに関することです。ある種の spam はどうしても素通りしてしまい
がちなので、spam を読むはめになったときに呼ぶための気の利いた関数が必要
でしょう。これがその気の利いた関数です:

     (defun my-gnus-raze-spam ()
       "SPAM の処理を Vipul の Razor に委ねてから、
     それに期限切れ消去可能の印を付けます。"
       (interactive)
       (gnus-summary-save-in-pipe "razor-report -f -d" t)
       (gnus-summary-mark-as-expirable 1))



File: gnus-ja.info, Node: Hashcash, Prev: SpamAssassin, Up: Thwarting Email Spam

Hashcash
--------

Spam と戦うための斬新な技法は、いくらか負担にはなるが明らかに独特なこと
を、送信するメッセージに対して送信者が行なうことを求めることです。これ
はインターネット標準の一部ではないので、世界中のすべての人がこの技法を
使うことは当てにできないという明らかな欠点がありますが、小規模な集団で
は役に立つでしょう。

前章の道具類は実際にうまく働きますが、それらは新しい形式の spam が現れ
るたびにしょっちゅう更新かつ整備されることによってのみ動作します。この
ことは、小さなパーセンテージの spam がいつも素通りしてしまうことを意味
します。それはまた、どこかでだれかがそれらの道具を更新するために、たく
さんの spam を読まなければならないことをも意味します。Hashcash はそれを
回避しますが、代わりにあなたが電子メールで連絡するすべての人たちに、な
るべくその仕組みをサポートしてもらいたいのです。あなたは実際的
(pragmatic) か独断的 (dogmatic) かの観点で、二つの取り組みを考えること
ができます。それらのやり方には、それら自体の利点もあれば不利な点もあり
ますが、現実の世の中ではしばしばあるように、それらを連係させたものはど
ちらか一方より強力です。

「いくらか負担にはなる」とは CPU 時間を消費することで、もっと具体的には
一定数のビットまでハッシュの衝突 (hash collision) を計算することです。
その結果としての hashcash クッキーは `X-Hashcash:' ヘッダーに挿入されま
す。もっと詳しいこと、そしてこの機能を使うためにインストールする必要が
ある外部アプリケーションの `hashcash' については
`http://www.hashcash.org/' を参照してください。さらなる情報が
`http://www.camram.org/' で見つかるでしょう。

送信するメッセージのそれぞれについて hashcash を生成させようと思うなら、
以下のように `message-generate-hashcash' (*Note メールヘッダー:
(message-ja)Mail Headers.) をカスタマイズしてください:

     (setq message-generate-hashcash t)

いくつかの追加の変数の設定もしなければなりません:

`hashcash-default-payment'
     この変数はハッシュの衝突を成すディフォルトのビット数を示します。ディ
     フォルトは 20 です。提唱されている有効な値は 17 から 29 までの数で
     す。

`hashcash-payment-alist'
     何人かの受取人は、あなたにディフォルトより多くの CPU 時間を費やす
     ことを要求するかもしれません。この変数は `(ADDR AMOUNT)' の形式の
     要素のリストで、ADDR は受取人 (メールアドレスかニュースグループ)、
     AMOUNT は衝突で必要とされるビット数です。これはまた `(ADDR STRING
     AMOUNT)' の要素を持つことも可能で、STRING は文字列 (通常はメールア
     ドレスかニュースグループ名) として使われます。

`hashcash-path'
     `hashcash' バイナリーがインストールされている場所です。この変数は
     `executable-find' によって自動的に設定されるはずですが、それが
     `nil' だった (ありがちなのは `hashcash' バイナリーが実行 path 中に
     無い) 場合は、hashcash payments をチェックするときに警告され、
     hashcash payments を生成するときはエラーになるでしょう。

Gnus は hashcash クッキーを認証することができますが、手でカスタマイズし
たメール濾過スクリプトで行なうこともできます。メッセージ中の hashcash
クッキーを認証するには、`hashcash.el' ライブラリーの
`mail-check-payment' 関数を使ってください。入ってきたメールの hashcash
クッキーを確認し、それによってメールを濾過するために、
`spam-use-hashcash' バックエンドで `spam.el' を使うこともできます
(*Note Anti-spam Hashcash Payments::)。



File: gnus-ja.info, Node: Spam Package, Next: The Gnus Registry, Prev: Thwarting Email Spam, Up: Various

Spam パッケージ
===============

Spam パッケージは spam を検出して濾過するために集結された機構を Gnus に
提供します。それは新着メールを濾過し、spam か ham かに応じてメッセージ
を処理します。("Ham" は spam ではないメッセージを示すために、このマニュ
アルを通して使われる名前です。)

* Menu:

* Spam Package Introduction::
* Filtering Incoming Mail::
* Detecting Spam in Groups::
* Spam and Ham Processors::
* Spam Package Configuration Examples::
* Spam Back Ends::
* Extending the Spam package::
* Spam Statistics Package::



File: gnus-ja.info, Node: Spam Package Introduction, Next: Filtering Incoming Mail, Prev: Spam Package, Up: Spam Package

Spam パッケージ序説
-------------------

Spam パッケージがどのように働くかを理解するために、必ずこの章を読んでく
ださい。読み飛ばし、速読、または斜め読みしてはいけません。

`spam.el' シーケンスのイベントの章をちゃんと読みましょう。
*Note Extending the Spam package:: を参照してください。

Spam パッケージを使うには、*必ず* 最初に `spam-initialize' 関数を実行さ
せてください:

     (spam-initialize)

これは `spam.el' を自動読み込み (autoload) して、Spam パッケージにその
仕事をさせるために必要な諸機能が使えるようにします。Spam パッケージを利
用するために、いくつかのグループパラメーターと変数を設定しなければなり
ません。それらは以下で説明します。Spam パッケージを制御するすべての変数
は、`spam' カスタマイズグループで見つかるでしょう。

Spam パッケージと Gnus には二つの「接点」があります。それは新着メールが
spam かどうかを検査するときと、グループを抜け出るときです。

新着メールが spam かどうかの検査は、やって来たメールを分割するときか、
グループに入るときのどちらかで行なわれます。

最初のやり方、つまりやって来たメールを分割するときに検査をするのは、新
着メールが単一のスプールファイルに入れられる `nnml' や `nnimap' のよう
なメールバックエンドに適しています。Spam パッケージはやって来たメールを
処理し、spam と見なすメールを“spam”用に指定したグループに送ります。
*Note Filtering Incoming Mail::.

二番目のやり方は、`nntp' のような (やって来たメールのためのスプールがな
い) バックエンドや、やって来たメールの分割をサーバーが担当するバックエ
ンドに適しています。この場合 Gnus のグループに入ると、そのグループにあ
るまだ読まれたことが無い、または未読になっているメッセージに対して
spam かどうかの検査が行なわれます。検出された spam メッセージには spam
印が付けられます。*Note Detecting Spam in Groups::.

どちらの場合でも、spam メッセージの検出にどの方法を使うかを Spam パッケー
ジに指示しなければなりません。選択肢として複数の方法、と言うか「spam バッ
クエンド」があります (Gnus のバックエンドと混同しないでください): spam
の「ブラックリスト」と「ホワイトリスト」、辞書に基づいた濾過器、などで
す。*Note Spam Back Ends::.

Gnus の概略バッファーで spam だと同定されたメッセージには、常に `$' 印
が付きます。

Spam パッケージは Gnus のグループを三つに分類します: ham グループ、
spam グループ、および分類されないグループです。講読している各グループが
ham グループと spam グループのどちらなのかを、`spam-contents' グループ
パラメーターを使って指定してください (*Note Group Parameters::)。Spam
グループには特別な属性があり、spam グループに入ると、まだ読まれたことが
無いすべてのメッセージに spam 印が付きます。そのため、spam グループに分
割されたメールには自動的に spam 印が付きます。

Spam メッセージを同定することは、Spam パッケージの仕事の半分に過ぎませ
ん。もう半分は、グループを抜け出るときに実行します。このとき Spam パッ
ケージは複数のことを行ないます。

最初に spam か ham かに応じて記事を処理するために "spam and ham
processors" を呼び出します。各々の spam バックエンドと連係している
spam と ham のプロセッサーの対があって、プロセッサーが行なうことはバッ
クエンドに依存しています。現在のところ spam と ham プロセッサーの主な役
割は、辞書に基づいた spam 濾過のためのものです: それらは将来の spam を
検出する性能を改良するために、グループにあるメッセージの内容を濾過器の
辞書に追加します。`spam-process' グループパラメーターで、どの spam プロ
セッサーを使うかを指定します。*Note Spam and Ham Processors::.

Spam 濾過器が spam メッセージに印を付けそこなったら、グループを抜け出る
ときにそのメッセージが spam として処理されるようにするために、あなた自
身がそれに印を付けても良いでしょう。

`M-d'
`M s x'
`S x'
     現在の記事に spam 印を付けて、`$' 印を表示します
     (`gnus-summary-mark-as-spam')。

同様に、記事に誤って付けられた spam 印を消すこともできます。
*Note Setting Marks::.

普通 ham ではないグループで見つかった ham メッセージは ham として処理さ
れません。つまり、さらに処理されるために、それは ham グループに移動させ
るべきであるということです (以下を見てください)。しかし
`spam-process-ham-in-spam-groups' および
`spam-process-ham-in-nonham-groups' を設定することによって、それらの記
事を ham として処理することを強制することもできます。

グループを抜け出るときに、二番目に Spam パッケージが行なうことは、ham
記事を spam グループの外へ、spam 記事を ham グループの外へ移動させるこ
とです。Spam グループの ham 記事は、変数
`gnus-ham-process-destinations' またはグループパラメーター
`ham-process-destination' で指定されたグループに移動させられます。Ham
グループの spam 記事は、変数 `gnus-spam-process-destinations' またはグ
ループパラメーター `spam-process-destination' で指定されたグループに移
動させられます。これらの変数が設定されていない場合、記事はそれらの現在
のグループに残されます。記事を移動させることができない場合 (例えば
NNTP のような読み出し専用のバックエンドでは)、代わりに記事がコピーされ
ます。

記事が別のグループに移動させられると、その新しいグループを訪れたときに、
記事は再び処理されます。普通これは問題になりませんが、それぞれの記事が
一回だけ処理されるようにしたいならば、`gnus-registry.el' パッケージを読
み込んで、変数 `spam-log-to-registry' を `t' に設定してください。*Note
Spam Package Configuration Examples::.

普通 spam グループは `gnus-spam-process-destinations' を無視します。し
かし `spam-move-spam-nonspam-groups-only' を `nil' に設定すると、
`spam-process-destination' パラメーターに従って spam は spam グループの
外へ移動させられます。

最後に Spam パッケージが行なうことは、spam 記事に期限切れ消去の印を付け
ることです。普通それは正しい行ないです。

これらのすべてがわけがわからなくても、心配は要りません (訳注: でも訳文
が正確ではないかもしれないので、変だと思ったら原文を見てね :-p)。すぐに
それは神経インターフェース上に Lisp で小話を書くように自然なことになり
ます... え゛ごめん、それにはまだ 50年早いですね。ただ私たちを信頼してく
ださい。それは捨てたものではありません。



File: gnus-ja.info, Node: Filtering Incoming Mail, Next: Detecting Spam in Groups, Prev: Spam Package Introduction, Up: Spam Package

やって来るメールの濾過
----------------------

やって来るメールを濾過するために Spam パッケージを使うには、最初に特級
メール分割を使うための設定を行なってください。*Note Fancy Mail
Splitting::.  Spam パッケージは、特級分割のための変数 (メールバックエン
ドによるが `nnmail-split-fancy' または `nnimap-split-fancy') に追加する
ことができる、特別な分割関数を定義します:

     (: spam-split)

`spam-split' 関数は、あなたが選んだ spam バックエンド (一つまたは複数)
に応じて、やって来たメールを走査します。ディフォルトでは spam グループ
は `spam' という名前のグループですが、`spam-split-group' をカスタマイズ
することによって変更することができます。`spam-split-group' の値に Gnus
のバックエンド名やサーバー名を含めないでください。例えば `your-server'
という `nnimap' のサーバーでは、`spam' という名前は
`nnimap+your-server:spam' を意味します。したがって
`nnimap+server:spam' という値は誤りで、それは
`nnimap+your-server:nnimap+server:spam' というグループを指すことになっ
てしまいます。

`spam-split' はいかなる方法によってもメッセージの内容を変更しません。

IMAP の利用者への注意: spam バックエンドとし
て `spam-check-bogofilter'、`spam-check-ifile' およ
び `spam-check-stat' を使う場合は、さらに変
数 `nnimap-split-download-body' を `t' に設定しなければなりま
せん。これらの spam バックエンドがメッセージの本文を「走査」(scan) する
ことができれば、非常に有用です。ディフォルトでは nnimap バックエンドはメッ
セージヘッダーだけを取り込みますが、`nnimap-split-download-body' で
メッセージの本文も取り込むことを指示することができます。それ
は IMAP を遅くしてしまうので、ディフォルトでは設定されません。
そして、利用者に代わってそれを行なうことは、適切な判断ではありません。
*Note Splitting in IMAP::.

`spam-use-*' 変数を使って、`spam-split' が使う一つ以上の spam バックエ
ンドを設定しなければなりません。*Note Spam Back Ends::.  通常
`spam-use-*' は、あなたがこのようにして設定したすべての spam バックエン
ドを、単に使います。しかし、それらのいくつかだけを使うように、
`spam-split' に指示することもできます。それがなぜ役に立つのかって?
Spam バックエンドとして `spam-use-regex-headers' と
`spam-use-blackholes' を使っていて、かつ以下の分割規則を使っているとす
ると:

      nnimap-split-fancy '(|
                           (any "ding" "ding")
                           (: spam-split)
                           ;; ディフォルトのメールボックス。
                           "mail")

問題は ding 宛てのメッセージをすべて ding フォルダーに入れようとしてい
ることです。でもそれは、ding メーリングリスト宛てに送られた明らかな
spam (例えば SpamAssassin と `spam-use-regex-headers' によって検出され
る spam) を許してしまうでしょう。一方、いくつかの ding 宛てのメッセージ
はブラックホールリストに載っているメールサーバーからやって来るので、
ding の規則より前に `spam-split' を発動することができません。

解決策は SpamAssassin ヘッダーに ding の規則を置き換えさせ、ding の規則
の後で別の `spam-split' の規則 (二つ目の正規表現によるヘッダーの検査を
含む) を作動させることです。これはパラメーターを `spam-split' に渡すこ
とによって行なわれます:

     nnimap-split-fancy
           '(|
             ;; `spam-use-regex-headers' で検出された
             ;; spam は `regex-spam' へ。
             (: spam-split "regex-spam" 'spam-use-regex-headers)
             (any "ding" "ding")
             ;; spam-split で検出された他のすべての spam は
             ;; `spam-split-group' へ。
             (: spam-split)
             ;; ディフォルトのメールボックス。
             "mail")

これは、あなたの特別な必要に応じた特定の `spam-split' 検査を起動し、そ
れらの検査の結果で特定の spam グループを指し示します。すべてのメールに
対して、すべての spam 検査を行なう必要はありません。これが良いもう一つ
の理由は、分割規則を設定してあるメーリングリスト宛てのメッセージに対し
て、資源集約的なブラックホール・チェックを実行する必要がないということ
です。さらに、nnmail の分割のために nnimap のものとは異なる spam 検査の
やり方を設定することもできるでしょう。気が狂うー。

使用するどんな spam バックエンドにも `spam-use-*' 変数を設定するべきで
す。そのわけは、`spam.el' を読み込むときに、どんな `spam-use-xyz' 変数
を設定したかによって、何らかの条件付きの読み込みが行なわれるからです。
*Note Spam Back Ends::.



File: gnus-ja.info, Node: Detecting Spam in Groups, Next: Spam and Ham Processors, Prev: Filtering Incoming Mail, Up: Spam Package

グループにおける spam の検出
----------------------------

グループに入ったときに spam を検出するためには、そのグループの
`spam-autodetect' と `spam-autodetect-methods' グループパラメーターを設
定してください。これらは通常とおり `G c' か `G p' で行なうことができま
す (*Note Group Parameters::)。

使用するどんな spam バックエンドにも `spam-use-*' 変数を設定するべきで
す。そのわけは、`spam.el' を読み込むときに、どんな `spam-use-xyz' 変数
を設定したかによって、何らかの条件付きの読み込みが行なわれるからです。

ディフォルトでは、まだ読まれたことがない記事だけが spam かどうかを検査
されます。`spam-autodetect-recheck-messages' を `t' に設定することによっ
て、グループにあるすべての記事の再検査を Gnus に強制することができます。

Spam の検査に `spam-autodetect' の手段を使う場合は、異なるグループで違
う spam 検出手段を指定することができます。例えば `ding' グループは自動
検出の手段として `spam-use-BBDB' を持つことができる一方で、`suspect' グ
ループでは `spam-use-blacklist' および `spam-use-bogofilter' の手段を使
うことができます。`spam-split' と違って検査の *順序* を制御できませんが、
これはたぶん重要ではありません。



File: gnus-ja.info, Node: Spam and Ham Processors, Next: Spam Package Configuration Examples, Prev: Detecting Spam in Groups, Up: Spam Package

Spam と Ham プロセッサー
------------------------

Spam と ham プロセッサーには、グループバッファを抜け出るときに行なう動
作に関して特別な性質があります。Spam プロセッサーは spam メッセージに作
用し、ham プロセッサーは ham メッセージに作用するということです。現在の
ところ、これらのプロセッサーの主な役割は、Bogofilter (*Note
Bogofilter::) や Spam 統計パッケージのような辞書に基づいた spam バック
エンドの辞書を更新することです (*Note Spam Statistics Filtering::)。

それぞれのグループに適用される spam と ham プロセッサーは、そのグループ
の `spam-process' グループパラメーターで決定されます。このグループパラ
メーターが定義されていないと、それらは変数
`gnus-spam-process-newsgroups' によって決められます。

Gnus はあなたが受け取った spam から学びます。あなたは一つ以上の spam グ
ループに spam 記事を集めて、変数 `spam-junk-mailgroups' を適切に設定も
しくはカスタマイズしなければなりません。また、spam を含めるグループを、
そのグループパラメーター `spam-contents' を
`gnus-group-spam-classification-spam' に設定するか、またはそれに対応す
る変数 `gnus-spam-newsgroup-contents' をカスタマイズすることによって宣
言することができます。`spam-contents' グループパラメーターと
`gnus-spam-newsgroup-contents' 変数は、それらの種別を
`gnus-group-spam-classification-ham' に設定することによって、*ham* グルー
プであることを宣言するために使うこともできます。グループが
`spam-junk-mailgroups', `spam-contents' または
`gnus-spam-newsgroup-contents' であることを示す分類が行なわれていないと、
それらは *未分類* であると解釈されます。すべてのグループはディフォルト
では未分類です。

Spam グループでは、ディフォルトですべてのメッセージが spam であると解釈
されます: そのグループに入ると、それらに `$' 印 (`gnus-spam-mark') が付
きます。あるメッセージを見て、いったんそれに spam の印を付けても、後で
取り消せば、その後そのグループに入ったときに、それには spam 印は付きま
せん。`spam-mark-only-unseen-as-spam' パラメーターを `nil' にすれば、そ
ういう動作をやめさせる、つまりすべての未読メッセージに spam 印が付くよ
うにすることができます。そのグループの概略バッファーにいるときに、やっ
ぱり spam ではなかったとわかった記事があったら、それらのすべてから `$'
印を消さなければなりません。`$' 印を消すには `M-u' でその記事を「未読」
にするか、あるいは `d' を使って spam ではないものとして読んだことを宣言
すれば良いでしょう。グループを抜けるとき、すべての spam 印 (`$') が付い
た記事は spam プロセッサーに送られ、それらを spam の標本として学習しま
す。

メッセージは他のいろいろな方法によっても消去されるかもしれないし、
`ham-marks' グループパラメーターが無効にされなければ、`R' 印と `r' 印、
および `X' 印と `K' は、`Y' 印と同様に、すべて spam では無い記事に関連
付けられるものと解釈されます (それぞれ `R' はディフォルトの既読の印、
`r' 明示的な消去の印、`X' は自動的な削除の印、`K' は明示的な削除の印、
そして `Y' は低いスコアのため印です)。この仮定は、特に真性の spam を検
出するために消去 (kill) ファイルかスコアファイルを使っている場合は、間
違いかもしれません。そうであれば `ham-marks' グループパラメーターを調整
するべきです。

 -- Variable: ham-marks
     このグループまたはトピックパラメーターを ham であると解釈したい印
     のリストに設定することができます。ディフォルトでは、消去
     (deleted)、既読 (read)、削除 (killed)、kill ファイルにあるもの
     (kill-filed) および低いスコア (low-score、既読だけれども spam では
     ないと考える) 印のリストです。Ham 印のリストに可視 (tick) 印を含め
     ることが役立つこともあります。未読印を ham 印にすることは、通常そ
     れが分類されていないことを表すので、勧められません。しかし、あなた
     がそれを行なうことはできるし、私たちに不満はありません。

 -- Variable: spam-marks
     このグループまたはトピックパラメーターを spam であると解釈したい印
     のリストに設定することができます。ディフォルトでは spam 印だけを持
     つリストです。それを変更することは勧めませんが、本当にそうしたいの
     ならご勝手に。

グループを抜けるときに (そのグループが *何* であっても)、その
`spam-contents' の分類にかかわらず、spam 印が付いているすべての記事は
spam プロセッサーに送られ、それらを spam の標本として学習します。意図的
にたくさんの消去を行なうと、たまにそれは見ていない `K' 印が付いた記事群
で終わるかもしれません。そしてそれらは偶然に spam を含んでいるかもしれ
ません。最も良いのは、本当の spam に `$' が付いていて、他に何も印が無い
ことを確かめることです。

*Spam* グループを抜けるときに、spam 印が付いているすべての記事には
spam プロセッサーで処理した後で期限切れ消去の印が付けられます。これは
*未分類* または *ham* グループに対しては行なわれません。さらに spam グ
ループにあるどの *ham* 記事も、`ham-process-destination' グループパラメー
ターが示す場所か `gnus-ham-process-destinations' 変数の中で合致する場所
のどちらかに移されます。後者はグループ名に合致する正規表現のリストです
(`M-x customize-variable RET gnus-ham-process-destinations' によってこ
の変数をカスタマイズするのが最も簡単です)。変数を手でカスタマイズする方
が好きな人のために言っておくと、それぞれのグループ名のリストは普通の
Lisp の list です。`ham-process-destination' パラメーターが設定されてい
ないと、ham 記事は移動させられません。
`spam-mark-ham-unread-before-move-from-spam-group' パラメーターが設定さ
れていると、ham 記事には移動させられる前に未読の印が付けられます。

例えば NNTP のような読み込み専用バックエンドであるために ham が移動でき
ない場合、それはコピーされます。

グループごとに、または正規表現に合致するグループごとに、複数の移動先を
指定できることに注目してください!  これによって ham 記事を正規のメール
グループと *ham トレーニング* グループに送ることができます。

*Ham* グループを抜けるときに、ham 印が付いているすべての記事は ham プロ
セッサーに送られ、それらを spam ではない標本として学習します。

変数 `spam-process-ham-in-spam-groups' はディフォルトでは `nil' です。
Spam グループで見つかった ham がプロセッサーに送られるようにしたい場合
は `t' にしてください。通常これは行なわれません。その代わり、あなたが自
分で ham 記事を ham グループに送って、そこで処理することが想定されてい
ます。

変数 `spam-process-ham-in-nonham-groups' はディフォルトでは `nil' です。
Ham ではない (spam または未分類の) グループで見つかった ham がプロセッ
サーに送られるようにしたい場合は `t' にしてください。通常これは行なわれ
ません。その代わり、あなたが自分で ham 記事を ham グループに送って、そ
こで処理することが想定されています。

*Ham* または *未分類* グループを抜けるときに、すべての *spam* 記事は、
`spam-process-destination' グループパラメーターが示す場所か
`gnus-spam-process-destinations' 変数の中で合致する場所のどちらかに移さ
れます。後者はグループ名に合致する正規表現のリストです (`M-x
customize-variable RET gnus-spam-process-destinations' によってこの変数
をカスタマイズするのが最も簡単です)。変数を手でカスタマイズする方が好き
な人のために言っておくと、それぞれのグループ名のリストは普通の Lisp の
list です。`spam-process-destination' パラメーターが設定されていないと、
spam 記事は単に期限切れ消去されます。グループ名は完全形であること、すな
わちグループバッファーでグループ名の前に `nntp:servername' のようなもの
が見える場合は、ここでもそれを使う必要があります。

例えば NNTP のような読み込み専用バックエンドであるために spam が移動で
きない場合、それはコピーされます。

グループごとに、または正規表現に合致するグループごとに、複数の移動先を
指定できることに注目してください!  これによって spam 記事を正規のメール
グループと *spam トレーニング* グループに送ることができます。

Ham と spam に関する問題は、Gnus がディフォルトではこの処理を追跡してく
れないことです。複数回にわたって処理することを回避するために、
`spam.el' が `gnus-registry.el' を使って処理された記事を追跡するように、
`spam-log-to-registry' 変数を有効にしてください。`gnus-registry.el' が
登録する数を制限してしまうと、制限が無い場合のように動作しないことを覚
えておいてください。

Spam グループにある、まだ読まれたことが無い記事だけに spam の印を付けた
い場合は、この変数をセットしてください。ディフォルトではセットされてい
ます。これを `nil' にすると、未読の記事にも spam 印が付けられます。

Ham が spam グループから移動される前に印を消したい場合は、この変数をセッ
トしてください。これは ham に印を付けるために可視 (tick) 印 (`!') のよ
うなものを使う場合に、とても役に立ちます。記事はあたかもそれがメールサー
バーから来たばかりのように、無印で `ham-process-destination' に置かれる
でしょう。

この変数は `spam.el' が spam の自動検出を行なう場合に、まだ読まれたこと
が無い記事だけか、またはすべての未読記事のどちらに対して spam 検査を行
なうかを指示します。これはそのままにしておくことを勧めます。



File: gnus-ja.info, Node: Spam Package Configuration Examples, Next: Spam Back Ends, Prev: Spam and Ham Processors, Up: Spam Package

Spam パッケージの設定例
-----------------------


Ted の設定
..........

From Ted Zlatanov <tzz@lifelogs.com>.

     ;; `gnus-registry-split-fancy-with-parent' と spam の自動検出のため。
     ;; 詳細は `gnus-registry.el' を参照。
     (gnus-registry-initialize)
     (spam-initialize)

     (setq
      spam-log-to-registry t ;; Spam の自動検出のため。
      spam-use-BBDB t
      spam-use-regex-headers t ;; X-Spam-Flag (SpamAssassin) を捕まえる。
      ;; 名前に `spam' を含むすべてのグループには spam 記事がある。
      gnus-spam-newsgroup-contents '(("spam"
                                      gnus-group-spam-classification-spam))
      ;; これらの docstring を参照。
      spam-move-spam-nonspam-groups-only nil
      spam-mark-only-unseen-as-spam t
      spam-mark-ham-unread-before-move-from-spam-group t
      nnimap-split-rule 'nnimap-split-fancy
      ;; あなたの設定に追加する前に、これが何をするか理解せよ!
      nnimap-split-fancy '(|
                           ;; References を親まで辿ってそれらのグループ
                           ;; を入れる。
                           (: gnus-registry-split-fancy-with-parent)
                           ;; これはサーバー側の SpamAssassin タグを捕ま
                           ;; える。
                           (: spam-split 'spam-use-regex-headers)
                           (any "ding" "ding")
                           ;; Spam 記事はディフォルトで `spam' に行く
                           ;; ことに注意。
                           (: spam-split)
                           ;; ディフォルトのメールボックス。
                           "mail"))

     ;; G p で設定した私のパラメーター。

     ;; すべての nnml グループと、`nnimap+mail.lifelogs.com:train' と
     ;; `nnimap+mail.lifelogs.com:spam' を除いたすべての nnimap グループ
     ;; のためのパラメーター:
     ;; それは手動で検出したはずなので、どの spam も nnimap のトレーニン
     ;; ググループに送り込む。

     ((spam-process-destination . "nnimap+mail.lifelogs.com:train"))

     ;; すべての NNTP グループのためのパラメーター:
     ;; Spam を blacklist で、ham を BBDB で自動検出。
     ((spam-autodetect-methods spam-use-blacklist spam-use-BBDB)
     ;; すべての spam をトレーニンググループに送る。
      (spam-process-destination . "nnimap+mail.lifelogs.com:train"))

     ;; 私が spam を自動検出させたい、ほんのいくつかの NNTP グループ
     ;; のためのパラメーター:
     ((spam-autodetect . t))

     ;; 私の nnimap `nnimap+mail.lifelogs.com:spam' グループ (これは
     ;; spam グループ) のためのパラメーター:

     ((spam-contents gnus-group-spam-classification-spam)

      ;; どんな spam も私が ham 印を付けなければ
      ;; `nnimap+mail.lifelogs.com:train' に送り込まれる。(前述の
      ;; `gnus-spam-newsgroup-contents' の設定により、すべての
      ;; まだ読まれたことが無いメッセージを読むとそうなる。)

      (spam-process-destination "nnimap+mail.lifelogs.com:train")

      ;; どんな ham も私の `nnimap+mail.lifelogs.com:mail' フォルダー
      ;; に送り込まれるが、私の `nnimap+mail.lifelogs.com:trainham'
      ;; フォルダーにもトレーニングのために送り込む。

      (ham-process-destination "nnimap+mail.lifelogs.com:mail"
                               "nnimap+mail.lifelogs.com:trainham")
      ;; このグループでは `!' 印が付いているものだけが ham。
      (ham-marks
       (gnus-ticked-mark))
      ;; グループを抜けるときに blacklist に送信者を覚えさせる--これは
      ;; 明らかに不要で、単に私の鬱憤を晴らすためにある。
      (spam-process (gnus-group-spam-exit-processor-blacklist)))

     ;; その後 IMAP サーバー上で、私は SpamAssassin が spam を
     ;; 認識するトレーニングのために `train' グループを、ham を
     ;; 認識するトレーニングのために `trainham' グループを使う。
     ;; でも Gnus はそういうことはやってくれない。


サーバー上の IMAP サーバーで、統計的な濾過器と `spam.el' を使う
...............................................................

From Reiner Steib <reiner.steib@gmx.de>.

私のプロバイダーは (IMAP) メールサーバー上で (DCC と連係した)
bogofilter を立ち上げました。認識された spam は `spam.detected' へ行き、
残りには通常の濾過規則が適用される、すなわち `some.folder' か `INBOX'
に行きます。誤検出と見逃しのトレーニングは、それぞれ `training.ham' ま
たは `training.spam' に記事をコピーするか移動させることによって行なわれ
ます。サーバー上の cron ジョブが、それらを適切な ham または spam オプショ
ンとともに bogofilter に与え、`training.ham' および `training.spam' フォ
ルダーからそれらを削除します。

以下の `gnus-parameters' の要素群によって、`spam.el' はほとんどの仕事を
私のためにこなします:

        ("nnimap:spam\\.detected"
         (gnus-article-sort-functions '(gnus-article-sort-by-chars))
         (ham-process-destination "nnimap:INBOX" "nnimap:training.ham")
         (spam-contents gnus-group-spam-classification-spam))
        ("nnimap:\\(INBOX\\|other-folders\\)"
         (spam-process-destination . "nnimap:training.spam")
         (spam-contents gnus-group-spam-classification-ham))

   * The Spam folder: `spam.detected' フォルダーにおいて、私は誤検出
     (すなわち bogofilter か DCC が spam であると誤って判定した正当なメー
     ル) のチェックをしなければなりません。

     `gnus-group-spam-classification-spam' の項のために、すべてのメッセー
     ジには spam の印 (`$') が付けられます。誤検出を見つけたら、私は記
     事にいくつかの他の ham 印 (`ham-marks', *Note Spam and Ham
     Processors::) を付けます。グループを出るとき、それらの記事は
     `INBOX' (私が記事を置いておきたいところ) と `training.ham'
     (bogofilter のトレーニング用) の両方のグループにコピーされ、
     `spam.detected' フォルダーから削除されます。

     `gnus-article-sort-by-chars' の項は、私の誤検出の発見を簡単にしま
     す。私は、すべて似たサイズの、たくさんのワーム (sweN, ...) を受け
     取ります。それらをサイズ (つまり文字数) でまとめると、他の誤検出を
     見つけやすくなるのです。(もちろん厳密にはワームは spam (UCE, UBE)
     ではありません。ともあれ、それらの要らないメールを濾過するのに
     bogofilter は私にとって優秀な道具です。)

   * Ham folders: 私の ham フォルダーで、認識されなかった spam メール
     (見逃し) を見つけたときはいつでも、私は単に `S x'
     (`gnus-summary-mark-as-spam') を叩きます。グループを出るとき、それ
     らのメッセージは `training.spam' に移されます。


`spam-report.el' で Gmane グループの spam を報告する
....................................................

From Reiner Steib <reiner.steib@gmx.de>.

以下の `gnus-parameters' に納めた要素によって、`S x'
(`gnus-summary-mark-as-spam') で `gmane.*' グループの spam 記事に印を付
け、グループを出るときに Gmane に報告します:

        ("^gmane\\."
         (spam-process (gnus-group-spam-exit-processor-report-gmane)))

加えて、私は news.gmane.org からではなくローカルニュースサーバー
(leafnode) を通して記事を読んでいるので、`(setq
spam-report-gmane-use-article-number nil)' を使っています。つまり、記事
番号が news.gmane.org におけるものと異なるので、正しい記事番号を見つけ
るために `spam-report.el' に `X-Report-Spam' ヘッダーを検査させなければ
なりません。



File: gnus-ja.info, Node: Spam Back Ends, Next: Extending the Spam package, Prev: Spam Package Configuration Examples, Up: Spam Package

Spam バックエンド
-----------------

Spam パッケージは spam を検出するための様々なバックエンドを提供します。
それぞれのバックエンドでは、spam を検出する手段の組 (*Note Filtering
Incoming Mail::, *Note Detecting Spam in Groups::) と spam および ham
プロセッサーの対が定義されています (*Note Spam and Ham Processors::)。

* Menu:

* Blacklists and Whitelists::
* BBDB Whitelists::
* Gmane Spam Reporting::
* Anti-spam Hashcash Payments::
* Blackholes::
* Regular Expressions Header Matching::
* Bogofilter::
* SpamAssassin back end::
* ifile spam filtering::
* Spam Statistics Filtering::
* SpamOracle::



File: gnus-ja.info, Node: Blacklists and Whitelists, Next: BBDB Whitelists, Prev: Spam Back Ends, Up: Spam Back Ends

ブラックリストとホワイトリスト
..............................

 -- Variable: spam-use-blacklist
     入ってくるメールを分割するときにブラックリストを使いたい場合は、こ
     の変数を `t' に設定してください。送信者がブラックリストに載ってい
     るメッセージは `spam-split-group' に送られます。これは、送信者が
     spammer であることが定義されているメールに対してだけ動作する、明示
     的な濾過器です。

 -- Variable: spam-use-whitelist
     入ってくるメールを分割するときにホワイトリストを使いたい場合は、こ
     の変数を `t' に設定してください。送信者がホワイトリストに載ってい
     ないメッセージは、次の spam-split 規則 (による検査工程) に送られま
     す。これは、ホワイトリストに載っていない誰かのメッセージは spam と
     も ham とも見なされないことを意味する、明示的な濾過器です。

 -- Variable: spam-use-whitelist-exclusive
     送信者がホワイトリストに載っていないすべてのメッセージが spam だと
     見なされることを意味する暗黙の濾過器としてホワイトリストを使いたい
     場合は、この変数を `t' にしてください。注意して使ってください。

 -- Variable: gnus-group-spam-exit-processor-blacklist
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えてください。このシンボル
     がグループの `spam-process' パラメーターに加えられると、spam 印が
     付いた記事の送信者がブラックリストに追加されます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-blacklist' の代わりに
     `(spam spam-use-blacklist)' を使うことを推奨します。すべて同等に動
     作することは保証されます。

 -- Variable: gnus-group-ham-exit-processor-whitelist
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えてください。このシンボル
     がグループの `spam-process' パラメーターに加えられると、ham 印が付
     いた *ham* グループの記事の送信者がホワイトリストに追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-whitelist' の代わりに `(ham
     spam-use-whitelist)' を使うことを推奨します。すべて同等に動作する
     ことは保証されます。

ブラックリストは、あなたが spam の送信者だと考えるアドレスに合致する正
規表現のリストです。例えば `vmadmin.com' の誰からでも来るメールを阻止す
るには、あなたのブラックリストに `vmadmin.com' を入れてください。空のブ
ラックリストで始めましょう。ブラックリストの各項目は Emacs の正規表現の
構文を使います。

逆に、ホワイトリストは何のアドレスが正当だと考えられるかを告げます。ホ
ワイトリストにあるアドレスからやって来たすべてのメッセージは、非-spam
だと見なされます。*Note BBDB Whitelists:: も見てください。ホワイトリス
トの各項目は Emacs の正規表現の構文を使います。

ブラックリストとホワイトリストのファイルの所在は、`spam-directory' 変数
(ディフォルトは `~/News/spam') または直接 `spam-whitelist' と
`spam-blacklist' 変数でカスタマイズすることができます。ホワイトリストと
ブラックリストのファイルは、ディフォルトでは `spam-directory' のディレ
クトリーにあり、それぞれ `whitelist' と `blacklist' という名前が付けら
れます。



File: gnus-ja.info, Node: BBDB Whitelists, Next: Gmane Spam Reporting, Prev: Blacklists and Whitelists, Up: Spam Back Ends

BBDB ホワイトリスト
...................

 -- Variable: spam-use-BBDB
     `spam-use-whitelist' (*Note Blacklists and Whitelists::) に似てい
     ますが、ホワイトリストのアドレスの源として BBDB を使います。正規表
     現はありません。`spam-use-BBDB' をちゃんと動作させるには BBDB を読
     み込まなければ (load しなければ) なりません。その送信者が BBDB に
     載っていないメッセージは、次の spam-split 規則 (による検査工程) に
     送られます。これは、BBDB に載っていない誰かのメッセージは spam と
     も ham とも見なされないことを意味する、明示的な濾過器です。

 -- Variable: spam-use-BBDB-exclusive
     送信者が BBDB に載っていないすべてのメッセージが spam だと見なされ
     ることを意味する暗黙の濾過器として BBDB を使いたい場合は、この変数
     を `t' にしてください。注意して使ってください。BBDB に載っている送
     信者だけが通行を許され、他のすべては spammers として分類されます。

     `spam.el' に関する限りは、`spam-use-BBDB' の別名として
     `spam-use-BBDB-exclusive' を使うことができますが、それは別のバック
     エンドではありません。`spam-use-BBDB-exclusive' を `t' に設定すれ
     ば、BBDB による分割はすべて排他的になります。

 -- Variable: gnus-group-ham-exit-processor-BBDB
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えてください。このシンボル
     がグループの `spam-process' パラメーターに加えられると、ham 印が付
     いた *ham* グループの記事の送信者が BBDB に追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-BBDB' の代わりに、`(ham
     spam-use-BBDB)' を使うことを推奨します。すべて同等に動作することは
     保証されます。



File: gnus-ja.info, Node: Gmane Spam Reporting, Next: Anti-spam Hashcash Payments, Prev: BBDB Whitelists, Up: Spam Back Ends

Gmane Spam 報告
...............

 -- Variable: gnus-group-spam-exit-processor-report-gmane
     グループパラメーターか変数 `gnus-spam-process-newsgroups' をカスタ
     マイズして、このシンボルをグループの `spam-process' パラメーターに
     加えてください。これが加えられると、spam 印が付いた記事のグループ
     が HTTP 経由で Gmane の管理者に報告されます。

     Gmane は `http://gmane.org' で見つけることができます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-report-gmane' の代わりに
     `(spam spam-use-gmane)' を使うことを推奨します。すべて同等に動作す
     ることは保証されます。

 -- Variable: spam-report-gmane-use-article-number
     この変数はディフォルトで `t' です。例えばあなた自身がニュースサーバー
     を運営しているなどの理由によって、ローカルな記事番号が Gmane の記事番号
     と合わない場合は、`nil' に設定してください。
     `spam-report-gmane-use-article-number' が `nil' であると、
     `spam-report.el' はその番号を記事のヘッダーから取得します。

 -- Variable: spam-report-user-mail-address
     Gmane への spam の報告に付加される User-Agent に現れるメールアドレ
     スです。これは、誤った報告が行なわれたときに、Gmane の管理者があな
     たに連絡できるようにするためのものです。ディフォルトは
     `user-mail-address' です。



File: gnus-ja.info, Node: Anti-spam Hashcash Payments, Next: Blackholes, Prev: Gmane Spam Reporting, Up: Spam Back Ends

非-spam Hashcash 印
...................

 -- Variable: spam-use-hashcash
     `spam-use-whitelist' (*Note Blacklists and Whitelists::) に似てい
     ますが、送信者のアドレスの代わりに、潔白なメッセージの証しとして
     hashcash の印 (tokens) を使います。Hashcash 印が無いメッセージは次
     の spam-分割 (spam-split) 規則 (による検査工程) に送られます。これ
     は hashcash 印が見当たらないメッセージは spam とも ham とも見なさ
     れないことを意味する、明示的な濾過器です。



File: gnus-ja.info, Node: Blackholes, Next: Regular Expressions Header Matching, Prev: Anti-spam Hashcash Payments, Up: Spam Back Ends

ブラックホール
..............

 -- Variable: spam-use-blackholes
     このオプションはディフォルトで無効になっています。このオプションを
     セットすると、Gnus にブラックホール型の分散 spam 処理システム (例
     えば DCC) を調べさせることができます。変数
     `spam-blackhole-servers' は、Gnus が意見を求めるブラックホール・サー
     バーのリストを持ちます。現在のリストはかなり広範囲に渡っていますが、
     もし時代遅れなサーバーを含んでいたら必ず私たちに知らせるようにして
     ください。

     ブラックホール・チェックは `dig.el' パッケージを使います。しかし
     `spam-use-dig' を `nil' に設定すれば、より良い性能のために
     `dns.el' を代わりに使うことを `spam.el' に指示することができます。
     現状では `spam-use-dig' を `nil' に設定することは、いく人かの利用
     者が使えないかもしれないので、それが可能な性能改善であるにもかかわ
     らず推奨されません。しかし、それが動くかどうかを確かめることはでき
     ます。

 -- Variable: spam-blackhole-servers
     ブラックホール・チェックのために意見を求めるサーバーのリストです。

 -- Variable: spam-blackhole-good-server-regex
     ブラックホール・サーバーのリストと照合されてはならない IP の正規表現です。
     `nil' に設定されると無効になります。

 -- Variable: spam-use-dig
     `dns.el' パッケージの代わりに `dig.el' パッケージを使います。ディ
     フォルトの設定である `t' が推奨されます。

ブラックホール・チェックは入って来るメールに対してだけ行なわれます。ブ
ラックホールに spam または ham プロセッサーはありません。



File: gnus-ja.info, Node: Regular Expressions Header Matching, Next: Bogofilter, Prev: Blackholes, Up: Spam Back Ends

正規表現によるヘッダーの合致検査
................................

 -- Variable: spam-use-regex-headers
     このオプションはディフォルトで無効になっています。このオプションを
     セットすると、Gnus に正規表現のリストとメッセージヘッダーを照合さ
     せることができます。変数 `spam-regex-headers-spam' および
     `spam-regex-headers-ham' が正規表現のリストを持ちます。メッセージ
     が spam か ham かどうかをそれぞれの変数を使って決めるために、Gnus
     はメッセージヘッダーを検査します。

 -- Variable: spam-regex-headers-spam
     メッセージヘッダーの中で一致した時に、それが spam であることを断定
     するための正規表現のリストです。

 -- Variable: spam-regex-headers-ham
     メッセージヘッダーの中で一致した時に、それが ham であることを断定
     するための正規表現のリストです。

正規表現によるヘッダーの検査は、入ってきたメールに対してだけ行なわれま
す。正規表現のために特有な spam または ham プロセッサーはありません。



File: gnus-ja.info, Node: Bogofilter, Next: SpamAssassin back end, Prev: Regular Expressions Header Matching, Up: Spam Back Ends

Bogofilter
..........

 -- Variable: spam-use-bogofilter
     Eric Raymond の迅速な Bogofilter を `spam-split' に使用したい場合
     は、この変数をセットしてください。

     Spam 記事に `$' 印を関連付ける最小限度の世話だけで、Bogofilter ト
     レーニングはすべてかなり自動的になります。Spam とそうでないものそ
     れぞれの種類について数百通ずつの記事を入手するまで、これをやらなけ
     ればなりません。デバッグまたは好奇心のどちらかのために概略モードで
     `S t' コマンドを使うことによって、現在の記事の *spam 度*
     (spamicity) スコア (0.0〜1.0) を表示させることができます。

     Bogofilter はメッセージが spam かどうかを、ある明確な閾値に基づい
     て見極めます。閾値はカスタマイズできます。Bogofilter のドキュメン
     トを調べてください。

     Path に `bogofilter' の実行ファイルが無い場合、Bogofilter の処理は
     取り消されます。

     `spam-use-bogofilter-headers' を使う場合は、これを有効にしてはいけ
     ません。

`M s t'
`S t'
     Bogofilter の spam 度スコアを得ます (`spam-bogofilter-score')。

 -- Variable: spam-use-bogofilter-headers
     メッセージヘッダーだけを調べるために Eric Raymond の迅速な
     Bogofilter を `spam-split' に使用したい場合は、この変数をセットし
     てください。これは `spam-use-bogofilter' と同じように動作しますが、
     あらかじめ `X-Bogosity' ヘッダーがメッセージに存在しなければなりま
     せん。通常これは procmail の技法か、何かそれに似たもので行なうこと
     になるでしょう。Bogofilter のインストールに関する文書を調べてくだ
     さい。

     `spam-use-bogofilter' を使う場合は、これを有効にしてはいけません。

 -- Variable: gnus-group-spam-exit-processor-bogofilter
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えてください。このシンボル
     がグループの `spam-process' パラメーターに加えられると、spam 印が
     付いた記事が bogofilter の spam データベースに加えらます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-bogofilter' の代わりに
     `(spam spam-use-bogofilter)' を使うことを推奨します。すべて同等に
     動作することは保証されます。

 -- Variable: gnus-group-ham-exit-processor-bogofilter
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えてください。このシンボル
     がグループの `spam-process' パラメーターに加えられると、ham 印が付
     いた *ham* グループの記事が非-spam 記事用の Bogofilter データベー
     スに追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-bogofilter' の代わりに
     `(ham spam-use-bogofilter)' を使うことを推奨します。すべて同等に動
     作することは保証されます。

 -- Variable: spam-bogofilter-database-directory
     これは Bogofilter がそのデータベースを格納するディレクトリーです。
     ディフォルトでは設定されていないので、Bogofilter はそれ自身のディ
     フォルトのデータベース・ディレクトリーを使います。

Bogofilter のメール分類器は、意図と目的の点で `ifile' に似ています。
Ham および spam のプロセッサーが提供され、記事で Bogofilter が使われる
べきか、または既に使われたかを spam-split に示すための
`spam-use-bogofilter' 変数と `spam-use-bogofilter-headers' があります。
この機能を検査するために Bogofilter のバージョン 0.9.2.1 が使われました。



File: gnus-ja.info, Node: SpamAssassin back end, Next: ifile spam filtering, Prev: Bogofilter, Up: Spam Back Ends

SpamAssassin back end
.....................

 -- Variable: spam-use-spamassassin
     `spam-split' に SpamAssassin を使いたい場合は、この変数をセットし
     てください。

     SpamAssassin は、規則と分析のセット (ベイジアンフィルタを含む) に
     基づいて、それぞれの記事のスコアを裁定します。ベイジアンフィルタは、
     spam 記事に `$' 印を関連させることによって訓練することができます。
     Spam のスコアは、概略モードで `S t' コマンドを使うことによって見る
     ことができます。

     この変数をセットすると、それぞれの記事は `spam-split' が呼ばれると
     きに SpamAssassin によって処理されます。メールが SpamAssassin で処
     理されるようになっていて、SpamAssassin ヘッダーだけを使いたいのな
     らば、代わりに `spam-use-spamassassin-headers' をセットしてくださ
     い。

     `spam-use-spamassassin-headers' を使う場合、これを有効にしてはいけ
     ません。

 -- Variable: spam-use-spamassassin-headers
     メールが SpamAssassin で処理されるようになっている場合に、
     SpamAssassin ヘッダーに基づいて `spam-split' に分割を行なわせたい
     のならば、この変数をセットしてください。

     `spam-use-spamassassin' を使う場合、これを有効にしてはいけません。

 -- Variable: spam-spamassassin-program
     この変数は SpamAssassin の実行形式を指します。`spamd' を稼働してい
     るならば、より速い処理のために、この変数に `spamc' の実行形式を設
     定することができます。`spamd'/`spamc' の更なる情報は、
     SpamAssassin のドキュメントを見てください。

SpamAssassin は、spam を同定するために広範な分析を行なう、強力で融通性
のある spam 濾過器です。Ham および spam のプロセッサーが提供され、記事
で SpamAssassin が使われるべきか、または既に使われたかを spam-split に
示すための `spam-use-spamassassin' 変数と
`spam-use-spamassassin-headers' 変数があります。この機能を検査するため
に SpamAssassin のバージョン 2.63 が使われました。



File: gnus-ja.info, Node: ifile spam filtering, Next: Spam Statistics Filtering, Prev: SpamAssassin back end, Up: Spam Back Ends

ifile による spam の濾過
........................

 -- Variable: spam-use-ifile
     Bogofilter に似た統計分析器である `ifile' を `spam-split' に使いた
     い場合は、この変数を有効にしてください。

 -- Variable: spam-ifile-all-categories
     `spam-use-ifile' に、単なる spam/非-spam ではなくて ifile のすべて
     の区分 (カテゴリー) を与えてもらいたいならば、この変数を有効にして
     ください。これを使う場合は、その文献に書かれているように ifile を
     トレーニングしておかなければなりません。

 -- Variable: spam-ifile-spam-category
     ifile に関する限り、これは spam メッセージのカテゴリーです。実際に
     使われる文字列は無関係ですが、たぶんあなたは `spam' のディフォルト
     値を残しておきたいでしょう。

 -- Variable: spam-ifile-database
     これは ifile データベースのファイル名です。ディフォルトでは定義さ
     れていないので、ifile はそれ自身のディフォルトのデータベース名を使
     います。

ifile のメール分類器は、意図と目的の点で Bogofilter に似ています。Spam
と ham のプロセッサーが提供され、ifile が使われるべきであることを
spam-split に示すための `spam-use-ifile' 変数があります。この機能を検査
するために ifile のバージョン 1.2.1 が使われました。



File: gnus-ja.info, Node: Spam Statistics Filtering, Next: SpamOracle, Prev: ifile spam filtering, Up: Spam Back Ends

Spam 統計濾過
.............

このバックエンドは、統計に基づいた濾過を行なう Spam 統計 Emacs Lisp パッ
ケージを使います (*Note Spam Statistics Package::)。これを使う前に、あ
なたの Spam 統計辞書を初期化するための、いくつかの追加の処理を行なう必
要があるでしょう。*Note Creating a spam-stat dictionary::.

 -- Variable: spam-use-stat

 -- Variable: gnus-group-spam-exit-processor-stat
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えてください。このシンボル
     がグループの `spam-process' パラメーターに加えられると、spam 印が
     付いた記事が spam 記事用の spam-stat データベースに追加されます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-stat' の代わりに `(spam
     spam-use-stat)' を使うことを推奨します。すべて同等に動作することは
     保証されます。

 -- Variable: gnus-group-ham-exit-processor-stat
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えてください。このシンボル
     がグループの `spam-process' パラメーターに加えられると、ham 印が付
     いた *ham* グループの記事が非-spam 記事用の spam-stat データベース
     に追加されます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-stat' の代わりに `(ham
     spam-use-stat)' を使うことを推奨します。すべて同等に動作することは
     保証されます。

これは `spam.el' が `spam-stat.el' と働き合うことを可能にします。
`spam-stat.el' は (Lisp だけの) spam 内部データベースを提供しますが、そ
れは ifile や Bogofilter と違って外部プログラムを必要としません。Spam
と ham のプロセッサー、および `spam-split' のための `spam-use-stat' 変
数が提供されます。



File: gnus-ja.info, Node: SpamOracle, Prev: Spam Statistics Filtering, Up: Spam Back Ends

Gnus で SpamOracle を使うには
.............................

気軽に spam を濾過する一つのやり方は SpamOracle を使うことです。統計的
にメールを濾過するための道具である SpamOracle は、Xavier Leroy によって
書かれました。これは別にインストールする必要があります。

Gnus で SpamOracle を使うには、複数のやり方があります。すべての場合に、
メールは *mark* モードで動作している SpamOracle にパイプされます。する
と SpamOracle は、そのメールを spam だと見なしたかどうかを示す
`X-Spam' ヘッダーを記入します。

実現可能な一つは、SpamOracle を `:prescript' として *Note Mail Source
Specifiers:: から走らせることです。この方法には、利用者が *X-Spam* ヘッ
ダーを見ることができるという利点があります。

もっとも手軽な方法は、`spam.el' (*Note Spam Package::) が SpamOracle を
呼ぶようにすることです。

`spam.el' で SpamOracle を利用できるようにするためには、変数
`spam-use-spamoracle' を `t' にして、`nnmail-split-fancy' または
`nnimap-split-fancy' を設定してください。*Note Spam Package::.  この例
では nnimap サーバーの `INBOX' が SpamOracle を使って濾過されます。
Spam であると認定されたメールは、`spam-split-group' (この場合は
`Junk') に移動させられます。Ham なメッセージは `INBOX' に残ります:

     (setq spam-use-spamoracle t
           spam-split-group "Junk"
           nnimap-split-inbox '("INBOX")
           nnimap-split-rule 'nnimap-split-fancy
           nnimap-split-fancy '(| (: spam-split) "INBOX"))

 -- Variable: spam-use-spamoracle
     Gnus に SpamOracle を使って spam の濾過をさせたい場合に `t' にして
     ください。

 -- Variable: spam-spamoracle-binary
     Gnus は利用者の PATH で見つかった `spamoracle' という SpamOracle
     のバイナリーを使います。これにはカスタマイズ可能な変数
     `spam-spamoracle-binary' を使います。

 -- Variable: spam-spamoracle-database
     SpamOracle はその解析結果をデータベースとして格納するために、ディフォル
     トで `~/.spamoracle.db' ファイルを使います。これは変
     数 `spam-spamoracle-database' で制御され、ディフォルト
     は `nil' です。それは、ディフォルトの SpamOracle データベースが使わ
     れることを意味します。データベースがどこか特別な場所に置きたい場合は、
     `spam-spamoracle-database' をそのパスに設定してください。

SpamOracle はメッセージが spam か ham かを見極めるために統計的な手法を
使います。間違いや見逃しの少ない良い結果を得るために、SpamOracle はトレー
ニングを必要とします。SpamOracle は spam メールの特徴を学びます。*add*
モード (トレーニング・モード) を使って、良いメール (ham) と spam を
SpamOracle に与えなければなりません。これは、概略バッファーで `|' を押
すことによってメールを SpamOracle のプロセスにパイプするか、または
`spam.el' の spam および ham プロセッサーを使うことによって行なうことが
できます。*Note Spam Package::.

 -- Variable: gnus-group-spam-exit-processor-spamoracle
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えてください。このシンボル
     がグループの `spam-process' パラメーターに加えられると、spam 印が
     付いた記事が spam のサンプルとして SpamOracle に送られます。

     *警告*

     旧式の `gnus-group-spam-exit-processor-spamoracle' の代わりに
     `(spam spam-use-spamoracle)' を使うことを推奨します。すべて同等に
     動作することは保証されます。

 -- Variable: gnus-group-ham-exit-processor-spamoracle
     このシンボルを、グループパラメーターのカスタマイズによってグループ
     の `spam-process' パラメーターに加えるか、または
     `gnus-spam-process-newsgroups' 変数に加えてください。このシンボル
     がグループの `spam-process' パラメーターに加えられると、*ham* グルー
     プにある ham 印が付いた記事が ham の記事のサンプルとして
     SpamOracle に送られます。

     *警告*

     旧式の `gnus-group-ham-exit-processor-spamoracle' の代わりに
     `(ham spam-use-spamoracle)' を使うことを推奨します。すべて同等に動
     作することは保証されます。

*例:* これらは ham グループとして分類された、つまり ham の記事しかない
グループのためのグループパラメーターです。

      ((spam-contents gnus-group-spam-classification-ham)
       (spam-process ((ham spam-use-spamoracle)
                      (spam spam-use-spamoracle))))

このグループでは `spam-use-spamoracle' が ham と spam の両方の処理を行
ないます。このグループに spam 記事があって (SpamOracle が十分なサンプル
を食べさせてもらっていなければ、そうなりますね)、かつ利用者がいくつかの
記事に spam の印を付けたならば、それらの記事は SpamOracle によって処理
されます。そのプロセッサーは、新しい spam のサンプルとして SpamOracle
に記事を送ります。



File: gnus-ja.info, Node: Extending the Spam package, Next: Spam Statistics Package, Prev: Spam Back Ends, Up: Spam Package

Spam パッケージの拡張
---------------------

Blackbox という新しいバックエンドを追加したいとしましょう。入ってくるメー
ルを濾過するために以下のものを用意してください:

  1. コード

          (defvar spam-use-blackbox nil
            "Blackbox を使うときは t にする。")

     Blackbox が入ってくるメールを検査できるのであれば、
     `spam-check-blackbox' を書いてください。

     Blackbox が spam と ham を登録または登録解除できるのであれば、手始
     めに bogofilter の登録/解除ルーチンを使って、またはもっと
     Blackbox にふさわしい他の登録/解除ルーチンを使って
     `spam-blackbox-register-routine' および
     `spam-blackbox-unregister-routine' を書いてください。

  2. 関数

     `spam-check-blackbox' 関数は、他の習慣に倣って `nil' か
     `spam-split-group' を返さなければなりません。あなたに何ができるか
     の例として、既存の `spam-check-*' 関数を参照してください。また、あ
     なたがそうでない理由を完全に理解していないならば、テンプレートに齧
     り付いてください。

Spam と ham メッセージを処理するために、以下のものを用意してください:

  1. コード

     Spam または ham のプロセッサーを用意する必要はありません。
     Blackbox が spam または ham の処理をサポートする場合だけ、それらを
     用意してください。

     さらに ham と spam のプロセッサーは単一の変数ではなくされつつあり、
     代わりに `(spam spam-use-blackbox)' または `(ham
     spam-use-blackbox)' の形式が推奨されます。今のところ spam/ham プロ
     セッサー変数はまだあちこちにありますが、長く存続することはないでしょ
     う。

          (defvar gnus-group-spam-exit-processor-blackbox "blackbox-spam"
            "概略を出るときに呼ばれる blackbox の spam プロセッサー。
          Spam グループだけに適用される。")

          (defvar gnus-group-ham-exit-processor-blackbox "blackbox-ham"
            "概略を出るときに呼ばれる blackbox の ham プロセッサー。
          Spam ではない (未分類または ham) グループだけに適用される。")

  2. Gnus のパラメーター

     `gnus.el' にあるグループパラメーター `spam-process' に

          (const :tag "Spam: Blackbox" (spam spam-use-blackbox))
          (const :tag "Ham: Blackbox"  (ham spam-use-blackbox))

     を加えてください。それを必ずパラメーターと変数のカスタマイズの二回
     について行なうようにしてください。

     Blackbox が入ってくるメールが spam かどうかを検査できるのであれば、

          (variable-item spam-use-blackbox)

     を `gnus.el' のグループパラメーター `spam-autodetect-methods' に加
     えてください。

     最後に、`spam.el' にある適切な `spam-install-*-backend' 関数を使っ
     てください。利用できる関数は次の通りです。

       1. `spam-install-backend-alias'

          この関数は、オリジナルのバックエンドのようにすべてを行なうバッ
          クエンドのために、別名を使うことができるようにするだけです。
          今のところ、これは `spam-use-BBDB-exclusive' を
          `spam-use-BBDB' のように働かせるためだけに使われます。

       2. `spam-install-nocheck-backend'

          この関数は、検査する機能は無いけれども ham または spam を登録
          /解除することができるバックエンドになります。
          `spam-use-gmane' がそのようなバックエンドです。

       3. `spam-install-checkonly-backend'

          この関数は、入ってくるメールが spam かどうかの検査だけを行な
          うことができるバックエンドになります。それはメッセージを登録
          または登録解除することができません。`spam-use-blackholes' と
          `spam-use-hashcash' がそのようなバックエンドです。

       4. `spam-install-statistical-checkonly-backend'

          この関数は、入ってくるメールの検査だけを行なうことができる、
          統計処理を行なうバックエンド (検査のためにメッセージの本文全
          体を必要とします) になります。`spam-use-regex-body' がそのよ
          うな濾過器です。

       5. `spam-install-statistical-backend'

          この関数は、入ってくるメールの検査と登録/解除ルーチンを持つ、
          統計処理を行なうバックエンドになります。
          `spam-use-bogofilter' は、そのように仕立てられています。

       6. `spam-install-backend'

          これは最も普通なバックエンドになります。それは検査とメッセージの
          登録/解除を行なうことができ、統計処理の能力はありません。
          `spam-use-BBDB' がそのようなバックエンドです。

       7. `spam-install-mover-backend'

          移動させる (mover) バックエンドは `spam.el' の内部で、概略バッ
          ファーを出るときにある明確なやり方で記事を移動させます。おそ
          らくそのようなバックエンドを使うことは無いでしょう。



File: gnus-ja.info, Node: Spam Statistics Package, Prev: Extending the Spam package, Up: Spam Package

Spam 統計パッケージ
-------------------

Paul Graham は統計を使った spam の濾過に関する優れたエッセイを書きまし
た: A Plan for Spam (http://www.paulgraham.com/spam.html)。そこで彼は
SpamAssassin によって使われているような規則ベースの濾過に固有な欠陥につ
いて述べています。例えば: 誰かが規則を書かなければならないし、他のすべ
ての人はこれらの規則をインストールしなければなりません。あなたはいつも
遅れをとってしまいます。それよりも、それが spam または非-spam に何とな
く似ているかどうかに基づいてメールを濾過する方が遥かに良いだろうと彼は
主張しています。これを測定する一つの手段は単語の分布です。その後で彼は、
新着メールがあなたの他の spam メールに似ているかどうかをチェックする方
法を述べています。

基本的な考えはこうです: あなたのメールの二つの集合を作ります。一方は
spam を、もう一方は spam ではないメールを集めたものです。両方の集合にお
ける各単語の出現頻度を数えて、集合のメールの総数で重み付けを行ない、こ
の情報を辞書に格納します。新着メールのすべての単語について、spam か
spam ではないメールに属する確率を判定します。15 の最も顕著な単語を使っ
て、そのメールが spam であることの確率の総計を計算します。この確率があ
る閾値より高かったら、そのメールは spam であると見なされます。

Spam 統計パッケージは、この種の濾過のためのサポートを Gnus に追加します。
Spam パッケージ (*Note Spam Package::) のバックエンドの一つとして、また
はそれ自体を使うことができます。

Spam 統計パッケージを使う前に、それを使うための準備を行なう必要がありま
す。第一に、あなたのメールの二つの集合が要ります。一方は spam を、もう
一方は spam ではないメールを集めたものです。そして、それらの二つの集合
を使って辞書を作り、それをセーブしてください。そして特に最後に、あなた
の特級分割の規則でこの辞書を使ってください。

* Menu:

* Creating a spam-stat dictionary::
* Splitting mail using spam-stat::
* Low-level interface to the spam-stat dictionary::



File: gnus-ja.info, Node: Creating a spam-stat dictionary, Next: Splitting mail using spam-stat, Prev: Spam Statistics Package, Up: Spam Statistics Package

spam-統計 (spam-stat) 辞書を作る
................................

統計に基づいた spam 濾過を始めるには、前もって二つのメールの集合 (一方
は spam を、もう一方は spam ではないメールを集めたもの) に基づいた統計
を作らなければなりません。そしてそれらの統計は、後で利用するために辞書
に格納されます。それらの統計を意味のあるものにするために、両方の集合に
つき数百通のメールが必要です。

今のところ Gnus は nnml バックエンドでだけ辞書の自動生成をサポートしま
す。nnml バックエンドは一通のメールにつき一つのファイルで、すべてのメー
ルを一つのディレクトリーに格納します。以下を使ってください:

 -- Function: spam-stat-process-spam-directory
     このディレクトリーにあるすべてのファイルについて spam の統計を生成
     します。すべてのファイルは一つの spam メールとして扱われます。

 -- Function: spam-stat-process-non-spam-directory
     このディレクトリーにあるすべてのファイルについて非-spam の統計を生
     成します。すべてのファイルは一つの spam ではないメールとして扱われ
     ます。

普通は `~/Mail/mail/spam' のようなディレクトリー (通常
`nnml:mail.spam' グループに対応) について
`spam-stat-process-spam-directory' を呼ぶことになるでしょう。また
`~/Mail/mail/misc' のようなディレクトリー (通常 `nnml:mail.misc' グルー
プに対応) について `spam-stat-process-non-spam-directory' を呼びましょ
う。

IMAP を使っている場合はメールをローカルには持っていないので、それは働き
ません。一つの解決策は、Gnus エージェントで記事をキャッシュすることです。
そうすれば `spam-stat-process-spam-directory' として
`"~/News/agent/nnimap/mail.yourisp.com/personal_spam"' のようなものを使
うことができます。*Note Agent as Cache::.

 -- Variable: spam-stat
     この変数はすべての統計のハッシュテーブル--辞書と言っているもの--を
     保持します。このハッシュテーブルは、双方の集合のすべての単語につい
     て spam および spam ではないメールにおける出現頻度を表すベクトルを
     格納します。

統計を最初から作り直したいときは、辞書をリセットする必要があります。

 -- Function: spam-stat-reset
     すべての統計を削除して `spam-stat' ハッシュテーブルをリセットしま
     す。

行なったら辞書をセーブしなければなりません。辞書はかなり大きくなるかも
しれません。辞書を追加更新しない場合 (言い換えると、例えば毎月一回作り
直す場合)、頻繁に現れないか、または spam か spam ではないメールのどちら
に属するかがはっきりしないすべての単語を削除することによって、辞書のサ
イズを小さくすることができます。

 -- Function: spam-stat-reduce-size
     辞書のサイズを小さくします。これは辞書を追加更新したくない場合だけ
     使ってください。

 -- Function: spam-stat-save
     辞書をセーブします。

 -- Variable: spam-stat-file
     辞書の格納に使うファイル名です。ディフォルトは `~/.spam-stat.el'
     です。



File: gnus-ja.info, Node: Splitting mail using spam-stat, Next: Low-level interface to the spam-stat dictionary, Prev: Creating a spam-stat dictionary, Up: Spam Statistics Package

spam-統計 (spam-stat) を使ってメールを分割する
..............................................

この章は Spam 統計パッケージを Spam パッケージ (*Note Spam Package::)
とは *独立して* 使う方法について説明します。

最初に以下を `~/.gnus.el' ファイルに追加してください:

     (require 'spam-stat)
     (spam-stat-load)

これは必要な Gnus のコードとあなたが作った辞書を読み込みます。

次に、特級分割の規則を改造する必要があります: どうやって `spam-stat' を
使うかを決めてください。以下の例は nnml バックエンド用です。nnimap バッ
クエンドでもまったく同様に動作します。単に `nnmail-split-fancy' の代わ
りに `nnimap-split-fancy' を使ってください。

`mail.misc' と `mail.spam' の二つのグループだけがある、最も単純な事例を
想定しましょう。以下の式は、メールが spam でなかったら `mail.misc' に行
くことを示します。もし spam だったら、`spam-stat-split-fancy' は
`mail.spam' を返します。

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               "mail.misc"))

 -- Variable: spam-stat-split-fancy-spam-group
     Spam 用のグループです。ディフォルトは `mail.spam' です。

特定の表題を持つメールを他のグループに入れる濾過をも行ないたいならば、
以下の式を使ってください。正規表現に合致しないメールだけに spam の可能
性があると考えます。

     (setq nnmail-split-fancy
           `(| ("Subject" "\\bspam-stat\\b" "mail.emacs")
               (: spam-stat-split-fancy)
               "mail.misc"))

最初に spam の濾過をしたい場合、辞書を作るときに十分に注意しなければな
りません。`spam-stat-split-fancy' は `mail.emacs' と `mail.misc' のどち
らのメールも spam ではないと解釈しなければならないので、辞書を作るとき
に spam ではない集合に両方とも入っていなければならないことに注意してく
ださい。

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))

これを伝統的な濾過と組み合わせることもできます。ここではすべての HTML
だけのメールを `mail.spam.filtered' グループに入れるものとしましょう。
`spam-stat-split-fancy' はそれらのメールを見ないので、辞書を作るときに、
`mail.spam.filtered' のメールが spam の集合または spam ではない集合のど
ちらにも入るべきではないことに注意してください!

     (setq nnmail-split-fancy
           `(| ("Content-Type" "text/html" "mail.spam.filtered")
               (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))



File: gnus-ja.info, Node: Low-level interface to the spam-stat dictionary, Prev: Splitting mail using spam-stat, Up: Spam Statistics Package

spam-統計 (spam-stat) 辞書への低階層インターフェース
....................................................

`spam-stat' を使うための主なインターフェースは以下の関数群です:

 -- Function: spam-stat-buffer-is-spam
     Spam であると考えられる新着メールがあるバッファーで呼ばれます。ま
     だ処理されていない新着メールに対して使ってください。

 -- Function: spam-stat-buffer-is-no-spam
     Spam ではないと考えられる新着メールがあるバッファーで呼ばれます。
     まだ処理されていない新着メールに対して使ってください。

 -- Function: spam-stat-buffer-change-to-spam
     それが spam ではなくて通常のものだとはもはや考えられないメールがあ
     るバッファーで呼ばれます。すでに spam ではないものとして処理されて
     しまったメールの地位の変更に使ってください。

 -- Function: spam-stat-buffer-change-to-non-spam
     それが通常のものではなくて spam だとはもはや考えられないメールがあ
     るバッファーで呼ばれます。すでに spam であるものとして処理されてし
     まったメールの地位の変更に使ってください。

 -- Function: spam-stat-save
     ハッシュテーブルをファイルにセーブします。変数 `spam-stat-file' で
     設定されたファイル名が使われます。

 -- Function: spam-stat-load
     ハッシュテーブルをファイルから読み込みます。変数 `spam-stat-file'
     で設定されたファイル名が使われます。

 -- Function: spam-stat-score-word
     単語の spam スコアを返します。

 -- Function: spam-stat-score-buffer
     バッファーの spam スコアを返します。

 -- Function: spam-stat-split-fancy
     特級メール分割のためにこの関数を使ってください。
     `nnmail-split-fancy' に規則 `(: spam-stat-split-fancy)' を追加しま
     しょう。

それを使う前に、必ず辞書が読み込まれているようにしてください。これには
`~/.gnus.el' ファイルに以下が必要です:

     (require 'spam-stat)
     (spam-stat-load)

以下は一般的なテストのための関数呼び出しです:

     リセット: (setq spam-stat (make-hash-table :test 'equal))
     Spam の学習: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     非-spam の学習: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     辞書をセーブ: (spam-stat-save)
     辞書ファイルのサイズを確認: (nth 7 (file-attributes spam-stat-file))
     単語数を確認: (hash-table-count spam-stat)
     Spam の検査: (spam-stat-test-directory "~/Mail/mail/spam")
     非-spam の検査: (spam-stat-test-directory "~/Mail/mail/misc")
     辞書のサイズを小さくする: (spam-stat-reduce-size)
     辞書をセーブ: (spam-stat-save)
     辞書ファイルのサイズを確認: (nth 7 (file-attributes spam-stat-file))
     単語数を確認: (hash-table-count spam-stat)
     Spam の検査: (spam-stat-test-directory "~/Mail/mail/spam")
     非-spam の検査: (spam-stat-test-directory "~/Mail/mail/misc")

以下は辞書を生成する方法です:

     リセット: (setq spam-stat (make-hash-table :test 'equal))
     Spam の学習: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     非-spam の学習: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     別の必要な非-spam グループに対して繰り返し...
     辞書のサイズを小さくする: (spam-stat-reduce-size)
     辞書をセーブ: (spam-stat-save)



File: gnus-ja.info, Node: The Gnus Registry, Next: Other modes, Prev: Spam Package, Up: Various

Gnus レジストリー
=================

Gnus レジストリーは記事の Message-ID を元にすべてのバックエンドを横断的
に追跡するためのパッケージです。これが提供するいくつもある素敵な事をす
れば、Gnus ユーザーは近所の人たちから羨ましがられ、床屋がただで散髪して
くれるようになり、世界で起きる様々な問題の専門家になることができるでしょ
う。かなり素晴らしい機能が満載です。うーむ、全部がそうではないかもしれ
ませんけれどね。

じきに詳しく説明しますが、まずはそれらの機能の早見表を掲げておきましょ
う。あなたの注意力が持続しないかもしれないので... いや、何でもないです。

  1. 記事をそれらの親に分割する

     議論を同じグループで続けられるようにする機能です。Message-ID に加
     えて表題と送信者を使うことができます。これにはいくつかのやり方があ
     ります。

  2. 独自のフラグとキーワードを記録する

     レジストリーは記事のための独自のフラグとキーワードを記録することが
     できます。これで例えば記事に "To-Do" の印を付けることができ、記事
     が nnimap、nnml、nnmaildir などのどのバックエンドにあっても、その
     フラグは立ち続けます。

  3. 任意のデータを記録する

     レジストリーは記事のためのどんなデータでも記憶しておくことができま
     す。簡単な Elisp インターフェースですが。組み込まれている逆引き機
     能を有効にしておくと、特定の条件に合うすべての記事をすばやく見つけ
     ることができます。

* Menu:

* Setup::
* Fancy splitting to parent::   親への特級分割
* Store custom flags and keywords:: 独自のフラグとキーワードの記録
* Store arbitrary data::        任意のデータの記録



File: gnus-ja.info, Node: Setup, Next: Fancy splitting to parent, Prev: The Gnus Registry, Up: The Gnus Registry

設定
----

良くしたことに Gnus レジストリーの設定はとても簡単です:

     (setq gnus-registry-max-entries 2500
           gnus-registry-use-long-group-names t)

     (gnus-registry-initialize)

これは Gnus が newsrc をセーブするときの処理にレジストリーをセーブする
処理を加えます (それは Gnus を終了するときと `*Group*' バッファーで
`s' を押したときに発動します。さらにこれは Gnus の記事に関する動作 (コ
ピー、移動など) にレジストリーを操作する機能を加えるので、この初期化に
よる結果を元に戻すのは簡単ではありません。その、あまり愉快ではない詳細
については `gnus-registry-initialize' を見てください。

以下はレジストリーの持ち主が使うための他の設定です (それらを無頓着にコ
ピーする前に、それらが何をするかを理解してください)。

     (setq
      gnus-registry-split-strategy 'majority
      gnus-registry-ignored-groups '(("nntp" t)
                                     ("nnrss" t)
                                     ("spam" t)
                                     ("train" t))
      gnus-registry-max-entries 500000
      gnus-registry-use-long-group-names t
      gnus-registry-track-extra '(sender subject))

これらが意味するのは、あちこちにあるたくさんの記事を保持し、長いグルー
プ名を使い、送信者と表題で (単なる親の Message-ID でではなく) 記事を追
跡し、入ってきた記事をレジストリーが分割するときに記事の行き先として一
つ以上の候補があったら多数決で決める、ということです。加えて "nntp"、
nnrss"、"spam" または "train" に合致するグループの記事をレジストリーに
無視させます。

あなたがこのすべてに感銘を受けることは疑いありませんが、こう要求しもす
るでしょう。「私は Gnus ユーザーでカスタマイズすることが生きがいです。
もっと下さい」。では諸設定の一般的な説明に参りましょう。

 -- Variable: gnus-registry-unfollowed-groups
     `gnus-registry-split-fancy-with-parent' が追跡しないグループです。
     それらは、でもレジストリーに記録されます。これは正規表現のリストで
     す。

 -- Variable: gnus-registry-ignored-groups
     レジストリーに記録されないグループです。これは正規表現のリストで、
     グループ/トピックのカスタマイズで設定することもできます (なので、
     特定のグループまたはトピック全体を、無視させたり維持させることがで
     きます)。

 -- Variable: gnus-registry-use-long-group-names
     レジストリーが長いグループ名を使うかどうかを指定します。`t' に設定
     することを進めますが、そうしなくてもすべて働きます。将来の機能で必
     要になるでしょう。

 -- Variable: gnus-registry-max-entries
     レジストリーが保持する項目の数 (整数または無制限を意味する `nil')
     です。

 -- Variable: gnus-registry-cache-file
     Gnus の操作を通じてレジストリーが記録されるファイルです。



File: gnus-ja.info, Node: Fancy splitting to parent, Next: Store custom flags and keywords, Prev: Setup, Up: The Gnus Registry

親への特級分割
--------------

簡単に言うと、これでフォローアップの電子メールを、それがあるべき場所に
置くことができます。

すべての記事は固有の Message-ID を持っていて、レジストリーはそれを記憶
します。記事を移動またはコピーするとき、レジストリーはそのことに気付い
て、分割方法のひとつの選択肢として新しいグループを提案します。

フォローアップするとき、言及する対象となる元の記事の Message-ID は通常
ヘッダーにあります。レジストリーはそれを知り、その記載内容を使って元の
記事がどこにあるかを探します。あなたが特級分割の設定に置いておく必要が
あるのは、このような規則だけです:

     (setq nnimap-my-split-fancy '(|

           ;; split to parent: you need this
           (: gnus-registry-split-fancy-with-parent)

           ;; other rules, as an example
           (: spam-split)
           ;; default mailbox
           "mail")

さらに、以下の変数をカスタマイズする必要があるでしょう。

 -- Variable: gnus-registry-track-extra
     これはシンボルのリストです。カスタマイズのインターフェースから変更
     するのには、それがベストです。ディフォルトは `nil' ですが、親で分
     割するには `subject' と `sender' も追跡する必要があるでしょう。そ
     れは働くかもしれません。メールの流通量が大きくて人々が同じグループ
     にとどまっていないと、煩わしくなる場合があります。

 -- Variable: gnus-registry-split-strategy
     これはシンボルです。カスタマイズのインターフェースから変更するのに
     は、それがベストです。ディフォルトは `nil' ですが、合致の多数決ま
     たは最初に見つかったものに基づいて送信者 (sender) または表題
     (subject) で分割するには `majority' または `first' に設定する必要
     があるでしょう。



File: gnus-ja.info, Node: Store custom flags and keywords, Next: Store arbitrary data, Prev: Fancy splitting to parent, Up: The Gnus Registry

独自のフラグとキーワードの記録
------------------------------

レジストリーを使って、独自のフラグとキーワードをメッセージごとに設定す
ることができます。Gnus->Registry Marks メニューか `M M x' ショートカッ
ト・キーを使ってください。ここで `x' は印の名前の最初の文字です。

 -- Variable: gnus-registry-marks
     レジストリーが扱うことができる独自の印のリストです。もしそうしたい
     なら、ディフォルトのリストを変更することができます。それを行なうの
     ならば、それらが効果を及ぼす前に Emacs を終了させる必要があります
     (レジストリーを抜き取って (unload して) から再読み込み (reload) す
     るか、または必要であろう特別なマクロを実行することもできますが、た
     ぶんそんな面倒なことは望まないでしょう)。カスタマイズのインター
     フェースを使って、そのリストを変更してください。

     ディフォルトでこのリストには `Important'、`Work'、`Personal'、
     `To-Do' それに `Later' の印があります。それらすべてに、
     `Important' のための `M M i' のように、最初の文字を使うショートカッ
     ト・キーが用意されています。

 -- Function: gnus-registry-mark-article
     独自のレジストリーの印を記事に付加するために使う関数です。補完のた
     めに、利用できる印を提示します。



File: gnus-ja.info, Node: Store arbitrary data, Prev: Store custom flags and keywords, Up: The Gnus Registry

任意のデータの記録
------------------

レジストリーには任意のデータを記録するために、Message-ID をキーとして使
う簡単なインターフェースがあります (データは保存するためにできる限り一
つのリストに変換されます)。

 -- Function: gnus-registry-store-extra-entry (ID KEY VALUE)
     記事 `id' のための特別なデータ・キー `key' に `value' を記録します。

 -- Function: gnus-registry-delete-extra-entry (ID KEY)
     記事 `id' のための特別なデータ・キー `key' を消去します。

 -- Function: gnus-registry-fetch-extra (ID KEY)
     記事 `id' のための特別なデータ・キー `key' を取り込みます。

 -- Variable: gnus-registry-extra-entries-precious
     特別なエントリーが貴重であるなら、たとえその Message-ID の記事のグ
     ループが無くても、またレジストリーのサイズの制限に達しても、それら
     が存在しているとレジストリーはすべてのエントリーを永久に保持します。
     ディフォルトではこれはまさに `(marks)' なので、独自のレジストリー
     の印は貴重であると見なされます。



File: gnus-ja.info, Node: Other modes, Next: Various Various, Prev: The Gnus Registry, Up: Various

他のモードとの相互作用
======================


Dired
-----

`gnus-dired-minor-mode' は dired バッファーで使えるいくつかの便利な機能
を提供します。これは次の式で有効になります:

     (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

`C-c C-m C-a'
     Dired で印を付けたものを添付ファイルとして送信します
     (`gnus-dired-attach')。どの message バッファーに添付するかを尋ねら
     れます。

`C-c C-m C-l'
     適切な mailcap 項目に従ってファイルを開きます
     (`gnus-dired-find-file-mailcap')。接頭引数を付けると、ファイルを新
     しいバッファーで (単に) 開きます。

`C-c C-m C-p'
     mailcap 項目に従ってファイルを印刷します (`gnus-dired-print')。印
     刷コマンドが無い場合は PostScript 画像として印刷します。



File: gnus-ja.info, Node: Various Various, Prev: Other modes, Up: Various

いろいろのいろいろ
==================

`gnus-home-directory'
     すべての Gnus のファイル名とディレクトリー名の変数は、これを基点に
     して初期値が決定されます。ディフォルトは `~/' です。

`gnus-directory'
     Gnus がデータを格納するほとんどのファイルとディレクトリーの名前の
     変数は、これを基点にして初期値が決定されます。ディフォルトは
     `SAVEDIR' 環境変数の値か、その変数が設定されていない場合は
     `~/News/' です。

     `~/.gnus.el' ファイルが読まれたときは Gnus のほとんどはすでに読み
     込まれているということに注意してください。これはつまり、この変数を
     `~/.gnus.el' の中で設定しても、この変数によって初期化される他のディ
     レクトリー変数は正しく設定されないだろうということです。この変数は
     代わりに `.emacs' で設定してください。

`gnus-default-directory'
     上記の変数にはまったく関係ありません--この変数はすべての Gnus バッ
     ファーのディフォルトディレクトリーをどうすべきかを設定します。もし
     `C-x C-f' のような命令を実行すると、現在のバッファーのディフォルト
     ディレクトリーを起点にしたプロンプトが出てくるでしょう。この変数が
     `nil' (これがディフォルト) であれば、Gnus を起動したときにあなたが
     いたバッファーのディフォルトディレクトリーがディフォルトディレクト
     リーになるでしょう。

`gnus-verbose'
     この変数は 0 から 10 までの間の整数です。数値が大きいほどたくさん
     のメッセージが表示されます。この変数が 0 であれば Gnus は何のメッ
     セージも見せません。これが 7 (ディフォルト) であれば特に重要なメッ
     セージが表示され、10 であれば Gnus は決してお喋りを止めず、たくさ
     んのメッセージであなたにめまいを起こさせるでしょう。

`gnus-verbose-backends'
     この変数は `gnus-verbose' と同様の効果をもたらしますが、Gnus 本体
     ではなく Gnus のバックエンドに対して適用されます。

`gnus-add-timestamp-to-message'
     この変数は `gnus-verbose' と `gnus-verbose-backends' で制御されて
     出力されるメッセージに、時刻 (タイムスタンプ) を付加するかどうかを
     制御します。ディフォルト値は時刻を付加しないことを意味する `nil'
     です。`log' だったら `*Messages*' バッファー (XEmacs では `
     *Message-Log*' バッファー) に入るメッセージだけに時刻を付加します。
     もし `nil' でも `log' でもなければ、ログに入るメッセージだけでなく、
     エコーエリアに表示されるものにも時刻を付加します。

`nnheader-max-head-length'
     バックエンドが記事の連続したヘッダー部を読んでいるときは、できる限
     り少ない量だけを読もうとします。この変数 (ディフォルト 8192) は、
     バックエンドがヘッダーと本文の間の区切り行の捜索を諦める前に読み込
     む絶対最大長を指定します。この変数が `nil' であれば、読み込み上限
     はありません。もし `t' であれば、バックエンドは記事を部分部分で読
     み込もうとはせず、記事全体を読み込みます。これは `ange-ftp' や
     `efs' のあるバージョンで意味を持ちます。

`nnheader-head-chop-length'
     この変数 (ディフォルト 2048) は、前記の操作を行なっているときに、
     どれくらいの大きさの単位で各記事を読み込むかを設定します。

`nnheader-file-name-translation-alist'
     これはファイル名の文字をどのように変換するかを指定する連想リストで
     す。例えば、もし `:' があなたのシステムではファイル名の文字として
     は使えない場合 (あなたは OS/2 利用者ですね)、以下のようにすること
     ができます。

          (setq nnheader-file-name-translation-alist
                '((?: . ?_)))

     実際には、これは OS/2 と MS Windows (ちぇっ!) システム上でのこの変
     数のディフォルト値です。

`gnus-hidden-properties'
     これは「不可視」テキストを隠すために使われる属性のリストです。ほと
     んどのシステムではディフォルトは `(invisible t intangible t)' で、
     これは不可視テキストを見えなくして触れないようにします。

`gnus-parse-headers-hook'
     ヘッダーを解釈する前に呼び出されるフック。これは例えば、取得したヘッ
     ダーの統計情報を取るとか、あるいはある種のヘッダーを取り除くことに
     使うことができます。まあ、私は何でこんなものが欲しいかよくわかんな
     いんだけどね。

`gnus-shell-command-separator'
     二つのシェル命令を区切るのに使用される文字列。ディフォルトは `;'
     です。

`gnus-invalid-group-regexp'
     利用者にグループ名を尋ねるときに使う、「無効な」グループ名に合致す
     る正規表現です。ディフォルト値は Gnus の内部動作をめちゃめちゃにし
     てしまうかもしれない、いくつかの *本当に* 使えないグループ名を引っ
     かけます。(通常、選択方法とグループの境界に使っている `:' などを許
     してしまうとまずい、ということです。)

     IMAP の利用者はグループ名に `/' を使いたいかもしれませんが。

`gnus-safe-html-newsgroups'
     Html 記事中のリンクがすべて安全であると見なされるグループです。値
     はそれらのグループに合致する正規表現、グループ名のリスト、または
     `nil' です。これは `mm-w3m-safe-url-regexp' より優先されます。ディ
     フォルト値は `"\\`nnrss[+:]"' です。これは emacs-w3m で記事を描画
     するときだけ、つまり `mm-text-html-renderer' が `w3m' に設定されて
     いるときだけ効果があります。*Note 表示のカスタマイズ:
     (emacs-mime-ja)Display Customization.



File: gnus-ja.info, Node: The End, Next: Appendices, Prev: Various, Up: Top

終わり
******

はい、以上がマニュアルです--あなたはもう自分自身の人生を送ることができ
ます。連絡をとってください。あなたの猫によろしく伝えてください。

おお、*神よ*---さよならを耐えることはできません。(すすり泣き。)

チャールズ・レズニコフはそれを非常によく表しているので、ここは彼のため
に譲ります:

     賛美の歌 (テデウム)

     勝利ゆえにぼくは
     歌うのではない、
     勝利などひとつもないから、
     ありふれた日光のため、
     そよ風のため、
     春の気前よさのために歌う。

     勝利のためではなく
     僕としては精一杯やった
     一日の仕事のために。
     玉座のためではなく
     みんなのテーブルの席で。

(新潮文庫「空腹の技法」著:ポールオースター、訳:柴田元幸、畔柳和代、
ISBN:4102451080 より引用)



File: gnus-ja.info, Node: Appendices, Next: GNU Free Documentation License, Prev: The End, Up: Top

付録
****

* Menu:

* XEmacs::                      XEmacs でインストールするための要件
* History::                     どうやって Gnus が今日のようになったか
* On Writing Manuals::          なぜこれが初心者用の案内でないか
* Terminology::                 ここにあるような本当に難しい語を使う
* Customization::               あなたの要求に沿って Gnus を仕立てる
* Troubleshooting::             うまくいかないときに何を試すか
* Gnus Reference Guide::        色々な技術的なもの
* Emacs for Heathens::          Emacs の用語の手短かな紹介
* Frequently Asked Questions::  Gnus の FAQ



File: gnus-ja.info, Node: XEmacs, Next: History, Prev: Appendices, Up: Appendices

XEmacs
======

XEmacs はパッケージの集合として配布されています。Gnus の XEmacs パッケー
ジが必要とするものは何であれ、あなたはインストールすべきです。今のところ
必要なのは `gnus', `mail-lib', `xemacs-base',
`eterm', `sh-script', `net-utils', `os-utils',
`dired', `mh-e', `sieve', `ps-print', `W3',
`pgg', `mailcrypt', `ecrypto' および `sasl' です。



File: gnus-ja.info, Node: History, Next: The Manual, Prev: XEmacs, Up: Appendices

歴史
====

GNUS は梅田政信氏によって書かれました。1994年の秋が忍び寄ってくるころ、
退屈していたラルス・マッグヌ・イングブリグットスン (Lars Magne
Ingebrigtsen) は Gnus を書き直そうと決心しました。

この非道な行為の責任者を調べてみたいのなら、あなたの (いまいましい!) ウェ
ブブラウザーを `http://quimby.gnus.org/' に向けることができます。これは
新しくて粋な版の Gnus の第一配布場所で、Newsrc をぶっ壊して人々を激怒さ
せるサイトとしても知られています。

最初のアルファ版の開発期間に、新しい Gnus は“(ding) Gnus”と呼ばれてい
ました。"(ding)" はもちろん、"ding is not Gnus" の短縮形で、これはまっ
たく完全な嘘ですが、だれがそんなことを気にするでしょうか? (ところで、こ
の短縮形の“Gnus”はおそらく梅田さんの意図通り「ニュース」と発音される
べきで、そうするともっと適切な名前になります。そう思いませんか?)

どちらにせよ、すべてのエネルギーを新しい元気の良い名前を付けるのに使い
果たした後で、その名前は *あまりに* 元気が良すぎるということになり、そ
れを“Gnus”と再び命名しました。でも、今回は大文字と小文字を混ぜていま
す。“Gnus”と“GNUS”です。新しいもの と 古いもの。

* Menu:

* Gnus Versions::               どんなバージョンの Gnus がリリースされているか
* Other Gnus Versions::         リリースされている他のバージョンの gnus
* Why?::                        Gnus の目的は何?
* Compatibility::               Gnus は GNUS とどれくらい互換性があるの?
* Conformity::                  Gnus はすべての標準を満たそうとする
* Emacsen::                     Gnus は少数の現代的な Emacs で実行できる
* Gnus Development::            Gnus が開発されている方法
* Contributors::                たくさんの人々
* New Features::                Gnus の新しいことに関する手がかり



File: gnus-ja.info, Node: Gnus Versions, Next: Other Gnus Versions, Prev: History, Up: History

Gnus Versions
-------------

最初の「正しい」Gnus 5 のリリースは 1995年11月に Emacs 19.30 の配布に含
まれたときになされました (132 の (ding) Gnus のリリース 足すことの
Gnus 5.0 の 15 リリース)。

1996年3月に次の世代の Gnus (別名“September Gnus”(99 リリースの後で))
が“Gnus 5.2”という名前でリリースされました (40 リリース)。

1996年の 7月28日に Red Gnus の作業が始まり、それは 1997年1月25日に (84
リリースの後で)“Gnus 5.4”としてリリースされました (67 リリース)。

1997年9月13日に、Quassia Gnus が開始され、37 リリース続きました。それは
“Gnus 5.6”として 1998年3月8日にリリースされました (46 リリース)。

1998年8月29日に Gnus 5.6 から Pterodactyl Gnus が生まれ、1999年12月3日
に (99 リリースと CVS リポジトリでの作業の後)“Gnus 5.8”としてリリース
されました。

2000年10月26日に Oort Gnus が開始され、2003年5月1日に Gnus 5.10 として
リリースされました (24 リリース)。

2004年1月4日に No Gnus が始まりました。

接頭語を持った版の Gnus---“(ding) Gnus”,“September Gnus”,“Red
Gnus”,“Quassia Gnus”,“Pterodactyl Gnus”,“Oort Gnus”,“No
Gnus”---に出会っても、混乱しないでください。あなたが恐がっていることを
知られてはいけません。後ろに下がりなさい。ゆっくりと。他に何をしても、
走ってはいけません。それが届かくなるまで、静かに歩き去りなさい。正しく
リリースされた版の Gnus を見つけて、代わりにそれにすり寄りなさい。



File: gnus-ja.info, Node: Other Gnus Versions, Next: Why?, Prev: Gnus Versions, Up: History

他の Gnus のバージョン
----------------------

Lars さんが調製してリリースした Gnus に加えて、日本では Semi-gnus の開
発が行なわれています。これは SEMI という MIME の機能を実現するためのラ
イブラリーを使うことを前提としています。

これらの gnus は、主に Gnus 5.6 と Pterodactyl Gnus を元にしています。
それらは“Semi-gnus”と総称され、T-gnus, Nana-gnus および Chaos の異なっ
た系統があります。これらは強力な MIME の機能と各国語対応の機能を提供す
るもので、特に日本人の利用者にとって大事なものです。



File: gnus-ja.info, Node: Why?, Next: Compatibility, Prev: Other Gnus Versions, Up: History

なぜ?
-----

Gnus の目的は何ですか?

私は、あなたの考え付くことをすべてできる「いかす」「盛り上がってる」
「かっこいい」「しゃれた」ニュースリーダーを提供したいと思います。これ
は私の大元の動機だったのですが、Gnus の作業をしている間に、この世代の
ニュースリーダーは本当に石器時代に属していることが明らかになりました。
ニュースリーダーは、インターネットの揺籃期からほとんど発展していません
でした。もし現在の増加率で流通量が増加しつづければ、すべての現在のニュー
スリーダーはまったく役に立たなくなるでしょう。毎日何千もの新しい記事が
やってくるニュースグループを扱うにはどうすれば良いのでしょう? 数百万の
投稿者に遅れないように付いていくにはどうすれば良いのでしょう?

Gnus はこれらの質問に真の解決を提供するわけではありませんが、私は Gnus
がニュースを読み、取得するための新しい方法を実験する場として使われるこ
とを、是非とも見届けたいのです。ニュースリーダーをバックエンドから分離
するという梅田さんの賢明な方針を拡張することによって、今や Gnus はメー
ルを取得したり、異なる出所からニュースを取得するための新しいバックエン
ドを書きたい人のために、シンプルなインターフェースを提供しています。私
は役に立ちそうなすべての場所に、カスタマイズのためのフックを加えました。
それによって、探検し、発明したいすべての人を招いているのです。

おそらく Gnus は完成することはないのかもしれません。`C-u 100 M-x
all-hail-emacs' と `C-u 100 M-x all-hail-xemacs' です。



File: gnus-ja.info, Node: Compatibility, Next: Conformity, Prev: Why?, Up: History

互換性
------

Gnus は GNUS と完全に互換性があるように設計されています。ほとんどすべて
のキーの割り当てはそのまま残っています。もちろん、多くのキーの割り当て
が追加されましたが、一つか二つの目に付かないものを除いて、古い割り当て
が変更されたことはありません。

私たちのモットーは:

                           鋼鉄の骨組みの空高く

です。(訳注: チャールズ・レズニコフの詩“The Bridge”の引用。この詩の本
体はたった一行“In a cloud bones of steel.”だけ。直訳すれば「雲の中に
鋼の骨たち」。)

すべての命令は名前が変わっていません。いくつかの内部関数は名前を変えま
した。

`gnus-uu' パッケージは劇的に変化しています。*Note Decoding Articles::.

主要な互換性の問題の一つは、複数の概略バッファーが存在することです。グ
ループを読んでいるときに関連するすべての変数は、それが属する概略バッ
ファーでバッファーローカルです。概略バッファーでコマンドが実行されると
きはいつでも、多くの重要な変数がそれのグローバルな値にも複製されますが、
あなたが注意していないと、その変更は正しくない値が使われることをもたら
すかもしれません。

GNUS の内部の知識に依存したすべてのコードは実行できないでしょう。二つ例
を挙げます: `gnus-newsrc-alist' の並べ替え (もしくは、実際は何らかの方
法でそれを変更すること) は厳しく禁止されています。Gnus はこの連想リスト
の項目を指し示すハッシュテーブルを維持しており (それは多くの関数の速度
を上げます)、直接連想リストを変更することは異常な結果をもたらすでしょう。

古い hilit19 のコードはまったく動作しません。実際のところ、おそらくすべ
ての hilit コードをすべての Gnus のフック (`gnus-group-prepare-hook' お
よび `gnus-summary-prepare-hook') から取り除くべきです。Gnus はハイライ
トのためのいろいろな統合された関数を提供します。これらはもっと速くもっ
と正確です。すべての人の人生を楽にするために、Gnus はディフォルトですべ
ての hilit フックからすべての hilit 呼び出しを取り除きます。きたないも
の! 失せろ!

`expire-kill' のようなパッケージはもう動作しません。実際 Gnus を使い始
めたときには、おそらくすべての古い GNUS パッケージ (と他のコード) を消
去するべきでしょう。GNUS に実行させるために書いたコードは、Gnus がすで
に実行しているということは良くあることです。(くすくす。)

ものごとを実行する古いやり方はまだ使うことができますが、新しいやり方だ
けがこのマニュアルに記載されています。もしこのマニュアルを読んでいる間
に何かをする新しいやり方を発見しても、古いやり方を止めなければならない
ということではありません。

Gnus はすべての GNUS の起動ファイルを理解します。

全体として、GNUS の内部に依存したコードをほとんど書いていない普通の利用
者は、問題に苦しむことはないでしょう。もし問題が起こったら、魔法の
`M-x gnus-bug' 命令を実行することによって私に知らせてください。

*非常に* よくバグ報告を送る習慣があるのなら、あなたの役に立とうとす
る help バッファーが、しばらくするとうるさく感じるかもしれません。そうな
らば、それが表示されないようにするために、
`gnus-bug-create-help-buffer' を `nil' に設定してください。



File: gnus-ja.info, Node: Conformity, Next: Emacsen, Prev: Compatibility, Up: History

標準への準拠
------------

理由無き反抗などと申すものはございませんよ、奥様。私たちはすべての知ら
れている標準に準拠しています。もちろん私たちが賛成できない標準と/もしく
は習慣は除きますが。

*RFC (2)822*
     この標準への知られている違反はありません。

*RFC 1036*
     この標準も知られている違反はありません。

*Son-of-RFC 1036*
     これにはいくつかの違反があります。

     *X-Newsreader*
     *User-Agent*
          これらは「つまらないヘッダー」と見なされていますが、私は消費
          者の情報であると考えています。`tin' と `Netscape' から送られ
          てくる非常に多くの酷い記事を見た後では、私は記事を投稿するた
          めにはそれらを使わない方が良いということを知っています。もし
          `X-Newsreader' ヘッダーが無ければ、私はその情報を得ることはな
          かったでしょう。

*USEFOR*
     USEFOR は、Son-of-RFC 1036 に基づいて IETF の作業部会が RFC 1036
     の後継として書いているものです。ニュース記事の様式に対して、いろい
     ろな変更を提案した草稿を作成しました。その草稿が RFC として受け入
     れられたときに、Gnus タワーはその変更の実装を調べることになるでしょ
     う。

*MIME - RFC 2045-2049 etc*
     MIME 関連のすべての RFC がサポートされています。

*Disposition Notifications - RFC 2298*
     Message Mode は受信者からの開封確認を要求することができます。

*PGP - RFC 1991 and RFC 2440*
     RFC 1991 は最初の PGP メッセージの規格で、Informational RFC (訳注:
     後述の標準化トラックではないが有用な情報) として発行されました。現
     在 Open PGP と呼ばれる後継の RFC 2440 が、標準化トラック (訳注:
     Standards Track--国際標準とすべき仕様) に乗せられました。どちらも
     非-MIME メッセージのための PGP の様式を定義します。Gnus はエンコー
     ド (署名および暗号化) とデコード (認証および暗号のデコード) の両方
     をサポートします。

*PGP/MIME - RFC 2015/3156*
     RFC 2015 (RFC 1991 の代わりに RFC 2440 に基づいた 3156 で置き換え
     られました) は、RFC 1991/2440 を MIME で囲う様式について述べていま
     す。Gnus はエンコードとデコードの両方をサポートします。

*S/MIME - RFC 2633*
     RFC 2633 は S/MIME の形式について述べています。

*IMAP - RFC 1730/2060, RFC 2195, RFC 2086, RFC 2359, RFC 2595, RFC 1731*
     RFC 1730 は IMAP バージョン 4 で、RFC 2060 (IMAP 4 改定 1) で多少
     更新されています。RFC 2195 は IMAP の CRAM-MD5 認証について述べて
     います。RFC 2086 は IMAP の使用制限一覧 (ACL) について述べています。
     RFC 2359 は IMAP のプロトコルの拡張について述べています。RFC 2595
     は IMAP における適切な TLS の統合 (STARTTLS) について述べています。
     RFC 1731 は IMAP の GSSAPI/Kerberos4 の手法について述べています。

上に書かれている文章に関することで、Gnus がそれを満たしていないような動
作をしていることに気付いたら、ためらわずに Gnus タワーと私たちに知らせ
てください。



File: gnus-ja.info, Node: Emacsen, Next: Gnus Development, Prev: Conformity, Up: History

Emacsen
-------

このバージョンの Gnus は以下のもので動作します:

   * Emacs 21.1 とそれ以上。

   * XEmacs 21.4 とそれ以上。

この Gnus の版はこれより古いどんな Emacsen でも完全に動作しないでしょう。
少なくとも信頼できる動作はしないでしょう。古い版の Gnus は古い Emacs の
版でも動作するでしょう。特に Gnus 5.10.8 は Emacs 20.7 と XEmacs 21.1
でも動くはずです。



File: gnus-ja.info, Node: Gnus Development, Next: Contributors, Prev: Emacsen, Up: History

Gnus の開発
-----------

Gnus は二つのサイクルで開発されています。最初のサイクルでは開発メーリン
グリスト `ding@gnus.org' でたくさんの議論を行ないます。そこでは人々が変
更や新しい機能の提案をしたり、パッチや新しいバックエンドを投稿します。
この段階は「アルファ」段階と呼ばれています。というのは、この段階でリリー
スされた Gnusae は「アルファリリース」もしくは (他の団体ではより良く使
われる)「スナップショット」と呼ばれるものだからです。この段階では Gnus
は不安定で、一般の利用者によって使われるべきではないと考えられています。
Gnus のアルファリリースは“Oort Gnus”や“No Gnus”のような名前になって
います。*Note Gnus Versions::.

のらくらと 10-100 くらいのアルファリリースをした後で、Gnus は「凍結」さ
れたと宣言され、バグ修正のみが適用されます。Gnus は接頭語を失い、その代
わりに“Gnus 5.10.1”のように呼ばれます。これらは普通の人が使うことがで
きるものと考えられ、主に `gnu.emacs.gnus' ニュースグループで議論されて
います。このニュースグループは `info-gnus-english@gnu.org' メーリングリ
ストにミラーされていて、それは `gmane.emacs.gnus.user' として Gmane に
も載っています。これらのリリースは最終的に Emacs に統合されます。

アルファ版の Gnus とリリースされた版の Gnus ではいくつかの変数、特に
`mail-source-delete-incoming'、のディフォルトが異なります。これはメール
を扱っている際に、アルファリリースがしゃっくりをしてメールを失なうこと
を避けるためです。*Note Mail Source Customization::.

ding メーリングリストと Gnus ニュースグループにおける議論は、純粋に公衆
の関心によって分離されているわけではありません。アルファ Gnus リリース
が (ときどき) するかもしれない恐ろしいことを公衆の場で書くのは、皆を恐
れさせるというのも真実ですが、もっと重要なことは、導入された新しい実験
的な機能について話すことが、一般の利用者を混乱させるかもしれないという
ことです。新しい機能は頻繁に導入され、いじくられ、不十分であると判断さ
れ、そうすると捨てられるか、完全に書き換えられるかのどちらかです。メー
リングリストを読んでいる人は普通はこの速い変更に付いていきますが、ニュー
スグループの人もそうであると見なすことはできません。

したがってアルファ版の問題やそれに関する質問があるなら、それらは ding
メーリングリスト `ding@gnus.org' に向けてください。このリストは Gmane
に `gmane.emacs.gnus.general' としてもあります。

いくつかの変数、特に `mail-source-delete-incoming' のディフォルト値
はアルファ Gnus とリリースされた Gnus で異なっています。これはアルファ版
がメールを扱っているときに、もし、しゃっくりをしても、メールが失われてし
まうことを防ぐためです。
*Note Mail Source Customization::.



File: gnus-ja.info, Node: Contributors, Next: New Features, Prev: Gnus Development, Up: History

貢献者
------

新しい Gnus の版は (ding) メーリングリストのすべての人たちの助けが無け
ればできなかったでしょう。一年以上にわたって、私は毎日彼らから莫大な数
の素敵なバグレポートを受け取り、そのそれぞれが私を喜びで満たしました。
投げキッス。このリストの人たちは、私のリリース方針のために耐え難きを耐
える試練に遭いました: 「あぁ、それはすばらしい考えだ <かしゃかしゃか
しゃ…> よしっ、すぐにリリースだ <えいやっ> あれれっ、まったく動かない
ぞ <かしゃかしゃかしゃ…> よしっ、すぐに出そう <ほらよっ> おっと、待っ
た、ぜんぜん動作しない…」。Micro$oft--あっかんべーだ。アマチュアめ。私
は *もっと* 悪い。(それとも「より悪い」?「もっと悪い」?「最悪」?)

私はこの機会に学会に感謝を... おおっと、違った。

   * 梅田政信--元の GNUS を書いた人です。

   * Shenghuo Zhu--uudecode.el, mm-uu.el, rfc1843.el, webmail.el,
     nnwarchive, それに一般的なバグ修正、新しい機能などはもとより MIME
     と他の形式のエンコード/デコードに関連するほんとうに多くのもの。

   * Per Abrahamsen--custom、スコア、ハイライトと SOUP コード (他の多く
     のことと共に)。

   * Luis Fernandes--デザインとグラフィック。

   * Joe Reiss--スマイリーの顔の作者。

   * Justin Sheehy---FAQ のメインテイナー。

   * Erik Naggum--手助け、アイデア、支援、コード他。

   * Wes Hardaker---`gnus-picon.el' とマニュアルの "picon" の章 (*Note
     Picons::)。

   * Kim-Minh Kaplan--picon コードにおける更なる作業。

   * Brad Miller---`gnus-gl.el' とマニュアルの Grouplens の章。

   * Sudish Joseph--数え切れないほどのバグの修正。

   * Ilja Weis---`gnus-topic.el'。

   * Steven L. Baur--たくさんのたくさんのたくさんのバグの発見と修正。

   * Vladimir Alexiev--refcard とリファレンスの小冊子。

   * Felix Lee & Jamie Zawinski--私は Felix Lee と JWZ の XGnus 配布か
     らいくつかの部分を盗みました。

   * Scott Byer---`nnfolder.el' の拡張と改訂。

   * Peter Mutsaers--孤児記事のスコアコード。

   * Ken Raebburn---POP メールサポート。

   * Hallvard B Furuseth--いろいろな小さな物や部分、特に .newsrc ファイ
     ルを扱う部分。

   * Brian Edmonds---`gnus-bbdb.el'。

   * David Moore---`nnvirtual.el' の改訂と多くの他のこと。

   * Kevin Davidson---"ding" の名前を思い付きました。ですから、彼を責め
     てください。

   * Fran,Agois Pinard--多くの、多くの興味深く完全なバグレポートと
     autoconf のサポート。

このマニュアル (Gnus 英語版) は Adrian Aichner と Ricardo Nassif, Mark
Borges によって校正され、Jost Krieger によって一部分を校正されました。

以下の人々は多くのパッチと提案で貢献しました:

Christopher Davis, Andrew Eskilsson, Kai Grossjohann, Kevin Greiner,
Jesper Harder, Paul Jarc, Simon Josefsson, David K,Aegedal, Richard
Pieri, Fabrice Popineau, Daniel Quinlan, Michael Shields, Reiner
Steib, Jason L. Tibbitts, III, Jack Vinson, 山岡 克美, and Teodor
Zlatanov.

それと、以下の人にもパッチやその他のものを感謝します:

Jari Aalto, Adrian Aichner, Vladimir Alexiev, Russ Allbery, Peter
Arius, Matt Armstrong, Marc Auslander, Miles Bader, Frank Bennett,
Alexei V. Barantsev, Robert Bihlmeyer, Chris Bone, Mark Borges, Mark
Boyns, Rob Browning, Lance A. Brown, Kees de Bruin, Martin Buchholz,
Joe Buehler, Kevin Buhr, Alastair Burt, Joao Cachopo, Zlatko Calusic,
Massimo Campostrini, Castor, David Charlap, Dan Christensen, Kevin
Christian, Jae-you Chung, James H. Cloos, Jr., Laura Conrad, Michael
R. Cook, Glenn Coombs, Andrew J. Cosgriff, Neil Crellin, Frank
D. Cringle, Geoffrey T. Dairiki, Andre Deparade, Ulrik Dickow, Dave
Disser, Rui-Tao Dong, Joev Dubach, Michael Welsh Duggan, Dave
Edmondson, Paul Eggert, Mark W. Eichin, Karl Eichwalder, 榎並 嗣智,
Michael Ernst, Luc Van Eycken, Sam Falkner, Nelson Jose dos Santos
Ferreira, Sigbjorn Finne, Sven Fischer, Paul Fisher, Decklin Foster,
Gary D. Foster, Paul Franklin, Guy Geens, Arne Georg Gleditsch, David
S. Goldberg, Michelangelo Grigni, Dale Hagglund, D. Hall, Magnus
Hammerin, 半田 剣一, Raja R. Harinath, 林 芳樹, P. E. Jareth Hein, ひさ
しげ けんじ, Scott Hofmann, Tassilo Horn, Marc Horowitz, Gunnar
Horrigmo, Richard Hoskins, Brad Howes, Miguel de Icaza, Fran,Agois Felix
Ingrand, 市川 達哉, 石川 一郎, Lee Iverson, 岩室 元典, Rajappa Iyer,
Andreas Jaeger, Adam P. Jenkins, Randell Jesup, Fred Johansen, Gareth
Jones, Greg Klanderman, Karl Kleinpaste, Michael Klingbeil, Peter Skov
Knudsen, 小林 修平, Petr Konecny, 小関 吉則, Thor Kristoffersen, Jens
Lautenbacher, Martin Larose, Seokchan Lee, Joerg Lenneis, Carsten
Leonhardt, James LewisMoss, Christian Limpach, Markus Linnala, Dave
Love, Mike McEwan, Tonny Madsen, Shlomo Mahlab, Nat Makarevitch,
Istvan Marko, David Martin, Jason R. Mastaler, Gordon Matzigkeit, Timo
Metzemakers, Richard Mlynarik, Lantz Moore, 守岡 知彦, Erik Toubro
Nielsen, Hrvoje Niksic, Andy Norman, Fred Oberhauser, C. R. Oldham,
Alexandre Oliva, Ken Olstad, 大西 雅晴, 小野 秀貴, Ettore Perazzoli,
William Perry, Stephen Peters, Jens-Ulrik Holger Petersen, Ulrich
Pfeifer, Matt Pharr, Andy Piper, John McClary Prevost, Bill
Pringlemeir, Mike Pullen, Jim Radford, Colin Rafferty, Lasse Rasinen,
Lars Balker Rasmussen, Joe Reiss, Renaud Rioboo, Roland B. Roberts,
Bart Robinson, Christian von Roques, Markus Rost, Jason Rumney,
Wolfgang Rupprecht, Jay Sachs, Dewey M. Sasser, Conrad Sauerwald,
Loren Schall, Dan Schmidt, Ralph Schleicher, Philippe Schnoebelen,
Andreas Schwab, Randal L. Schwartz, Justin Sheehy, Danny Siu, Matt
Simmons, Paul D. Smith, Jeff Sparkes, Toby Speight, Michael Sperber,
Darren Stalder, Richard Stallman, Greg Stark, Sam Steingold, Paul
Stevenson, Jonas Steverud, Paul Stodghill, 須藤 清一, Kurt Swanson,
Samuel Tardieu, Teddy, 戸沢 晶彦, Chuck Thompson, Philippe Troin,
James Troup, Trung Tran-Duc, Jack Twilley, Aaron M. Ucko, Aki Vehtari,
Didier Verna, Vladimir Volovich, Jan Vroonhof, Stefan Waldherr, Pete
Ware, Barry A. Warsaw, Christoph Wedler, Joe Wells, Lee Willis, and
Lloyd Zusman.

Gnus のアルファ配布に含まれている ChangeLog は、それぞれの人たちが行なっ
たことの完全な大要を伝える豊かな読み物です。(550KB といくらか)。(訳注:
非常に古い ChangeLog の記述が何度かばっさり捨てられましたが、それでも現
在は非常に大きなサイズになっています。)

私が忘れてしまったすべての人に謝罪します。間違いなくたくさんの人を忘れ
てしまったことでしょう。

わぁ、こんなに人がいるとは思わなかった。これは本当に Gnus を使っている
人がいるということなんでしょう。そんなことを誰が想像したでしょうか!



File: gnus-ja.info, Node: New Features, Prev: Contributors, Up: History

新しい機能
----------

* Menu:

* ding Gnus::                   最初の新しい Gnus である Gnus 5.0/5.1 の新しいこと
* September Gnus::              公式に Gnus 5.2/5.3 として知られているもの
* Red Gnus::                    三番目の最上のもの--Gnus 5.4/5.5
* Quassia Gnus::                2 かける 2 は 4、もしくは Gnus 5.6/5.7
* Pterodactyl Gnus::            神秘の数も P で始まるけれど。Gnus 5.8/5.9 の別名
* Oort Gnus::                   巨大な。遠く遥かな。Gnus 5.10/5.11。
* No Gnus::                     超やばい

これらのリストは、もちろん *たいていの* 重要な新しい機能に関する *短い
* 要約でしかありません。いいえ、実は違います。もっともっとたくさんのも
のがあるのです。そう、事実上私たちは十分に用の無いもの (feeping
creaturism) を持っているのです。



File: gnus-ja.info, Node: ding Gnus, Next: September Gnus, Prev: New Features, Up: New Features

(ding) Gnus
...........

Gnus 5.0/5.1 の新しい機能:

   * すべてのバッファーの外観は、フォーマットのような変数 (*Note Group
     Buffer Format:: and *Note Summary Buffer Format::) によって設定を
     変えることができるようになりました。

   * ローカルスプールと、いくつかの NNTP サーバーを同時に使うことができ
     るようになりました (*Note Select Methods::)。

   * 複数のグループを仮想グループに合併できるようになりました (*Note
     Virtual Groups::)。

   * 多くの異なるメール様式を読めるようになりました (*Note Getting
     Mail::)。すべてのメールバックエンドは、便利なメール期限切れ消去機
     構を実装しています (*Note Expiring Mail::)。

   * Gnus は根っこ (root) を失ったスレッドを集めるためのいろいろな戦略
     (それによってまばらな副スレッドを一つのスレッドにする) を使ったり、
     完全なスレッドを組み上げるのに十分なヘッダーをいったん戻って取得す
     ることができます (*Note Customizing Threading::)。

   * 切られたグループ (killed groups) はグループバッファーに表示するこ
     とができて、それらも読むことができます (*Note Listing Groups::)。

   * Gnus はグループを部分的に更新することができます--2,3 のグループの
     新しい記事を調べるために、アクティブファイル全体を取得する必要はあ
     りません (*Note The Active File::)。

   * Gnus はグループの段階的購読度を実装しました (*Note Group
     Levels::)。

   * 何種類もの基準に従って、記事にスコアを付けることができます (*Note
     Scoring::)。どのように記事にスコアを付けるかを、Gnus に見つけさせ
     ることもできます (*Note Adaptive Scoring::)。

   * Gnus は普通の Emacs の方法で自動保存されるドリブルバッファーを維持
     するので、あなたが何を読んだかのデータをマシンが落ちたときでもあま
     り失わないでしょう (*Note Auto Save::)。

   * Gnus は `.emacs' ファイルをぐちゃぐちゃにすることを避けるために、
     今では専用の起動ファイル (`~/.gnus.el') を持つようになりました。

   * グループと記事の両方にプロセス印を付けることができ、すべての印の付
     いた項目で処理を実行することができます (*Note Process/Prefix::)。

   * グループ群の一部を grep して、その結果から一つのグループを作ること
     ができます (*Note Kibozed Groups::)。

   * グループの一覧を、えーと、どんな条件ででも、表示することができます
     (*Note Listing Groups::)。

   * 外部サーバーを概観して、それらのサーバーのグループを購読することが
     できます (*Note Browse Foreign Server::)。

   * Gnus はサーバーとの二つ目の接続で、記事を非同期に取ってくることが
     できます (*Note Asynchronous Fetching::)。

   * 記事をローカルにキャッシュすることができます (*Note Article
     Caching::)。

   * uudecode の関数が拡張され、一般化されました (*Note Decoding
     Articles::)。

   * uuencode された記事をまだ投稿することができます。これは過去に
     GNUS のあまり知られていない機能でした (*Note Uuencoding and
     Posting::)。

   * 親記事 (と他の記事) の取得は、今では調子が悪くなることも無く、実際
     に動作するようになりました (*Note Finding the Parent::)。

   * Gnus は FAQ とグループの説明を取得することができます (*Note Group
     Information::)。

   * まとめ送りされた記事 (および他のファイル) を、グループとして使える
     ようになりました (*Note Document Groups::)。

   * 記事をハイライトし、カスタマイズすることができます (*Note
     Customizing Articles::)。

   * URL と他の外部参照がボタンになるようになりました (*Note Article
     Buttons::)。

   * Gnus のウィンドウとフレームの設定でたくさんの変なことをできるよう
     になりました (*Note Window Layout::)。

   * キーボードを使う代わりに、ボタンをクリックできるようになりました
     (*Note Buttons::)。



File: gnus-ja.info, Node: September Gnus, Next: Red Gnus, Prev: ding Gnus, Up: New Features

September Gnus
..............

Gnus 5.2/5.3 の新しい機能:

   * 新しいメッセージ作成モードが使われます。`mail-mode',
     `rnews-reply-mode' と `gnus-msg' のすべての古いカスタマイズ変数は
     今や旧式になりました。

   * Gnus は「まばら」スレッドを作成することができるようになりました--
     スレッドの失われた記事があるところは、空の節で表現されるようになっ
     ています (*Note Customizing Threading::)。

          (setq gnus-build-sparse-threads 'some)

   * 外に出ていく記事は、特別な保管サーバーに保存されるようになりました
     (*Note Archived Messages::)。

   * 記事が参照されたときに、スレッドの部分作成が行なわれるようになりま
     した。

   * Gnus は GroupLens の予測を利用することができるようになりました。

   * Picons (personal icons) (個人アイコン) が XEmacs で表示できるよう
     になりました (*Note Picons::)。

   * `trn' のような木バッファーを表示できるようになりました (*Note
     Tree Display::)。

          (setq gnus-use-trees t)

   * ニュースリーダー `nn' のような、選んで読むマイナーモードを概略バッ
     ファーで使うことができるようになりました (*Note Pick and Read::)。

          (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

   * バイナリーグループで特別なバイナリーマイナーモードを使うことができ
     るようになりました (*Note Binary Groups::)。

   * グループ群を折り畳みトピック階層にグループ分けできるようになりまし
     た (*Note Group Topics::)。

          (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

   * メールの再送と、弾かれたメールを送り直すことができるようになりまし
     た (*Note Summary Mail Commands::)。

   * グループがスコアを持つことができるようになり、訪れる回数に基づいた
     並べ替えが可能になりました (*Note Group Score::)。

          (add-hook 'gnus-summary-exit-hook 'gnus-summary-bubble-group)

   * グループにプロセス印を付けられるようになり、グループのグループに対
     して命令を実行できるようになりました (*Note Marking Groups::)。

   * 仮想グループでキャッシュができるようになりました。

   * `nndoc' はすべての種類のまとめ送り、メールボックス、rnews ニュース
     の一括配送、ClariNet の要約集、そしてその他のすべてを理解できるよ
     うになりました (*Note Document Groups::)。

   * Gnus は SOUP パケットを作成/読み込みをするための新しいバックエンド
     (`nnsoup') を持っています。

   * キャッシュがずっと速くなりました。

   * グループを多くの基準に従って並べ替えることができるようになりました
     (*Note Sorting Groups::)。

   * メーリングリストのアドレスと期限切れ消去の時間を設定する、新しいグ
     ループパラメーターが導入されました (*Note Group Parameters::)。

   * すべてのフォーマット指定で、フェースを指定できるようになりました
     (*Note Formatting Fonts::)。

   * `M P' 副キーマップに、プロセス印の付いた記事の設定/削除/実行のため
     の複数の命令が追加されました (*Note Setting Process Marks::)。

   * 広範囲の基準に基づいて、概略バッファーが利用可能な記事の一部だけを
     表示するように制限できるようになりました。これらの命令は `/' 副マッ
     プのキーにバインドされています (*Note Limiting::)。

   * `*' 命令によって、記事を永続させることができるようになりました
     (*Note Persistent Articles::)。

   * 記事の要素を隠すすべての関数は、トグルになりました。

   * 記事のヘッダーにボタンを付けることができるようになりました (*Note
     Article Washing::)。

   * すべてのメールバックエンドで、`Message-ID' による記事の取得をサポー
     トするようになりました。

   * 重複メールを適切に扱うことができるようになりました (*Note
     Duplicates::)。

   * すべての概略モード命令を、記事バッファーから直接使用できるようにな
     りました (*Note Article Keymap::)。

   * フレームが `gnus-buffer-configuration' の部分になることができるよ
     うになりました (*Note Window Layout::)。

   * デーモンのプロセスによって、新着メールを検査できるようになりました
     (*Note Daemons::)。

   * Gnus は spam を根絶やしにするために、NoCeM ファイルを利用できるよ
     うになりました (*Note NoCeM::)。

          (setq gnus-use-nocem t)

   * グループを常に見えるようにしておくことが (訳注: そのグループに未読
     記事が無くても)、できるようになりました (*Note Listing Groups::)。

          (setq gnus-permanently-visible-groups "^nnml:")

   * カスタマイズを楽にするために、多くの新しいフックが導入されました。

   * Gnus は `Mail-Copies-To' ヘッダーを尊重するようになりました。

   * `References' ヘッダーを調べることによって、スレッドを集めることが
     できるようになりました (*Note Customizing Threading::)。

          (setq gnus-summary-thread-gathering-function
                'gnus-gather-threads-by-references)

   * 再取得を避けるために、既読記事を特別なバックログ・バッファーに貯め
     ることができるようになりました (*Note Article Backlog::)。

          (setq gnus-keep-backlog 50)

   * 簡単にトリートメントを行なうことができるようにするために、現在の記
     事の完全な複製がいつも別バッファーに置かれるようになりました。

   * Gnus がどこに記事を保存するかを提案できるようになりました (*Note
     Saving Articles::)。

   * 記事を保存するときに、多くを入力しなくても良いようになりました
     (*Note Saving Articles::)。

          (setq gnus-prompt-before-saving t)

   * `gnus-uu' は記事を取得している間に、非同期でデコードされたファイル
     を表示できるようになりました (*Note Other Decode Variables::)。

          (setq gnus-uu-grabbed-file-functions 'gnus-uu-grab-view)

   * 記事バッファーで、引用されたテキストの折り返しが適切に動作するよう
     になりました (*Note Article Washing::)。

   * 引用されたテキストを表示するか隠すかを切り替えるためのボタンが追加
     されました。また、どのくらいの引用文を隠すかをカスタマイズできるよ
     うになりました (*Note Article Hiding::)。

          (setq gnus-cited-lines-visible 2)

   * 興味の無いヘッダーを隠すことができます (*Note Article Hiding::)。

   * スコアのディフォルト値をメニューバーから設定できるようになりました。

   * 送信される記事の更なる構文チェックが追加されました。



File: gnus-ja.info, Node: Red Gnus, Next: Quassia Gnus, Prev: September Gnus, Up: New Features

Red Gnus
........

Gnus 5.4/5.5 の新しい機能:

   * `nntp.el' は非同期に動作するやり方で、完全に改訂されました。

   * 記事の先行取得を行なう機能が Gnus に編入されました (*Note
     Asynchronous Fetching::)。

   * スコア付けは `and', `or', `not' のような論理演算子と、親記事にさか
     のぼってリダイレクトすることで実行できるようになりました (*Note
     Advanced Scoring::)。

   * 記事の洗濯状態を記事のモード行に表示できるようになりました (*Note
     Misc Article::)。

   * `gnus.el' が多くの小さいファイルに分割されました。

   * Message-ID に基づいて、記事の重複を抑制することができるようになり
     ました (*Note Duplicate Suppression::)。

          (setq gnus-suppress-duplicates t)

   * どのスコアと適応ファイルが、ホームスコアと適応ファイルであるかを指
     定する (*Note Home Score File::) 新しい変数が加えられました。

   * `nndoc' がより簡単に拡張できるように改訂されました (*Note
     Document Server Internals::)。

   * グループは親のトピックからグループパラメーターを継承できるようにな
     りました (*Note Topic Parameters::)。

   * 記事を編集するための機能が継ぎはぎされて、実際に使用可能になりまし
     た。

   * 署名がもっと利口なやり方で認識されるようになりました (*Note
     Article Signature::)。

   * 概略ピックモードがもっと (ニュースリーダー) `nn' らしくなりました。
     行番号が表示され、記事を選ぶために `.' 命令を使うことができるよう
     になりました (`Pick and Read')。

   * あるサーバーから別のサーバーへ `.newsrc.eld' を移動する命令が加え
     られました (*Note Changing Servers::)。

   * 今では、バッファーの行を作成するときに、抑制される「興味の無い」部
     分を指定する方法があります (*Note Advanced Formatting::)。

   * グループバッファーの複数の命令について、それらで行なったことを
     `C-M-_' で元に戻すことができるようになりました (*Note Undo::)。

   * 新しいスコア型 `w' を使うことによって、単語でスコア付けをすること
     が可能になりました (*Note Score File Format::)。

   * 表題の一語一語を基にして、適応スコアをすることができるようになりま
     した (*Note Adaptive Scoring::)。

          (setq gnus-use-adaptive-scoring '(word))

   * スコアを減衰させることができるようになりました (*Note Score
     Decays::)。

          (setq gnus-decay-scores t)

   * 正規表現を使って、日付のヘッダーでスコア付けを実行できるようになり
     ました。日付は最初にコンパクトな ISO 8601 様式で正規化されます
     (*Note Score File Format::)。

   * 記事に関するすべてのデータを、基本のサーバーから取り除く命令が加え
     られました (*Note Changing Servers::)。

   * 文書を寄せ集めたものを読むための新しい命令 (`nndoc' グループのてっ
     ぺんで `nnvirtual' を使います) が加えられました---`C-M-d' (*Note
     Really Various Summary Commands::)。

   * プロセス印の設定を push と pop でスタックに出し入れできるようにな
     りました (*Note Setting Process Marks::)。

   * NNTP サーバーが投稿を許可していない場合でも、新しい mail-to-news
     バックエンドが、投稿することを可能にしました (*Note Mail-To-News
     Gateways::)。

   * ウェブ検索エンジン ("DejaNews", "Alta Vista", "InReference") から
     の検索結果を読むための、新しいバックエンドが加えられました (*Note
     Web Searches::)。

   * 標準の並べ替え関数を使って、トピックの中にあるグループを並び代える
     ことができるようになりました。また、それぞれのトピックを独立して並
     べ替えることができるようになりました (*Note Topic Sorting::)。

   * グループ群の一部を、独立して並べ替えることができるようになりました
     (`Sorting')。

   * キャッシュされた記事を、グループに引き込むことができるようになりま
     した (*Note Summary Generation Commands::)。

   * スコアファイルがもっと信頼できる順番で適用されるようになりました
     (*Note Score Variables::)。

   * メールメッセージが分割されてどこに行くかの報告を、作成することがで
     きるようになりました (*Note Splitting Mail::)。

   * 入って来たメールを保存する前にがらくたを取り除くフックと関数が、もっ
     と追加されました (*Note Washing Mail::)。

   * 強調表示することを指定されたテキストが、適切に表示されるようになり
     ました。



File: gnus-ja.info, Node: Quassia Gnus, Next: Pterodactyl Gnus, Prev: Red Gnus, Up: New Features

Quassia Gnus
............

Gnus 5.6 の新しい機能:

   * Gnus をオフラインニュースリーダーとして使う新機能が加えられました。
     過剰なほどの新しい命令とモードが追加されました。全貌については
     *Note Gnus Unplugged:: を見てください。

   * `nndraft' バックエンドが戻ってきました。でも、依然とは違う動作をし
     ます。すべてのメッセージバッファーは、今では自動的に作成される
     `nndraft' グループの記事でもあります。

   * `gnus-alter-header-function' を、ヘッダーの値を変えるために使うこ
     とができるようになりました。

   * `gnus-summary-goto-article' が Message-ID を受け付けるようになりま
     した。

   * メッセージの本文において、指定したリージョン以外のテキストを消去す
     るための新しいメッセージ命令があります: `C-c C-v'。

   * `C-u C-c C-c' によって `nnvirtual' グループを構成しているグループ
     に投稿できるようになりました。

   * `nntp-rlogin-program'---カスタマイズを簡単にするための新しい変数で
     す。

   * `gnus-article-edit-mode' における `C-u C-c C-c' 命令は、記事バッ
     ファーの再ハイライトを抑制するようになりました。

   * `gnus-boring-article-headers' に、`long-to' という新しい要素があり
     ます。

   * `M-i' シンボル接頭引数命令があります。詳細は *Note Symbolic
     Prefixes:: を見てください。

   * 概略バッファーにおける `L' と `I' は、`all.SCORE' ファイルにスコア
     規則を加えるためのシンボル接頭引数 `a' を受け付けるようになりまし
     た。

   * 変数 `gnus-simplify-subject-functions' によって、表題の単純化を強
     力に制御できるようになりました。

   * `A T'---現在のスレッドを取得するための新しい命令です。

   * `/ T'---現在のスレッドを制限に含めるための新しい命令です。

   * `M-RET' は、引用文の途中に割って入るための新しいメッセージ命令です。

   * `\\1' のような表現が `nnmail-split-methods' で有効になりました。

   * 関数 `custom-face-lookup' が取り除かれました。あなたの初期化ファイ
     ルでこの関数を使っていたのなら、代わりに `face-spec-set' を使うよ
     うに書き直さなければなりません。

   * 投稿のキャンセルに、現在の選択方法を使うようになりました。シンボル
     接頭引数 `a' で、普通の投稿方法を強制することができます。

   * マ■■■ソ■■ sm*rtq**t*s を適切なテキストに翻案する新しい命令が
     あります---`W d'。

   * `nntp' のデバッグを楽にするために、`nntp-record-commands' を
     `nil' ではない値に設定することができます。

   * `nntp' は `~/.authinfo' を使うようになりました。これは `.netrc' の
     ようなファイルで、どこの NNTP サーバーにはどのように AUTHINFO を送
     るかを制御するためのものです。

   * 概略バッファーのグループパラメーターを編集するための命令が加えられ
     ました。

   * メールがどこに分割されたかの履歴を利用できるようになりました。

   * 記事の日付を表示するための新しい命令が加えられまし
     た---`article-date-iso8601'。

   * `gnus-score-thread-simplify' を設定することによって、スレッドを作
     成するときの表題を単純化できるようになりました。

   * メッセージで引用をするための新しい関数が加えられました---
     `message-cite-original-without-signature'。

   * `article-strip-all-blank-lines'---新しい記事命令です。

   * 記事の終わりまでを切り取る (kill する) 新しいメッセージ命令が加え
     られました。

   * 変数 `gnus-adaptive-word-minimum' を使うことによって、最小限度の適
     応スコアを指定することができます。

   * `gnus-start-date-timer' 命令によって「記事が投稿されたときからの経
     過時間」ヘッダーが継続的に更新されるようになりました。

   * ウェブで提供されているメーリングリストのアーカイブを、
     `nnlistserv' バックエンドによって読むことができるようになりました。

   * 古い dejanews アーカイブを `nnweb' で読むことができるようになりま
     した。



File: gnus-ja.info, Node: Pterodactyl Gnus, Next: Oort Gnus, Prev: Quassia Gnus, Up: New Features

Pterodactyl Gnus
................

Gnus 5.8 の新しい機能:

   * メールを取り込む機能が変わりました。たくさんの詳細についてはマニュ
     アルを見てください。特に procmail で取り込むためのすべての変数が無
     くなっています。

     以下のような procmail の使い方は

          (setq nnmail-use-procmail t)
          (setq nnmail-spool-file 'procmail)
          (setq nnmail-procmail-directory "~/mail/incoming/")
          (setq nnmail-procmail-suffix "\\.in")

     現在では次のように変わっています。

          (setq mail-sources
                '((directory :path "~/mail/incoming/"
                             :suffix ".in")))

     *Note Mail Source Specifiers::.

   * Gnus は MIME に対応したリーダーになりました。これは Gnus の多くの
     部分に影響していて、たくさんの新しいコマンドが追加されています。詳
     細はマニュアルを参照してください。

   * しかも Gnus は各国語対応になりました。ここでは要約できないくらいに
     Gnus の多くの部分に影響していて、新しいたくさんの変数が追加されて
     います。

   * `gnus-auto-select-first' が、ポイントを置く場所を決定するための関
     数であってもよくなりました。

   * 概略バッファーと NOV ファイルに含める追加のヘッダーを、利用者が決
     めることができるようになりました。

   * `gnus-article-display-hook' が削除されました。代わりに
     `gnus-treat-' で始まるたくさんの変数が追加されました。

   * Gnus posting styles が再び作り直されました。現在は微妙に違うやり方
     で動作します。

   * 新しいウェブに基づいたバックエンドが追加されました。`nnslashdot',
     `nnwarchive' および `nnultimate' です。nnweb は常に変化する構成を
     とり続けるために、再び作り直されました。

   * Gnus は `nnimap' によって IMAP のメールを読むことができます。



File: gnus-ja.info, Node: Oort Gnus, Next: No Gnus, Prev: Pterodactyl Gnus, Up: New Features

Oort Gnus
.........

Gnus 5.10 の新しい機能:

   * インストールに関する変更

        * Oort を使ったことがある場合の、以前の (安定な) 版からのグレー
          ドアップ。

          Oort (このリリースに先立つ安定ではない Gnus の枝) を使ってみ
          たものの、安定版に戻してしまったならば、この版にグレードアッ
          プするときに注意してください。特に、おそらくすべての
          `.marks' (nnml) と `.mrk' (nnfolder) ファイルを消去する必要が
          あるでしょう。その目的は、この版 (の Gnus) がフラグを格納する
          `.marks'/`.mrk' ファイルではなくて `.newsrc.eld' からフラグが
          読まれるようにするためです (訳注: 言い換えると、古い様式の
          `.marks'/`.mrk' ファイルを新しい Gnus が読んではいけないとい
          うことです。それらは新たに作成されます)。後述の項目で、印
          (marks) に関するより多くの情報を読んでください。グレードを下
          げても一般には助けにならないことに注意してください。

        * Lisp ファイルがディフォルトで `.../site-lisp/gnus/' にインス
          トールされるようになりました。以前は `.../site-lisp/' がディ
          フォルトでした。加えて、新しいインストーラーは他にインストー
          ルされている、新しい Gnus より優先される Gnus を検出して警告
          を発します。それらを手動で取り除いても良いし、`make
          remove-installed-shadows' を使って削除することもできます。

        * MS ウィンドウズで Gnus をコンパイルしてインストールするための、
          新しい `make.bat'。

          MS ウィンドウズで Gnus をインストールするには `make.bat' を使っ
          てください。このバッチ・プログラムの第一引数はディレクトリー
          です。そこで `xemacs.exe' と `emacs.exe' が順に捜し出されます。
          コンパイルしてから Gnus をインストールしたいときは、
          `make.bat' の第二引数に `/copy' を与えてください。

          `make.bat' はゼロから書き直されました。XEmacs と GNU Emacs を
          自動認識し、`gnus-load.el' を生成し、コンパイル中と info ファ
          イルの生成中にエラーが起きたら構築処理の最後に報告します。
          `makeinfo' が利用可能であればそれを使い、さもなければ
          `infohack.el' に頼ります。今や `make.bat' は Gnus を動作させ
          るために必要なすべてのファイルをインストールするはずで、大体
          において Unix システムにおける `configure; make; make
          install' サイクルの完全な置き換えになりました。

          新しい `make.bat' によって `make-x.bat' と `xemacs.mak' が不
          要になったので、それらは削除されました。

        * `~/News/overview/' は不要。

          以下の変更の結果、もはや `~/News/overview/' ディレクトリーは
          要りません。すべての階層を安全に削除することができます。

        * `(require 'gnus-load)'

          単独で配布されている Gnus を使う場合には、
          `load-path' に Gnus の lisp ディレクトリーを追加してから、
          `~/.emacs' に `(require 'gnus-load)' を加えるのが良いです。

          `gnus-load.el' ファイルは、そのうちのいくつかは Emacsen の配
          布に入っていないかもしれない自動読み込み (autoload) コマンド、
          関数および変数を含んでいます。

   * Gnus に内蔵された新しいパッケージとライブラリー

        * 改定された Gnus FAQ がマニュアルに含まれています。
          *Note Frequently Asked Questions::.

        * TLS ラッパーが Gnus に同梱されました。

          TLS/SSL が、`tls.el' と GNUTLS を介して IMAP と NNTP でサポー
          トされるようになりました。(サードパーティーの) `ssl.el' と
          OpenSSL による古い TLS/SSL は、まだ働きます。

        * 改良された spam 対抗機能。

          Gnus は非常に変化に富んだプログラムと濾過の規則を使って、メー
          ルやニュースの奔流から spam を抜き取ってしまうことができるよ
          うになりました。対応している方式は、RBL blocklists、
          bogofilter それにホワイト/ブラックリストです。また
          SpamAssassin や Hashcash のような外部パッケージを容易に使うた
          めの hook も新しくなりました。*Note Thwarting Email Spam:: お
          よび *Note Spam Package::.

        * Gnus は Sieve を使ったサーバー側でのメールの濾過をサポートし
          ます。

          Sieve の規則はグループパラメーターとして加えることができ、グ
          ループバッファーで `D g' を使うと完全な Sieve スクリプトが生
          成されます。そうしたら、生成された Sieve バッファーで `C-c
          C-l' を使って、サーバーにアップロードしてください。*Note
          Sieve Commands::、それに新しい Sieve のマニュアル (*Note
          Top: (sieve-ja)Top.) を参照してください。

   * グループモードの変更

        * `gnus-group-read-ephemeral-group' を `G M' キーで対話的に呼ぶ
          ことができます。

        * 憲章とコントロールメッセージの取得。

          二つの新しいコマンドで、ニュースグループの憲章を取り込む (`H
          c') ことと、コントロールメッセージを取得する (`H C') ことがで
          きます。

        * 新しい変数 `gnus-parameters' を、グループパラメーターを設定す
          るために使うことができます。

          これは初期には、パラメーターを `~/.newsrc.eld' に格納する `G
          p' (または `G c') でしか行なうことができませんでしたが、この
          変数によってカスタマイズの威力を堪能することができます。また、
          その変数は `~/.newsrc.eld' ではなくて `~/.gnus.el' で設定する
          ので、バックアップが簡単になります。その変数は、グループ名に
          合致する正規表現を、以下のような流儀でグループパラメーターに
          割り当てます:

               (setq gnus-parameters
                     '(("mail\\..*"
                        (gnus-show-threads nil)
                        (gnus-use-scoring nil))
                       ("^nnimap:\\(foo.bar\\)$"
                        (to-group . "\\1"))))

        * nnimap のグループにおける未読の数が正確になりました。

          グループバッファーで表示される nnimap グループの未読記事の数
          の見積りが正確になったはずです。これは
          `gnus-setup-news-hook' (起動時に呼ばれる) と
          `gnus-after-getting-new-news-hook' (新しいメールを取得した直
          後に呼ばれる) から
          `nnimap-fixup-unread-after-getting-new-news' を呼ぶことによっ
          て成し遂げられます。これらの変数をディフォルトではない値に変
          えている場合は、重ねて
          `nnimap-fixup-unread-after-getting-new-news' を追加する必要が
          あるかもしれません。見積りに満足していて、新しいメールを取得
          するときにいくらかの (わずかな) 時間を節約したいのであれば、
          その関数を外してください。

        * グループ名は、ディフォルトで UTF-8 であるものとして取り扱われ
          ます。

          これは USEFOR が移行しようとしていると想定されるものです。カ
          スタマイズするには `gnus-group-name-charset-group-alist' およ
          び `gnus-group-name-charset-method-alist' を参照してください。

        * `gnus-group-charset-alist' と `gnus-group-ignored-charsets-alist'

          これらの変数に設定された正規表現は、完全な (full) グループ名
          と比較されます。Gnus 5.8 では実際の (real) グループ名が比較の
          対象でした。したがって、これらの変数をカスタマイズしている利
          用者は、正規表現を変更しなければなりません。例です:

               ("^han\\>" euc-kr) -> ("\\(^\\|:\\)han\\>" euc-kr)

        * 入ってきたメールを一時蓄えるファイル (`Incoming*') の古いもの
          は、即時ではなく何日か後に消去されます。*Note Mail Source
          Customization::.  (Gnus 5.10.10 / Emacs 22.2 の新機能)

   * 概略モードと記事モードの変更

        * 領域が活性化されている場合に、`F' キー
          (`gnus-article-followup-with-original') および `R' キー
          (`gnus-article-reply-with-original') は、その領域にあるテキス
          トだけを yank します。

        * ドラフト・グループで `e' キーが `gnus-draft-edit-message' コ
          マンドに割り当てられました。`gnus-summary-edit-article' コマ
          ンドには、代わりに `B w' キーを使ってください。

        * 記事のボタン。

          URL、メールアドレス、Message-ID、Info へのリンク、man ページと Emacs ま
          たは Gnus に関連した参考文献のための、より多くのボタンが追加されました。
          *Note Article Buttons::. すべての記事のボタンの見栄えを制御するため
          に `gnus-button-*-level' 変数を使うことができます。
          *Note Article Button Levels::.

        * 単一の yenc でエンコードされた添付パートをデコードすることが
          できます。

        * Picons

          Picon のコードが、GNU Emacs で動作させるために再実装されまし
          た。以前のいくつかのオプションが、削除または改名されています。

          Picon は、利用者、ドメイン、それにニュースグループを表現する
          ための「個人的なアイコン (personal icons)」で、記事バッファー
          に表示することができます。*Note Picons::.

        * 新しいオプション `gnus-treat-body-boundary' を非-`nil' にする
          と、ヘッダーのおしまいに境界線が描かれます。

        * 署名された記事のヘッダー (X-PGP-Sig) を、`W p' で認証すること
          ができます。

        * 概略バッファーは fringe の中の矢印で現在の記事を示します。こ
          れを無効にするには `(setq gnus-summary-display-arrow nil)' を
          使ってください。

        * ニュースにメールで返信しようとしたら警告します。

          間違ってニュースにメールで返信しようとしてしまうことが、しょっ
          ちゅうありませんか?  そんなあなたに新オプション
          `gnus-confirm-mail-reply-to-news'。

        * 新しいオプション `gnus-summary-display-while-building' を
          非-`nil' にすると、概略バッファーが作られていく様子が表示され
          ます。

        * 新しい `recent' 印 `.' で、新規に届いたメッセージを (未読だけ
          れども古い記事とは区別して) 表示します。

        * Gnus は RFC 2369 のメーリングリストのヘッダーをサポートします。
          また、メーリングリストのグループ用に数々のコマンドを用意しま
          した。*Note Mailing List::.

        * 日付ヘッダーを、英語で発音できる形式で表示することができます。
          *Note Article Date::.

        * `mm-uu-diff-groups-regexp' に合致するグループでは、差分
          (diffs) が自動的にハイライトされます。

        * マイクロソフト引用様式のより良い取り扱い。

          いくつかのマイクロソフトのメイラーが、メッセージの残りの部分
          が引用であることを示すために使う台無しにされたヘッダーブロッ
          クを、たとえそれが引用符で囲まれていなくても、Gnus はとにかく
          認識しようとします。変数
          `gnus-cite-unsightly-citation-regexp' は、それらの引用の先頭
          に合致します。

          新しい `W Y f' コマンド
          (`gnus-article-outlook-deuglify-article') で、醜く壊れた
          Outlook (Express) の記事を整形し直すことができます。

        * `gnus-article-skip-boring'

          `gnus-article-skip-boring' を `t' に設定すると、Gnus はうんざ
          りする文しか含んでいないページを見せるために、下方にスクロー
          ルしません。`gnus-article-boring-faces' を使って、何を読み飛
          ばしてしまっても良いかをカスタマイズすることができます。

          てっぺんに少しだけある新規な内容に、長くて刈り込まれていない
          引用が続いているたくさんの記事を読む場合に、これは特に役に立
          ちます。

        * スマイリー (`:-)', `;-)' など) が Emacs でもアイコン化される
          ようになりました。

          これを働かないようにするには、`(setq
          gnus-treat-display-smileys nil)' を `~/.gnus.el' に置いてくだ
          さい。

        * Face ヘッダーを扱えるようになりました。*Note Face::.

        * 概略バッファーで、新しいコマンド `/ N' は新着メッセージを挿入し、
          `/ o' は古いメッセージを挿入します。

        * `W m' を押すと、Gnus はモールスでエンコードされたメッセージを
          デコードします。

        * `gnus-summary-line-format'

          ディフォルト値が `%U%R%z%I%(%[%4L: %-23,23f%]%) %s\n' に変わ
          りました。さらに、受信者の名前か NNTP グループに投稿したグルー
          プ名で利用者名を置き換えるために、`gnus-extra-headers'、
          `nnmail-extra-headers' および `gnus-ignored-from-addresses'
          のディフォルト値が変わりました。

        * 添付ファイルの消去。

          `gnus-mime-save-part-and-strip' コマンド (MIME ボタン上で
          `C-o' に割り当てられている) は、パートをセーブしてから外部の
          それと置き換えます。`gnus-mime-delete-part' (MIME ボタン上で
          `d' に割り当てられている) は、パートを削除します。これは編集
          をサポートしているバックエンドでだけ動作します。

        * `gnus-default-charset'

          ディフォルト値は `iso-8859-1' に代わって
          `current-language-environment' 変数によって決定される値になり
          ます。また、`gnus-group-charset-alist' にあった `.*' の項目は
          削除されました。

        * 印刷の性能が向上しました。

          Gnus はそれ自身が、概略と記事バッファーにおける `O P' で
          Muttprint をサポートします。さらに MIME ボタン上で `p' を使う
          ことによって、個々の MIME パートのそれぞれを印刷することがで
          きます。

        * 拡張された書法仕様 (format specs)。

          書法仕様 `%&user-date;' が `gnus-summary-line-format-alist'
          に追加されました。それに、利用者定義による拡張されたフォーマッ
          トの仕様もサポートされています。拡張された書法仕様は
          `%u&foo;' のようなもので、関数
          `gnus-user-format-function-FOO' を起動します。`&' がエスケー
          プ文字に使われているので、古い利用者定義書法である `%u&' は今
          ではサポートされていません。

        * `/ *' (`gnus-summary-limit-include-cached') が書き直されました。

          これは `Y c' (`gnus-summary-insert-cached-articles') の別名で
          した (訳注: 以前は)。新しい関数は他の記事を濾過して除去します。

        * いくつかの制限命令は `C-u' 接頭引数で合致の否定を扱うことがで
          きます。

          `C-u' を subject、author または extra ヘッダー、すなわち `/
          s'、`/ a' および `/ x'
          (`gnus-summary-limit-to-{subject,author,extra}') で使うと、結
          果としてその表現に合致しないすべての記事が表示されます。

        * Gnus は外部パート (message/external) をインライン表示します。

   * Message モードの変更と関連する Gnus の機能

        * 遅延記事。

          Message バッファーにおける `C-c C-j' で、メッセージの送信を遅
          らせることができます。メッセージは指定された時刻に配送されま
          す。これはあなた自信のための忘備録として役に立つでしょう。
          *Note Delayed Articles::.

        * `auto-compression-mode' が有効になっていると、添付ファイルを
          見るときに自動で圧縮が解かれます。

        * 新しいオプション `gnus-gcc-mark-as-read' は、Gcc の記事に自動
          的に既読の印を付けます。

        * 添付ファイルの切り離し (externalizing)。

          `gnus-gcc-externalize-attachments' または
          `message-fcc-externalize-attachments' が非-`nil' になっている
          と、ローカルファイルを外部パートとして添付します。

        * Sendmail を使うときのエンベロープ送信者 (envelope sender) の
          アドレスが、カスタマイズできるようになりました。*Note メール
          変数: (message-ja)Mail Variables.

        * Gnus は今では Sender: ヘッダーを自動では生成しません。

          それは初期においては、利用者が設定した email アドレスが Gnus
          が想定した利用者のディフォルトのアドレスと違っていた場合に生
          成されました。今日ではその想定アルゴリズムが正しいことはまれ
          で、Sender: ヘッダーの唯一の (議論の的になる) 用途は、ニュー
          スを cancel/supersede する資格があるかどうかを検査すること
          (これは代わりに、他の章で述べられる Cancel Locks によって解決
          されました) なので、そのヘッダーの生成はディフォルトで抑制さ
          れています。変数 `message-required-headers'、
          `message-required-news-headers' および
          `message-required-mail-headers' を参照してください。

        * サードパーティーによる `message-utils.el' の機能が
          `message.el' に加えられました。

          Message は表題の行から `(was: <old subject>)' を削除するかど
          うかを尋ねるようになりました
          (`message-subject-trailing-was-query' 参照)。`C-c M-m' と
          `C-c M-f' は挿入されたテキストを示す印を挿入します。`C-c C-f
          a' は X-No-Archive: ヘッダーを付け加えます。`C-c C-f x' は、
          適切なヘッダーと、クロスポストとフォロー先についての注意書き
          を本文に挿入します (`message-cross-post-*' 変数群を見てくださ
          い)。

        * 今や `message-generate-headers-first' が `nil' だったら、メッ
          セージの作成を始めるときに References と X-Draft-From ヘッダー
          は生成されません。

        * X-Faces ヘッダーの挿入が簡単になりました。*Note X-Face::.

        * グループカーボンコピー (GCC) を引用符で囲む。

          空白や他の変な文字を含むグループを扱えるようにするために、グ
          ループは Gcc: header に置かれる前に引用符で囲まれます。これは、
          空白を含むグループが使えるようにするために、もはや
          `gnus-message-archive-group' のような変数に引用文字を含めるべ
          きではないことを意味します。さらに、文字列 `nnml:foo,
          nnml:bar' (二つのグループに Gcc を格納することを示す) を使っ
          ているならば、`("nnml:foo" "nnml:bar")' というリストを返すよ
          うに変更しなければなりません。さもないと、Gcc: 行は間違った囲
          まれ方をされてしまうでしょう。初期のころに文字列 `nnml:foo,
          nnml:bar' を返すようにしたことが間違いだったことに着目してく
          ださい。それは直接挿入されたので、まったく問題を生じませんで
          した。

        * `message-insinuate-rmail'

          `(message-insinuate-rmail)' と `(setq mail-user-agent
          'gnus-user-agent)' を `~/.emacs' に加えることによって、
          `message-mode' でメッセージの作成、返信および転送を行なうよう
          に Rmail を説得することができます。そこでは MML の威力を堪能
          することができます。

        * `message-minibuffer-local-map'

          この下の行は、メッセージを再送するときに BBDB を使えるように
          します:
               (define-key message-minibuffer-local-map [(tab)]
                 'bbdb-complete-name)

        * `gnus-posting-styles'

          このような合致の様式が加わりました。

               ((header "to" "larsi.*org")
                (Organization "Somewhere, Inc."))

          下記のような古い様式は時代遅れになりましたが、まだ受け入れら
          れます。

               (header "to" "larsi.*org"
                       (Organization "Somewhere, Inc."))

        * `message-ignored-news-headers' と `message-ignored-mail-headers'

          `X-Draft-From' と `X-Gnus-Agent-Meta-Information' が、これら
          二つの変数に加えられています。それらをカスタマイズする場合に、
          もしかするとそれら二つのヘッダーも加える必要があります。

        * Gnus は“format=flowed”(RFC 2646) パラメーターをサポートしま
          す。メッセージを作成するときに、それは `use-hard-newlines' で
          活性化されます。format=flowed のデコードは以前からできました
          が、初期の版では説明の文書がありませんでした。

        * `mm-fill-flowed' オプションで“format=flowed”メッセージを流
          動テキストとして処理することをやめさせることができます。また、
          PGP 署名が埋め込まれたメッセージを送信するとき、流動テキスト
          の処理は行なわれません。*Note 流動テキスト:
          (emacs-mime-ja)Flowed text.  (Gnus 5.10.7 の新機能)

        * Gnus は RFC 2298 の開封確認要求の生成をサポートします。

          これはメッセージモードの `C-c M-n' キーで呼び出されます。

        * Message は Importance: ヘッダー (RFC 2156) をサポートするよう
          になりました。

          メッセージバッファーで `C-c C-f C-i' か `C-c C-u' を使うと、
          可能な値が循環します。

        * Gnus はニュースの Cancel Locks をサポートします。

          投稿するニュース記事に `Cancel-Lock' ヘッダーが挿入されること
          です。これは、記事をあなたが書いたのかどうかを確かめるために
          使います (キャンセルと置き換えのとき)。最初に記事を投稿すると
          きに、Gnus はランダムなパスワード文字列を生成し、カスタムの機
          構を使って `~/.emacs' にセーブします。その変数は
          `canlock-password' と呼ばれますが、機密を気にするデータではあ
          りません。ウェブ上で canlock を公開しても、以前から彼女にでき
          なかった何かを、誰かができるようにするものではありません。
          `message-insert-canlock' をカスタマイズすることによって、振る
          舞いを変更するができます。

        * Gnus は PGP (RFC 1991/2440)、PGP/MIME (RFC 2015/3156) および
          S/MIME (RFC 2630-2633) をサポートします。

          これには S/MIME と OpenPGP が実装されている必要があります。で
          も追加の Lisp ライブラリーは要りません。メッセージの作成時に、
          いくつかのメニューと `C-c RET' キーの割り当てが Attachments
          メニューに追加されます。これはまた、
          `gnus-article-hide-pgp-hook' を時代遅れにしました。

        * MML (Mime 作成) コマンドの接頭キーが、`M-m' から `C-c C-m' に
          変わりました。

          この変更によって、標準キー割り当ての `back-to-indentation' と
          の衝突が回避されました。このコマンドもまた、メッセージモード
          では役に立つのです。

        * `message-forward-show-mml' のディフォルトが `best' というシン
          ボルに変わりました。

          値 `best' の振る舞いは、それがふさわしい場合は MML を表示する
          (すなわち MIME に変換する) ことです。変換がディジタル署名を無
          効にしてしまうので、署名された、または暗号化されたメッセージ
          を転送するときは MML は使われません。

        * `auto-compression-mode' が有効になっていると、添付ファイルを
          見るときに自動で圧縮が解かれます。

        * 非-ASCII ドメイン名のサポート。

          Message は From:, To: および Cc: にある非-ASCII ドメイン名を
          サポートし、メッセージの送信をしようとしたときにエンコードす
          るかどうかを尋ねます。`message-use-idna' 変数でこれを制御しま
          す。Gnus もまた、メッセージを見るときに From:, To: および
          Cc: にある非-ASCII ドメイン名をデコードします。これを制御する
          のは `gnus-use-idna' 変数です。

        * Message バッファーに添付ファイルをドラッグ＆ドロップすること
          ができます。

          `mml-dnd-protocol-alist' と `mml-dnd-attach-options' を参照し
          てください。*Note MIME: (message)MIME.

        * `auto-fill-mode' が Message モードでディフォルトで有効になり
          ます。`message-fill-column' を参照してください。*Note いろい
          ろなメッセージ変数: (message-ja)Various Message Variables.

   * バックエンドの変更

        * Gnus は RSS のニュース配送を、ニュースグループとして表示します。
          *Note RSS::.

        * nndoc バックエンドは、mailman のまとめ送りと exim が弾いたメッ
          セージをサポートするようになりました。

        * Gnus は Maildir グループをサポートします。

          Gnus は新バックエンドである `nnmaildir.el' を含んでいます。
          *Note Maildir::.

        * nnml と nnfolder バックエンドは、グループ毎に印 (marks) を格
          納するようになりました。

          これは nnml/nnfolder サーバー/グループ を `~/.newsrc.eld' と
          切り離して、しかし印は守りつつ、バックアップすることを可能に
          します。さらに、例えば研究室や職場などの組織内で、
          (`~/.newsrc.eld' ファイルを共有すること無しに) 利用者間で記事
          と印を共有することをも可能にします。これは、`~/.newsrc.eld'
          に格納される印を、グループ毎の `.marks' ファイル (nnml 用) と
          `GROUPNAME.mrk' ファイル (GROUPNAME の名前を持つ nnfolder 用)
          に格納することによって動作します。nnml/nnfolder を他のマシン
          に引っ越しても、Gnus は `~/.newsrc.eld' にある情報の代わりに、
          自動的に `.marks' か `.mrk' ファイルを使います。新しいサーバー
          変数である `nnml-marks-is-evil' と `nnfolder-marks-is-evil'
          が、この機能を抑制するために使うことができます。

   * 外見に関すること

        * グループと概略バッファーのメニューバー項目の名前“Misc”は
          “Gnus”に改名されました。

        * Message mode で“MML”と名付けられたメニュー項目は
          “Attachments”に改名されました。このメニューは、署名と暗号化
          (*Note セキュリティー: (message-ja)Security.) のような、セキュ
          リティーに関連したものも含んでいることに着目してください。

        * ツールバーがグループ、概略および Message モードで GNOME のア
          イコンを使うように更新されました。ツールバーはカスタマイズ可
          能です: `M-x customize-apropos RET -tool-bar$' から始めてくだ
          さい。これは Gnus 5.10.10 の新機能です。(Emacs だけです。
          XEmacs は未対応。)

        * ツールバーのアイコンが正しく有効に (または無効に) なります。
          グループバッファーで変数 `gnus-group-update-tool-bar' を参照
          してください。そのディフォルト値は Emacs のバージョンに依存し
          ています。これは Gnus 5.10.9 の新機能です。

   * その他の変更

        * `gnus-agent'

          Gnus エージェントは大規模な更新を経て、今やディフォルトで有効
          になります。そして `gnus-select-method' と
          `gnus-secondary-select-method' で指定されるすべての nntp と
          nnimap のサーバーが、ディフォルトでエージェント化されます。初
          期においては `gnus-select-method' のサーバーだけがディフォル
          トでエージェント化され、エージェントはディフォルトでは有効に
          されませんでした。エージェントが有効にされると、今では可能な
          らばバックエンドに代わってエージェントのキャッシュからヘッダー
          が取り寄せられます。初期には、これはオフライン (unplugged) の
          状態でのみ行なわれていました。サーバーバッファーで `J a' と
          `J r' を使うことによって、サーバーの登録と削除を行なうことが
          できます。グループバッファーから `J u' か `J s' を使って命令
          しない限り、Gnus は記事をエージェントのキャッシュにダウンロー
          ドしません。`(setq gnus-agent nil)' を設定することによって、
          エージェントが有効にされていなかった昔の振る舞いに戻すことが
          できます。もはや `~/.gnus.el' に `(gnus-agentize)' を置いてお
          く必要が無いことに注意してください。

        * Gnus は plugged のときに、エージェントに NOV と記事を読み込み
          ます。

          Plugged のときに記事を読む場合に、その記事がすでにエージェン
          トにあるならば、もう一度ダウンロードすることはありません。
          `(setq gnus-agent-cache nil)' は旧式の動作に戻します。

        * Dired の統合。

          `gnus-dired-minor-mode' (*Note Other modes:: 参照) は dired
          のバッファーで、添付ファイルを送信する、mailcap の適切な項目
          を使ってファイルを開く、それに mailcap の項目を使ってファイル
          を印刷するためのキーを割り当てます。

        * ポイントの位置決めのための書法仕様 (format spec) である `%C' は、
          `%*' に変更されました。

        * `gnus-slave-unplugged'

          オフラインの Gnus をスレーブモードで起動する新しいコマンドで
          す。



File: gnus-ja.info, Node: No Gnus, Prev: Oort Gnus, Up: New Features

No Gnus
.......

No Gnus の新しい機能:

   * インストールに関する変更

        * No Gnus を使ったことがあるが、以前の (安定した) 版に戻してし
          まった人たちへの注意。

          No Gnus (このリリースにつながる不安定な Gnus の枝) を試してみ
          たものの、安定版に戻してしまっている場合、このバージョンへアッ
          プグレードするときには注意してください。特に、`~/News/marks'
          ディレクトリーの内容を (もしかしたら注意深く選んで) 削除する
          必要があるでしょう。(訳注: 削除しないと、新しい No Gnus を再
          び使い始めたときに安定版を使っていた時期に更新されなかった
          marks ファイルが読み込まれて、`~/.newsrc.eld' ファイルの既読
          記事番号などを古いもので上書きしてしまいます。) 削除すること
          によって、このリリースで nntp のフラグを保存している marks ファ
          イルからではなく `~/.newsrc.eld' からフラグを読むようになりま
          す (訳注: そして新しい marks ファイルが作られます)。nntp
          marks については、次の項目でさらに詳しい情報を得ることができ
          ます。一般にダウングレードすることは安全ではありません。

        * Emacs 23 から Emacs 22 に切り替えると非互換性の問題が生じます。

          Emacs 23 では、Gnus は記事のドラフトと `~/.newsrc.eld' を保存
          するために Emacs の新しい内部 coding system である
          `utf-8-emacs' を使います。これらのファイルは Emacs 22 以下で
          は正しく読み込まれないかもしれません。Gnus を異なるバージョン
          の Emacs にまたがって使いたい場合は、
          `mm-auto-save-coding-system' を `emacs-mule' に設定すれば良い
          でしょう。

        * Lisp ファイルがディフォルトで `.../site-lisp/gnus/' にインス
          トールされるようになりました。

          以前は `.../site-lisp/' がディフォルトでした。加えて、新しい
          インストーラーは他にインストールされている、新しい Gnus より
          優先される Gnus を検出して警告を発します。それらを手動で取り
          除いても良いし、`make remove-installed-shadows' を使って削除
          することもできます。

        * インストール先のディレクトリ名が空白文字を含むことを許容します。

   * Gnus に含まれる新しいパッケージとライブラリー

        * Gnus は Emacs Lisp SASL ライブラリーを含むようになりました。

          これによって、Emacs の中から SASL の機構を利用するために、すっ
          きりした API を使うことができます。利用者の目に見える利点は、
          以前は無かった DIGEST-MD5 と NTLM がサポートされるようになっ
          たことです。*Note Emacs SASL: (sasl-ja)Top.

        * ManageSieve の接続に、ディフォルトで SASL ライブラリーを使う
          ようになりました。

          これによる主な変更点は、サーバーがサポートしている場合に
          DIGEST-MD5 と NTLM をサポートするようになったことです。

        * Gnus は password.el にパスワードをキャッシュする機構を含めました。

          パスワードキャッシュはディフォルトで有効です
          (`password-cache' を参照)。タイムアウトは 16秒と短いです
          (`password-cache-expiry' を参照)。PGG を PGP のバックエンドと
          して使う場合に、PGP のパスフレーズはこの機構で管理されます。
          ManageSieve 接続のパスワードは、利用者にそうするかどうかを尋
          ねてから、この機構が管理します。

        * Gnus は EasyPG を使います。

          EasyPG を使うことができる場合、Gnus は PGG の代わりにそれを使
          います。EasyPG は GNU Privacy Guard へのユーザーインターフェー
          スです。*Note EasyPG Assistant user's manual: (epa)Top.
          EasyPG は Emacs 23 に含まれていますが、単独でも利用可能です。

   * グループモードの変更

        * 入ってきたメールを一時蓄えるファイル (`Incoming*') の古いもの
          は、即時ではなく何日か後に消去されます。*Note Mail Source
          Customization::.  (Gnus 5.10.10/No Gnus 0.8 の新機能)

   * 概略モードと記事モードの変更

        * 粘着記事バッファーを使えるようになりました。これは、別の記事
          を選択したときに再利用されない記事バッファーです。*Note
          Sticky Articles::.

        * Gnus は `K H' で `text/html' 記事を WWW ブラウザーで選択的に
          表示することができます。*Note MIME Commands::.

        * 国際化ホスト名 (IDNA) を、`W i'
          (`gnus-summary-idna-message') を使うことによって、記事の本文
          中でデコードできるようになりました。この機能を使うには GNU
          Libidn (`http://www.gnu.org/software/libidn/') をインストール
          しておく必要があります。

        * 非-ASCII グループ名の取り扱いが非常に改善されました。完全にサ
          ポートしているバックエンドは現在 `nntp', `nnml', および
          `nnrss' です。エージェント、キャッシュ、それに印 (marks) もそ
          れらのバックエンドで機能します。*Note Non-ASCII Group
          Names::.

        * Gnus は dns-mode を使って text/dns として送信された DNS マス
          ターファイルを表示します。

        * Gnus は概略バッファーで新しい制限コマンド `/ r'
          (`gnus-summary-limit-to-replied') と `/ R'
          (`gnus-summary-limit-to-recipient') をサポートします。
          *Note Limiting::.

        * `Y t' (`gnus-summary-insert-ticked-articles') を使って、
          サーバーからすべての可視記事を取り寄せることができるようになりました。
          *Note Summary Generation Commands::.

        * Gnus は概略バッファーで新しい並べ替えコマンド `C-c C-s C-t'
          (`gnus-summary-sort-by-recipient') をサポートします。
          *Note Summary Sorting::.

        * S/MIME が LDAP の利用者証明書の検索に使えるようになりました。
          `smime-ldap-host-list' でサーバーを設定する必要があります。

        * OpenPGP ヘッダーにある URL をクリックすると、ヘッダーがダウン
          ロードされてあなたの PGP の鍵束に取り込まれます。

        * Picon はテキストの対象物の右側に表示できるようになりました。
          `gnus-picon-style' を見てください。*Note Picons::.

        * ANSI SGR 制御シーケンスを `W A' で変換することができます。

          中国語のニュース階層のグループにおいて、記事をハイライト表示
          するために ANSI シーケンスが使われます
          (`gnus-article-treat-ansi-sequences')。

        * Gnus は記事に“MIME-Version”ヘッダーがなくても記事を MIME デ
          コードします。このために `gnus-article-loose-mime' のディフォ
          ルト値が変更されました。

        * `gnus-decay-scores' をスコアファイルに合致する正規表現にでき
          ます。例えば `\\.ADAPT\\'' に設定すると、適応スコアファイルだ
          けが減衰されるようになります。*Note Score Decays::.

        * `gnus-ignored-from-addresses' を使う場合に、概略行におい
          て `To' と `Newsgroup' ヘッダーに相当する場所の最初に表示する
          文字列を、`gnus-summary-to-prefix' およ
          び `gnus-summary-newsgroup-prefix' でカスタマイズすることができます。
          *Note To From Newsgroups::.

        * MIME パートを外部にある本体で置き換えることができます。
          `gnus-mime-replace-part' と `gnus-article-replace-part' を見
          てください。*Note MIME Commands::, *Note Using MIME::.

        * `mm-fill-flowed' オプションで format=flowed なメッセージの取
          り扱いを無効にすることができます。また、PGP の署名が埋め込ま
          れたメッセージを送信するときに、flowed text は無効にされます。
          *Note 流動テキスト: (emacs-mime-ja)Flowed text.  (Gnus
          5.10.7 の新機能)

        * 新コマンド `S W' (`gnus-article-wide-reply-with-original') は
          記事バッファーで広い返答をするためのもので、もし領域が設定さ
          れたテキストがあれば `R' コマンド
          (`gnus-article-reply-with-original') と同様にそれを引用します。
          以前は `R' コマンドに広い返答をさせるために使われた接頭引数が、
          今では受け付けられないことに注意してください。*Note Article
          Keymap::.

        * 記事バッファーで使う新コマンド `C-h b'
          (`gnus-article-describe-bindings') は、記事コマンドだけでなく
          記事バッファーから利用することができる真の簡略コマンドも表示
          します。

   * Message モードの変更

        * Gnus は“hashcash”client puzzle anti-spam の機構をサポートします。
          `(setq message-generate-hashcash t)' で有効になります。
          *Note Hashcash::.

        * メッセージバッファに添付ファイルをドラッグ＆ドロップできます。
          `mml-dnd-protocol-alist' と `mml-dnd-attach-options' を見てく
          ださい。*Note MIME: (message-ja)MIME.

        * `message-yank-empty-prefix' オプションで、引用文の空行にどん
          な引用符を付けるかを制御することができます。*Note 挿入するた
          めの変数: (message-ja)Insertion Variables.

        * Gnus はメッセージバッファーでヘッダーを隠すために、それら以外の部
          分だけが見えるようにバッファーを狭めます。`References' はディフォル
          トで表示されません。すべてのヘッダーが見えるようにするに
          は `(setq message-hidden-headers nil)' としてください。
          *Note メッセージヘッダー: (message-ja)Message Headers.

        * You can highlight different levels of citations like in the
          article buffer.  See `gnus-message-highlight-citation'.

        * 記事バッファーでできるのと同様に、引用された文のレベルの違いに応じ
          たハイライトを行うことができます。
          `gnus-message-highlight-citation' を参照してください。

        * Message モードでは `auto-fill-mode' がディフォルトで ON にな
          ります。`message-fill-column' を参照してください。*Note メッ
          セージヘッダー: (message-ja)Message Headers.

        * 署名ファイルを `message-signature-directory' 変数で指定するディ
          レクトリーに置くことができます。

        * "○○さん writes:" のような行の形式を、オプション
          `message-citation-line-format' で指定することができます。これ
          を使うには `message-citation-line-function' 変数を
          `message-insert-formatted-citation-line' に設定する必要があり
          ます。

   * バックエンドの変更

        * nntp バックエンドは記事の印を `~/News/marks' に保管します

          そのディレクトリーは `nntp-marks-directory' という (カスタマ
          イズ可能な) 変数で変更することができます。また、nntp で印を使
          うことを `nntp-marks-is-evil' という変数 (バックエンド変数)
          で無効にすることができます。印を使うことの利点は、
          `~/News/marks' を別のホストにインストールされた Gnus にも
          (rsync, scp などを使って) コピーすることによって、どの記事を
          読んでどの記事に印を付けたかの情報を、そこでも維持できること
          です (訳注: 同じ nntp サーバーに接続する場合に限ります)。
          `~/News/marks' のデータは `~/.newsrc.eld' にある同じデータよ
          り優先されます。

        * RSS の購読情報を OPML のファイルから取り込み、または書き出す
          ことができるようになりました。*Note RSS::.

        * IMAP の identity (RFC 2971) をサポートします。

          ディフォルトでは Gnus はそれ自身に関する情報を送信しませんが、
          `nnimap-id' 変数を使ってそれをカスタマイズすることができます。

        * `nnrss' バックエンドは多言語テキストをサポートします。
          `nnrss' グループでは非-ASCII 文字列を使ったグループ名もサポー
          トされます。*Note RSS::.

        * POP3 によるメールの取得において、
          SSL/TLS と StartTLS をサポートするようになりました。

        * nnml バックエンドではメッセージを圧縮するために `gzip' 以外の
          プログラムも使うことができます。*Note Mail Spool::.

        * nnml バックエンドではグループを圧縮することができます。

          関数 `gnus-group-compact-group' (グループバッファーの `G z'
          キー) および `gnus-server-compact-server' (サーバーバッファー
          の `z' キー) で呼び出すこの機能は、グループのすべての記事の番
          号を 1 から順に振り直して、すきまを取り除きます。その結果とし
          て、正しい全記事数を得ることができます (再びメッセージが削除
          されるまでは)。

   * 外見

        * ツールバーが GNOME のアイコンを使うように更新されました。ツー
          ルバーをカスタマイズすることもできます: `M-x
          customize-apropos RET -tool-bar$' で始めてください。(Emacs だ
          けです。XEmacs ではできません。)

        * ツールバーのアイコンがグループバッファーで正しく活性化 (また
          は不活性化) されるようになりました。変数
          `gnus-group-update-tool-bar' を参照してください。そのディフォ
          ルト値は Emacs の版に依存します。

        * Gnus のバッファーにおける XEmacs の toolbar の位置を変更でき
          るようになりました。`gnus-use-toolbar' と
          `message-use-toolbar' を見てください。

   * その他の変更

        * サーバーバッファーで外部グループのための select-method を変更
          すると、すぐにそのサーバーを使うグループの講読に反映されるよ
          うになりました。例えば `nntp-via-address' を
          `foo.example.com' から `bar.example.com' に変更すると、Gnus
          は次回から中間ホスト `bar.example.com' を経由してニュースサー
          バーに接続するようになります。

        * `W e' で `all.SCORE' ファイルをグループバッファーから編集する
          ことができます。

        * `gnus-mark-copied-or-moved-articles-as-expirable' を `nil' で
          はない値に設定することによって、読み終わった記事を
          auto-expire が有効になっているグループにコピーするか移動する
          とき、それらに期限切れ消去可能の印を自動的に付けるようにする
          ことができます。ディフォルト値は `nil' で、記事のコピーと移動
          の動作は従来通りです。つまり、記事を auto-expire が有効になっ
          ていないグループにコピーするか移動するときに期限切れ消去可能
          の印が削除される以外は、印は変化しません。*Note Expiring
          Mail::.



File: gnus-ja.info, Node: On Writing Manuals, Next: Terminology, Prev: The Manual, Up: Appendices

マニュアルを書く
================

おそらく、たいていのマニュアルは事後に書かれていると思います。つまり、
すでにあるプログラムを文書化しているということです。このマニュアルはそ
ういう方法で書かれていません。何かを実装するときは、何かをそのままマニュ
アルの一節に書きます。それから機能の説明が難しいことを発見して、それが
どのようにあるべきであるかを書き、次には実装を変更します。文書とコード
を書くことは協調して行なわれていきます。

もちろん、これはこのマニュアルには流れ構造がほとんど無いか、あっても少
しだということを意味します。Gnus の完全にすべてのことが説明されています
が、あなたが探している場所ではないということがよくあります。これはリファ
レンスマニュアルであって、Gnus を始めるための手引きではありません。

それはこのリファレンスマニュアルを元にして書かれた、まったく違った本に
なるでしょう。とても違ったものになるはずです。



File: gnus-ja.info, Node: Terminology, Next: Customization, Prev: On Writing Manuals, Up: Appendices

用語
====

"ニュース (news)"
     これは、あなたがそれを読むために使うことになっているもの、つまり、
     それというのがニュースです。ニュースは一般的には近くの NNTP サーバー
     から取得され、一般的にはすべての人が公に利用することができます。も
     しニュースを投稿すると、あなたがまさに書いたものを全世界の人たちが
     読むことになるでしょう。そして、みんながいたずらっぽくクスクス笑う
     でしょう。あなたの知らないところで。

"メール (mail)"
     あなたに個人的に配送されるすべてのものがメールです。いくつかのニュー
     ス/ メールリーダー (Gnus のような) はメールとニュースの区別を曖昧
     にしますが、違いがあります。メールは私的です。ニュースは公的です。
     メールを送信することは投稿ではなく、返信はフォローアップではありま
     せん。

"返信 (reply)"
     あなたが読んでいるものを書いた人にメールを送ることです。

"フォローアップ (follow up)"
     あなたが読んでいる記事に応答して、現在のニュースグループに記事を投
     稿することです。

"バックエンド (back end)"
     Gnus はメールとニュースがほとんど同じだとみなします。本当に。違い
     は実際の記事にどのようにアクセスするかだけです。メールメッセージは
     ローカルディスクのファイルから読めるのに対して、ニュース記事は一般
     に NNTP プロトコルで取得します。Gnus の内部構造は、それらのために
     「フロントエンド」と数々の「バックエンド」から成り立っています。内
     部的には、あなたがグループに入る (そう、RET をたたく) と、それによっ
     て Gnus のフロントエンドの機能を呼び出します。そうするとフロントエ
     ンドは、バックエンドに「foo グループの記事のリストをくれ」とか
     「4711 番の記事を見せてよ」と「話す」のです。

     そういうわけで、バックエンドは主にプロトコルか、ファイルの形式とディ
     レクトリーの配置のどちらかを定義します。前者は `nntp' バックエンド
     が NNTP でニュースにアクセスしたり、`nnimap' バックエンドが IMAP
     でメールにアクセスすることを指します。また、後者は `nnspool' バッ
     クエンドが共通の「スプールディレクトリー」形式にアクセスしたり、そ
     れととてもよく似たファイルの形式とディレクトリーの配置を介して
     `nnml' バックエンドがメールにアクセスすることを指します。

     Gnus は基礎的なメディアを扱いません。言わばこれは、すべてバックエ
     ンドによって行なわれるということです。バックエンドは記事にアクセス
     するための機能の集成です。

     しかし、「バックエンド」という用語は「サーバー」と言った方がふさわ
     しい場面でときどき使われます。そして同じことを指すことができる「選
     択方法」(select method) という用語があります。かように Gnus の用語
     はとても混乱しています。

"基本 (native)"
     Gnus はいつも一つの方法 (とバックエンド) を、ニュースを得るための
     「基本」もしくはディフォルトの手段として使います。

"外部 (foreign)"
     同時に任意の数の外部グループをアクセスできる状態にすることもできま
     す。これらはニュースを取得するための、基本ではなく、二次のでもない
     バックエンドを使うグループです。

"二次の (secondary)"
     二次のバックエンドは、基本と外部の間くらいに位置するバックエンドで
     すが、ほとんど基本と同じように動作するものです。

"記事 (article)"
     ニュースとして投稿されたメッセージです。

"メールメッセージ (mail message)"
     メールで送られたメッセージです。

"メッセージ"
     メールメッセージもしくはニュース記事です。

"ヘッド (head)"
     メッセージの最上部で、管理情報 (等) が入れられているところです。

"本文 (body)"
     記事の残りの部分です。ヘッドに無いものはすべて本文です。

"ヘッダー (header)"
     記事のヘッドの行です。

"ヘッダー群 (headers)"
     そのような行の集合もしくは、ヘッドの集合です。もしくは、NOV 行の集
     合です。

"NOV"
     NOV は News OverView の略です。それらはニュースサーバーのヘッダー
     の一つの形式で、記事の簡潔なヘッダーの情報を含むデータを提供するた
     めに、サーバーが自ら作ります。`nntp' バックエンドでは Gnus は
     NNTP サーバーが作るものを使いますが、いくつかのサーバー (特に
     `nnml') のためには Gnus 自身が作ります。

     グループに入ると、Gnus はグループのすべての未読記事のヘッダーをバッ
     クエンドに要求します。ほとんどのサーバーは News OverView 様式をサ
     ポートしています。それは標準の HEAD 様式よりコンパクトで、とても速
     く、読んで解析することができます。

     NOV データは一つ以上のテキスト行 (*Note Motion by Text Lines:
     (elisp)Text Lines.) から成り、それぞれの行は一つの記事のヘッダー情
     報を持っています。ヘッダー情報はタブで区切られた一連のヘッダーの内
     容で、記事番号、表題、著者、日付、Message-ID、References などを含
     んでいます。

     それらのデータは Gnus が概略行をすばやく生成することを可能にします。
     しかしサーバーが NOV をサポートしていなかったり、故意にまたはある
     理由でそれを使わないようにしてしまうと、Gnus はそれぞれの記事のヘッ
     ダーを一つずつ解析することによってヘッダー情報を生成しようとするで
     しょう。それには時間がかかります。したがって、サーバーが間違った
     NOV データを作ることがわかっている場合以外は、nn*-nov-is-evil
     (*Note Slow/Expensive Connection::) を `nil' ではない値にすること
     は、通常は良い考えではありません。

"レベル (level)"
     それぞれのグループは何らかの「レベル」(1-9) で購読されています。低
     いレベルのものは高いレベルのものより「より」購読されています。実際
     のところ、レベル 1-5 のグループは「購読」; 6-7 は「未購読」; 8 は
     「ゾンビ」; 9 は「切られた」(killed) と見なされます。グループの一
     覧を表示したり、新しい記事を走査する命令は、すべて数値接頭引数を
     「動作レベル」として使います。

"切られたグループ (killed groups)"
     切られたグループの情報は保存されたり更新されたりしないので、切られ
     たグループを扱うのは購読されているグループよりも簡単です。

"ゾンビグループ (zombie groups)"
     ほとんど切られたグループと同じで、それより少し死んでいるだけです。

"アクティブファイル (active file)"
     ニュースサーバーは、どの記事を持っているかとどのグループが存在する
     かを記録しておかなければなりません。アクティブファイルに格納される
     すべてのこの情報は、あなたが推測するように比較的大きいです。

"偽グループ (bogus groups)"
     `.newsrc' ファイルに存在するけれどもサーバーが知らないグループ (す
     なわち、それはアクティブファイルにありません) は *偽グループ* です。
     おそらくそのグループは (もはや) 存在していないのでしょう。

"活性化 (activating)"
     サーバーにグループの情報を尋ねて未読記事の数を演算する行為は「グルー
     プを活性化 (activate) する」と呼ばれています。活性化されていないグ
     ループは、グループバッファーに `*' とともに一覧表示されます。

"スプール (spool)"
     ニュースサーバーは何らかのやり方で記事をローカルに保存します。ある
     古い流儀の保存方法は、単に記事毎に一つのファイルを持つことです。そ
     れは伝統的なスプール (traditional spool) と呼ばれます。

"サーバー (server)"
     接続して、ニュース (もしくはメール) を取得することができるマシンで
     す。

"選択方法 (select method)"
     バックエンドと、サーバーおよび仮想サーバーの設定を指定する構造です。

"仮想サーバー (virtual server)"
     名前が付けられていて、その名前で指定することができる選択方法です。
     選択方法は (物理的な) サーバーに関するすべてを定義するので、ものご
     とを全体として捉えるのは仮想サーバーになります。

"洗濯 (washing)"
     バッファーを持ってきて、何らかの種類のフィルターにかけることです。
     結果は (たいてい) 元のものよりもよりきれいで喜ばしいものになるでしょ
     う。

"一時グループ (ephemeral groups)"
     たいていのグループはどの記事を読んだかのデータを保存します。「一時」
     グループはデータが溜められないグループです--グループを出ると、それ
     は天空のかなたに消え去ります。

"固定グループ (solid groups)"
     これは一時グループの反対です。グループバッファーに一覧表示されてい
     るすべてのグループは固定グループです。

"まばら記事 (sparse articles)"
     `gnus-build-sparse-threads' が有効にされているときに、それらは概略
     バッファーに表示される (存在しない) 記事のための場所取りです。

"スレッド化 (threading)"
     応答の記事を、それが応答した元記事の直後に置くことです--階層的な流
     儀で。

"根 (root)"
     スレッドの最初の記事が根です。それはスレッドのすべての記事の祖先で
     す。

"親 (parent)"
     応答が得られた記事です。

"子 (child)"
     それとは別の記事、すなわち親に応答する記事です。

"まとめ送り (digest)"
     複数のメッセージを一つのファイルに集めたものです。最も一般的なまと
     め送りの様式は、RFC1153 で規定されています。

"分割 (splitting)"
     ある規則によってメールを区分けする行為です。ときどき間違ってメール
     の濾過 (filtering) と呼ばれます。



File: gnus-ja.info, Node: Customization, Next: Troubleshooting, Prev: Terminology, Up: Appendices

カスタマイズ
============

すべての変数は、このマニュアルのどこか他のところで適切に説明されていま
す。この章は、非常に良くある状況でどのように Gnus をカスタマイズすれば
良いかを調べるための、総合的な案内になるように作られています。

* Menu:

* Slow/Expensive Connection::   ローカルの Emacs で、どこかからニュースを得る
* Slow Terminal Connection::    遠くにあるホストの Emacs を実行する
* Little Disk Space::           大きな設定ファイルを持つことは良くない
* Slow Machine::                速いマシンを買いたい気がする



File: gnus-ja.info, Node: Slow/Expensive Connection, Next: Slow Terminal Connection, Prev: Customization, Up: Customization

遅くて高価な接続
----------------

Emacs をローカルのマシンで実行していて、非常に細いひもの向こうのマシン
からニュースを取り寄せているとしたら、Gnus がサーバーから取って来なけれ
ばならないデータの総量を減らしたくなるでしょうね。

`gnus-read-active-file'
     これを `nil' にしてください。これは Gnus がサーバーにアクティブファ
     イル全体を要求することを禁止します。このファイルはしばしば非常に大
     きいです。さらに、Gnus が不意にアクティブファイルをとにかく取り寄
     せようと決意しないように、`gnus-check-new-newsgroups' および
     `gnus-check-bogus-newsgroups' も `nil' に設定する必要があります。

`gnus-nov-is-evil'
     通常これは *常に* `nil' にしておかなければなりません (それがディフォ
     ルトです)。例えばもし `nntp' バックエンドで NOV (*Note
     Terminology::) を使わないようにしたい (*Note Crosspost
     Handling::) のであれば、これを設定する代わりに `nntp-nov-is-evil'
     を `nil' 以外の値にしてください。しかし Gnus は NNTP サーバーが
     NOV をサポートするかどうかを自分で調べるので、通常
     `nntp-nov-is-evil' を設定する必要はありません。とにかく Gnus が
     NOV を利用しないようにすると、NNTP サーバーから記事のヘッダーを掴
     み取ってくる動作が、あまり速くなりません。

     他のバックエンドのための変数として `nndiary-nov-is-evil',
     `nndir-nov-is-evil', `nnfolder-nov-is-evil',
     `nnimap-nov-is-evil', `nnml-nov-is-evil', `nnspool-nov-is-evil' お
     よび `nnwarchive-nov-is-evil' があります。`gnus-nov-is-evil' に
     `nil' 以外の値を与えると、それらすべての変数を上書きしてしまうこと
     に注意してください。 (1) (*Note Slow/Expensive
     Connection-Footnotes::)


File: gnus-ja.info  Node: Slow/Expensive Connection-Footnotes, Up: Slow/Expensive Connection

(1) もっとも `nnkiboze', `nnslashdot',
`nnultimate' および `nnwfm' の各バックエンドには、それら
専用の nn*-nov-is-evil がありませんが。



File: gnus-ja.info, Node: Slow Terminal Connection, Next: Little Disk Space, Prev: Slow/Expensive Connection, Up: Customization

遅いターミナル接続
------------------

Emacs と Gnus を実行しているシステムに、家のコンピューターをダイアルアッ
プで接続しているとしましょう。モデムが遅い場合は、電線を伝って送られて
いるデータの総量を (可能な限り) 減らしたくなるでしょう。

`gnus-auto-center-summary'
     Gnus が概略バッファーをリセンターする (訳注: 現在の記事が真ん中に
     表示されるようにする) するために、これを `nil' に設定してください。
     これが `vertical' だったら、垂直方向のリセンターだけをします。
     `nil' でも `vertical' でも無ければ、水平方向と垂直方向の両方でリセ
     ンターを行ないます。

`gnus-visible-headers'
     記事に含まれるヘッダーを最小限に減らします。実際のところ、それらが
     無くてもすべて間に合わせることができます--たいていの役に立つデータ
     は、とにかく概略バッファーにありますから。この変数を `^NEVVVVER'
     や `From:' や、何でも必要になりそうなものに設定してください。

     利用できるすべての「隠す」機能を有効にするために、以下を使ってくだ
     さい:

          (setq gnus-treat-hide-headers 'head
                gnus-treat-hide-signature t
                gnus-treat-hide-citation t)

`gnus-use-full-window'
     これを `nil' に設定することによって、すべてのウィンドウを小さくす
     ることができます。これは総じてそんなに減らしませんが、この記事は何
     が何でも読みたくなかったんだと決心する前に、それを少ししか見ないで
     済みます。

`gnus-thread-hide-subtree'
     これを `nil' ではない値にしておくと、すべての概略バッファーのスレッ
     ド (の親以外) は、初めは隠されているようになります。

`gnus-updated-mode-lines'
     これを `nil' にすると、Gnus はバッファーのモード行に情報を表示しな
     いので、いくらか時間を節約できるでしょう。



File: gnus-ja.info, Node: Little Disk Space, Next: Slow Machine, Prev: Slow Terminal Connection, Up: Customization

少ないディスク容量
------------------

起動ファイルはやや大きくなり得るので、空き容量が少なくなってきていると
きは、そのサイズを少し小さくする必要があるでしょう。

`gnus-save-newsrc-file'
     これを `nil' にすると、Gnus は決して `.newsrc' を保存しませ
     ん---`.newsrc.eld' だけを保存します。これは Gnus 以外のニュースリー
     ダーが使えなくなることを意味します。この変数はディフォルトで `t'
     です。

`gnus-read-newsrc-file'
     これが `nil' であれば、Gnus は `.newsrc' を決して読みませ
     ん---`.newsrc.eld' だけを読みます。これは Gnus 以外のニュースリー
     ダーが使えなくなることを意味します。この変数はディフォルトでは
     `t' です。

`gnus-save-killed-list'
     これが `nil' であると、Gnus は死んだグループのリストを保存しません。
     この変数を `nil' に設定したときは、`gnus-check-new-newsgroups' を
     `ask-server' に、`gnus-check-bogus-newsgroups' を `nil' に設定する
     べきでしょう。この変数はディフォルトで `t' です。



File: gnus-ja.info, Node: Slow Machine, Prev: Little Disk Space, Up: Customization

遅いマシン
----------

遅いマシンを持っているか、または本当は単に忍耐力が無いだけでも、Gnus を
速く走らせるためにできることが少しあります。

起動を速くするために `gnus-check-new-newsgroups' およ
び `gnus-check-bogus-newsgroups' を `nil' に設定してください。
概略バッファーに入ることと抜けることを速くするため
に、`gnus-show-threads' と `gnus-use-cross-reference'、それ
に `gnus-nov-is-evil' を `nil' に設定してください。
*Note Slow/Expensive Connection:: も参照してください。



File: gnus-ja.info, Node: Troubleshooting, Next: Gnus Reference Guide, Prev: Customization, Up: Appendices

問題解決
========

Gnus は箱から出してすぐに *非常に* よく動作します--どんな問題が起きるこ
とも想像できません、本当に。

オッホン。

  1. コンピューターの電源が入っていることを確かめてください。

  2. 現在通用している版の Gnus を本当に読み込んでいることを確認してくだ
     さい。今まで GNUS を実行してきたのであれば、Gnus が動作するように
     一度 Emacs を終了して再起動する必要があります。

  3. `M-x gnus-version' を試してください。もし `No Gnus v0.11' のような
     ものが出てきたなら、正しいファイルが読み込まれています。そうならな
     いのは古い `.el' ファイルが散らかっているせいでしょう。それらを消
     してください。

  4. FAQ と入門書を読むために、ヘルプグループ (グループバッファーで `G
     h') を読んでください。

  5. Gnus は多くの再帰構造で動作しているので、何か極端な (そして非常に希
     な) 場合には、Gnus は再帰を「あまりに深く」降りすぎてしまい、Emacs があ
     なたにビープ音を鳴らすことがあります。もしこれが起こったなら、
     `max-lisp-eval-depth' を 500 かそこいらの値に設定してください。

もし他のすべてが失敗したなら、バグとして問題を報告してください。

もし Gnus のバグを見つけたなら、`M-x gnus-bug' 命令で報告することができ
ます。`M-x set-variable RET debug-on-error RET t RET' とタイプして、私
にバックトレースを送ってください。私はバグを修正しようとしますが、あな
たがバグを再現させる方法を正確に書いてくれないと、それを修正することが
できません。

バグ報告では、詳細すぎることは決してありません。バグ報告をするときは、
いつも `M-x gnus-bug' 命令を使ってください。それを使うたびに 10KB のメー
ルができてしまっても、そしてあなたの環境のことを以前私に 500 回送ったこ
とがあったとしてもです。

私がどんなたぐいの記憶も持っていないことを、覚えておくことも重要です。
もしあなたがバグ報告を送ると、私は返答を送ります。その後で、あなたが
「いや、そうじゃない! このうすのろめっ!」とだけ送り返してきても、私はあ
なたが何について私を侮辱しているかがわかりません。常に、すべてを説明し
過ぎてください。それは私たちすべてにとって、もっとやり易くなります--も
し私が必要なすべての情報を得られなかったら、私はあなたにメールを送って
さらなる情報を求め、その結果すべてがより多くの時間を費やすことになりま
す。

もしあなたの直面している問題が非常に視覚的で、それをうまく説明できない
場合は、Emacs のウィンドウをファイルにコピーして (例えば、`xwd' で)、そ
れをどこか手の届くどこかにおいて、その画像の URL をバグ報告に含めてくだ
さい。

もしあなたがバグの修正や改善のためのパッチを寄稿してくださるのでしたら、
すみませんがそのパッチは `diff -u' で作ってください。

問題を報告する前にもっとデバッグしたければ、あなた自身で問題を解決して
パッチを送るために edebug を使うことができるでしょう。Lisp コードのデバッ
グについては ELisp マニュアル (*Note Debugging Lisp Programs:
(elisp)Debugging.) に書かれています。edebug を始めるには、もし `c' を押
したときにある変な振舞いが発見されるならば、第一歩は `C-h k c' をタイプ
し、ドキュメンテーション・バッファー中でハイパーリンクをクリック
(Emacs のみ) して、その関数定義を参照することです。そしてその関数名の場
所で `M-x edebug-defun RET' をタイプして Gnus に戻り、そのコードを呼び
出すために `c' を押しでください。Lisp バッファーでは、`SPC' でシングル
ステップ動作、`M-:' で式を評価、`C-h v' で変数を検査、`q' で実行を中断、
あるいは `c' か `g' で実行を再開することができます。

ときどき、直接に elisp のエラーを起こさないものの、Gnus が非常に遅くな
るために明らかになる問題があります。そんな場合には `M-x
toggle-debug-on-quit' を使って、遅くなったときに `C-g' を押し、しかる後
にバックトレースを解析してください (その手続きを繰り返すことは、真の問
題領域を分離するのに役立ちます)。

より上等なやり方は elisp プロファイラー (訳注: プログラムの実行時の動き
を分析する道具) ELP を使うことです。プロファイラーについてはどこか他の
場所で完全に文書化されているはずですが、それを始めるために必要な手順を
少々書いておきましょう。第一に、プロファイルしてみたい Gnus の部分を計
測するための設定を、例えば `M-x elp-instrument-package RET gnus' や
`M-x elp-instrument-package RET message' で行なってください。そして、遅
い動作を行なわせてから `M-x elp-results' を押しましょう。すると、どの動
作が時間を食っているかを見て、それらをさらにまたデバッグすることができ
ます。動作全体が、プロファイラーの出力の中で最も遅い関数で費やされた時
間よりはるかに長くかかるのは、たぶん Gnus の間違っている部分をプロファ
イルしたせいでしょう。プロファイルの統計をリセットするには `M-x
elp-reset-all' を使ってください。`M-x elp-restore-all' はプロファイルす
る動作を取り除くことになっていますが、Gnus によって複雑にされかつ動的な
コード生成の影響を受けるため、それは必ずしも完全には動作しないかもしれ
ません。

もし手助けが欲しいだけであれば、`gnu.emacs.gnus' で尋ねるのが良いでしょ
う。私はあまり役に立ちません。また、ding メーリングリス
ト---<ding@gnus.org> で尋ねることもできます。購読するには
<ding-request@gnus.org> にメールを送ってください。



File: gnus-ja.info, Node: Gnus Reference Guide, Next: Emacs for Heathens, Prev: Troubleshooting, Up: Appendices

Gnus リファレンスガイド
=======================

誰かが Gnus でできる何か粋なものに知恵を働かせて、その粋なものを書いて
もくれることが私の願いです。それを促進するためには、Gnus の内部動作を説
明するのが良いだろうと思いました。それに、さほど内部ではない動作をいく
つかと、私が今やっていることも。

プログラムの内部の仕様が変更されることはない、などと思ってはいけません
が、Gnus とそのバックエンドの間のインターフェース (これは完全に記述され
ています) や、スコアファイルの形式 (同じく)、データ構造 (これは他のもの
ほどには変更されないでしょう)、それに一般的な操作のメソッドを、(細部に
わたって) 定義していきます。

* Menu:

* Gnus Utility Functions::      共通の関数と変数
* Back End Interface::          Gnus はどうやってサーバーと通信するのか
* Score File Syntax::           スコアファイル標準の BNF 定義
* Headers::                     Gnus はヘッダーを内部的にどのように格納するか
* Ranges::                      たくさんの数を格納する便利な形式
* Group Info::                  グループ情報の形式
* Extended Interactive::        シンボル接頭引数など
* Emacs/XEmacs Code::           Gnus はすべての最新の Emacsen で動作する
* Various File Formats::        Gnus が使用するファイルの形式



File: gnus-ja.info, Node: Gnus Utility Functions, Next: Back End Interface, Prev: Gnus Reference Guide, Up: Gnus Reference Guide

Gnus の有用な関数
-----------------

フックなどから実行される小さな関数を書くときは、Gnus の内部関数や変数に
アクセスすることが絶対に必要です。以下が最もよく使われるものの一覧です。

`gnus-newsgroup-name'
     この変数は現在のニュースグループの名前を持っています。

`gnus-find-method-for-group'
     GROUP の選択方法を返す関数です。

`gnus-group-real-name'
     正規の (接頭語付きの) Gnus グループ名を受け取って、接頭語が無い名
     前を返します。

`gnus-group-prefixed-name'
     接頭語が無いグループ名と選択方法を受け取って、正規の (接頭語付きの)
     Gnus グループ名を返します。

`gnus-get-info'
     GROUP のグループ情報のリストを返します。

`gnus-group-unread'
     GROUP の未読記事の数か、それが分からない場合は `t' を返します。

`gnus-active'
     GROUP に関するアクティブファイルの項目を返します。

`gnus-set-active'
     GROUP に関するアクティブファイルの項目を設定します。

`gnus-add-current-to-buffer-list'
     Gnus を終了するときに消去するバッファーのリストに、現在のバッファー
     を追加します。

`gnus-continuum-version'
     引数として Gnus のバージョン文字列を受け取って、浮動小数点の数値を
     返します。古いバージョンは必ず新しいバージョンよりも小さい数になり
     ます。

`gnus-group-read-only-p'
     GROUP が読み出し専用かどうかを示します。

`gnus-news-group-p'
     GROUP がニュースバックエンドかどうかを示します。

`gnus-ephemeral-group-p'
     GROUP が一時ニュースグループかどうかを示します。

`gnus-server-to-method'
     SERVER に対応している選択方法を返します。

`gnus-server-equal'
     二つの仮想サーバーが同一かどうかを示します。

`gnus-group-native-p'
     GROUP が基本グループかどうかを示します。

`gnus-group-secondary-p'
     GROUP が二次グループかどうかを示します。

`gnus-group-foreign-p'
     GROUP が外部グループかどうかを示します。

`gnus-group-find-parameter'
     GROUP のパラメーターのリストを返します。二つ目の引数を与えると、
     GROUP 用のそのパラメーターの値を返します。

`gnus-group-set-parameter'
     三つの引数 GROUP, PARAMETER, VALUE を与えて、パラメーターとして設
     定します。

`gnus-narrow-to-body'
     現在のバッファーを、記事の本文に狭めます。

`gnus-check-backend-function'
     二つの引数 FUNCTION と GROUP を取ります。GROUP のバックエンドが
     FUNCTION をサポートしているなら、`nil' ではない値を返します。

          (gnus-check-backend-function "request-scan" "nnml:misc")
          => t

`gnus-read-method'
     利用者に選択方法を入力してもらう関数です。



File: gnus-ja.info, Node: Back End Interface, Next: Score File Syntax, Prev: Gnus Utility Functions, Up: Gnus Reference Guide

バックエンドインターフェース
----------------------------

Gnus は NNTP やスプール、メール、仮想グループについては何も知りません。
ただ仮想サーバー "virtual servers" と対話する方法を知っているだけです。
仮想サーバーはバックエンド "back end" といくつかのバックエンド変数
back end variables" からなります。前者の例としては `nntp', `nnspool',
`nnmbox' などがあります。後者の例としては `nntp-port-number' や
`nnmbox-directory' があります。

Gnus がバックエンド--例えば `nntp'---に何かの情報を要求するとき、通常は
関数の引数として仮想サーバー名を含めます。(無い場合は、バックエンドは
「現在の」仮想サーバーを使うべきです。) 例えば `nntp-request-list' は、
その唯一の (省略可能な) 引数として仮想サーバーを使います。もしこの仮想
サーバーとの接続が開かれていないと、この関数の実行は失敗するはずです。

仮想サーバー名は、物理的なサーバー名とは何の関係も無いことに注意してく
ださい。例を挙げましょう:

     (nntp "odd-one"
           (nntp-address "ifi.uio.no")
           (nntp-port-number 4324))

ここで物理サーバー名は `ifi.uio.no' であるのに対して、仮想サーバー名は
`odd-one' です。

バックエンドは複数の仮想サーバーを切り替えることができなければなりませ
ん。標準のバックエンドは、必要なときに仮想サーバーの環境を取り出し・押
し込みを行なう連想リストを保持することによって、これを実現しています。

インターフェース関数には二つのグループがあります。必ず存在しなければな
らない必須関数 "required functions" と、呼び出す前にそれが存在するかど
うかを常に Gnus が確認する任意関数 "optional functions" です。

これらすべての関数は、その戻り値のデータを `nntp-server-buffer'
(` *nntpd*') バッファーに返すことが求められます。これはちょっと
不運な名前付けですが、これで我慢しなければなりません。私が結果のデー
タ "resulting data" と言ったときは、そのバッファーの中のデータを指し
ています。戻り値 "return value" と言ったときは、関数呼び出しによって
返される関数の値のことを言っています。関数が失敗したときは、戻り値とし
て `nil' を返さなくてはいけません。

バックエンドにはサーバー型 "server-forming" のバックエンドと呼ばれるも
のがあり、またそう呼ばれないものもあります。後者は一般には、同時には一
つのグループだけしか操作しないバックエンドで、「サーバー」の概念があり
ません。このサーバーとは、グループを持ち、そのグループの情報を配送する
もので、それ以上のものではありません。

Gnus はグループ名と記事番号によって、それぞれのメッセージを特定します。
それら記事番号に関するちょっとした説明をすることは有益かもしれません。
まず第一に、その数値は正の整数です。第二に Gnus を混乱させることなく古
い記事番号を、後で「再使用」することは普通はできません。すなわち、もし
あるグループにかつて 42 番の記事があったとしたら、別の記事がその番号を
持つことができないか、または Gnus が激しく混乱してしまうということです。
(1) (*Note Back End Interface-Footnotes::) 第三に、記事番号はそのグルー
プでの到着順になっていなければならないことです。メッセージの日付も、必
ず到着順になっているわけではありませんが。

すでに前の節で、記事番号は一回使われただけで役目を終わらなければならな
い「厳しい」制限について説明しました。しかし、記事番号の並びに抜けがあ
ると Gnus はとても混乱してしまうので、連続した *通し* 番号を付けること
が有用なのかもしれません。ただし「再使用不可」の制限があるので、完全に
番号の抜けを回避できるとは限りません。また、可能な限り記事番号を 1 から
始めることは、番号を使い切ってしまうことを避けるために役立ちます。

慣例として、バックエンドは `nnなんたら' と名付けられますが、Gnus には
`nnheader.el'、`nnmail.el' および `nnoo.el' のように、いくつかのバック
エンドではない `nnかんたら' があることに注意してください。

ここでの例と定義では、想像上のバックエンド `nnchoke' を引き合いに出すこ
とにします。


* Menu:

* Required Back End Functions:: 実装しなければならない関数
* Optional Back End Functions:: 実装しなくてもよい関数
* Error Messaging::             メッセージを発したりエラーを報告する方法
* Writing New Back Ends::       古いバックエンドの拡張
* Hooking New Back Ends Into Gnus::  Gnus 側でしなければならないこと
* Mail-like Back Ends::         メールバックエンドのための助言


File: gnus-ja.info  Node: Back End Interface-Footnotes, Up: Back End Interface

(1) `nnchoke-request-update-info' 関数の説明を見てください。
*Note Optional Back End Functions::.



File: gnus-ja.info, Node: Required Back End Functions, Next: Optional Back End Functions, Prev: Back End Interface, Up: Back End Interface

必須バックエンド関数
....................

`(nnchoke-retrieve-headers ARTICLES &optional GROUP SERVER FETCH-OLD)'

     ARTICLES は記事番号の範囲か、`Message-ID' のリストのどちらかです。
     現在のバックエンドは、どちらも完全にサポートしているわけではありま
     せん--記事番号のひと続き (リスト) だけで、多くのバックエンドは
     `Message-ID' による取得をサポートしていません。でも、それらは両方
     サポートすることに努めるべきです。

     結果のデータは HEADs か NOV 行のいずれかであるべきで、戻り値はこれ
     を反映した `headers' か `nov' のどちらかでなければなりません。これ
     は今後、HEADs と NOV 行が混在する `various' に拡張されるかもしれま
     せんが、現在の Gnus ではサポートされていません。

     FETCH-OLD が `nil' ではなかったら、ある意味での「余分なヘッダー」
     を取得しようとします。これは通常、`articles' の中の最小番号の記事
     よりも小さい番号を持っている (最大で) FETCH-OLD 個の記事と、
     `articles' の中で欠番になっている記事の、余分なヘッダーを取得しま
     す。もしバックエンドがこの要求に従うことを煩わしいと思った場合には、
     このパラメーターの存在は無視されることもあります。この値が `nil'
     でも数値でもなかったら、最大限の取得を行ないます。

     これが HEAD の例です:

          221 1056 Article retrieved.
          Path: ifi.uio.no!sturles
          From: sturles@ifi.uio.no (Sturle Sunde)
          Newsgroups: ifi.discussion
          Subject: Re: Something very droll
          Date: 27 Oct 1994 14:02:57 +0100
          Organization: Dept. of Informatics, University of Oslo, Norway
          Lines: 26
          Message-ID: <38o8e1$a0o@holmenkollen.ifi.uio.no>
          References: <38jdmq$4qu@visbur.ifi.uio.no>
          NNTP-Posting-Host: holmenkollen.ifi.uio.no
          .

     そういうわけで、`headers' という戻り値は、データバッファーにその要
     素数と同じ個数のヘッダーがあることを暗示します。

     これがそういうバッファーの BNF 定義です:

          headers        = *head
          head           = error / valid-head
          error-message  = [ "4" / "5" ] 2number " " <error message> eol
          valid-head     = valid-message *header "." eol
          valid-message  = "221 " <number> " Article retrieved." eol
          header         = <text> eol

     (ここで使った BNF の版は RFC822 で使われているものです。)

     戻り値が `nov' だった場合は、データバッファーには "network
     overview database" 行が含まれていなければなりません。これは基本的
     には複数の欄をタブで区切ったものです。

          nov-buffer = *nov-line
          nov-line   = field 7*8[ <TAB> field ] eol
          field      = <text except TAB>

     これらの欄に何が含まれるべきかをきちんと調べたいのならば、
     *Note Headers:: を参照してください。

`(nnchoke-open-server SERVER &optional DEFINITIONS)'

     ここでの SERVER は仮想サーバー名です。DEFINITIONS はこの仮想サーバー
     を定義する `(VARIABLE VALUE)' の組のリストです。

     サーバーと接続できなかった場合でも、エラーをシグナルして処理を中断
     してはいけません。バックエンドは、これ以後さらにこのサーバーに接続
     しようとする試みを、拒否することを選ぶことができます。実際、そうす
     べきです。

     すでにそのサーバーと接続されていた場合には、この関数は `nil' では
     ない値を返さなければなりません。このとき、返される結果のデータはあ
     りません。

`(nnchoke-close-server &optional SERVER)'

     SERVER との接続を閉じて、これに関連するすべてのリソースを開放しま
     す。もし何らかの理由でサーバーを閉じることができない場合は、
     `nil' を返します。

     返される結果のデータはありません。

`(nnchoke-request-close)'

     すべてのサーバーとの接続を閉じて、バックエンドが保有していたすべて
     のリソースを開放します。このバックエンドによって作られたすべてのバッ
     ファーを削除しなければなりません。(もっとも `nntp-server-buffer'
     は削除されませんが。) 普通この関数は Gnus が終了するときにのみ呼び
     出されます。

     返される結果のデータはありません。

`(nnchoke-server-opened &optional SERVER)'

     SERVER が現在の仮想サーバーで、かつその物理サーバーへの接続が生き
     ている場合、この関数は `nil' ではない値を返さなければなりません。
     どんな状況でも、この関数は接続が失われたサーバーへの再接続を試みて
     はいけません。

     返される結果のデータはありません。

`(nnchoke-status-message &optional SERVER)'

     この関数は SERVER からの最後のエラーメッセージを返します。

     返される結果のデータはありません。

`(nnchoke-request-article ARTICLE &optional GROUP SERVER TO-BUFFER)'

     この関数の結果のデータは、ARTICLE で指定された記事でなければなりま
     せん。`Message-ID' か番号のいずれかを指定することができます。
     `Message-ID' による記事の取得を実装するかどうかは任意ですが、それ
     が可能になっている方が良いでしょう。

     TO-BUFFER が `nil' ではなかったら、結果のデータは通常のデータバッ
     ファーの代わりに、このバッファーに返さなければなりません。Gnus は
     主に、記事バッファーに直接記事を挿入するように要求しますが、これに
     よって、多量のデータをあるバッファーから別のバッファーにコピーする
     のを避けることが可能になります。

     もし少しでも可能なら、この関数は cons セルを返すべきです。その
     `car' は取得した記事があるグループ名で、`cdr' は記事の番号です。こ
     れによって、`Message-ID' で記事を取得したときに、Gnus が本当のグルー
     プと記事番号を知ることができるようになるでしょう。これが不可能な場
     合は、記事の取得に成功したときに `t' を返さなければなりません。

`(nnchoke-request-group GROUP &optional SERVER FAST)'

     GROUP のデータを取得します。この関数には GROUP を現在のグループに
     するという副作用もあります。

     FAST が設定されたなら、有用なデータを返す面倒を行なわずに、単に
     GROUP を現在のグループにします。

     これが結果のデータの例と、定義それ自体です:

          211 56 1000 1059 ifi.discussion

     最初の数値は状態で、これは 211 でなくてはなりません。次はそのグルー
     プにある記事の総数、最小の記事番号、最大の記事番号、そして最後がグ
     ループ名です。しかし、いくつかの記事はキャンセルされているかもしれ
     ないので、記事の総数は、記事の最大・最小番号から単純に考えられる数
     よりも小さいかもしれないことに注意してください。Gnus は総数を単に
     捨ててしまうので、(それが問題であるときに) 正しい値を生成する面倒
     を負うべきかどうかは、読者への課題として残してあります。もしそのグ
     ループに記事が無かったら、最小記事番号は 1、最大は 0 として報告し
     なければなりません。

          group-status = [ error / info ] eol
          error        = [ "4" / "5" ] 2<number> " " <Error message>
          info         = "211 " 3* [ <number> " " ] <string>

`(nnchoke-close-group GROUP &optional SERVER)'

     GROUP を閉じて、それに関連するすべてのリソースを開放します。ほとん
     どのバックエンドは何もすることが無いでしょう。

     返される結果のデータはありません。

`(nnchoke-request-list &optional SERVER)'

     SERVER 上で利用可能なすべてのグループのリストを返します。本当に *
     全部* という意味です。

     これは、たった二つしかグループを持っていないサーバーの場合の例です:

          ifi.test 0000002200 0000002000 y
          ifi.discussion 3324 3300 n

     各行にはグループ名、そのグループ内の最大の記事番号、最小の記事番号、
     そして最後にフラグがあります。もしそのグループに記事が無かったら、
     最小記事番号は 1、最大は 0 として報告しなければなりません。

          active-file = *active-line
          active-line = name " " <number> " " <number> " " flags eol
          name        = <string>
          flags       = "n" / "y" / "m" / "x" / "j" / "=" name

     フラグは、そのグループが読み出し専用 (`n') か、司会者付き (`m') な
     のか、死んでいる (`x') か、どこか他のグループの別名
     (`=other-group') なのか、それらのどれでもない (`y') のかを示します。

`(nnchoke-request-post &optional SERVER)'

     この関数は、現在のバッファーを投稿しなければなりません。投稿が成功
     したかどうかを返しても構いませんが、必須ではありません。例えば、投
     稿が非同期に行なわれる場合は、この関数が終了した時点では、投稿は普
     通完了していません。その場合この関数は、投稿を完了させることができ
     ないときに、それをはっきりと利用者に知らせる見張り (sentinel) のよ
     うなものを設定するべきでしょう。

     この関数から返される結果のデータはありません。



File: gnus-ja.info, Node: Optional Back End Functions, Next: Error Messaging, Prev: Required Back End Functions, Up: Back End Interface

任意バックエンド関数
....................

`(nnchoke-retrieve-groups GROUPS &optional SERVER)'

     GROUPS はグループのリストです。また、この関数はそれら全部のグルー
     プのデータを要求しなければなりません。どうやってそれを行なうかは
     Gnus の知ったことではありませんが、これをできるだけ迅速な方法で行
     なうことに挑まなければなりません。

     この関数の戻り値は `active' か `group' のどちらでも良く、それが結
     果のデータの形式が何であるかを示します。前者は
     `nnchoke-request-list' によるデータと同じ形式です。一方後者は
     `nnchoke-request-group' が返すものと同じ形式の、バッファーを埋める
     行です。

          group-buffer = *active-line / *group-status

`(nnchoke-request-update-info GROUP INFO &optional SERVER)'

     Gnus のグループ情報 (*Note Group Info::) が、バックエンドのそれを
     改変するために渡されます。これはバックエンドが (仮想グループや
     imap グループの場合のように)、本当にすべての情報を持っている場合に
     役に立ちます。この関数は、その要求に適合させる情報を破壊的に置き換
     えて、`nil' ではない値を返さなければなりません (例外的に
     `nntp-request-update-info' は、ネットワーク資源を浪費しないように
     常に `nil' を返します)。

     この関数が返す結果のデータはありません。

`(nnchoke-request-type GROUP &optional ARTICLE)'

     利用者が「ニュースを送信する」命令 (例えば、概略バッファーで `F')
     を実行したときに、Gnus は利用者がフォローアップしようとしている記
     事がニュースなのかメールなのかを知っている必要があります。この関数
     は GROUP の中の ARTICLE がニュースであれば `news' を、メールであれ
     ば `mail' を、その種別を判定できない場合は `unknown' を返さなけれ
     ばなりません。(ARTICLE 引数は、メールグループとニュースグループが
     ごちゃまぜになっているかもしれない `nnvirtual' において必要です。)
     GROUP と ARTICLE は両方とも `nil' であるかもしれません。

     この関数が返す結果のデータはありません。

`(nnchoke-request-set-mark GROUP ACTION &optional SERVER)'

     記事の印を設定/消去/追加します。通常 Gnus は記事の印 (既読、可視、
     期限切れ消去など) を内部で扱い、`~/.newsrc.eld' に保存します。しか
     し、いくつかのサーバー (例えば IMAP) は記事のすべての情報をサーバー
     で持っているので、Gnus が印の情報をサーバーに伝搬させる必要があり
     ます。

     ACTION は印を設定する要求のリストで、以下の様式を持ちます:

          (RANGE ACTION MARK)

     RANGE は印を付けたい記事の範囲です。ACTION は `add' または `del'
     で、印を追加したり消すために使われます (言及されていないすべての印
     は保存します)。MARK は印のリストです。それぞれの印はシンボルです。
     現在使われている印は `read', `tick', `reply', `expire', `killed',
     `dormant', `save', `download', `unsend', `forward' および
     `recent' ですが、あなたのバックエンドは、可能ならこれらを制限をす
     るべきではありません。

     矛盾する動作が指定された場合は、リストの最後の動作が効力を持つもの
     になるべきです。すなわち、ACTION が記事 1 に `可視' 印を追加する要
     求を含んでいて、リストのおしまいの方で、同じ記事から印を消去するこ
     とを要求していたならば、印は実際には消去されるべきです。

     ACTION リストの例です:

          (((5 12 30) 'del '(tick))
           ((10 . 90) 'add '(read expire))
           ((92 94) 'del '(read)))

     関数は印を設定できなかった記事の範囲を返さなければなりません (現在
     はどんな目的のためにも使われていません)。

     この関数が返す結果のデータはありません。

`(nnchoke-request-update-mark GROUP ARTICLE MARK)'

     バックエンドが嫌う印を利用者が設定しようとしたら、この関数がその印
     を変更することができます。この関数が返したどんなものでも、Gnus は
     ARTICLE への印として元の MARK の代わりに使います。バックエンドがそ
     れでも構わない場合には、元の MARK を返さなければなりません。`nil'
     やその他のゴミを返してはいけません。

     私に考えられるこれの利用法は、それで `nnvirtual' が行なっているこ
     とだけです--その仮想グループで既読の印を付けると、もし構成要素のグ
     ループが自動期限切れ消去可能ならば、結果としてその記事に期限切れ消
     去の印が付けられます。

     この関数が返す結果のデータはありません。

`(nnchoke-request-scan &optional GROUP SERVER)'

     バックエンドが新着記事を検査する要求を (Gnus か他の何かによって)
     行なうときはいつでも、あれやこれやとこの関数が呼び出されるでしょう。
     この関数が起動されると、一般にメールバックエンドはスプールファイル
     を読むか POP サーバーに問い合わせます。GROUP に留意する必要はあり
     ません--バックエンドが、一つのグループだけを走査するのが大変すぎる
     と判断した場合には、すべてのグループを総ががりで走査しても構いませ
     ん。ですが、その方が実用的ならば、局所に限定するのが良いでしょう。

     この関数が返す結果のデータはありません。

`(nnchoke-request-group-description GROUP &optional SERVER)'

     この関数が返す結果のデータは、GROUP の説明でなければなりません。

          description-line = name <TAB> description eol
          name             = <string>
          description      = <text>

`(nnchoke-request-list-newsgroups &optional SERVER)'

     この関数が返す結果のデータは、サーバー上で利用できるすべてのグルー
     プの説明でなければなりません。

          description-buffer = *description-line

`(nnchoke-request-newgroups DATE &optional SERVER)'

     この関数から返される結果のデータは、`date' 以降に作成されたすべて
     のグループでなければなりません。`date' は人間が読める普通の日付の
     形式 (すなわち、メールやニュースのヘッダーで使われる形式で、ディフォ
     ルトは関数 `message-make-date' が返すもの) です。データは active
     バッファーの形式でなければなりません。

     この関数が「多すぎる」グループを返すのはオッケーです。いくつかのバッ
     クエンドでは、新しいグループだけではなくて、すべてのグループのリス
     トを返す方が安上がりに済むことを見出すかもしれません。しかし、たく
     さんのグループがあるバックエンドで、これをしてはいけません。普通、
     利用者が自分で作ったグループならば多すぎることはないでしょうから、
     `nnml' とそれに類するものはたぶん心配ありません。しかし `nntp' の
     ようなバックエンドでは、グループはサーバーによって作られているので、
     いかにもたくさんのグループがありそうです。

`(nnchoke-request-create-group GROUP &optional SERVER)'

     この関数は GROUP という名前の空のグループを作成しなければなりませ
     ん。

     返されるデータはありません。

`(nnchoke-request-expire-articles ARTICLES &optional GROUP SERVER FORCE)'

     この関数は、ARTICLES の範囲のすべての記事に対して期限切れ消去の処
     理を行ないます (現在 ARTICLES は記事番号の単純なリストです)。記事
     がどれだけ古いかを、この関数で消去される前に判定することは、バック
     エンドに任されています。FORCE が `nil' ではない値だったら、それら
     がどんなに新しくても、すべての ARTICLES を消去しなければなりません。

     この関数は削除しなかった、あるいは削除することができなかった記事の
     リストを返さなければなりません。

     返される結果のデータはありません。

`(nnchoke-request-move-article ARTICLE GROUP SERVER ACCEPT-FORM &optional LAST)'

     この関数は GROUP にある記事 ARTICLE (番号) を、
     ACCEPT-FORM を呼び出すことによって移動しなければなりません。

     この関数は、当の記事を移動させるための準備として、それが記事に付加
     したどんなヘッダー行をも削除して、記事を大体において「きれい」にし
     ておく必要があります。そして「きれい」な記事があるバッファーで、
     ACCEPT-FORM を `eval' しなければなりません 。これは実際に複製を行
     ないます。もしこの `eval' が `nil' 以外の値を返したら、その記事を
     削除しなければなりません。

     もし LAST が `nil' だったら、それはこの直後にさらに要求が発行され
     る見込みが高いことを意味し、これによっていくらか最適化ができるよう
     になります (訳注: 例えば `nil' だったらサーバーとの接続を閉じない
     でおくとか)。

     この関数は、移動先のグループ名が `car' で、移動先の記事番号が
     `cdr' である cons セルを返さなければなりません。

     返されるデータはありません。

     訳注: 移動先のグループは ACCEPT-FORM の中で指定します。そこで使わ
     れるのが、次の `nnchoke-request-accept-article' です。

`(nnchoke-request-accept-article GROUP &optional SERVER LAST)'

     この関数は、現在のバッファーの中身を GROUP に挿入します。LAST が
     `nil' だったら、この関数へのさらなる呼び出しが直ちに行なわれるだろ
     うという意味です。

     この関数はグループ名が `car' で、移動先の記事番号が `cdr' である
     cons セルを返さなければなりません。

     そのグループは、記事を受け入れてもらうことをバックエンドが要求する
     前に存在しなければなりません。

     返されるデータはありません。

`(nnchoke-request-replace-article ARTICLE GROUP BUFFER)'

     この関数は GROUP から記事 ARTICLE (番号) を削除して、代わりに
     BUFFER の中身をそこに挿入しなければなりません。

     返されるデータはありません。

`(nnchoke-request-delete-group GROUP FORCE &optional SERVER)'

     この関数は GROUP を消去しなければなりません。もし FORCE が設定され
     ていたら、そのグループ内のすべての記事を本当に消去して、そしてその
     グループ自身を消去しなければなりません。(もし「グループ自身」とい
     うものがあれば。)

     返されるデータはありません。

`(nnchoke-request-rename-group GROUP NEW-NAME &optional SERVER)'

     この関数はグループ名を GROUP から NEW-NAME に変更しなければなりま
     せん。GROUP 内にあるすべての記事は、NEW-NAME に移動しなければなり
     ません。

     返されるデータはありません。



File: gnus-ja.info, Node: Error Messaging, Next: Writing New Back Ends, Prev: Optional Back End Functions, Up: Back End Interface

エラーメッセージの発行
......................

バックエンドはエラーの状況の報告に `nnheader-report' を使わなければなり
ません--要求を実行できないときにエラーを生起させてはいけません。この関
数の最初の引数はバックエンド名のシンボルで、残りは、複数の引数があれば
`format' への引数として解釈され、一つであればただの文字列です。この関数
は常に `nil' を返さなければなりません。

     (nnheader-report 'nnchoke "You did something totally bogus")

     (nnheader-report 'nnchoke "Could not request group %s" group)

一方 Gnus は、サーバーから `nil' を返されたときに
`nnheader-get-report' を呼び出します。するとこの関数が、当のバックエン
ドに対して最後に報告されたメッセージを返します。この関数は一つの引数--
サーバーのシンボルを取ります。

内部的には、これらの関数は BACK-END`-status-string' にアクセスます、し
たがって `nnchoke' バックエンドはそのエラーメッセージを
`nnchoke-status-string' に格納します。



File: gnus-ja.info, Node: Writing New Back Ends, Next: Hooking New Back Ends Into Gnus, Prev: Error Messaging, Up: Back End Interface

新しいバックエンドを書く
........................

多くのバックエンドはよく似通っています。`nnml' は `nnspool' と瓜二つで
すが、サーバー上の記事を編集することができます。`nnmh' はまるで `nnml'
のようですが、アクティブファイルを使わないし、概要データベースも保持し
ません。`nndir' は `nnml' にとても似ていますが、これには「グループ」の
概念は無く、記事の編集はできません。

新しいバックエンドを書くときに他のバックエンドから関数を「継承」できた
らなあ、と思うのは理に適っています。そしてまさに、あなたがそうしたけれ
ば、それができるのです。(あなたがそうしたくなければしなくても良いですよ、
もちろん。)

すべてのバックエンドは、公共変数と公共関数を `nnoo' というパッケージを
使って宣言します。

他のバックエンドから関数を継承するには (そして現在のバックエンドから他
のバックエンドに関数を継承できるようにするには)、以下のマクロを使用しな
ければなりません:

`nnoo-declare'
     このマクロは、最初の引数を、その後に続く引数の子供であることを宣言
     します。例えば:

          (nnoo-declare nndir
            nnml nnmh)

     ここで `nndir' は、`nnml' と `nnmh' の両方から関数を継承するつもり
     であることを宣言しています。

`defvoo'
     このマクロは `defvar' と等価ですが、その変数を公共サーバー変数とし
     て登録します。ほとんどの状態志向型の変数は、`defvar' ではなく
     `defvoo' によって宣言するべきです。

     通常の `defvar' の引数に加えて、このマクロは親バックエンドにおける
     変数のリストを取ります。それらの親バックエンドで定義されている関数
     を子のバックエンドで実行するときに、その関数の中でアクセスされる親
     の変数を、子の変数で置き換えます。

          (defvoo nndir-directory nil
            "Where nndir will look for groups."
            nnml-current-directory nnmh-current-directory)

     これは `nndir' のために `nnml' の関数が呼び出されたときに、
     `nnml-current-directory' は `nndir-directory' に設定されるという意
     味です。(`nnmh' も同様です。)

`nnoo-define-basics'
     このマクロは、ほとんどすべてのバックエンドが持つべき共通関数をいく
     つか定義します。

          (nnoo-define-basics nndir)

`deffoo'
     このマクロはまさに `defun' のようなもので、同一の引数を取ります。
     通常の `defun' の処理に加えて、このマクロは他のバックエンドがそれ
     を継承できるように、その関数が公共物になっているものとして登録しま
     す。

`nnoo-map-functions'
     このマクロは、現在のバックエンドの関数から親バックエンドの関数への、
     置き換えができるようにします。

          (nnoo-map-functions nndir
            (nnml-retrieve-headers 0 nndir-current-group 0 0)
            (nnmh-request-article 0 nndir-current-group 0 0))

     これは `nndir-retrieve-headers' が呼び出されたときに、一番目、三番
     目、および四番目の引数が `nnml-retrieve-headers' に渡され、一方、
     二番目の引数は `nndir-current-group' の値として設定されるという意
     味です。

`nnoo-import'
     このマクロは他のバックエンドから関数を輸入します。これは単にまだ定
     義されていない関数を定義するだけなので、ソースファイルの最後に書か
     なければなりません。

          (nnoo-import nndir
            (nnmh
             nnmh-request-list
             nnmh-request-newgroups)
            (nnml))

     これは、`nndir-request-list' への呼び出しは単に
     `nnmh-request-list' に引き渡されなければならず、一方 `nnml' の公共
     関数でまだ `nndir' で定義されていないものをここで定義するというこ
     とです。

以下は `nndir' バックエンドのちょっと短縮した版です。

     ;;; nndir.el -- 単一のディレクトリーをニュースグループにする
     ;; Copyright (C) 1995,1996 Free Software Foundation, Inc.

     ;;; Code:

     (require 'nnheader)
     (require 'nnmh)
     (require 'nnml)
     (require 'nnoo)
     (eval-when-compile (require 'cl))

     (nnoo-declare nndir
       nnml nnmh)

     (defvoo nndir-directory nil
       "nndir がグループを探す場所。"
       nnml-current-directory nnmh-current-directory)

     (defvoo nndir-nov-is-evil nil
       "*これが nil でなかったら NOV ヘッダーを取得しません。"
       nnml-nov-is-evil)

     (defvoo nndir-current-group ""
       nil
       nnml-current-group nnmh-current-group)
     (defvoo nndir-top-directory nil nil nnml-directory nnmh-directory)
     (defvoo nndir-get-new-mail nil nil nnml-get-new-mail nnmh-get-new-mail)

     (defvoo nndir-status-string "" nil nnmh-status-string)
     (defconst nndir-version "nndir 1.0")

     ;;; インターフェース用の関数。

     (nnoo-define-basics nndir)

     (deffoo nndir-open-server (server &optional defs)
       (setq nndir-directory
             (or (cadr (assq 'nndir-directory defs))
                 server))
       (unless (assq 'nndir-directory defs)
         (push `(nndir-directory ,server) defs))
       (push `(nndir-current-group
               ,(file-name-nondirectory
                 (directory-file-name nndir-directory)))
             defs)
       (push `(nndir-top-directory
               ,(file-name-directory (directory-file-name nndir-directory)))
             defs)
       (nnoo-change-server 'nndir server defs))

     (nnoo-map-functions nndir
       (nnml-retrieve-headers 0 nndir-current-group 0 0)
       (nnmh-request-article 0 nndir-current-group 0 0)
       (nnmh-request-group nndir-current-group 0 0)
       (nnmh-close-group nndir-current-group 0))

     (nnoo-import nndir
       (nnmh
        nnmh-status-message
        nnmh-request-list
        nnmh-request-newgroups))

     (provide 'nndir)



File: gnus-ja.info, Node: Hooking New Back Ends Into Gnus, Next: Mail-like Back Ends, Prev: Writing New Back Ends, Up: Back End Interface

新しいバックエンドを Gnus に繋げる
..................................

あなたの新しいバックエンドを Gnus で使い始めるのはとても簡単です--単に
`gnus-declare-backend' 関数で宣言するだけです。これはバックエンドを
`gnus-valid-select-methods' 変数に追加します。

`gnus-declare-backend' は二つの引数を取ります--バックエンドの名前と任意
の数の能力 "abilities" です。

これが例です。

     (gnus-declare-backend "nnchoke" 'mail 'respool 'address)

そして上記の行が `nnchoke.el' ファイルに入ります。

能力には以下のものがあります:

`mail'
     これはメール風バックエンドです--フォローアップは (たいていは) メー
     ルで送られるはずです。
`post'
     これはニュース風バックエンドです--フォローアップは (たいていは)
     ニュースで送られるはずです。
`post-mail'
     このバックエンドはメールとニュースの両方をサポートします。
`none'
     これはニュースでもメールでもないバックエンドです--まったく違った何
     かです。
`respool'
     これは再スプールをサポートします--というか、その元の記事とグループ
     を書き換えることができます。
`address'
     サーバーの名前が仮想サーバー名に含まれていなければなりません。これ
     はほとんど全部のバックエンドに当てはまります。
`prompt-address'
     グループバッファーで `B' などの命令を実行したときに、利用者はアド
     レスの入力を求められるはずです。例えばこれは `nntp' のようなバック
     エンドに当てはまりますが、`nnmbox' はそうではありません。



File: gnus-ja.info, Node: Mail-like Back Ends, Prev: Hooking New Back Ends Into Gnus, Up: Back End Interface

メール風バックエンド
....................

メールバックエンドがその他のバックエンドに対して一線を画しているのは、
ほとんどのメールバックエンドが `nnmail.el' で定義されている共通の関数に
強く依存しているという点です。例えばこれは `nnml-request-scan' の定義で
す:

     (deffoo nnml-request-scan (&optional group server)
       (setq nnml-article-file-alist nil)
       (nnmail-get-new-mail 'nnml 'nnml-save-nov nnml-directory group))

単に `nnmail-get-new-mail' にいくつか引数を与えて呼び出すだけで、
`nnmail' がメールの移動や分割のすべての面倒を見てくれます。

この関数は四つの引数を取ります。

METHOD
     これは、どのバックエンドがこの呼び出しの責任を負うかを指示するシン
     ボルでなければなりません。

EXIT-FUNCTION
     この関数は、分割が実行された後で呼び出されるものでなければなりませ
     ん。

TEMP-DIRECTORY
     一時ファイルを格納する場所です。

GROUP
     この引数は省略可能です。分割が一つのグループだけに対して行なわれる
     場合は、この引数でグループ名を指定しなけれなばりません。

`nnmail-get-new-mail' は、それぞれの記事を保存するために
BACK-END`-save-mail' を呼び出します。BACK-END`-active-number' は、この
記事に割り当てられた記事番号を調べるために呼び出されます。

この関数は次の変数も使用します: BACK-END`-get-new-mail' (このバックエン
ドの新着メールを受け取るかどうか)、新しいアクティブファイルを生成するた
めの BACK-END`-group-alist' および BACK-END`-active-file' です。
BACK-END`-group-alist' は、以下のようなグループとアクティブの連想リスト
です:

     (("a-group" (1 . 10))
      ("some-group" (34 . 39)))



File: gnus-ja.info, Node: Score File Syntax, Next: Headers, Prev: Back End Interface, Up: Gnus Reference Guide

スコアファイルの構文
--------------------

スコアファイルは簡単に分析できるだけでなく、極めて柔軟な対応ができるよ
うになっています。それには Emacs Lisp のリストとして読み込むことができ
るような構文がふさわしいだろうと判断されました。

これは良くあるスコアファイルです:

     (("summary"
       ("win95" -10000 nil s)
       ("Gnus"))
      ("from"
       ("Lars" -1000))
      (mark -100))

スコアファイルの BNF 定義です。

     score-file      = "" / "(" *element ")"
     element         = rule / atom
     rule            = string-rule / number-rule / date-rule
     string-rule     = "(" quote string-header quote space *string-match ")"
     number-rule     = "(" quote number-header quote space *number-match ")"
     date-rule       = "(" quote date-header quote space *date-match ")"
     quote           = <ascii 34>
     string-header   = "subject" / "from" / "references" / "message-id" /
                       "xref" / "body" / "head" / "all" / "followup"
     number-header   = "lines" / "chars"
     date-header     = "date"
     string-match    = "(" quote <string> quote [ "" / [ space score [ "" /
                       space date [ "" / [ space string-match-t ] ] ] ] ] ")"
     score           = "nil" / <integer>
     date            = "nil" / <natural number>
     string-match-t  = "nil" / "s" / "substring" / "S" / "Substring" /
                       "r" / "regex" / "R" / "Regex" /
                       "e" / "exact" / "E" / "Exact" /
                       "f" / "fuzzy" / "F" / "Fuzzy"
     number-match    = "(" <integer> [ "" / [ space score [ "" /
                       space date [ "" / [ space number-match-t ] ] ] ] ] ")"
     number-match-t  = "nil" / "=" / "<" / ">" / ">=" / "<="
     date-match      = "(" quote <string> quote [ "" / [ space score [ "" /
                       space date [ "" / [ space date-match-t ] ] ] ] ")"
     date-match-t    = "nil" / "at" / "before" / "after"
     atom            = "(" [ required-atom / optional-atom ] ")"
     required-atom   = mark / expunge / mark-and-expunge / files /
                       exclude-files / read-only / touched
     optional-atom   = adapt / local / eval
     mark            = "mark" space nil-or-number
     nil-or-number   = "nil" / <integer>
     expunge         = "expunge" space nil-or-number
     mark-and-expunge = "mark-and-expunge" space nil-or-number
     files           = "files" *[ space <string> ]
     exclude-files   = "exclude-files" *[ space <string> ]
     read-only       = "read-only" [ space "nil" / space "t" ]
     adapt        = "adapt" [ space "ignore" / space "t" / space adapt-rule ]
     adapt-rule      = "(" *[ <string> *[ "(" <string> <integer> ")" ] ")"
     local           = "local" *[ space "(" <string> space <form> ")" ]
     eval            = "eval" space <form>
     space           = *[ " " / <TAB> / <NEWLINE> ]

認識不可能なスコアファイルの要素は無視されるべきですが、捨ててしまって
はいけません。

ご覧のように空白が必要ですが、空白の量と型は重要ではありません。つまり、
スコアファイルの様式はプログラマーに任されています--すべてを一つの長ーー
い行に吐き出す方がより簡単なのであれば、それでも構いません。

いろいろなアトムの意味は、このマニュアルのどこかで説明されています
(*Note Score File Format::)。



File: gnus-ja.info, Node: Headers, Next: Ranges, Prev: Score File Syntax, Up: Gnus Reference Guide

ヘッダー
--------

Gnus は記事のヘッダーを溜めておくために、内部的には NOV の規格を怪しげ
なやり方で踏襲する様式を使っています。NOV の仕様を見た作者が、恥知らず
にもすべてを *盗んだ* と思うかもしれませんが、それは正しいです。

「ヘッダー」はひどく荷の重い用語です。「ヘッダー」は RFC1036 では記事の
頭の行 (例えば、`From') について話すのに用いられています。それは多くの
人が「ヘッド」---「ヘッダーと本文」の同義語として使っています。(私に言
わせれば、これは避けるべきです。) そして Gnus は、私がここで話す「ヘッ
ダー」と言う様式を内部的に使っています。これは基本的には九つの要素から
なるベクトルで、それぞれのヘッダー (あ痛っ) が一つの場所を占めます。

これらの場所は、順番に `number', `subject', `from', `date', `id',
`chars', `lines', `xref', および `extra' です。これらの場所を読み出した
り設定するマクロがあります--それらはすべて、それぞれ `mail-header-' と
`mail-header-set-' いう予想しやすい名前を持っています。

`extra' のための場所がヘッダーと値の対の連想リストであることを除いて、
これらすべての場所には文字列が入ります (*Note To From Newsgroups::)。



File: gnus-ja.info, Node: Ranges, Next: Group Info, Prev: Headers, Up: Gnus Reference Guide

範囲
----

GNUS は非常に有用な概念を導入してくれました。私はそれをたくさん使い、か
なり入念に仕上げました。

設問は単純です: 何か番号で呼ぶことができる大量のもの (*粗雑な* 例として
は、例えば記事) を持っていて、それらが「含まれている」ことを表現したい
としましょう。それらを順番に並べるのは、あまり便利ではありません。
(20,000 個を順番に並べたものは、ちょっと長たらしいですよね。)

解決策は設問と同じくらい単純です。単にその並びを折りたためば良いのです。

     (1 2 3 4 5 6 10 11 12)

は次のように変形されます。

     ((1 . 6) (10 . 12))

単独のものを表すために `(13 . 13)' のようなやっかいな要素を持たなくても
良いように、`13' は有効な要素になっています。例えば:

     ((1 . 6) 7 (10 . 12))

以下のような二つの範囲を比較して、それらが等しいがとうかを調べるのは、
少し手のこんだことになります:

     ((1 . 5) 7 8 (10 . 12))

と

     ((1 . 5) (7 . 8) (10 . 12))

は等しいです。実際のところ、下り順で並んでいないリストは範囲です:

     (1 2 3 4 5)

これはかなり長ったらしいものですが、完璧に有効な範囲です。以下も有効で
す:

     (1 . 5)

そして、これはその前の範囲と等しいものです。

これは範囲の BNF 定義です。もちろん、数値の並びが下り順であってはならな
いことを覚えておかなければなりません。(同じ数値を任意の回数にわたって繰
り返すことができますが、範囲の扱いにおいて消え去る傾向があります。)

     range           = simple-range / normal-range
     simple-range    = "(" number " . " number ")"
     normal-range    = "(" start-contents ")"
     contents        = "" / simple-range *[ " " contents ] /
                       number *[ " " contents ]

現在 Gnus は既読記事と記事の印を維持するために範囲を使っています。当局
が私にそれをさせたがっているのなら、私は数の範囲の操作を C で実装しよう
と思っています。(私はまだ尋ねていません。と言うのは、普通の連続体に変換
し直さずに、世の中を完全に範囲に基づいたものにするためには何が必要かを、
私はもっと考えなければならないからです。)



File: gnus-ja.info, Node: Group Info, Next: Extended Interactive, Prev: Ranges, Up: Gnus Reference Guide

グループ情報
------------

Gnus はグループのすべての永続的な情報を "group info" リストに格納します。
このリストは 3 から 6 (またはそれ以上) の長さの要素で、徹底的にグループ
を記述します。

ここにあるのはグループ情報 (group info) の二つの例です。一つは非常に単
純なグループですが、二つ目はもっと複雑なものです:

     ("no.group" 5 ((1 . 54324)))

     ("nnml:my.mail" 3 ((1 . 5) 9 (20 . 55))
                     ((tick (15 . 19)) (replied 3 6 (19 . 3)))
                     (nnml "")
                     ((auto-expire . t) (to-address . "ding@gnus.org")))

最初の要素は「グループ名」---とにかく Gnus が知っているグループです。二
番目の要素は「購読度」で、普通は小さな整数です。(それは「階級」(rank)
になることもできます。`car' がレベルで `cdr' がスコアのコンスセルです。)
三番目の要素は既読記事の範囲のリストです。四番目の要素はいろいろな種類
の記事の印のリストのリストです。五番目の要素は選択方法です (もしくは、
そう言いたければ仮想サーバーです)。六番目の要素は「グループパラメーター」
のリストで、この章はそのためにあります (訳注: ほんとうに?)。

最後の三つの要素はどれでも、必要が無ければ存在しないこともあります。実
際、グループの非常に大部分は最初の三つの要素だけを持ち、それは (最後の
三要素が省略できることは) 非常に多くのコンスセルを節約します。

これはグループ情報様式の BNF 定義です:

     info          = "(" group space ralevel space read
                     [ "" / [ space marks-list [ "" / [ space method [ "" /
                     space parameters ] ] ] ] ] ")"
     group         = quote <string> quote
     ralevel       = rank / level
     level         = <integer in the range of 1 to inf>
     rank          = "(" level "." score ")"
     score         = <integer in the range of 1 to inf>
     read          = range
     marks-lists   = nil / "(" *marks ")"
     marks         = "(" <string> range ")"
     method        = "(" <string> *elisp-forms ")"
     parameters    = "(" *elisp-forms ")"

実は `marks' の規則はごまかしです。`marks' は `range' とともに cons を
構成する `<string>' ですが、疑似 BNF でそれを現すのは難しいのです。

情報の要素群にアクセスして、それらの値を取得または設定するために、Gnus
は一連のマクロを提供しています。

`gnus-info-group'
`gnus-info-set-group'
     グループ名を取得/設定 (get/set) します。

`gnus-info-rank'
`gnus-info-set-rank'
     グループの階級 (rank) を取得/設定します (*Note Group Score::)。

`gnus-info-level'
`gnus-info-set-level'
     グループのレベルを取得/設定します。

`gnus-info-score'
`gnus-info-set-score'
     グループのスコアを取得/設定します (*Note Group Score::)。

`gnus-info-read'
`gnus-info-set-read'
     既読記事の範囲を取得/設定します。

`gnus-info-marks'
`gnus-info-set-marks'
     印が付いている記事の範囲のリストを取得/設定します。

`gnus-info-method'
`gnus-info-set-method'
     グループの選択方法を取得/設定します。

`gnus-info-params'
`gnus-info-set-params'
     グループパラメーターを取得/設定します。

取得するためのすべての関数は一つの引数を取ります--情報のリストです。設
定するための関数は二つの引数を取ります--情報のリストと新しい値です。

グループ情報の最後の三つの要素は必須ではないので、要素を設定する前にグ
ループ情報を拡張する必要があるでしょう。それが必要な場合、最後の三つの
設定するための関数の第三引数に `nil' ではない値を指定すれば、自動的に拡
張させることができます。(訳注: 例えば三つの要素しかない情報に四つ目の要
素を加える処理を第三引数を使わずに行なうと、`(setcar (nthcdr 3 INFO)
VALUE)' というコードが実行される結果、エラーになってしまいます。)



File: gnus-ja.info, Node: Extended Interactive, Next: Emacs/XEmacs Code, Prev: Group Info, Up: Gnus Reference Guide

対話形式の拡張
--------------

Gnus は Emacs 標準の `interactive' の仕様を、シンボル接頭引数を簡単に使
うことができるようにするために、少し拡張しています (*Note Symbolic
Prefixes::)。これはその使い方の例です:

     (defun gnus-summary-increase-score (&optional score symp)
       (interactive (gnus-interactive "P\ny"))
       ...
       )

最上のものは `interactive' の式を返すマクロとして `gnus-interactive' を
実装することでしょうが、Emacs は関数が対話的かどうかを調べるために、ラ
ムダ式に対して単純に `assq' を行なうので、これは不可能です。そこで、文
字列を受け取って `interactive' で使うことができる値を返す
`gnus-interactive' 関数を、代わりに持つことにしました。

この関数は (ほとんど) すべての `interactive' の指定を受け付けますが、も
う少し加えることにします。

`y'
     現在のシンボル接頭引数--変数 `gnus-current-prefix-symbol' です。

`Y'
     現在のシンボル接頭引数のリスト--変数 `gnus-current-prefix-symbol'
     です。

`A'
     現在の記事番号--関数 `gnus-summary-article-number' です。

`H'
     現在の記事ヘッダー --関数 `gnus-summary-article-header' です。

`g'
     現在のグループ名--関数 `gnus-group-group-name' です。



File: gnus-ja.info, Node: Emacs/XEmacs Code, Next: Various File Formats, Prev: Extended Interactive, Up: Gnus Reference Guide

Emacs/XEmacs コード
-------------------

Gnus は Emacs, XEmacs と Mule で動作するので、そのうちの一つを主環境と
することに決めました。私は Emacs を選びました。私が XEmacs や Mule を好
きではないということではなく、それがアルファベット順で最初に来たからで
す。(訳注: 現在 Gnus がサポートしている (X)Emacs については *Note
Emacsen:: を参照してください。)

これは、Gnus は Emacs で少しの警告も無くバイトコンパイルできるのに対し
て、XEmacs はバイトコンパイルをしている間にギガバイトくらいの警告を出す
ということでもあります (訳注: 現在はそんなことはありません)。私は些細な
失敗を見つけ出すことに役立てるためにバイトコンパイルの警告を使っている
ので、それはとても助けになります。

さらに、私は首尾一貫して Emacs の関数のインターフェースを使ってきました
が、それらの関数のために Gnus の別名 (aliases) を使ってきました。例を出
しましょう: Emacs が関数 `run-at-time' を定義している一方で、XEmacs は
関数 `start-itimer' を定義しています。そこで、私は Emacs の
`run-at-time' と同じ引数を受け取る `gnus-run-at-time' という関数を定義
しました (訳注: 現在は `run-at-time' に統一されています)。Gnus を
Emacs で実行しているときは、`gnus-run-at-time' は単に `run-at-time' の
別名になっています。しかし XEmacs で実行したときは、`gnus-run-at-time'
は次の関数の別名となっています (訳注: 現在こういうものはありません):

     (defun gnus-xmas-run-at-time (time repeat function &rest args)
       (start-itimer
        "gnus-run-at-time"
        `(lambda ()
           (,function ,@args))
        time repeat))

この種のことが多くの関数のために行なわれています。Gnus は XEmacs で実行
しているときに、元からある Emacs の関数を再定義しません--代わりにそれは、
Gnus の等価なものに `defalias' をすることによって行ないます。その方が、
よりきれいです。

XEmacs の関数のインターフェースの方が明らかにきれいな場合は、私は代わり
にそれを使います。例えば、`gnus-region-active-p' は XEmacs では
`region-active-p' の別名であるのに対して、Emacs では関数です。

もちろん XEmacs を私の基本プラットフォームに選んで、関数の割り当てを逆
にすることもできましたが、私はそうしませんでした。XEmacs で Gnus を実行
するときの、これらの遠回しな割り当てが強いる性能への打撃は、僅かなはず
です。



File: gnus-ja.info, Node: Various File Formats, Prev: Emacs/XEmacs Code, Up: Gnus Reference Guide

いろいろなファイル様式
----------------------

* Menu:

* Active File Format::          使用可能な記事とグループの情報
* Newsgroups File Format::      グループの説明



File: gnus-ja.info, Node: Active File Format, Next: Newsgroups File Format, Prev: Various File Formats, Up: Various File Formats

アクテイブファイルの様式
........................

アクティブファイルは、対象になっているサーバーのすべての使用可能なグルー
プの目録を保持します。そこには、それぞれのグループの最高と最低の記事番
号の目録もあります。

これは普通のアクティブファイルからの抜粋です:

     soc.motss 296030 293865 y
     alt.binaries.pictures.fractals 3922 3913 n
     comp.sources.unix 1605 1593 m
     comp.binaries.ibm.pc 5097 5089 y
     no.general 1000 900 y

これはこのファイルの疑似 BNF 定義です:

     active      = *group-line
     group-line  = group spc high-number spc low-number spc flag <NEWLINE>
     group       = <non-white-space string>
     spc         = " "
     high-number = <non-negative integer>
     low-number  = <positive integer>
     flag        = "y" / "n" / "m" / "j" / "x" / "=" group

このファイルの完全な説明は、`innd' のマニュアルページ、特に
`active(5)' を見てください。



File: gnus-ja.info, Node: Newsgroups File Format, Prev: Active File Format, Up: Various File Formats

ニュースグループファイルの様式
..............................

ニュースグループファイルは、グループの目録をそれらの説明とともに保持し
ます。サーバーにあるすべてのグループがある必要は無いし、そのファイルに
あるすべてのグループがサーバーに存在しなければならないこともありません。
このファイルは純粋に利用者の情報のためにあります。

様式はとても単純です: グループ名、タブ、そして説明です。これが定義です:

     newsgroups    = *line
     line          = group tab description <NEWLINE>
     group         = <non-white-space string>
     tab           = <TAB>
     description   = <string>



File: gnus-ja.info, Node: Emacs for Heathens, Next: Frequently Asked Questions, Prev: Gnus Reference Guide, Up: Appendices

異教徒への Emacs
================

信じるかどうかはともかく、Gnus Love Boat の旅に搭乗する前にあまり
Emacs を使ったことが無いという Gnus の利用者たちがいます。“`C-M-a'”や
「リージョンを kill する」、それに「`gnus-flargblossen' を連想リストに
設定してください。そのキーはグループ名に合致するために使われる正規表現
です。」といったことが、あなたにとって少しかまったく意味の無い魔法の言
葉ならば、この付録はあなたのためにあります。もしあなたがすでに Emacs に
親しんでいるのであれば、これを無視してあなたの猫を可愛がりに行ってくだ
さい。

* Menu:

* Keystrokes::                  文章を入力して命令を実行する
* Emacs Lisp::                  備え付けの Emacs プログラミング言語



File: gnus-ja.info, Node: Keystrokes, Next: Emacs Lisp, Prev: Emacs for Heathens, Up: Emacs for Heathens

打鍵
----

   * Q: 経験のある Emacs の利用者とは何ですか?

   * A: 端末にペダルがあったらなぁと願う人のことです。

はい、Emacs を使うとコントロールキー、シフトキー、メタキーをたくさん使
うようになるでしょう。これは一部の人々 (主に `vi' 利用者) には非常に煩
わしいものですが、私たちはその地獄を愛します。諦めてそれを甘受してくだ
さい。Emacs は本当は“Escape-Meta-Alt-Control-Shift”の略で、あなたがい
かがわしい (Emacs の作者のような) 出どころから聞いているかもしれない
“Editing Macros”ではありません。

シフトキーは普通は両手の小指の近くにあって、普通は大文字などを打つため
に使われています。あなたは絶え間なくそれを使いますよね。コントロールキー
には普通“CTRL”のような印が付いています。メタキーは奇妙なことにどのキー
ボードでもそういう印が付いていません。それは普通はキーボードの左手側に
あって、最下段にあるのが一般的です。

さて、私たち Emacs 人は、それがひどく不便なので「meta-control-m キーを
押す」とは言いません。私たちが使うのは「`C-M-m' を押す」です。`M-' は
「メタ」を現す接頭語で、“C-”は「コントロール」を意味する接頭語です。
ですから「`C-k' を押す」は、「コントロールキーを押し続けながら次に `k'
を押す」ということです。「`C-M-k' を押す」は「メタキーとコントロールキー
を押し続けながら次に `k' を押す」ということです。簡単です、よね?

このことは、すべてのキーボードがメタキーを持っているわけではないという
事実によって、多少ややこしくなっています。そういう場合には「エスケープ」
キーを使えばよいでしょう。ただしメタキーを持っているときより作業が増え
るので、メタキーのあるキーボードを手に入れていただくことを謹んでお勧め
申し上げます。それ無しでは生きて行けないでしょう。



File: gnus-ja.info, Node: Emacs Lisp, Prev: Keystrokes, Up: Emacs for Heathens

Emacs Lisp
----------

Emacs はエディターの王様です。なぜなら、それが真の Lisp インタープリター
だからです。あなたが叩くすべてのキーは、何らかの Emacs Lisp コードの小
片を実行します。Emacs Lisp はインタープリターで実行される言語なので、ど
のキーが何のコードを実行するかを任意に設定することができます。あなたは、
ただそうすれば良いのです。

Gnus は Emacs Lisp によって書かれていて、インタープリターで実行されるた
くさんの関数によって動作します。(これらは速度のためにバイトコンパイルさ
れていますが、インタープリターで実行されることに変わりはありません。)
もし Gnus のある動作が好みではないと感じたら、それを違うやり方で実行さ
せるのは取るに足らないことです。(えーと、少なくとも Lisp コードの書き方
を知っていれば。) でもそれはこのマニュアルの範疇ではないので、Gnus をカ
スタマイズするために `~/.gnus.el' ファイルで普段使われるいくつかの一般
的な構文のことだけを話すことにしましょう。(`~/.emacs' ファイルを使うこ
ともできますが、Gnus に関する設定には `~/.gnus.el' ファイルを使う方がは
るかに良いです。)

もし変数 `gnus-florgbnize' を四 (4) に設定したいのであれば、以下のもの
を書きましょう:

     (setq gnus-florgbnize 4)

この関数 (本当は「特殊形式」(special form)) `setq' は、変数を何かの値に
設定することができるものです。これがあなたが本当に知っていなければなら
ないことのすべてです。これからは Gnus の動作を変更するために、たくさん
のこういうもので `~/.gnus.el' ファイルを埋め尽くすことができます。

そういうものを `~/.gnus.el' ファイルに入れておくと、それらは次回に
Gnus を起動したときに読み込まれ、`eval' (それは「実行」の Lisp 語です)
されます。もし変数をすぐに変更したいのであれば、閉じ括弧の後ろで `C-x
C-e' とタイプすれば良いのです。それは前にある「式」(ここでは簡単な
`setq' 文) を `eval' します。

さあ、やってみましょう--あなたが Emacs の前にいるのなら試してみてくださ
い。`C-x C-e' をタイプすると、エコーエリア (訳注: 一般には Emacs の画面
の一番下) に `4' が現われるのが見えるでしょう。それはあなたが `eval' し
た式の戻り値です。

いくつかの落とし穴:

もしマニュアルが「`gnus-read-active-file' を `some' に設定しなさい」と
言ったなら、それは

     (setq gnus-read-active-file 'some)

ということです。

一方、マニュアルが「`gnus-nntp-server' を `nntp.ifi.uio.no' に設定しな
さい」と言ったなら、それは

     (setq gnus-nntp-server "nntp.ifi.uio.no")

ということです。

ですから、文字列 (後者) を シンボル (前者) と混同しないように注意してく
ださい。マニュアルは明確に区別していますが、混乱しやすいかもしれません。




File: gnus-ja.info, Node: Frequently Asked Questions, Prev: Emacs for Heathens, Up: Appendices

よく尋ねられる質問
==================

* Menu:

* FAQ - Changes::
* FAQ - Introduction::         Gnus およびこの FAQ について
* FAQ 1 - Installation FAQ::   Gnus のインストール
* FAQ 2 - Startup / Group buffer:: 起動に関する質問と、最初に表示するバッファー
* FAQ 3 - Getting Messages::   Gnus でメールとニュースを読めるようにする
* FAQ 4 - Reading messages::   効率良くメッセージを読む方法
* FAQ 5 - Composing messages:: メッセージの作成、または Usenet への投稿
* FAQ 6 - Old messages::       移入、書庫への保存、検索、およびメッセージの消去
* FAQ 7 - Gnus in a dial-up environment:: オフラインでメールとニュースを読む
* FAQ 8 - Getting help::       この FAQ では不充分だったら
* FAQ 9 - Tuning Gnus::        Gnus を速くするには
* FAQ - Glossary::             この FAQ で使われる用語


要約
----

これは新しい Gnus のよく尋ねられる質問のリストです。Web ブラウザーがあ
れば `http://my.gnus.org/FAQ/' にある公式なハイパーテキスト版を読むこと
ができます。Docbook のソースは http://sourceforge.net
(http://sourceforge.net/projects/gnus/) から手に入れることができます。

機能に関することや提案は FAQ discussion メーリングリスト
<faq-discuss@my.gnus.org> に送ってください。このメーリングリストは
qconfirm (http://smarden.org/qconfirm/index.html) によって、ごみメール
から守られています。参加者からの投稿は自動的に通過するでしょう。さらに
空のメールを <faq-discuss-subscribe@my.gnus.org> に送るか、ここ
(http://mail1.kens.com/cgi-bin/ezmlm-browse?command=monthbythread%26list=faq-discuss)
を閲覧することによっても、このメーリングリストを講読することができます
(残念ながら現在は壊れています)。



File: gnus-ja.info, Node: FAQ - Changes, Next: FAQ - Introduction, Prev: Frequently Asked Questions, Up: Frequently Asked Questions

変更履歴
--------

   * 2008-06-15: message-fill-column の説明を実態に合わせました。
     x-face-file を加えました。ding と gnu.emacs.gnus の違いをはっきり
     させました。止まってしまったサービスへの参照を削除しました。

   * 2006-04-15: 送信し終わったときにそのバッファーを削除する方法を加え
     ました。



File: gnus-ja.info, Node: FAQ - Introduction, Next: FAQ 1 - Installation FAQ, Prev: FAQ - Changes, Up: Frequently Asked Questions

序
--

これは Gnus のよく尋ねられる質問のリストです。

Gnus は Emacs の要素として実装された Usenet ニュースリーダーおよび電子
メールのユーザーエージェントです。それはほぼこの十年間何らかの形で存在
しており、その期間の多くにおいて Emacs の標準要素として配布されてきまし
た。Gnus 5 は最新の (そして最も偉大な) 作品です。オリジナルの版は GNUS
と言い、梅田政信さんが書きました。1994年の秋が忍び寄る頃、退屈していた
ラルス・マッグヌ・イングブリグットスン (Lars Magne Ingebrigtsen) は
Gnus を書き直そうと決心しました。

その最大の強みは、極めてカスタマイズに適しているという事実にあります。
このことを始めて目にすると引いてしまうかもしれませんが、それを利用する
準備ができるまでは、複雑なもののほとんどは無視することができます。そこ
そこの量の (いろんなメーリングリストに配信される) 電子メールがやって来
るのならば、流通量が多いメーリングリストを読みたいけれども遅れずについ
ていくことができないのならば、流通量が多いニュースグループを読んでいる
のならば、あるいは単に退屈しているのならば、Gnus はあなたが望むものです。

この FAQ は 2002年3月まで Justin Sheehy によって維持されていました。彼
は、それ以前にすばらしい仕事をしてくれた Steve Baur と Per Abrahamsen
に感謝を表明しています。私たちも同じことをしましょう - ありがとう
Justin!

Web ブラウザーがあれば `http://my.gnus.org/FAQ/' にある公式なハイパーテ
キスト版を読むことができます。この版は、ユトレヒト大学、オックスフォー
ド、Smart Pages、オハイオ州立大学に保存されている非公式なハイパーテキス
ト版や他の FAQ のアーカイブに比べて、はるかに良いものです。別のフォーマッ
トでそれを手に入れるための情報が欲しいなら、以下にある質問集を見てくだ
さい。

ここにある情報は、Gnus 開発メーリングリストの援助でコンパイルされました。
どんなエラーあるいはミスプリントも my.gnus.org チームが犯した誤りです。
すみません。

訳注: そしてどんな誤訳の責任も gnus-doc-ja チームにあります。



File: gnus-ja.info, Node: FAQ 1 - Installation FAQ, Next: FAQ 2 - Startup / Group buffer, Prev: FAQ - Introduction, Up: Frequently Asked Questions

インストールに関する FAQ
------------------------

* Menu:

* FAQ 1-1::    Gnus の最新版は何ですか?
* FAQ 1-2::    5.10 では何が新しいですか?
* FAQ 1-3::    Gnus はどこで、どうやって取得することができますか?
* FAQ 1-4::    tarball で何をすれば良いですか?
* FAQ 1-5::    ときどき目にする No Gnus と Oort Gnus って何ですか?
* FAQ 1-6::    Emacs のどの版が必要ですか?
* FAQ 1-7::    Gnus を Emacs と XEmacs の両方で走らせるには?



File: gnus-ja.info, Node: FAQ 1-1, Next: FAQ 1-2, Prev: FAQ 1 - Installation FAQ, Up: FAQ 1 - Installation FAQ

質問 1.1
........

Gnus の最新版は何ですか?


回答
....

ジャーン: Gnus 5.10 がリリースされました。熱いうちに召し上がれ!
バージョン番号の歩みがいささか小さいのに反して、Gnus 5.10 には見逃せない
何トンもの新しい機能があります。現在のリリース (5.13) は、少なくと
も 5.8 系のリリースの最新版と同じくらい安定なはずです。



File: gnus-ja.info, Node: FAQ 1-2, Next: FAQ 1-3, Prev: FAQ 1-1, Up: FAQ 1 - Installation FAQ

質問 1.2
........

5.10 では何が新しいですか?


回答
....

第一に Gnus tarball の先頭のディレクトリーにある GNUS-NEWS ファイルに目
を通すべきです。そこでは最も重要な変更が羅列されています。ここでは特に
重要/興味深いものの短いリストを挙げるに留めます:

   * Gnus エージェントの大幅な書き直し。ディフォルトで有効になっていま
     す。

   * 見苦しく形成された記事を洗濯するための多くの機能。

   * Spam 除け機能。

   * Message-utils が Gnus に含まれました。
     (訳注: Holger Schauer さんが書いた message-utils.el の諸機能
     が message.el に移入されました。)

   * 概略行のための新しい書法仕様。例えば %B は複雑な trn 様式のスレッ
     ド木 (tree) を指定する書法仕様です。



File: gnus-ja.info, Node: FAQ 1-3, Next: FAQ 1-4, Prev: FAQ 1-2, Up: FAQ 1 - Installation FAQ

質問 1.3
........

Gnus はどこで、どうやって取得することができますか?


回答
....

Gnus は Emacs や XEmacs のリリースとは別に、独自にリリースされます。そ
のため Emacs に同梱されている版や XEmacs パッケージにある版は、最新では
ないかもしれません (例えば Emacs 21 に同梱されている Gnus 5.9 は、使用
期限が切れています)。リリースされた最新版の Gnus は、
`http://www.gnus.org/dist/gnus.tar.gz' から、または匿名 ftp で
`ftp://ftp.gnus.org/pub/gnus/gnus.tar.gz' から手に入れることができます。



File: gnus-ja.info, Node: FAQ 1-4, Next: FAQ 1-5, Prev: FAQ 1-3, Up: FAQ 1 - Installation FAQ

質問 1.4
........

tarball で何をすれば良いですか?


回答
....

`tar xvzf gnus.tar.gz' でアーカイブを展開して、ありふれた
`./configure; make; make install' の手順を実行してください。

     MS-Windows では `http://www.cygwin.com' から Cygwin の環境も取得し
     てください。それによって上述のことを行なうこと、またはある梱包器
     (packer) (例えば `http://www.winace.com' にある Winace) で
     tarball を開梱すること、そして tarball に含まれている Gnus をイン
     ストールするためのバッチファイル `make.bat' を使うことができるよう
     になります。

Gnus をシステム領域にインストールしたくない (またはその権限が与えられて
いない) ならば、ホームディレクトリーにインストールすることもできます。
その場合は `~/.xemacs/init.el' ファイルか `~/.emacs' ファイルに以下の行
を加えてください。

     (add-to-list 'load-path "/path/to/gnus/lisp")
     (if (featurep 'xemacs)
         (add-to-list 'Info-directory-list "/path/to/gnus/texi/")
       (add-to-list 'Info-default-directory-list "/path/to/gnus/texi/"))

この行より前に、どんな Gnus に関係するものも確実に無いようにしてくださ
い。MS Windows では "C:/path/to/lisp" のように書いてください (そう、
/" です)。



File: gnus-ja.info, Node: FAQ 1-5, Next: FAQ 1-6, Prev: FAQ 1-4, Up: FAQ 1 - Installation FAQ

質問 1.5
........

ときどき目にする No Gnus と Oort Gnus って何ですか?


回答
....

Oort Gnus は Gnus の開発版の名前で、2003年の秋に Gnus 5.10 になりました。
No Gnus は現行の開発版の名前で、Gnus 5.12 か Gnus 6 になるでしょう。(な
ぜ 5.11 ではないのかが不思議ですか?  奇数のバージョン番号は通常 Emacs
に同梱される Gnus の版に使われるのです。)



File: gnus-ja.info, Node: FAQ 1-6, Next: FAQ 1-7, Prev: FAQ 1-5, Up: FAQ 1 - Installation FAQ

質問 1.6
........

Emacs のどの版が必要ですか?


回答
....

Gnus 5.10 は Emacs 20.7 以上、または XEmacs 21.1 以上を必要とします。開
発版の Gnus (No Gnus として知られているもの) は Emacs 21 か XEmacs
21.4 を必要とします。



File: gnus-ja.info, Node: FAQ 1-7, Prev: FAQ 1-6, Up: FAQ 1 - Installation FAQ

質問 1.7
........

Gnus を Emacs と XEmacs の両方で走らせるには、どうすれば良いですか?


回答
....

バイトコンパイルされた Gnus の同じコピーを両者で使うことはできません。
Emacs では Emacs でコンパイルしたものを、XEmacs では XEmacs でコンパイ
ルしたものを使ってください。



File: gnus-ja.info, Node: FAQ 2 - Startup / Group buffer, Next: FAQ 3 - Getting Messages, Prev: FAQ 1 - Installation FAQ, Up: Frequently Asked Questions

起動 / グループバッファー
-------------------------

* Menu:

* FAQ 2-1:: 　いつも Gnus を起動すると
              "Gnus auto-save file exists. Do you want to read it?"
              というメッセージを受け取るのですが、これは何を意味し
              ているのですか?  また、どうやったら回避できますか?

* FAQ 2-2:: 　Gnus は私がどのグループを講読するかを覚えてくれませ
              ん。どうしてですか?

* FAQ 2-3:: 　グループバッファーの各行の形式を変更するには、どう
              したら良いですか?

* FAQ 2-4:: 　私のグループバッファーはちょっと混んでいるのですが、
              それらを楽に巡回できるように、カテゴリーごとにまとま
              るように並べ変える方法はありますか?

* FAQ 2-5:: 　グループバッファーを手で並べ変えるにはどうしたら良い
              ですか? トピック内のグループを並べ変えるにはどうした
              ら良いですか?



File: gnus-ja.info, Node: FAQ 2-1, Next: FAQ 2-2, Prev: FAQ 2 - Startup / Group buffer, Up: FAQ 2 - Startup / Group buffer

質問 2.1
........

いつも Gnus を起動すると "Gnus auto-save file exists. Do you want to
read it?" というメッセージを受け取るのですが、これは何を意味しているの
ですか?  また、どうやったら回避できますか?


回答
....

このメッセージが意味するのは、最後に Gnus を使ったときに適切に終了させ
なかったために、ディスクにその情報 (例えばどのメッセージを読んだかの)
を書き込むことができなかったので、今、それらの情報を自動保存
(auto-save) ファイルから復活させるかどうかを尋ねられているということで
す。

このメッセージが発せられるのを回避するには、Gnus を終了させるときに単に
Emacs を kill するのではなく、グループバッファーで `q' を使うようにして
ください。



File: gnus-ja.info, Node: FAQ 2-2, Next: FAQ 2-3, Prev: FAQ 2-1, Up: FAQ 2 - Startup / Group buffer

質問 2.2
........

Gnus は私がどのグループを講読するかを覚えてくれません。どうしてですか?


回答
....

Gnus を起動したときに、上記の質問と回答 (*Note FAQ 2-1::) で述べられて
いるメッセージを受け取りませんでしたか?  これは同じ問題の別の症状なので、
上記の回答を読んでください。



File: gnus-ja.info, Node: FAQ 2-3, Next: FAQ 2-4, Prev: FAQ 2-2, Up: FAQ 2 - Startup / Group buffer

質問 2.3
........

グループバッファーの各行の形式を変更するには、どうしたら良いですか?


回答
....

変数 `gnus-group-line-format' の値を調整しなければなりません。そのやり
方についてはマニュアル (*Note グループ行の仕様: (gnus-ja)Group Line
Specification.) を見てください。このための例です (質問者の
`~/.gnus.el' ファイルからの推測です :-):

     (setq gnus-group-line-format "%P%M%S[%5t]%5y : %(%g%)\n")



File: gnus-ja.info, Node: FAQ 2-4, Next: FAQ 2-5, Prev: FAQ 2-3, Up: FAQ 2 - Startup / Group buffer

質問 2.4
........

私のグループバッファーはちょっと混んでいるのですが、それらを楽に巡回で
きるように、カテゴリーごとにまとまるように並べ変える方法はありますか?


回答
....

Gnus はトピックモードを提供します。それによってグループをその中へ入れて
並べ変えることができるようになります。えーとトピックを使うというのは、
例えば Linux を扱うすべてのグループは linux というトピックに収め、音楽
を扱うすべては music というトピックに収め、スコットランド音楽を扱うすべ
ては scottish という music のサブトピックに収める、といったことです。

トピックモードに入るには、グループバッファーで単に `t' を叩いてください。
すると `T n' を使って現在位置でトピックを作ったり、あるグループを `T
m' を使って指定したトピックに移すことができます。さらなるコマンドについ
てはマニュアルかメニューを見てください。グループ行をより良く行下げ
(indent) させるためには、`gnus-group-line-format' 変数の先頭に `%P' 書
法仕様を含ませる必要があるでしょう。



File: gnus-ja.info, Node: FAQ 2-5, Prev: FAQ 2-4, Up: FAQ 2 - Startup / Group buffer

質問 2.5
........

グループバッファーを手で並べ変えるにはどうしたら良いですか? トピック内
のグループを並べ変えるにはどうしたら良いですか?


回答
....

移動させたいグループの上にポイントを移動して `C-k' を叩き、次にそのグルー
プを移動させる目的の場所にポイントを移動して `C-y' を叩いてください。



File: gnus-ja.info, Node: FAQ 3 - Getting Messages, Next: FAQ 4 - Reading messages, Prev: FAQ 2 - Startup / Group buffer, Up: Frequently Asked Questions

メッセージの取得
----------------

* Menu:

* FAQ 3-1::  　今まさに Gnus をインストールして `M-x gnus' で起動
               したのですが、"nntp (news) open error" としか言って
               くれません。どうしたら良いですか?

* FAQ 3-2::  　Windows を使っているのですが `~/.gnus.el' の意味が
               わかりません。

* FAQ 3-3::  　ニュースサーバーが認証を要求します。ディスクにユー
               ザ名とパスワードを保存しておくには、どうすれば良い
               ですか?

* FAQ 3-4::  　Gnus はうまく起動したようなのですが、グループを講読
               する方法が見つけられません。

* FAQ 3-5::  　Gnus がすべてのグループを表示してくれません / この
               サーバーへの投稿が許可されません。どうしてですか?

* FAQ 3-6::  　複数のサーバーからニュースを取り込みたいのですが、
               それは可能ですか?

* FAQ 3-7::  　それから、ローカル・スプール・ファイルからニュース
               を取り込むことは可能ですか?

* FAQ 3-8::  　ニュースを読むのはうまくいきましたが、Gnus でメール
               も読めるようにしたいのです。どうすれば良いですか?

* FAQ 3-9::  　それから、IMAP でメールを読めるようにするには、どう
               すれば良いですか?

* FAQ 3-10:: 　職場で MS Exchange サーバーの一つを使っているのです
               が、Gnus を使ってそこからメールを読むことはできます
               か?

* FAQ 3-11:: 　POP3 でメールを取得するサーバーで、メールを消さない
               ように Gnus に指示することはできますか?



File: gnus-ja.info, Node: FAQ 3-1, Next: FAQ 3-2, Prev: FAQ 3 - Getting Messages, Up: FAQ 3 - Getting Messages

質問 3.1
........

今まさに Gnus をインストールして `M-x gnus' で起動したのですが、"nntp
(news) open error" としか言ってくれません。どうしたら良いですか?


回答
....

どこからニュースを取得すべきかを Gnus に教えてあげなければなりません。
やり方については文献を読んでください。初めて起動するのであれば、次のよ
うなものを `~/.gnus.el' ファイルに書き込んでみてください:

     (setq gnus-select-method '(nntp "news.yourprovider.net"))
     (setq user-mail-address "you@yourprovider.net")
     (setq user-full-name "Your Name")



File: gnus-ja.info, Node: FAQ 3-2, Next: FAQ 3-3, Prev: FAQ 3-1, Up: FAQ 3 - Getting Messages

質問 3.2
........

Windows を使っているのですが `~/.gnus.el' の意味がわかりません。


回答
....

`~/' とは Gnus と Emacs が設定ファイルを探す場所であるホームディレクト
リーのことです。でも、実はその意味を知らなくても構わないのです。Emacs
がわかっていれば十分ですから。:-) `C-x C-f ~/.gnus.el RET' とタイプすれ
ば (そう、Windows でもスラッシュでいいのです) Emacs は正しいファイルを
開いてくれるでしょう (それが新規ファイルであるために中身が空っぽである
ことは、おおいにあり得るでしょう)。しかしちょっと待ってください。Emacs
が選ぶディレクトリーは、きっとあなたの希望通りにはならないので、正しい
やり方でそれを行ないましょう。第一に、例えば c:\myhome のような適当なディ
レクトリーを (ディレクトリー名に空白を含めないで) 作ってください。そし
て、このディレクトリーを環境変数 HOME に設定しましょう。これを Win9x か
Me で行なうには、`autoexec.bat' ファイルに以下の行を追加して、再起動し
てください。

     SET HOME=C:\myhome

NT, 2000 および XP では、システム・オプションを入力するために `Winkey
+ Pause/Break' を叩いて (もしそれが使えなかったら「コントロールパネ
ル -> システム -> 詳細」を辿って) ください。そこで環境変数を設定できる
でしょう。HOME という名前で値が C:\myhome のものを作ってください。再起
動は不要です。

では、Emacs に `C-x C-f ~/.gnus.el RET C-x C-s' を指示して、
`~/.gnus.el' ファイルを作りましょう。



File: gnus-ja.info, Node: FAQ 3-3, Next: FAQ 3-4, Prev: FAQ 3-2, Up: FAQ 3 - Getting Messages

質問 3.3
........

ニュースサーバーが認証を要求します。ディスクにユーザー名とパスワードを
保存しておくには、どうすれば良いですか?


回答
....

次のように、それぞれのサーバーに関する行を含んだ `~/.authinfo' ファイル
を作ってください。

     machine news.yourprovider.net login YourUserName password YourPassword

OS が対応しているならば、そのファイルを他人が読めないようにしておきましょ
う。Unix ではシェル上で次のコマンドを実行してください。

     chmod 600 ~/.authinfo



File: gnus-ja.info, Node: FAQ 3-4, Next: FAQ 3-5, Prev: FAQ 3-3, Up: FAQ 3 - Getting Messages

質問 3.4
........

Gnus はうまく起動したようなのですが、グループを講読する方法が見つけられ
ません。


回答
....

そのグループの名前がわかっているのなら、グループバッファーで `U
name.of.group RET' を使ってください (タブ補完を使え、ルーク (訳注: オ
ビ=ワン・ケノービの声で))。あるいはグループバッファーで `^' を使いましょ
う。これはあなたをサーバーバッファーへ連れて行きます。その場合は、目的
のグループがあるサーバーの上にポイント (カーソル) を置いて `RET' を叩き、
読みたいグループにポイントを移動してから `u' でそのグループを講読しましょ
う。



File: gnus-ja.info, Node: FAQ 3-5, Next: FAQ 3-6, Prev: FAQ 3-4, Up: FAQ 3 - Getting Messages

質問 3.5
........

Gnus がすべてのグループを表示してくれません / このサーバーへの投稿が許
可されません。どうしてですか?


回答
....

プロバイダーのいくつかは匿名での接続を制限していて、認証してからでない
と完全なアクセスを許しません。Gnus に認証のための情報 (authinfo) を送出
させるには、`~/.authinfo' ファイルの該当するサーバーの行の最後に

     force yes

を追加してください。



File: gnus-ja.info, Node: FAQ 3-6, Next: FAQ 3-7, Prev: FAQ 3-5, Up: FAQ 3 - Getting Messages

質問 3.6
........

複数のサーバーからニュースを取り込みたいのですが、それは可能ですか?


回答
....

もちろん。変数 `gnus-secondary-select-methods' に、もっと多くの記事の供
給元を設定することができます。以下のようなものを `~/.gnus.el' ファイル
に追加してください:

     (add-to-list 'gnus-secondary-select-methods
                  '(nntp "news.yourSecondProvider.net"))
     (add-to-list 'gnus-secondary-select-methods
                  '(nntp "news.yourThirdProvider.net"))



File: gnus-ja.info, Node: FAQ 3-7, Next: FAQ 3-8, Prev: FAQ 3-6, Up: FAQ 3 - Getting Messages

質問 3.7
........

それから、ローカル・スプール・ファイルからニュースを取り込むことは可能
ですか?


回答
....

問題ありません。それは `nnspool' というもう一つの選択方法です。こんなふ
うに設定してください:

     (add-to-list 'gnus-secondary-select-methods '(nnspool ""))

あるいは NNTP を第一ニュースソースとして使う必要が無いのであれば、こう
してください:

     (setq gnus-select-method '(nnspool ""))

これで Gnus は `/usr/spool/news' にあるスプール・ファイルを探します。何
か違うことをやりたいのならば、上記の行を次のようなものに変更してくださ
い:

     (add-to-list 'gnus-secondary-select-methods
                  '(nnspool ""
                            (nnspool-directory "/usr/local/myspoolddir")))

これは、このサーバーだけのために、スプールが存在するディレクトリーを設
定します。さらに記事を投稿するために使うプログラムなどを設定する必要が
あるかもしれません。そういう場合にどうしたら良いかについては、Gnus のマ
ニュアルを参照してください。



File: gnus-ja.info, Node: FAQ 3-8, Next: FAQ 3-9, Prev: FAQ 3-7, Up: FAQ 3 - Getting Messages

質問 3.8
........

ニュースを読むのうまくいきましたが、Gnus でメールも読めるようにしたいの
です。どうすれば良いですか?


回答
....

それは少しばかり難しいです。使うことができるメールソースはいっぱいある
し、メールを格納する方法はたくさんあるし、送信するための方法も様々なの
で。最もありふれているのは、次の二つの事例のようなものでしょう:

  1. POP3 サーバーからメールを読み、SMTP サーバーに直接メールを送信しま
     す。

  2. fetchmail のようなプログラムでメールを取り込んで、Gnus が読むこと
     になっているディレクトリーに格納します。外に行くメールは
     Sendmail, Postfix または他の MTA によって送出されます。

ときには、これらを併用する必要さえあります。

しかし最初に行なうことは、どの方法でメールを格納するか、Gnus の用語で言
うと、どのバックエンドを使うかを Gnus に指示することです。Gnus は多くの
異なるバックエンドをサポートしますが、最も一般的に使われているのは
`nnml' です。それは一通のメールを一つのファイルに格納し、そのため極めて
高速です。でも、あなたが使っているファイルシステムがたくさんの小さなファ
イルを扱う上で問題があるのならば、一つのグループのすべてのメールを一つ
のファイルに収める方法を使う必要があるかもしれません。おそらくそういう
場合の選択肢が `nnfolder' バックエンドです。

`nnml' を使うには、以下を `~/.gnus.el' ファイルに加えてください:

     (add-to-list 'gnus-secondary-select-methods '(nnml ""))

`nnfolder' を使いたいのならば、あなたの想像した通り、こうすれば良いでしょ
う:

     (add-to-list 'gnus-secondary-select-methods '(nnfolder ""))

次に、メールをどこから取得するかを Gnus に伝えなければなりません。それ
が POP3 サーバーであるのなら、このように設定してください:

     (add-to-list 'mail-sources '(pop :server "pop.YourProvider.net"
                                      :user "yourUserName"
                                      :password "yourPassword"))

もしそこにパスワードを書いておくのなら、他人が `~/.gnus.el' ファイルを
読めないようにしておいてください。メールをローカルマシンの伝統的なスプー
ルファイルから読みたい場合は、以下のように設定してください:

     (add-to-list 'mail-sources '(file :path "/path/to/spool/file"))

もしそれが Postfix, Qmail または (そういうふうに設定されている)
fetchmail によって使われる、一通/一ファイル形式の Maildir であるのなら
ば、こんなふうにしましょう:

     (add-to-list 'mail-sources '(maildir :path "/path/to/Maildir/"
                                          :subdirs ("cur" "new")))

そして最後に、メールを一つのディレクトリーにある複数のファイルから読む
ようにしたいのであれば (例えば procmail がすでに分割してあるという理由
で)、設定は以下のようになります:

     (add-to-list 'mail-sources
                  '(directory :path "/path/to/procmail-dir/"
                              :suffix ".prcml"))

ここで `:suffix' に指定した ".prcml" は、Gnus に拡張子が .prcml のファ
イルだけを使うことを指示するためのものです。

さあ、後はどうやってメールを送信するかを Gnus に教えるだけです。メール
の送信に sendmail を使いたければ (または、あなたのシステムの MTA が何で
あれ sendmail の役を演じるのならば)、何もしなくても良いのです。でも、も
し SMTP サーバーにメールを送りたいのだったら、以下のようなものが
`~/.gnus.el' ファイルに書かれている必要があります:

     (setq send-mail-function 'smtpmail-send-it)
     (setq message-send-mail-function 'smtpmail-send-it)
     (setq smtpmail-default-smtp-server "smtp.yourProvider.net")



File: gnus-ja.info, Node: FAQ 3-9, Next: FAQ 3-10, Prev: FAQ 3-8, Up: FAQ 3 - Getting Messages

質問 3.9
........

それから、IMAP でメールを読めるようにするには、どうすれば良いですか?


回答
....

Gnus で IMAP を使うには二つの方法があります。最初のは IMAP を POP3 のよ
うに使うもので、Gnus は IMAP サーバーからメールを取得してディスクに格納
します。これをやりたいのなら (本当にそんなことをしたい人はいないでしょ
うけれど)、以下の設定を `~/.gnus.el' ファイルに加えてください:

     (add-to-list 'mail-sources '(imap :server "mail.mycorp.com"
                                       :user "username"
                                       :pass "password"
                                       :stream network
                                       :authentication login
                                       :mailbox "INBOX"
                                       :fetchflag "\\Seen"))

`:stream' および/または `:authentication' の項はいじる必要があるかもし
れません。使うことができる値については Gnus マニュアル (*Note メールソー
ス指示子: (gnus-ja)Mail Source Specifiers.) を参照してください。

IMAP をそれが意図された方法で使いたい場合は、違うやり方に従う必要があり
ます。そうするには選択方法に `nnimap' を加え、そこでサーバーに関する情
報を与えてください:

     (add-to-list 'gnus-secondary-select-methods
                  '(nnimap "Give the baby a name"
                           (nnimap-address "imap.yourProvider.net")
                           (nnimap-port 143)
                           (nnimap-list-pattern "archive.*")))

さらに Gnus が正しいやり方を推測できない場合には、サーバーに認証しても
らう方法を指定しなければならないでしょう。詳しい情報はマニュアル
(*Note IMAP: (gnus-ja)IMAP.) を参照してください。



File: gnus-ja.info, Node: FAQ 3-10, Next: FAQ 3-11, Prev: FAQ 3-9, Up: FAQ 3 - Getting Messages

質問 3.10
.........

職場で MS Exchange サーバーの一つを使っているのですが、Gnus を使ってそ
こからメールを読むことはできますか?


回答
....

サーバーに IMAP という新しい運動靴を一足はかせてくれるように、管理人に
お願いしてください。そして上記の説明に従って、必要なことを行なってくだ
さい。



File: gnus-ja.info, Node: FAQ 3-11, Prev: FAQ 3-10, Up: FAQ 3 - Getting Messages

質問 3.11
.........

POP3 でメールを取得するサーバーで、メールを消さないように Gnus に指示す
ることはできますか?


回答
....

そもそも POP3 はそういうふうに動作することが意図されていません。それが
可能なら、メッセージをサーバー上に残すためには IMAP プロトコルを使うべ
きです。それでもなお、そういう機能を必要とする状況があるかもしれません
が、悲しいかな、Gnus 自体はそうするための既設の機能を持っていないのです。

しかしここは Gnus 村ですから、あなたの希望を達成する見込みが無いわけで
はありません。最も簡単な方法は、メールのコピーを取り込んで、それらをディ
スクに格納してくれる外部プログラムを手に入れることです。そうすれば
Gnus はそこから読むことができます。例えば Unix システムでは fetchmail
がそれです。MS Windows では、優れたニュースとメールのサーバーである
Hamster を使うことができます。

別の解は、Gnus が POP3 サーバーからメールを取得する手段を、メールをサー
バーに残すことができるもので置き換えることでしょう。XEmacs を使っている
のであれば mail-lib パッケージを手に入れてください。それは拡張された
`pop3.el' を含んでいます。ファイルの中身を見てください。それを使うよう
に Gnus に指示するやり方と、取得したメールを削除しない方法の説明が書か
れています。GNU Emacs を使っている場合は、同じことを行なうことができる
`epop3.el' を探してください (そのファイルの元の出どころを知っている人は、
私 (訳注: Simon Josefsson さんだと思います、たぶん) にメールを送ってく
ださい)。さらに Gnus に外部プログラム (例えば fetchmail) を使ってメール
を取り寄せるようにさせることもできます。やり方は Gnus マニュアル
(*Note メールソース指示子: (gnus-ja)Mail Source Specifiers.) を参照して
ください。

     訳注: T-gnus に含まれている `pop3.el' は、XEmacs のやり方をさらに
     発展させて、完全に Gnus とともに動作するようになっています (した)。



File: gnus-ja.info, Node: FAQ 4 - Reading messages, Next: FAQ 5 - Composing messages, Prev: FAQ 3 - Getting Messages, Up: Frequently Asked Questions

メッセージを読む
----------------

* Menu:

* FAQ 4-1::  　グループに入ると、以前に読んだメッセージが全部なく
               なってしまっています。もう一度読むには、どうしたら
               良いですか?

* FAQ 4-2::  　大事なメッセージを、すでに読んだことがあっても、グ
               ループに入ったときはいつでも見えるように Gnus に指
               示するには、どうすれば良いですか?

* FAQ 4-3::  　メッセージのヘッダーを見るにはどうしたら良いですか?

* FAQ 4-4::  　整形されていない生のメッセージを見るには、どうすれ
               ば良いですか?

* FAQ 4-5::  　記事バッファーの先頭に Gnus がディフォルトで表示す
               るヘッダーを変更するには、どうしたら良いですか?

* FAQ 4-6::  　HTML メールを描画するのではなく、それがある場合には
               テキストのパートを Gnus に表示して欲しいです。どう
               すれば良いですか?

* FAQ 4-7::  　HTML メールを w3 以外のブラウザーを使って描画させる
               ことはできますか?

* FAQ 4-8::  　見苦しい体裁のメールをもっと読みやすくするための何
               かがありますか?

* FAQ 4-9::  　特定の著者が送信したものや、表題に特定の語が含まれ
               ているメッセージを、自動的に無視する方法はあります
               か?  また、より興味深いものを何らかの方法で強調表示
               させることはできますか?

* FAQ 4-10:: 　いくつかの (例えばメールの) グループで、スレッド表
               示をさせなくすることはできますか?  あるいは、いくつ
               かのグループに固有の変数を設定することができますか?

* FAQ 4-11:: 　私が書いたメッセージとフォロー記事を、強調表示させ
               ることはできますか?

* FAQ 4-12:: 　特にメールのグループで、Gnus がグループバッファーに
               表示するメッセージの合計の数が非常に大きいのです。
               これはバグですか?

* FAQ 4-13:: 　概略バッファーと記事バッファーの配置が気に入らない
               のですが、どうやったら変更できますか?  できるなら三
               面で表示させたいです。

* FAQ 4-14:: 　概略バッファーを見せるやり方が好きではありません。
               調整するには、どうすれば良いですか?

* FAQ 4-15:: 　やってきたメールをいろいろなグループに振り分けるに
               は、どうしたら良いですか?



File: gnus-ja.info, Node: FAQ 4-1, Next: FAQ 4-2, Prev: FAQ 4 - Reading messages, Up: FAQ 4 - Reading messages

質問 4.1
........

グループに入ると、以前に読んだメッセージが全部なくなってしまっています。
もう一度読むには、どうしたら良いですか?


回答
....

グループバッファーにおいて、そのグループの上にポイントが置かれている状
態で `RET' を使うと、未読と可視記事の印 (ticked) が付いたメッセージだけ
が現れます。存在するすべてのメッセージが表示されるようにするには、代わ
りに `C-u RET' を使ってください。もし最新の、例えば 300通だけが所望なら
ば、`C-u 300 RET' を使いましょう。

スレッド表示を有効にしていると、未読のメッセージだけを表示するのはじれっ
たいかもしれません。スレッドがちぎれてしまうことを防止するのに十分な量
の古い記事を取り込むには、以下の設定を追加すれば良いでしょう:

     (setq gnus-fetch-old-headers 'some)

`some' を `t' に替えると、すべての記事を表示するようになります (警告:
どちらの設定もグループに入ったときに取り込むデータ量を増加させ、グルー
プに入る処理を遅くしてしまいます)。

すでに Gnus 5.10 を使っているならば、最後の N 通のメッセージを取り込む
ために、概略バッファーで `/o N' 命令を使うことができます。この機能は
5.8.8 にはありません。

すべての古いメッセージは要らないけれども、今まさに読んでいるメッセージの
親を辿りたいならば `^' 命令を使ってください。今まさに読んでいるメッ
セージが属しているスレッドのすべての記事を表示したい場合は、
`A T' 命令があなたの望むものです。



File: gnus-ja.info, Node: FAQ 4-2, Next: FAQ 4-3, Prev: FAQ 4-1, Up: FAQ 4 - Reading messages

質問 4.2
........

大事なメッセージを、すでに読んだことがあっても、グループに入ったときは
いつでも見えるように Gnus に指示するには、どうすれば良いですか?


回答
....

大事なメッセージには可視記事の印 (ticked) を付けることができます。それ
には、概略バッファーでポイントがその記事を指しているときに `u' を叩いて
ください。可視記事の印を消す命令は `d' (これは可視記事の印を消してから
未読の印を付けます) または `M c' (そのメッセージに付いているすべての印
を消します) です。



File: gnus-ja.info, Node: FAQ 4-3, Next: FAQ 4-4, Prev: FAQ 4-2, Up: FAQ 4 - Reading messages

質問 4.3
........

メッセージのヘッダーを見るにはどうしたら良いですか?


回答
....

`t' 命令を使うとすべてのヘッダーを表示し、もう一度使うとそれらを隠しま
す。



File: gnus-ja.info, Node: FAQ 4-4, Next: FAQ 4-5, Prev: FAQ 4-3, Up: FAQ 4 - Reading messages

質問 4.4
........

整形されていない生のメッセージを見るには、どうすれば良いですか?


回答
....

`C-u g' 命令を使うと生のメッセージを表示し、`g' で通常の表示に戻ります。



File: gnus-ja.info, Node: FAQ 4-5, Next: FAQ 4-6, Prev: FAQ 4-4, Up: FAQ 4 - Reading messages

質問 4.5
........

記事バッファーの先頭に Gnus がディフォルトで表示するヘッダーを変更する
には、どうしたら良いですか?


回答
....

変数 `gnus-visible-headers' がどのヘッダーを表示するかを制御します。そ
の値は正規表現で、それに合致するヘッダー行が表示されます。したがって、
著者、表題、日付、そしてもし存在する場合は Followup-To と MUA / NUA を
表示したい場合には、`~/.gnus.el' ファイルで以下の設定を行なってください:

     (setq gnus-visible-headers
           '("^From" "^Subject" "^Date" "^Newsgroups" "^Followup-To"
             "^User-Agent" "^X-Newsreader" "^X-Mailer"))



File: gnus-ja.info, Node: FAQ 4-6, Next: FAQ 4-7, Prev: FAQ 4-5, Up: FAQ 4 - Reading messages

質問 4.6
........

HTML メールを描画するのではなく、テキストのパートがある場合には、そちら
の方を Gnus に表示して欲しいです。どうすれば良いですか?


回答
....

`~/.gnus.el' ファイルで以下の設定を行なってください:

     (add-to-list 'mm-discouraged-alternatives "text/html")
     (add-to-list 'mm-discouraged-alternatives "text/richtext")

HTML のパートと同じ内容のテキストのパートが無い場合でさえも HTML のパー
トを描画して欲しくないのであれば、以下の設定を追加してください:

     (setq mm-automatic-display (remove "text/html" mm-automatic-display))



File: gnus-ja.info, Node: FAQ 4-7, Next: FAQ 4-8, Prev: FAQ 4-6, Up: FAQ 4 - Reading messages

質問 4.7
........

HTML メールを w3 以外のブラウザーを使って描画させることはできますか?


回答
....

Gnus 5.10 またはより新しいものを使う場合だけですが、w3, w3m, links,
lynx および html2text の中から選ぶことができ、どれを使うかは変数
`mm-text-html-renderer' で指定することができます。したがって links で
HTML メールを描画したいときは、こうしてください:

     (setq mm-text-html-renderer 'links)



File: gnus-ja.info, Node: FAQ 4-8, Next: FAQ 4-9, Prev: FAQ 4-7, Up: FAQ 4 - Reading messages

質問 4.8
........

見苦しい体裁のメールをもっと読みやすくするための何かがありますか?


回答
....

Gnus は入ってきたメールを「洗濯」するために複数の関数を提供します。それ
らはメニューの Article->Washing 項目を辿ることによって見つけることがで
きるでしょう。最も興味深いものを挙げてみましょう:

`W w (Wrap long lines)'
     長い行を折り畳みます。

`W r (Decode ROT13)'
     ROT13 をデコードします。

`W Y f (Outlook Deuglify)'
     Outlook を見苦しくなくさせます。これは、マイクロソフトの製品を使っ
     ている多くのユーザーが送ってくる間の抜けた引用付き返信 (訳注: 折り
     畳まれた長い引用行の二行目以降に引用符が前置されないなど) を修繕し
     ます。

     他の見苦しくなくさせる機能については `W Y C-h' を使うかメニューを
     眺めてください。Outlook Deuglify は Gnus 5.10 以上で使うことができ
     ます。



File: gnus-ja.info, Node: FAQ 4-9, Next: FAQ 4-10, Prev: FAQ 4-8, Up: FAQ 4 - Reading messages

質問 4.9
........

特定の著者が送信したものや、表題に特定の語が含まれているメッセージを、
自動的に無視する方法はありますか?  また、より興味深いものを何らかの方法
で強調表示させることはできますか?


回答
....

あなたに必要なのはスコア付けです。スコア付けと言うのは、それぞれのメッ
セージに整数の値を割り付けるための規則を定義することです。値に基づいて
概略バッファーでメッセージを強調表示したり (それが +2000 といった高い値
だったら)、自動的に既読にしたり (その値が例えば -800 のような低い値だっ
たら)、あるいは他のいくつかの作用を行なったりします。

メッセージにスコアの値を割り付ける規則を設定するための、基本的な三つの
やり方があります。

  1. 最初の最も簡単なやり方は、今まさに読んでいる記事に基づいて規則を設
     定することです。いつもたわごとを書いてよこすやつからのメッセージを
     読んで、今後はそいつからのメッセージを無視しようと決心したならば、
     `L' を叩いてスコアを下げる規則を設定してください。

     すると Gnus は、スコアを下げる基準をどれにすれば良いかを尋ねてくる
     でしょう。`?' を二回叩くと、すべての候補を見ることができますが、こ
     こで選択すべきなのは著者 (From ヘッダー) を意味する `a' です。

     次に Gnus はどの種類の合致を使うべきかを尋ねてくるので、厳密な合致
     のための `e' を叩くか、あるいは文字の一部への合致を求める `s' を叩
     いてから、後ですべてを削除してください。どんな電子メールアドレスで
     あっても、それを持つすべての著者のスコアを下げるために、その名前が
     使われます。

     さらに、その規則をいつ適用するべきか、またどれくらいの時間続けるべ
     きかを Gnus に伝える必要があります。例えば `p' では、その規則を今
     すぐ適用して、それを永久に持続させます。

     スコアを下げるのではなくて上げたいのであれば、`L' の代わりに `I'
     を使ってください。

  2. 規則を手で設定することもできます。そうするには概略バッファーで `V
     f' 命令を使ってください。するとスコアファイルの名前を尋ねられるで
     しょう。一つのグループだけで有効なのは `name.of.group.SCORE' で、
     すべてのグループに対して有効なのが `all.SCORE' です。厳密な構文に
     ついては Gnus のマニュアルを参照してください。それは一つの大きなリ
     ストで、その要素もまた多くのリストです。その後者の単位リストの第一
     要素はスコアの対象であるヘッダーで、残りは、何に合致するか、いくら
     のスコアを割り当てるか、規則を期限切れ消去するのはいつか、そしてど
     うやって合致させるかを示すもう一つのリストです。私にとても興味を持っ
     たならば、例えば以下のようなものを `all.SCORE' ファイルに加えてみ
     てください:

          (("references" ("hschmi22.userfqdn.rz-online.de" 500 nil s))
           ("message-id" ("hschmi22.userfqdn.rz-online.de" 999 nil s)))

     これは私が書いたメッセージのスコアに 999 を加えて、それに対する
     (たぶん間接的な) 回答のメッセージのスコアに 500 を加えるでしょう。
     もちろん分別のある人は誰も、こんなことはしないでしょうが。:-)

  3. 三番目の選択肢は適応スコア付けです。これは、Gnus があなたを観察して、あ
     なたが何に興味を持って何に幻滅するかを見つけ出し、それらを反映した規則を
     設定してくれるものです。流通量の多いグループを読むときに、適応スコア付け
     は大きな助けになるでしょう。適応スコア付けをやってみたいならば、
     `~/.gnus.el' ファイルで以下の宣言を行なってください:

          (setq gnus-use-adaptive-scoring t)



File: gnus-ja.info, Node: FAQ 4-10, Next: FAQ 4-11, Prev: FAQ 4-9, Up: FAQ 4 - Reading messages

質問 4.10
.........

いくつかの (例えばメールの) グループで、スレッド表示をさせなくすること
はできますか?  あるいは、いくつかのグループに固有の変数を設定することが
できますか?


回答
....

グループバッファーにいるときに、そのグループにポイントを移動してから
`G c' を叩いてください。すると、そのグループのためのオプションを設定す
ることができるバッファーが開きます。そして、そのバッファーのおしまいの
方で、そのグループでローカルに変数を設定するための項目を見つけることが
できるでしょう。スレッド表示をさせなくするには、変数名として
`gnus-show-threads' を、値として `nil' を入力してください。作業を終えた
ら、そのバッファーの最初の方にある [done] ボタンを叩きましょう。



File: gnus-ja.info, Node: FAQ 4-11, Next: FAQ 4-12, Prev: FAQ 4-10, Up: FAQ 4 - Reading messages

質問 4.11
.........

私が書いたメッセージとフォロー記事を、強調表示させることはできますか?


回答
....

「できますか?」なんて質問はやめてください。Gnus 村では答えはいつも yes
なのですから。:-) これは三段階の作業になります。まず、それらの投稿のた
めのフェース (概略行がどんなふうに見えるかの仕様) を作りましょう。続い
て、それらにいくばくかの特別なスコアを与えましょう。最後に、その新しい
フェースを使うように Gnus に指示しましょう。それをどう行なうかの詳しい
説明が my.gnus.org (http://my.gnus.org/node/view/224) にあります。



File: gnus-ja.info, Node: FAQ 4-12, Next: FAQ 4-13, Prev: FAQ 4-11, Up: FAQ 4 - Reading messages

質問 4.12
.........

特にメールのグループで、Gnus がグループバッファーに表示するメッセージの
合計の数が非常に大きいのです。これはバグですか?


回答
....

いいえ、これは Gnus の設計上の問題で、これを直すには Gnus のバックエン
ドの主要な部分を実装し直さなければなりません。Gnus は最大の記事番号から
最小の記事番号を減算したものが合計の記事数であると解釈します。これは
Usenet のグループでは OK なのですが、メールのグループでたくさんのメッセー
ジを消去したり移動すると計算に失敗します。この病を治療するには `C-u
RET' でそのグループに入り (この命令は Gnus にすべてのメッセージを持って
来させます)、`M P b' ですべてのメッセージに印を付けてから、`B m
name.of.group' でメッセージを全部、それらが元あったグループに移動してく
ださい。この処理によってそれらは新しいメッセージ番号を持たせられて、合
計の記事数は再び正しくなるでしょう (またもやそれらを消したり別のグルー
プに移動するまでは)。



File: gnus-ja.info, Node: FAQ 4-13, Next: FAQ 4-14, Prev: FAQ 4-12, Up: FAQ 4 - Reading messages

質問 4.13
.........

概略バッファーと記事バッファーの配置が気に入らないのですが、どうやった
ら変更できますか?  できるなら三面で表示させたいです。


回答
....

`gnus-add-configuration' 関数を呼ぶことによって、ウィンドウの配置を制御
することができます。構文はいささか複雑ですが、マニュアルで非常に良く説
明されています (*Note ウィンドウの配置: (gnus-ja)Window Layout.)。いく
つかのやさしい例を挙げてみましょう。

概略 25% 記事 75% というディフォルトの割合を、概略 35% 記事 65% の割合
に変更します (記事のための 1.0 は、残った空き地を取るという意味です):

     (gnus-add-configuration
      '(article (vertical 1.0 (summary .35 point) (article 1.0))))

グループバッファーが左、概略バッファーが右上、記事バッファーが右下とい
う三面配置です:

     (gnus-add-configuration
      '(article
        (horizontal 1.0
                    (vertical 25
                              (group 1.0))
                    (vertical 1.0
                              (summary 0.25 point)
                              (article 1.0)))))
     (gnus-add-configuration
      '(summary
        (horizontal 1.0
                    (vertical 25
                              (group 1.0))
                    (vertical 1.0
                              (summary 1.0 point)))))



File: gnus-ja.info, Node: FAQ 4-14, Next: FAQ 4-15, Prev: FAQ 4-13, Up: FAQ 4 - Reading messages

質問 4.14
.........

概略バッファーを見せるやり方が好きではありません。調整するには、どうす
れば良いですか?


回答
....

変数 `gnus-summary-line-format' をいじくり回す必要があります。その値は
著者、日付、表題などのようなものを表すシンボルの文字列です。使うことが
できる仕様のリストは *Note 概略バッファーの行: (gnus-ja)Summary Buffer
Lines. と、しばしば忘れられてしまう *Note 書法仕様変数:
(gnus-ja)Formatting Variables. およびその下位の各章で見つかるはずです。
そこでは書法仕様の概略を使うことができるようにしてくれる、カーソルの位
置指定やタブ位置の指定のようなものを見つけることができるでしょう。残念
ながら 5.8.8 ではタブ位置を固定させる機能が壊れています。

5.10 から、Gnus は非常にみごとな新しい書法仕様変数を提供しています。例
えば %B はスレッド木を描き、また %&user-date は、どう表示するかが記事が
発信されてからの経過時間に依存している日付を表示します。これらの両方を
使っている例です:

     (setq gnus-summary-line-format
           ":%U%R %B %s %-60=|%4L |%-20,20f |%&user-date; \n")

結果はこんなふうになります:

     :O     Re: [Richard Stallman] rfc2047.el          |  13 |Lars Magne Ingebrigt |Sat 23:06
     :O     Re: Revival of the ding-patches list       |  13 |Lars Magne Ingebrigt |Sat 23:12
     :R  >  Re: Find correct list of articles for a gro|  25 |Lars Magne Ingebrigt |Sat 23:16
     :O  \->  ...                                      |  21 |Kai Grossjohann      | 0:01
     :R  >  Re: Cry for help: deuglify.el - moving stuf|  28 |Lars Magne Ingebrigt |Sat 23:34
     :O  \->  ...                                      | 115 |Raymond Scholz       | 1:24
     :O    \->  ...                                    |  19 |Lars Magne Ingebrigt |15:33
     :O     Slow mailing list                          |  13 |Lars Magne Ingebrigt |Sat 23:49
     :O     Re: `@' mark not documented                |  13 |Lars Magne Ingebrigt |Sat 23:50
     :R  >  Re: Gnus still doesn't count messages prope|  23 |Lars Magne Ingebrigt |Sat 23:57
     :O  \->  ...                                      |  18 |Kai Grossjohann      | 0:35
     :O    \->  ...                                    |  13 |Lars Magne Ingebrigt | 0:56



File: gnus-ja.info, Node: FAQ 4-15, Prev: FAQ 4-14, Up: FAQ 4 - Reading messages

質問 4.15
.........

やってきたメールをいろいろなグループに振り分けるには、どうしたら良いで
すか?


回答
....

Gnus はメールを分割するための二つの手段として、やさしい
`nnmail-split-methods' と、もっと強力な特級メール分割の機能を提供します。
ここでは最初のものだけについて述べますが、後者についてはマニュアル
(*Note 特級メール分割: (gnus-ja)Fancy Mail Splitting.) を参照してくださ
い。

`nnmail-split-methods' の値はリストで、それぞれの要素は分割の規則を表す
リストです。それぞれの規則は「合致する記事が行くべきグループ」と「合致
すべき正規表現」の形式を持っていて、最初に合致した規則が勝ちます。最後
の規則は常に汎用の規則 (正規表現 `.*') でなければなりません。それは他の
どんな規則にも合致しない記事が行くべき場所を示します。もしまだフォルダー
が無かったならば、それは記事がそこに着地するとすぐに作られるでしょう。
ディフォルトでは、メールは規則に合致するすべてのグループに送られます。
それを望まないならば (たぶん望まないでしょう)、以下のものを
`~/.gnus.el' ファイルに入れてください:

     (setq nnmail-crosspost nil)

たった一つの例は千の言葉を並べるよりも勝ります。そこで、ここでは私の
`nnmail-split-methods' を紹介しましょう。私は、私が講読しているいくつか
のメーリングリストから来るか、私を直接に目指して来たすべてのメールを濾
過器に通すので、私が特別のグループの複写を送ることと、ディフォルトのグ
ループは `spam' であることに注意してください。これらの規則は、私宛てに
届いた spam のおよそ 80% を殺してくれます (電子メールアドレスは
spammers がそれらを使用するのを防ぐために変更されます)。

     (setq
      nnmail-split-methods
      '(("duplicates" "^Gnus-Warning:.*duplicate")
        ("XEmacs-NT" "^\\(To:\\|CC:\\).*localpart@xemacs.invalid.*")
        ("Gnus-Tut" "^\\(To:\\|CC:\\).*localpart@socha.invalid.*")
        ("tcsh" "^\\(To:\\|CC:\\).*localpart@mx.gw.invalid.*")
        ("BAfH" "^\\(To:\\|CC:\\).*localpart@.*uni-muenchen.invalid.*")
        ("Hamster-src" "^\\(CC:\\|To:\\).*hamster-sourcen@yahoogroups.\\(de\\|com\\).*")
        ("Tagesschau" "^From: tagesschau <localpart@www.tagesschau.invalid>$")
        ("Replies" "^\\(CC:\\|To:\\).*localpart@Frank-Schmitt.invalid.*")
        ("EK" "^From:.*\\(localpart@privateprovider.invalid\\|localpart@workplace.invalid\\).*")
        ("Spam" "^Content-Type:.*\\(ks_c_5601-1987\\|EUC-KR\\|big5\\|iso-2022-jp\\).*")
        ("Spam" "^Subject:.*\\(This really work\\|XINGA\\|ADV:\\|XXX\\|adult\\|sex\\).*")
        ("Spam" "^Subject:.*\\(\=\?ks_c_5601-1987\?\\|\=\?euc-kr\?\\|\=\?big5\?\\).*")
        ("Spam" "^X-Mailer:\\(.*BulkMailer.*\\|.*MIME::Lite.*\\|\\)")
        ("Spam" "^X-Mailer:\\(.*CyberCreek Avalanche\\|.*http\:\/\/GetResponse\.com\\)")
        ("Spam" "^From:.*\\(verizon\.net\\|prontomail\.com\\|money\\|ConsumerDirect\\).*")
        ("Spam" "^Delivered-To: GMX delivery to spamtrap@gmx.invalid$")
        ("Spam" "^Received: from link2buy.com")
        ("Spam" "^CC: .*azzrael@t-online.invalid")
        ("Spam" "^X-Mailer-Version: 1.50 BETA")
        ("Uni" "^\\(CC:\\|To:\\).*localpart@uni-koblenz.invalid.*")
        ("Inbox" "^\\(CC:\\|To:\\).*\\(my\ name\\|address@one.invalid\\|adress@two.invalid\\)")
        ("Spam" "")))



File: gnus-ja.info, Node: FAQ 5 - Composing messages, Next: FAQ 6 - Old messages, Prev: FAQ 4 - Reading messages, Up: Frequently Asked Questions

メッセージの作成
----------------

* Menu:

* FAQ 5-1::  　メールを送信したりニュース記事を投稿するために知っ
               ている必要がある基本的なコマンドは何ですか?

* FAQ 5-2::  　メールを作成するとき、自動的に行を折り返すにはどう
               すれば良いですか?

* FAQ 5-3::  　From, Organization, Reply-To などのヘッダーを自動生
               成したり、定型の署名 (signature) を自動的に挿入する
               には、どうしたら良いですか?

* FAQ 5-4::  　投稿するグループによって異なる From ヘッダーや署名
               を自動挿入するには、どうすれば良いですか?

* FAQ 5-5::  　スペルチェッカーはありますか?  できれば、書いたその
               場でチェックしてくれるものがあれば良いのですが。

* FAQ 5-6::  　投稿するグループに基づいて、辞書 (スペルチェッカー
               の) を切り替えることはできますか?

* FAQ 5-7::  　全員の電子メールアドレスを思い出さなくても済むよう
               にするための、アドレス帳のようなものはありますか?

* FAQ 5-8::  　記事バッファーの上の方で、ときどき小さな画像を目に
               します。あれは何ですか?  また、どうしたら私も投稿す
               るときに付けることができますか?

* FAQ 5-9::  　ときどきニュースグループで、`f' の代わりにうっかり
               `r' を打ってしまいます。ニュースグループなのにもか
               かわらずメールで返信しようとしたときに、Gnus に警告
               してもらうことはできますか?

* FAQ 5-10:: 　Gnus が sender ヘッダーを生成しないようにするには、
               どうしたら良いですか?

* FAQ 5-11:: 　送信したメールやニュースの控えをローカルに残してお
               きたいのですが、どうすれば良いですか?

* FAQ 5-12:: 　送信に成功した後でそのバッファーを "Sent mail to..."
               として生かしたままにしておく代わりに kill するには
               どうしたら良いですか?

* FAQ 5-13:: 　Message-ID が不正だと言われてしまうのですが、それは
               なぜですか?  また、どうやって直したら良いですか?



File: gnus-ja.info, Node: FAQ 5-1, Next: FAQ 5-2, Prev: FAQ 5 - Composing messages, Up: FAQ 5 - Composing messages

質問 5.1
........

メールを送信したりニュース記事を投稿するために知っている必要がある基本
的なコマンドは何ですか?


回答
....

新しいメールの作成を始めるには、グループバッファーか概略バッファーのど
ちらかで `m' を叩いてください。ニュース記事を投稿する場合には、グループ
バッファーで `a' を叩いた後に手で Newsgroups ヘッダーに書き込むか、投稿
するグループの概略バッファーで `a' を叩いてください。

メールで返信する場合、元の記事を引用しないか後で手作業で引用するつもり
ならば `r' を、引用文を最初から取り込んでしまうのならば `R' を使ってく
ださい。ニュースグループでフォロー記事を投稿する場合であれば `f' か
`F' (`r' と `R' の関係に似ています) を使いましょう。

新たにヘッダーを挿入するならば `--text follows this line--' の上に書い
て、本文はその下に書いてください。書き上がったメッセージを送信するコマ
ンドは `C-c C-c' で、後で仕上げるために `drafts' グループに保存するため
のコマンドは `C-c C-d' です。後者は `D e' で再び編集することができます。



File: gnus-ja.info, Node: FAQ 5-2, Next: FAQ 5-3, Prev: FAQ 5-1, Up: FAQ 5 - Composing messages

質問 5.2
........

メールを作成するとき、自動的に行を折り返すにはどうすれば良いですか?


回答
....

No Gnus の場合は自動で行を折り返す機能がディフォルトで ON になります。
変数 `message-fill-column' を参照してください。

他の Gnus の版では、こんなものを `~/.gnus.el' ファイルに入れてください:

     (unless (boundp 'message-fill-column)
       (add-hook 'message-mode-hook
                 (lambda ()
                   (setq fill-column 72)
                   (turn-on-auto-fill))))

いつもの通りに `M-q' を使うことによって、段落を再整形することができます。



File: gnus-ja.info, Node: FAQ 5-3, Next: FAQ 5-4, Prev: FAQ 5-2, Up: FAQ 5 - Composing messages

質問 5.3
........

From, Organization, Reply-To などのヘッダーを自動生成したり、定型の署名
(signature) を自動的に挿入するには、どうしたら良いですか?


回答
....

他のやり方もありますが、これのためには投稿様式 (posting styles) を使う
べきです (理由は後で書きます)。この例ならば、その構文が明確にわかるはず
です:

     (setq gnus-posting-styles
           '((".*"
              (name "Frank Schmitt")
              (address "me@there.invalid")
              (organization "Hamme net, kren mer och nimmi")
              (signature-file "~/.signature")
              ("X-SampleHeader" "foobar")
              (eval (setq some-variable "Foo bar")))))

`".*"' という設定はディフォルトのものです (*Note FAQ 5-4:: 参照)。それ
以降のリストの第一要素に使える値 (属性名) は `signature',
`signature-file', `organization', `address', `name' または `body' です。
属性名は文字列でも構いません。その場合、属性名はヘッダー名として使われ、
その値は記事のヘッダーに挿入されます。ただし値が `nil' だったら、その名
前のヘッダーは削除されます。

`(eval (foo bar))' の形式を使うことも可能で、その場合 `bar' を引数に与
えられて関数 `foo' が評価され、結果は捨てられます。



File: gnus-ja.info, Node: FAQ 5-4, Next: FAQ 5-5, Prev: FAQ 5-3, Up: FAQ 5 - Composing messages

質問 5.4
........

投稿するグループによって異なる From ヘッダーや署名を自動挿入するには、
どうすれば良いですか?


回答
....

これこそが投稿様式 (posting styles) の強みです。前の回答 (*Note FAQ
5-3::) では、すべてのグループのためのディフォルトを設定するために
`".*"' を使いました。これに `"^gmane"' のような正規表現を使うと、それ以
降の設定を gmane ニュースグループの階層で投稿する記事だけに適用させるこ
とができます。代わりに `".*binaries"' を使うと、名前などが `binary' と
いう文字列を含んでいるグループに投稿する記事だけに、それらの設定が適用
されます。

正規表現の代わりに関数を指定することもでき、それが評価されて真を返すと
きだけ、それに対応する設定が有効になります。これの興味深い二つの候補は、
現在のグループがニュースグループだったら `t' を返す `message-news-p' と、
それと対になる `message-mail-p' です。

すべての合致する様式が適用されることに注意してください。以下を例にすれ
ば、`gmane.mail.spam.spamassassin.general' に投稿すると `".*"' で始まる
設定が適用され、`message-news-p' 以下の設定も適用され、`"^gmane"' で始
まる設定、それに `"^gmane\\.mail\\.spam\\.spamassassin\\.general$"' 以
下の設定のすべてが適用されるということです。このため、一般的な設定は先
頭に置き、特定の条件を持つものは下の方に置くのが良いでしょう。

     (setq
      gnus-posting-styles
      '((".*" ;;default
         (name "Frank Schmitt")
         (organization "Hamme net, kren mer och nimmi")
         (signature-file "~/.signature"))
        ((message-news-p) ;;Usenet news?
         (address "mySpamTrap@Frank-Schmitt.invalid")
         (reply-to "hereRealRepliesOnlyPlease@Frank-Schmitt.invalid"))
        ((message-mail-p) ;;mail?
         (address "usedForMails@Frank-Schmitt.invalid"))
        ("^gmane" ;;this is mail, too in fact
         (address "usedForMails@Frank-Schmitt.invalid")
         (reply-to nil))
        ("^gmane\\.mail\\.spam\\.spamassassin\\.general$"
         (eval (set (make-local-variable 'message-sendmail-envelope-from)
                    "Azzrael@rz-online.de")))))



File: gnus-ja.info, Node: FAQ 5-5, Next: FAQ 5-6, Prev: FAQ 5-4, Up: FAQ 5 - Composing messages

質問 5.5
........

スペルチェッカーはありますか?  できれば、書いたその場でチェックしてくれ
るものがあれば良いのですが。


回答
....

Emacs では単語の綴りをチェックするために `ispell.el' を使うことができま
す。したがって最初に行なうのは、外部プログラム ispell
(http://fmg-www.cs.ucla.edu/fmg-members/geoff/ispell.html) または同
aspell (http://aspell.sourceforge.net/) を適当な path にインストールし
ておくことです。次に ispell.el
(http://www.kdstevens.com/~stevens/ispell-page.html) と、書いたその場で
スペルチェックをしてくれる flyspell.el
(http://www-sop.inria.fr/mimosa/personnel/Manuel.Serrano/flyspell/flyspell.html)
を用意してください。`ispell.el' は Emacs とともに配布されているだけでは
なく、XEmacs パッケージシステムによっても手に入れることができます。
`flyspell.el' も Emacs に同梱されているのとともに、パッケージシステムを
介して入手することができる XEmacs の `text-modes' パッケージの一部です。
したがって、それらを個別にインストールする必要は無いはずです。

`ispell.el' は外部プログラム `ispell' を使うことを想定しています。
`aspell' を選ぶなら、Emacs の設定ファイルで以下の宣言を行なってください
(訳注: Emacs 22 以上では、`ispell.el' がそれらを自動判別します):

     (setq ispell-program-name "aspell")

送出するメッセージがスペルチェックされるようにしたいなら以下の行を

     (add-hook 'message-send-hook 'ispell-message)

単語を書いたその場でスペルチェックすることを好むなら次の行を

     (add-hook 'message-mode-hook (lambda () (flyspell-mode 1)))

`~/.gnus.el' ファイルに追加してください。



File: gnus-ja.info, Node: FAQ 5-6, Next: FAQ 5-7, Prev: FAQ 5-5, Up: FAQ 5 - Composing messages

質問 5.6
........

投稿するグループに基づいて、辞書 (スペルチェッカーの) を切り替えること
はできますか?


回答
....

はい、できます。こんなものを `~/.gnus.el' ファイルに入れてください:

     (add-hook 'gnus-select-group-hook
               (lambda ()
                 (cond
                  ((string-match
                    "^de\\." (gnus-group-real-name gnus-newsgroup-name))
                   (ispell-change-dictionary "deutsch8"))
                  (t
                   (ispell-change-dictionary "english")))))

`"^de\\."' と `"deutsch8"' は、必要に応じて変更してください。



File: gnus-ja.info, Node: FAQ 5-7, Next: FAQ 5-8, Prev: FAQ 5-6, Up: FAQ 5 - Composing messages

質問 5.7
........

全員の電子メールアドレスを思い出さなくても済むようにするための、アドレ
ス帳のようなものはありますか?


回答
....

そのための非常に基本的な解は「メールの別名」(mail aliases) です。以下の
ように単純な別名の構文を使って、`~/.mailrc' ファイルにメールアドレスを
登録しておくことができます:

     alias al	"Al <al@english-heritage.invalid>"

そうしておいて、メッセージバッファーの To: または Cc: 行で、別名に続い
てスペースか句読点をタイプすることによって、Gnus に完全なアドレスを挿入
してもらうことができます。詳細は Message マニュアル (*Note メールの別名:
(message-ja)Mail Aliases.) を参照してください。

でも、あなたが本当に使いたいのは BBDB (the Insidious Big Brother
Database) でしょう。XEmacs のパッケージシステムを使うか、bbdb のホーム
ページ (http://bbdb.sourceforge.net/) から入手してください。そして
Gnus で BBDB を有効にするために、以下のものを `~/.gnus.el' ファイルに書
き込んでください:

     (require 'bbdb)
     (bbdb-initialize 'gnus 'message)

さて、いくつかの一般的な BBDB の設定が必要かもしれません。それらは
`~/.emacs' ファイルに置きましょう。例です:

     (require 'bbdb)
     ;; 北アメリカに住んでいるのでなければ、以下によって電話番号の
     ;; チェックをやめさせるべきです。
     (setq bbdb-north-american-phone-numbers-p nil)
     ;; あなたの電子メールアドレスを BBDB に教えましょう。
     (setq bbdb-user-mail-names
           (regexp-opt '("Your.Email@here.invalid"
                         "Your.other@mail.there.invalid")))
     ;; メールアドレスを補完するときに、候補をエンドレスで出します。
     ;; cycling while completing email addresses
     (setq bbdb-complete-name-allow-cycling t)
     ;; BBDB のバッファーをポップアップさせません。
     (setq bbdb-use-pop-up nil)

これで BBDB を使う準備ができたはずです。`M-x bbdb RET RET' で、すべての
登録した項目を表示する BBDB のバッファーを開いてください。新たに登録す
るには `c'、検索には `b'、そして登録してある項目に新しいフィールドを加
えるには `C-o' を使いましょう。送信者を BBDB に登録するには、概略バッ
ファーのその記事の場所で単に `:' を叩くだけで、あなたの仕事は終りです。
一方、新規にメールを作成しているときに `TAB' を叩くことによって、順繰り
に現れる候補の中から受取人を選ぶことができます。



File: gnus-ja.info, Node: FAQ 5-8, Next: FAQ 5-9, Prev: FAQ 5-7, Up: FAQ 5 - Composing messages

質問 5.8
........

記事バッファーの上の方で、ときどき小さな画像を目にします。あれは何です
か?  また、どうしたら私も投稿するときに付けることができますか?


回答
....

あの画像は X-Face というものです。ヘッダー行で 48×48 画素の白黒画像が
エンコードされています。それを送信する記事に含めたいなら、何かの画像を
X-Face に変換する必要があります。そうするには、何らかの画像を加工するた
めのプログラム (例えば Gimp) に点火して、記事に含めたい画像のファイルを
開き、必要な部分を切り抜いて、色の深度を 1-bit まで減らし、48×48 の大
きさに縮小または拡大して、bitmap としてファイルに保存してください。次に
`compface' パッケージを このサイト
(ftp://ftp.cs.indiana.edu:/pub/faces/) から入手して、以下を実行すること
によって実際の X-Face を作りましょう:

     cat file.xbm | xbm2ikon | compface > file.face
     cat file.face | sed 's/\\/\\\\/g;s/\"/\\\"/g;' > file.face.quoted

`compface' を使うことができなくても、オンラインの X-Face 変換器が
`http://www.dairiki.org/xface/' にあります。MS Windows を使っているのな
らば、`http://www.xs4all.nl/~walterln/winface/' から `WinFace' プログラ
ムを取って来て使うこともできます。後は、送信する記事に X-Face を含めて
くれるように Gnus に指示するだけです。それには `~/.gnus.el' ファイルに
以下のようなものを入れてください:

     (setq message-default-headers
           (with-temp-buffer
             (insert "X-Face: ")
             (insert-file-contents "~/.xface")
             (buffer-string)))

ただし Gnus 5.10 を使っているのであれば、単に次の項を

     (x-face-file "~/.xface")

`gnus-posting-styles' に加えるだけで済みます。



File: gnus-ja.info, Node: FAQ 5-9, Next: FAQ 5-10, Prev: FAQ 5-8, Up: FAQ 5 - Composing messages

質問 5.9
........

ときどきニュースグループで、`f' の代わりにうっかり `r' を打ってしまいま
す。ニュースグループなのにもかかわらずメールで返信しようとしたときに、
Gnus に警告してもらうことはできますか?


回答
....

もう Gnus 5.10 を使っているのであれば、これを `~/.gnus.el' ファイルに入
れてください:

     (setq gnus-confirm-mail-reply-to-news t)

まだ 5.8.8 や 5.9 を使っているのなら、代わりにこれをどうぞ:

     (eval-after-load "gnus-msg"
       '(unless (boundp 'gnus-confirm-mail-reply-to-news)
          (defadvice gnus-summary-reply (around reply-in-news activate)
            "Request confirmation when replying to news."
            (interactive)
            (when (or (not (gnus-news-group-p gnus-newsgroup-name))
                      (y-or-n-p "Really reply by mail to article author? "))
              ad-do-it))))



File: gnus-ja.info, Node: FAQ 5-10, Next: FAQ 5-11, Prev: FAQ 5-9, Up: FAQ 5 - Composing messages

質問 5.10
.........

Gnus が sender ヘッダーを生成しないようにするには、どうしたら良いですか?


回答
....

Gnus 5.10 はディフォルトで sender ヘッダーを作らないのですけれどね。ま
だ古い Gnus を使っているのなら、`~/.gnus.el' ファイルでこれを試してくだ
さい:

     (add-to-list 'message-syntax-checks '(sender . disabled))



File: gnus-ja.info, Node: FAQ 5-11, Next: FAQ 5-12, Prev: FAQ 5-10, Up: FAQ 5 - Composing messages

質問 5.11
.........

送信したメールやニュースの控えをローカルに残しておきたいのですが、どう
すれば良いですか?


回答
....

それを行なうためには変数 `gnus-message-archive-group' を設定しなければ
なりません。それには、控えを保存しておくグループの名前を与える文字列を
設定することができます。あるいは以下の例のように、評価されるとグループ
名を返す関数 (訳注: と言うよりは Lisp の式) を設定することもできます。

     (setq gnus-message-archive-group
           '((if (message-news-p)
                 "nnml:Send-News"
               "nnml:Send-Mail")))



