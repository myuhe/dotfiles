Info file: gnus-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus-ja.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006, 2007 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     この文書を、フリーソフトウェア財団発行の GNU フリー文書利用許諾契
     約書第 1.2 版またはそれ以降の版が定める条件の下で複製、配布、ある
     いは変更することを許可します。変更不可部分は指定しません。“A GNU
     Manual”は表表紙テキスト、以下の (a) は裏表紙テキストです。この利
     用許諾契約書の複写は“Emacs manual”の「GNU フリー文書利用許諾契約
     書」という章に含まれています。

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     (a) FSF の裏表紙テキスト:「あなたにはこの GNU Manual を GNU ソフト
     ウェアのように複製したり変更する自由があります。複製はフリーソフト
     ウェア財団によって出版されました。(フリーソフトウェア財団は) GNU
     の開発のために必要な資金を集めています。」

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.

     この文書は「GNU フリー文書利用許諾契約書」に基づいて配布された収集
     著作物の一部です。もしあなたがこの文書を収集著作物から分離して配布
     したいときは、契約書の第 6 章に記述されているように、文書に契約書
     の複写を付加することによって、行なうことができます。



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus-ja: (gnus-ja).           The newsreader Gnus (Japanese).
END-INFO-DIR-ENTRY





File: gnus-ja.info, Node: Archiving Mail, Next: Web Searches, Prev: Browsing the Web, Up: Browsing the Web

メールの保存
------------

いくつかのバックエンド、特に `nnml', `nnfolder' および `nnmaildir' は、
今ではそれぞれのグループの記事の印を本当に保持するようになりました (訳
注: そうなったのはだいぶ前ですが)。これらのサーバーで、グループの印を保
ちつつ保存したり元に戻すのはかなり簡単です。

(でも、グループレベルとグループパラメーターをも保持するには、今までとお
り `.newsrc.eld' の神に、舞いと生贄を捧げなければなりませんが。)

`nnml', `nnfolder' または `nnmaildir' サーバーにまるごと保存するには、
サーバーのディレクトリーを再帰的にコピーして下さい。Gnus を終了する必要
は無いので、保存は `cron' やそれに類するものが行なうことができます。デー
タを復帰させるにはディレクトリー木 (tree) を元に戻すことによって行ない、
そのディレクトリーを指し示すように Gnus のサーバーの定義に追加しましょ
う。*Note Article Backlog::, *Note Asynchronous Fetching:: およびその他
のものはデータを上書きして邪魔をするかもしれないので、データを復帰させ
る前に Gnus を終了する必要があるかもしれません。

さらに、個々の `nnml', `nnfolder' または `nnmaildir' のグループを、印を
保持しつつ保存することもできます。`nnml' または `nnmaildir' では、その
グループのディレクトリーにあるすべてのファイルをコピーして下さい。
`nnfolder' では、基本のフォルダーファイルそのもの (例えば `FOO') と印ファ
イル (`FOO.mrk') の両方をコピーする必要があります。グループを元に戻すに
は、グループバッファーで `G m' キーを使いましょう。その最後の手順が、
Gnus に新しいディレクトリーができたことを知らせます。`nnmaildir' は自動
的に新しいディレクトリーを知るので、その場合 `G m' は不要です。



File: gnus-ja.info, Node: Web Searches, Next: Slashdot, Prev: Archiving Mail, Up: Browsing the Web

ウェブ検索
----------

ううむ、まあ、調べたい文字が書いてある記事を、その、Usenet で探すという
ことは、ですね、もちろん素晴らしいことこの上ないのではありますが、しか
し、何と申しましょうか、ウェブブブラウザーといいますか、そういうものを
使ってことを行なうのは、何ともその、はばかりながら、ぶざまと言いますか、
そうすると、コマーシャルを見ないわけにはいかないのでありまして、しかる
に、Gnus を使えばブラウザー無しで検索することができます。

`nnweb' バックエンドは、強力な検索エンジンへの簡単なインターフェースを
提供します。`nnweb' グループを作成し、検索パターンを入力してから、その
グループに入って他の普通のグループのように記事を読んで下さい。グループ
バッファー (*Note Foreign Groups::) の `G w' 命令によって、手軽にこれが
できます。

`nnweb' グループは、固定グループになろうとはしません--このグループでは
記事番号はごく一時的なものとして扱われます。実際、`nnweb' グループに入
るたびに (たとえ検索パターンを変更していなくても)、記事の順序が違ってい
るかもしれません。また、重複抑制 (*Note Duplicate Suppression::) を使っ
ても役に立たないでしょう。というのは、検索エンジン (例えば Google) を使っ
て記事を読み込む前の段階では、`nnweb' はそれらの `Message-ID' を知らな
いからです。あなたが読んだ記事を憶えておくための唯一の方法は、`Date' ヘッ
ダーを元にスコアを付けることだけです--つまり、そのグループを最後に読ん
だ日付より前に投稿された記事を、すべて既読にするということです。

もし検索エンジンの出力形式が実質的に変更されると、`nnweb' はそれをうま
く解釈できなくて、処理に失敗するでしょう。ウェブの提供者たちがそんなこ
とをしても、彼らを責めることはできないでしょう--それは広告で金を稼ぐの
が彼らの *レーゾン・デートル* (存在理由) であり、社会にサービスを提供す
ることではないからです。`nnweb' はすべての記事から広告を洗い流してしま
うので、提供者たちがムカついていると思われるかもしれません。まあ見てて
下さい。

`nnweb' を使うには、`url' と `W3' パッケージ、またはそれらの代替
(`mm-url' 変数グループに対して `customize-group' を試してみて下さい) を
インストールしておかなくてはなりません。

以下は仮想サーバー変数です。

`nnweb-type'
     どの検索エンジンを使うかを指定します。現在サポートされている種類は、
     `google', `dejanews' そして `gmane' です。
     `dejanews' は `google' の別名になっていることに注意して下さい。

`nnweb-search'
     検索エンジンに与える検索文字列です。

`nnweb-max-hits'
     一つの検索で表示する最大のヒット数の希望値で、ディフォルトは 999
     です。

`nnweb-type-definition'
     種類と定義の連想リストです。この連想リストは、さまざまな検索エンジ
     ンの種類に対して、`nnweb' がどうすべきかを指定します。以下に示す要
     素を与えなくてはなりません。

     `article'
          記事をデコードし、Gnus が理解できる何かを提供する関数です。

     `map'
          メッセージヘッダーと URL を、記事番号を元にして得るための連想
          リストを作成する関数です。

     `search'
          検索エンジンに検索文字列を送るための関数です。

     `address'
          前述の関数が検索文字列を送るべきアドレスです。

     `id'
          `Message-ID' を元にして記事を取得するための、URL フォーマット
          の文字列です。



File: gnus-ja.info, Node: Slashdot, Next: Ultimate, Prev: Web Searches, Up: Browsing the Web

Slashdot
--------

Slashdot (http://slashdot.org/) は人気のあるニュースサイトで、ニュース
記事に関して活発な議論がなされています。`nnslashdot' では便利な方法でこ
の会議室を読むことができます。

ここから読むための一番簡単な方法は、以下のようなものを `~/.gnus.el' ファ
イルに入れることです。

     (setq gnus-secondary-select-methods
           '((nnslashdot "")))

これは Gnus に `nnslashdot' バックエンドに対して新しいコメントとグルー
プを尋ねさせます。`F' 命令はそれぞれの新しいニュース記事を新しい Gnus
のグループとして作るので、これらのグループに入ることによってコメントを
読むことができます。(ディフォルトの講読方法では、新しいグループをゾンビ
として作ることに注意して下さい。他の方法を使うこともできます (*Note
Subscription Methods::)。

古い `nnslashdot' グループを削除したい場合には、`G DEL' が最も手軽な道
具です (*Note Foreign Groups::)。

`nnslashdot' のコメントにフォローアップ (または新しいコメントの投稿) を
するときは、いくつかの軽い HTML 変換が行なわれます。特に `> ' で引用さ
れたテキストは代わりに `blockquote' で引用され、署名にはそれぞれの行の
最後に `br' が追加されます。それ以外は、メッセージバッファーに直接
HTML を書くことができます。Slashdot はいくつかの HTML 様式をふるい落と
すことに気を付けて下さい。

以下の変数で振る舞いを変えることができます:

`nnslashdot-threaded'
     `nnslashdot' がグループをスレッドで表示するかどうかを指定します。
     ディフォルトは `t' です。スレッドを表示できるようにするためには、
     `nnslashdot' はグループのすべてのコメントを完全に取得する必要があ
     ります。スレッド表示が要求されていないと、`nnslashdot' は実際に利
     用者が欲しいコメントだけを取得します。スレッドの方が快適ですが、ス
     レッド無しの場合より、ずっとずっと遅くなります。

`nnslashdot-login-name'
     投稿時に使うログイン名です。

`nnslashdot-password'
     投稿時に使うパスワードです。

`nnslashdot-directory'
     `nnslashdot' がファイルを保存する場所です。ディフォルトは
     `~/News/slashdot/' です。

`nnslashdot-active-url'
     ニュース記事の情報とコメントを取得するために使われる URL のフォー
     マット文字列です。ディフォルトは
     `http://slashdot.org/search.pl?section=&min=%d' です。

`nnslashdot-comments-url'
     コメントを取得するために使われる URL のフォーマット文字列です。

`nnslashdot-article-url'
     ニュース記事を取得するために使われる URL のフォーマット文字列です。
     ディフォルトは
     `http://slashdot.org/article.pl?sid=%s&mode=nocomment' です。

`nnslashdot-threshold'
     スコアのしきい値です。ディフォルトは -1 です。

`nnslashdot-group-number'
     最新の 10 個に加えて更新を続ける古いグループの数です。ディフォルト
     は 0 です。



File: gnus-ja.info, Node: Ultimate, Next: Web Archive, Prev: Slashdot, Up: Browsing the Web

Ultimate
--------

The Ultimate Bulletin Board (http://www.ultimatebb.com/) はおそらく一番
良く使われているウェブ掲示板システムでしょう。とても規則的で良質なイン
ターフェースを持っていて、Gnus がグループを最新の状態に保っておくために
必要な情報を得ることが可能です。

`nnultimate' を始めるための一番簡単な方法は、グループバッファーで以下の
ようなものをすることです: `B nnultimate RET
http://www.tcj.com/messboard.ubbcgi/ RET'。(興味のある会議室の URL
(`Ultimate.cgi' 等を最後に含んでいないもの) に変えて下さい。Ultimate ウェ
ブサイトにはたくさん挙げられています。) それからサーバーバッファーで興
味のあるグループを購読し、グループバッファーからそれらを読んで下さい。

以下の `nnutimate' 変数が変更可能です:

`nnultimate-directory'
     `nnultimate' がファイルを保存するディレクトリーです。ディフォルト
     は `~/News/ultimate/' です。



File: gnus-ja.info, Node: Web Archive, Next: RSS, Prev: Ultimate, Up: Browsing the Web

Web Archive
-----------

いくつかのメーリングリストは、`http://www.egroups.com/' や
`http://www.mail-archive.com/' のようなウェブサーバーでだけ、そのアーカ
イブを持っています。それはとても規則的で良質なインターフェースを持って
いるので、Gnus がグループを最新の状態に保っておくために必要な情報を得る
ことが可能です。

`nnwarchive' を始めるための一番簡単な方法は、グループバッファーで以下の
ようなものをすることです: `M-x gnus-group-make-warchive-group RET
AN_EGROUP RET egroups RET www.egroups.com RET YOUR@EMAIL.ADDRESS RET'。
(AN_EGROUP を購読しているメーリングリストに、YOUR@EMAILADDRESS を電子メー
ルアドレスに置き換えて下さい。) または `B nnwarchive RET mail-archive
RET' でバックエンドをブラウズして下さい。

以下の `nnwarchive' 変数が変更可能です:

`nnwarchive-directory'
     `nnwarchive' がファイルを保存するディレクトリーです。ディフォルト
     は `~/News/warchive' です。

`nnwarchive-login'
     ウェブサーバーでのアカウント名です。

`nnwarchive-passwd'
     ウェブサーバーでのアカウントのパスワードです。



File: gnus-ja.info, Node: RSS, Next: Customizing W3, Prev: Web Archive, Up: Browsing the Web

RSS
---

いくつかのウェブサイトは RDF site summary (RSS) を持っています。RSS は、
ニュース関連のサイト (BBC や CNN のような) の見出しを要約するためのフォー
マットです。しかし、基本的にリストのようなものなら何でも、RSS feed とし
て提供することができます: weblogs, changelogs あるいは wiki (例えば
`http://cliki.net/recent-changes.rdf') の最新の変更などが対象になります。

RSS はとても規則的で良質なインターフェースを持っているので、Gnus がグルー
プを最新の状態に保っておくために必要な情報を得ることが可能です。

注: `utf-8' coding system をサポートする Emacs を使うのが良いでしょう。
RSS は非-ASCII テキストをエンコードするために、ディフォルトで UTF-8 を
使うからです。それはまた、非-ASCII グループ名にもディフォルトで使われま
す。

Feed を講読するには、グループバッファーから `G R' を使って下さい--feed
の所在、タイトルおよび説明の入力を求められるでしょう。タイトルはどんな
文字でもよく、それはグループ名とグループのデータ・ファイルの名前に使わ
れます。説明は省略できます。

簡単に `nnrss' を始める方法は、グループバッファーで `B nnrss RET RET
y' のようなことを唱え、そしてグループを講読することです。

`nnrss' バックエンドは、それぞれの `nnrss' グループのためのデータ・ファ
イルを `nnrss-directory' (下記参照) に保存します。非-ASCII 文字を含んで
いるファイル名は、`nnmail-pathname-coding-system' 変数で指定された
coding system でエンコードされます。それが `nil' であると、Emacs では
coding system はディフォルトで `default-file-name-coding-system' の値に
なります。あなたが XEmacs を使っていて、非-ASCII グループ名を使いたけれ
ば、`nnmail-pathname-coding-system' 変数の値を適切に設定しなければなり
ません。

`nnrss' バックエンドは、それぞれが `text/plain' パートと `text/html' パー
トを含んでいる `multipart/alternative' 型の MIME 記事を作ります。

あなたの講読目録を OPML フォーマット (Outline Processor Markup
Language) でロード/セーブするために、以下のコマンドを使うこともできます。

 -- Function: nnrss-opml-import FILE
     OPML ファイルの入力を促し、そのファイルにあるそれぞれの feed を講
     読します。

 -- Function: nnrss-opml-export
     現在の RSS 講読目録を OPML フォーマットでバッファーに書き出します。

以下の `nnrss' 変数が変更可能です:

`nnrss-directory'
     `nnrss' がファイルを書き込むディレクトリーで、ディフォルトは
     `~/News/rss/' です。

`nnrss-file-coding-system'
     `nnrss' グループのデータ・ファイルを読み書きするときに使われる
     coding system です。ディフォルトは `mm-universal-coding-system' の
     値 (そのディフォルトは Emacs では `emacs-mule'、XEmacs では
     `escape-quoted') です。

`nnrss-ignore-article-fields'
     いくつかのフィードは、記事フィールドの例えばコメント数を、その存続
     期間を通じて絶えず更新します。しかしそれはローカルに保存したものと
     の差異を生むので、サーバーに新しい記事があるように解釈されてしまい
     ます。いくつかのフィールドを無視してこれを防ぐためには、この変数に
     無視するべきフィールドのリストを設定して下さい。ディフォルトは
     `'(slash:comments)' です。

`nnrss-use-local'
     `nnrss-use-local' を `t' に設定すると、`nnrss' は
     `nnrss-directory' にあるローカルファイルから feed を読みます。
     `nnrss-generate-download-script' コマンドを使うことによって、
     `wget' を使ったダウンロード・スクリプトを作ることができます。

`nnrss-wash-html-in-text-plain-parts'
     `nil' ではない値にすると `nnrss' は `text/plain' パートにあるテキ
     ストを HTML として描画します。テキストの描画には
     `mm-text-html-renderer' 変数 (*Note 表示のカスタマイズ:
     (emacs-mime-ja)Display Customization.) で定義された関数が使われま
     す。`nil' だったら (それがディフォルトです)、テキストは単に折り返
     されるだけです。もし `text/html' パートを見るのが好みならば、
     `nil' のままにしておいて下さい。

概略バッファーに説明を表示させたいならば、以下のコードが役に立つでしょ
う。

     (add-to-list 'nnmail-extra-headers nnrss-description-field)
     (setq gnus-summary-line-format "%U%R%z%I%(%[%4L: %-15,15f%]%) %s%uX\n")

     (defun gnus-user-format-function-X (header)
       (let ((descr
              (assq nnrss-description-field (mail-header-extra header))))
         (if descr (concat "\n\t" (cdr descr)) "")))

以下のコードは、概略バッファーから直接 nnrss の url をオープンするのに
便利でしょう。

     (require 'browse-url)

     (defun browse-nnrss-url (arg)
       (interactive "p")
       (let ((url (assq nnrss-url-field
                        (mail-header-extra
                         (gnus-data-header
                          (assq (gnus-summary-article-number)
                                gnus-newsgroup-data))))))
         (if url
             (progn
               (browse-url (cdr url))
               (gnus-summary-mark-as-read-forward 1))
           (gnus-summary-scroll-up arg))))

     (eval-after-load "gnus"
       #'(define-key gnus-summary-mode-map
           (kbd "<RET>") 'browse-nnrss-url))
     (add-to-list 'nnmail-extra-headers nnrss-url-field)

あなたが HTML パートを見たくないために `"text/html"' を
`mm-discouraged-alternatives' 変数 (*Note 表示のカスタマイズ:
(emacs-mime-ja)Display Customization.) に加えていたとしても、特に
`nnrss' グループでは `text/html' を表示する方が便利かもしれません。以下
は `nnrss' グループでだけは `text/html' パートを表示するために、グルー
プパラメーターとして `mm-discouraged-alternatives' を設定する例です:

     ;; `mm-discouraged-alternatives' のディフォルト値を設定。
     (eval-after-load "gnus-sum"
       '(add-to-list
         'gnus-newsgroup-variables
         '(mm-discouraged-alternatives
           . '("text/html" "image/.*"))))

     ;; `nnrss' グループでは `text/html' パートを表示。
     (add-to-list
      'gnus-parameters
      '("\\`nnrss:" (mm-discouraged-alternatives nil)))



File: gnus-ja.info, Node: Customizing W3, Prev: RSS, Up: Browsing the Web

W3 のカスタマイズ
-----------------

Gnus はウェブページを取得するために url ライブラリーを、ウェブページを
表示するために Emacs/W3 を (またはそれらの代替を) 使います。Emacs/W3 の
ことはそのマニュアルに記載されていますが、ここでは Gnus の利用者にとっ
てより適切な、いくつかの事柄を述べることにします。

例えばよくある質問は、Emacs/W3 に `browse-url' の関数 (Netscape のよう
な外部プラウザーを呼びます) を使ってリンクを参照させるにはどうしたらよ
いか、というものです。以下は一つの方法です:

     (eval-after-load "w3"
       '(progn
         (fset 'w3-fetch-orig (symbol-function 'w3-fetch))
         (defun w3-fetch (&optional url target)
           (interactive (list (w3-read-url-with-default)))
           (if (eq major-mode 'gnus-article-mode)
               (browse-url url)
             (w3-fetch-orig url target)))))

これをあなたの .emacs ファイルに書き込んで下さい。そうすれば、Gnus の記
事バッファーで W3 が描画した HTML リンクを叩くと、
`browse-url' を使ってそのリンクを参照してくれるでしょう。



File: gnus-ja.info, Node: IMAP, Next: Other Sources, Prev: Browsing the Web, Up: Select Methods

IMAP
====

IMAP はメール (もしくは、ニュース、もしくは ...) を読むためのネットワー
クプロトコルです。現代風の NNTP と考えて下さい。IMAP サーバーへの接続は
ニュースサーバーへの接続と非常に似ていて、そのサーバーのネットワークア
ドレスを指定するだけになっています。

IMAP には二つの特質があります。一つは、IMAP は POP でできることは全部で
きる、それゆえ POP++ のようにも見えるということ。二つ目は、IMAP は
NNTP がニュースを貯蔵するプロトコルであるように、メールを貯蔵するプロト
コルであるということです。しかしながら IMAP は NNTP より多くの機能を提
供します。メールは読み書きができるのに対して、ニュースはだいたいにおい
て読むだけですから。

IMAP を POP++ のように使いたいときは、
`mail-sources' に imap の項目を登録して下さい。これによっ
て Gnus は IMAP サーバーからメールを取り込んで、ローカルディス
クに格納します。ここではその使い方の説明はしませんから、
*Note Mail Sources:: を参照して下さい。

IMAP をメールを貯蔵するプロトコルとして使いたいときは、
`gnus-secondary-select-methods' に nnimap の項目を登録して下さい。これ
によって Gnus は IMAP サーバーに格納されているメールを操作するようにな
ります。これがここで説明する種類の使い方です。

いくつかの IMAP サーバーを `~/.gnus.el' で設定すると、たぶん以下のよう
なものになるでしょう。(注: TLS/SSL では外部プログラムとライブラリーが必
要です。以下を参照して下さい。)

     (setq gnus-secondary-select-methods
           '((nnimap "simpleserver") ; 特殊ではない設定
             ; もしかしたら SSH ポートをフォワードしたサーバー:
             (nnimap "dolk"
                     (nnimap-address "localhost")
                     (nnimap-server-port 1430))
             ; ローカルホストで稼動している UW サーバー:
             (nnimap "barbar"
                     (nnimap-server-port 143)
                     (nnimap-address "localhost")
                     (nnimap-list-pattern ("INBOX" "mail/*")))
             ; 匿名で使える cyrus の公衆サーバー:
             (nnimap "cyrus.andrew.cmu.edu"
                     (nnimap-authenticator anonymous)
                     (nnimap-list-pattern "archive.*")
                     (nnimap-stream network))
             ; 標準ではないポートの SSL サーバー:
             (nnimap "vic20"
                     (nnimap-address "vic20.somewhere.com")
                     (nnimap-server-port 9930)
                     (nnimap-stream ssl))))

新しいサーバーを定義した後で、`U' のような Gnus の通常のコマンドをグルー
プバッファーで使う (*Note Subscription Commands::) か、またはサーバーバッ
ファー (*Note Server Buffer::) を介して、そのサーバーのグループを講読す
ることができます。

以下の変数は仮想 `nnimap' サーバーを作成するために使うことができます。

`nnimap-address'
     遠隔 IMAP サーバーのアドレスです。指定されていない場合は仮想サーバー
     の名前になります。

`nnimap-server-port'
     接続するサーバーのポートです。ディフォルトはポート 143、または
     TLS/SSL では 993 です。

     これは整数でなければならないことに注意して下さい。以下はサーバー指
     定の例です:

          (nnimap "mail.server.com"
                  (nnimap-server-port 4711))

`nnimap-list-pattern'
     使うことができるグループを制限するための、メールボックスの文字列ま
     たは文字列のリストです。これは、サーバーに非常に多くのメールボック
     スがあるけれど、興味のあるものは少しだけであるときに使用します。い
     くつかのサーバーはホームディレクトリーを IMAP 経由でアクセスできる
     ようにするので、その場合はおそらくメールボックスを `~/Mail/*' に制
     限したいでしょう。

     文字列は REFERENCE と上記の文字列との cons であることもできます。
     どの REFERENCE が使用されるかはサーバーによりますが、ワシントン大
     学のサーバーでは、メールボックスと連結されるディレクトリーです。

     以下はサーバー指定の例です:

          (nnimap "mail.server.com"
                  (nnimap-list-pattern ("INBOX" "Mail/*" "alt.sex.*"
                                         ("~friend/Mail/" . "list/*"))))

`nnimap-stream'
     サーバーに接続するときに使われるストリームの型です。ディフォルトで
     は nnimap は TLS/SSL を除く以下のすべてを自動的に検知してそれを使
     います。(TLS/SSL を使う IMAP は STARTTLS で置き換えられています。
     これは自動検出できますが、まだ広範囲に配備されていません。)

     以下はサーバー指定の例です:

          (nnimap "mail.server.com"
                  (nnimap-stream ssl))

     `nnimap-stream' の値はシンボルであることに注意して下さい!

        * "gssapi:" GSSAPI (普通は Kerberos 5) で接続します。`gsasl' ま
          たは `imtest' プログラムが必要です。
        * "kerberos4:" Kerberos 4 で接続します。`imtest' プログラムが必
          要です。
        * "starttls:" STARTTLS 拡張 (TLS/SSL に類似) を介して接続します。
          `starttls.el' 外部ライブラリーと `starttls' プログラムが必要
          です。
        * "tls:" TLS を通して接続します。GNUTLS (`gnutls-cli' プログラ
          ム) が必要です。
        * "ssl:" SSL を通して接続します。OpenSSL (`openssl' プログラム)
          か SSLeay (`s_client') が必要です。
        * "shell:" シェル命令を使って IMAP 接続を開始します。
        * "network:" 生の TCP/IP のネットワーク接続です。

     `imtest' プログラムは Cyrus IMAPD に含まれています。もし 2.0.14 未
     満の Cyrus IMAPD に含まれている `imtest' (バージョン 1.5.x および
     1.6.x) を使っているなら、`imap-process-connection-type' をいじって、
     `imap.el' が `imtest' と通信するときに、パイプではなくて pty を使
     うようにさせる必要があります。そうするとあなたは IMAP コマンドの行
     の長さの制限に悩まされ、メールボックスにたくさんの記事がある場合に
     は、Gnus が無期限にハングするように見えるかもしれません。変数
     `imap-kerberos4-program' は imtest プログラムに渡すパタメータを含
     みます。

     TLS 接続では GNUTLS 由来の `gnutls-cli' プログラムが必要です。
     `http://www.gnu.org/software/gnutls/' から手に入れることができます。

     このパラメーターは、副シェルで GSSAPI 認証による IMAP 接続を起動す
     るためのコマンド行のリストを指定します。これらは接続が確立するまで、
     またはリストが使い尽くされるまで、順ぐりに試されます。ディフォルト
     では、`http://www.gnu.org/software/gsasl/' にある GNU SASL による
     `gsasl' と、Cyrus IMAPD による `imtest' プログラム
     (`imap-kerberos4-program' 参照) が試されます。

     SSL 接続のための OpenSSL プログラムは `http://www.openssl.org/' か
     ら入手できます。OpenSSL は以前は SSLeay として知られていたもので、
     nnimap はそれもサポートします。しかし SSLeay の最新版である 0.9.x
     には、それを役に立たなくしてしまう重大なバグがあることが知られてい
     ます。以前の版、特に SSLeay 0.8.x は使えることがわかっています。変
     数 `imap-ssl-program' は OpenSSL/SSLeay に渡すパタメータを含みます。

     `shell' ストリームを使う IMAP 接続では、何のプログラムを呼ぶかを変
     数 `imap-shell-program' で指定します。何物もそのプログラムの出力を
     邪魔しないようにして下さい。例えばエラー出力は void に振り分けましょ
     う。

`nnimap-authenticator'
     サーバーに接続するために使われる認証手段です。ディフォルトでは
     nnimap はサーバーにできる最も安全な認証手段を使います。

     以下はサーバー指定の例です:

          (nnimap "mail.server.com"
                  (nnimap-authenticator anonymous))

     `nnimap-authenticator' の値はシンボルであることに注意して下さい!

        * "gssapi:" GSSAPI (普通は Kerberos 5) 認証です。外部プログラム
          `gsasl' または `imtest' が必要です。
        * "kerberos4:" Kerberos 4 による認証です。外部プログラム
          `imtest' が必要です。
        * "digest-md5:" DIGEST-MD5 で暗号化された 利用者名/パスワード
          です。外部ライブラリー `digest-md5.el' が必要です。
        * "cram-md5:" CRAM-MD5 で暗号化された 利用者名/パスワード です。
        * "login:" LOGIN 経由での生の 利用者名/パスワード です。
        * "anonymous:" 電子メールアドレスをパスワードとして与え、
          “anonymous”としてログインします。

`nnimap-expunge-on-close'
     パルメニデスと違って、IMAP の設計者達は、存在していないものが実際
     には存在していると決めました。もっと詳しく説明すると、IMAP には実
     際には記事を消去せずに `Deleted' という印を記事に付けるという概念
     があります。これ (すなわち `Deleted' の印を付けること) が Gnus で
     記事を消去するときに nnimap が行なうことです (`B DEL' などで)。(訳
     注: パルメニデスは紀元前 5 世紀のギリシアの Elea 派の哲学者。)

     記事を `Deleted' フラグで印を付けたときには本当は消去されていない
     ので、実際に消去するための方法が必要となります。まだどうどうめぐり
     をしているように感じますか?

     伝統的に nnimap はメールボックスを閉じるときに `Deleted' という印
     の付いたすべての記事を消去してきましたが、今ではこのサーバー変数に
     よって設定することが可能になりました。

     可能な選択肢は:

     `always'
          これがディフォルトの振舞いで、メールボックスを閉じるときに
          “Deleted”として印が付けられている記事を消去します。
     `never'
          決して記事を消去しません。現在は消去の印が付いた記事を
          nnimap で表示する方法はありませんが、他の IMAP クライアントで
          はできるかもしれません。いつも手で EXPUNGE コマンドを発行した
          いならば、*Note Expunging mailboxes:: を参照して下さい。
     `ask'
          メールボックスを閉じるときに、nnimap が消去された記事を削除す
          るかどうかを尋ねます。

`nnimap-importantize-dormant'
     非-`nil' (ディフォルト) だったら、他の IMAP クライアントのために保
     留記事に可視記事として (も) 印を付けます (訳注: 保留==dormant、可
     視==ticked)。Gnus の内部では、当然ながら保留記事には保留記事として
     のみ印が付けられます。一方これは、保留記事を、他の IMAP クライアン
     トにおいて、あたかも可視記事のようにきわ立たせます。(別の言い方を
     すると、Gnus には二つの「可視」印があり、IMAP にははたった一つだと
     いうことです。)

     おそらくこれをいじる唯一の理由は、あなたが利用者ごとに永続的な保留
     フラグを付けようとしているかどうかということでしょう。こんな感じで:

          (setcdr (assq 'dormant nnimap-mark-to-flag-alist)
                  (format "gnus-dormant-%s" (user-login-name)))
          (setcdr (assq 'dormant nnimap-mark-to-predicate-alist)
                  (format "KEYWORD gnus-dormant-%s" (user-login-name)))

     この場合、あなたは利用者ごとの保留フラグが付いている記事が、他の利
     用者には可視記事として見えるようにしたくないのでしょうね。

`nnimap-expunge-search-string'
     この変数には、期限切れ消去するのが望ましい記事を探すときにサーバー
     に送った IMAP の検索コマンドが入っています。ディフォルトは `"UID
     %s NOT SINCE %s"' で、ここで最初の `%s' は UID の一揃いで置き換え
     られ、二番目の `%s' は日付で置き換えられます。

     この代わりに使いものになる値はたぶん `"UID %s NOT SENTSINCE %s"'
     だけで、それは nnimap に記事の内部的な日付の代わりに Date: を使う
     ようにさせます。 使うことができる文字列に関するさらなる情報は、
     RFC 2060 の第 6.4.4 章を見て下さい。

     しかしながら `nnimap-search-uids-not-since-is-evil' が真になってい
     ると、後述のように検索論理が反転されるので、この変数は無効になりま
     す。

`nnimap-authinfo-file'
     サーバーにログインするために使う認証情報 (credentials) を含むファ
     イルです。その形式は `ftp' の `~/.netrc' ファイルと (ほとんど) 同
     じです。厳密な様式については、変数 `nntp-authinfo-file' を見て下さ
     い。そして *Note NNTP:: も見て下さい。IMAP サーバー用の .authinfo
     行の例です:

          machine students.uio.no login larsi password geheimnis port imap

     安全な IMAP で使われる実際のポート番号は port 993 ですが、
     `nnimap-stream' として `tls' または `ssl' を使う場合、それは
     `port imap' または `port 143' でなければならないことに注意して下さ
     い。便宜上 Gnus は `port imap' の同義語として `port imaps' を受け
     入れます。

`nnimap-need-unselect-to-notice-new-mail'
     メールボックス群で新着メールを探す前に、それらを未選択にします。い
     くつかのサーバーが、何らかの状況の元でこれを必要とするようです。
     Courier 1.7.1 はそうだという報告がありました。

`nnimap-nov-is-evil'

     NOV データベースを作らないか、またはローカルのものを使います。ディ
     フォルトは `gnus-agent' の値です。

     普通 NOV データベースを使うとヘッダーの取得がとても速くなりますが、
     ある種のサーバー (特にいくつかの Courier の版) では非常に遅い
     `UID SEARCH UID' コマンドを使います。Gnus エージェントは、その遅い
     コマンドを使わずに NOV データベースに情報をキャッシュするので、こ
     の変数のディフォルト値は、エージェントが使われる場合は真に、そうで
     ない場合は偽になります。

`nnimap-search-uids-not-since-is-evil'

     `UID SEARCH UID MESSAGE NUMBERS NOT SINCE DATE' コマンドを使わない
     ようにします。それは、ある種の IMAP サーバー (特にいくつかの
     Courier の版) では非常に遅くなります。代わりに `UID SEARCH SINCE
     DATE' を使って、Gnus で期限切れ消去する記事のリストから余分なもの
     を取り除きます。

     Gnus がメールの期限切れ消去 (*Note Expiring Mail::) を行うときは、
     期限切れ消去してもよい記事のリストが始めにあり、IMAP サーバーに
     「これらの記事のうち、一週間より古いものはどれ?」のような問いを発
     します。これは完全に合理的な質問に見えますが、見たところいくつかの
     IMAP サーバーは、すべての古い記事について期限切れ消去の対象かどう
     かを調べるので、それに答えるために長い時間がかかります。不思議なこ
     とに「*すべて* の記事のうち、一週間より古いものはどれ?」という質問
     の方がめっぽう速く答えが返ってくるので、この変数を設定して Gnus に
     この質問を出させることによって、本来の質問そのものへの答を得ること
     ができるのです。

     この問題は実際にあなたに忍び寄ってくるでしょう。最初のころは、
     Gnus を設定して、すべてがうまくいったとしても、いったん二〜三千通
     のメッセージが溜まったならば、あなたは Gnus の遅いことをののしりは
     じめるでしょう。一方、あなたが大量の電子メールをたった一週間で受け
     取るのであれば、この変数を設定すると Gnus と IMAP サーバー間の通信
     量の増大を招くでしょう。

`nnimap-logout-timeout'

     ある種のネットワーク (例えば VPN) を経由して IMAP サーバーに接続す
     る場合に、サーバーへの接続を閉じることができないことがあります。そ
     の場合、サーバーがある理由 (典型的にはタイムアウト) で接続を閉じて
     しまったとしても、Emacs とローカル・ネットワークの間の接続が生きて
     いるように観測されるでしょう。その結果 Emacs は Emacs が送った
     `LOGOUT' 命令に対するサーバーからの返答を待ち続けます、と言うかハ
     ングします。そのようなネットワークにいるのであれば、この変数に秒数
     を設定することは役に立ちます。それが設定されると Emacs が
     `LOGOUT' 命令を送ってからこの秒数後に、ハングした接続は強制的に終
     了させられます。それは小さ過ぎる値ではいけませんが、大き過ぎる値も
     不便でしょう。おそらく値 1.0 は良い目安です。でも他の値をいくつか
     試してみる価値があるかもしれません。

     以下はサーバー指定の例です:

          (nnimap "mail.server.com"
                  (nnimap-logout-timeout 1.0))

* Menu:

* Splitting in IMAP::           nnimap でメールを分割する
* Expiring in IMAP::            nnimap によるメールの期限切れ消去
* Editing IMAP ACLs::           他の利用者のメールボックスへのアクセスを制限/許可する
* Expunging mailboxes::         「メールボックス圧縮」ボタンと等価なもの
* A note on namespaces::        Gnus で IMAP 名前空間を使う (使わない) 方法
* Debugging IMAP::              ものごとが働かないときにするべきこと



File: gnus-ja.info, Node: Splitting in IMAP, Next: Expiring in IMAP, Prev: IMAP, Up: IMAP

IMAP での分割
-------------

分割は Gnus の利用者が何年も愛用してきたもので、今や残りの世界も追い着
こうとしています。ええ、彼らには勝手に夢を見ていてもらいましょう。サー
バー側で分割できる IMAP サーバーはあまり多くなく、しかもそれらは標準で
はないプロトコルを使っているようです。つまり Gnus の IMAP サポートは、
自分自身で分割をしなければならないということです。

そして実際にします。

(ついでに言えば、みんなが夢見ていたのでしょうね。その結果 Sieve は市場
占有率を増して、いくつもの IMAP サーバーによってサポートされるようにな
りました。幸いに Gnus もそれをサポートします。*Note Sieve Commands::.)

関連する変数は三つです:

`nnimap-split-crosspost'
     `nil' でなければ、複数の分割規則がそのメールと合致したときにクロス
     ポストをします。`nil' ならば、`nnimap-split-rule' で最初に見つかっ
     たものが使われます。

     Nnmail で対応するもの: `nnmail-crosspost'.

`nnimap-split-inbox'
     分割の元となる IMAP のメールボックスの名前を指定する文字列か文字列
     のリストです。ディフォルトは `nil' で、分割は使用しないようになっ
     ています!

          (setq nnimap-split-inbox
                '("INBOX" ("~/friend/Mail" . "lists/*") "lists.imap"))

     Nnmail に対応するものはありません。

`nnimap-split-rule'
     `nnimap-split-inbox' で見つかった新しいメールは、この変数に従って
     分割されます。

     この変数はリストのリストから成ります。副リストの最初の要素は IMAP
     のメールボックスで、二つめの要素の正規表現に合致した記事の移動先を
     指定します。わかりましたか? いいえ、私もわかりません。例が必要です。

          (setq nnimap-split-rule
                '(("INBOX.nnimap"
                   "^Sender: owner-nnimap@vic20.globalcom.se")
                  ("INBOX.junk"    "^Subject:.*MAKE MONEY")
                  ("INBOX.private" "")))

     これは nnimap メーリングリストからのすべての記事をメールボックス
     INBOX.nnimap に入れ、Subject: 行に MAKE MONEY のあるすべての記事を
     INBOX.junk に入れ、その他すべてのものを INBOX.private に入れます。

     最初の文字列は、replace-match で合致したテキストから副表現を挿入す
     るときに使用されるのと同じような、`\\1' 形式を含むことができます。
     例えば:

          ("INBOX.lists.\\1"     "^Sender: owner-\\([a-z-]+\\)@")

     最初の要素をシンボル `junk' にして、合致するメッセージを単に消すべ
     きであることを表すこともできます。気を付けて使って下さい。

     二つ目の要素は関数であることもできます。その場合は、その規則の最初
     の要素を引数として、記事のヘッダーがあるバッファーで呼ばれます。メー
     ルがそのグループに属すると考える場合は、`nil' でない値を返す必要が
     あります。

     Nnmail の利用者は、最後の正規表現はすべての記事に合致するように、
     空でなくてはならないことを覚えているかもしれません (上の例のよう
     に)。これは nnimap では必要ではありません。正規表現のどれにも合致
     しない記事は inbox から移動されません。(inbox に未読記事を大量に置
     いておくと、分割のコードは新しいメールを取得するときにそれらすべて
     を調べるので、実行速度に影響するかもしれません。)

     これらの規則は連想リストの最初から終りに向かって実行されます。クロ
     スポストを有効にしていない限り、最初に合致した規則が「勝ち」ます。
     有効にしている場合は、すべての合致した規則が「勝ち」ます。

     この変数はその値として関数を持つこともできます。その関数は記事のヘッ
     ダーの部分に範囲が狭められた状態で呼ばれ、記事の移動先だと思うグルー
     プを返すものでなければなりません。`nnimap-split-fancy' を参照して
     下さい。

     分割コードは必要ならメールボックスを作成しようとします。

     異なる仮想サーバー毎に違う分割の規則を使ったり、それどころか同じサー
     バーの異なる inbox 毎に違う分割の規則を使うことができるようにする
     ために、この変数の構文は以下のやり方で拡張されています。

          (setq nnimap-split-rule
                '(("my1server"    (".*"    (("ding"    "ding@gnus.org")
                                            ("junk"    "From:.*Simon")))
                  ("my2server"    ("INBOX" nnimap-split-fancy))
                  ("my[34]server" (".*"    (("private" "To:.*Simon")
                                            ("junk"    my-junk-func)))))

     仮想サーバー名は、同じ規則を複数のサーバーに適用できるように、実際
     には正規表現になっています。この例ではサーバー `my3server' と
     `my4server' の両方が同じ規則を使います。同様に inbox 文字列も正規
     表現です。実際の分割の規則は、前に説明したように、関数か、グループ
     /正規表現またはグループ/関数を要素群とするリスト、の両方です。

     Nnmail で対応するもの: `nnmail-split-methods'.

`nnimap-split-predicate'
     この述語に合致する `nnimap-split-inbox' にあるメールは分割されます。
     これは文字列で、ディフォルトは `UNSEEN UNDELETED' です。

     inbox にあるメールを読むために別の IMAP クライアントを使っているが、
     購読度に関わらずにすべての記事を Gnus に分割させたいならば、これは
     役に立つかもしれません。その場合は `UNDELETED' に変えれば良いでしょ
     う。

`nnimap-split-fancy'
     特級分割を使いたいならば、`nnimap-split-rule' の値
     を `nnmail-split-fancy' に設定することができます。
     *Note Fancy Mail Splitting::.

     しかし nnmail と nnimap とで異なる特級分割方式を持つようにするには、
     `nnimap-split-rule' の値を `nnimap-split-fancy' に設定して、
     nnimap 特有の特級分割方式を `nnimap-split-fancy' に定義して下さい。

     例:

          (setq nnimap-split-rule 'nnimap-split-fancy
                nnimap-split-fancy ...)

     Nnmail で対応するもの: `nnmail-split-fancy'.

`nnimap-split-download-body'
     分割している最中にすべての記事をダウンロードするには、非-`nil' に
     設定して下さい。これは普通は必要としないし、ものごとを相当に遅くし
     てしまうでしょう。記事を分割するためにその本文を分析する高度な関数
     を使いたい場合には、必要かもしれません。



File: gnus-ja.info, Node: Expiring in IMAP, Next: Editing IMAP ACLs, Prev: Splitting in IMAP, Up: IMAP

IMAP での期限切れ消去
---------------------

`nnimap' は完全な `nnmail' 由来のバックエンドではありませんが、標準的な
たいていの期限切れ消去 (*Note Expiring Mail::) の機能をサポートします。
IMAP の分割 (*Note Splitting in IMAP::) では `nnmail' の変数を複製しな
い (例えば NNIMAP-EXPIRY-WAIT を生成しない) 点が違うのですが、`nnmail'
の変数を流用します。以下は `nnimap' の期限切れ消去の処理で使われる変数
です。

また、期限切れ消去の印がどのように IMAP サーバーに記録されるかについて
も、ここで言及しておくのが適切でしょう。期限切れ消去の印は `imap' クラ
イアント特有の印である `gnus-expire' に変換され、メッセージに記録されま
す。そうするのは、おそらく Gnus だけが適切に `gnus-expire' の印を理解し
て扱うからです。もっとも他のクライアントは、メッセージのクライアント特
有のフラグを見させてくれるでしょうが。このことは、クライアント特有のフ
ラグを恒久的にメッセージに保存することを、サーバーがサポートしなければ
ならないことも意味します。たいていはサポートします。幸いにも。

もし IMAP メールの期限切れ消去がとても遅く感じられるのならば、サーバー
変数 `nnimap-search-uids-not-since-is-evil' を設定することを試してみて
ください。

`nnmail-expiry-wait'
`nnmail-expiry-wait-function'
     これらの変数は完全にサポートされています。期限切れ消去の値は、数、
     シンボルの `immediate' または `never' です。

`nnmail-expiry-target'
     この変数はサポートされていて、内部的にはこれを扱う `nnmail' 関数を
     呼ぶことによって実装されています。それには、行き先が同じサーバーの
     IMAP グループだったら、記事を追加する代わりにコピーする (アップロー
     ドし直す) という最適化も含みます。



File: gnus-ja.info, Node: Editing IMAP ACLs, Next: Expunging mailboxes, Prev: Expiring in IMAP, Up: IMAP

IMAP の ACL を編集する
----------------------

ACL は Access Control List (使用制限一覧) の略です。IMAP では、ACL は他
の利用者によるあなたのメールボックスの使用を制限 (もしくは許可) するた
めに使われています。すべての IMAP サーバーにこの機能があるわけではない
ので、無いサーバーでこれを使うとエラーが発生します。

あるメールボックスのための ACL を編集するには、`G l'
(`gnus-group-edit-nnimap-acl') をタイプして下さい。そうすると、詳しい説
明をともなった ACL 編集ウィンドウが現れます。

使うことがありそうな例:

   * あなたのメーリングリストのメールボックスで“anyone”に“lrs”権
     (lookup, read, seen/unseen フラグの保持) を与えることによって、そ
     のリストに講読登録しなくても、同じサーバーの他の利用者が読むことが
     できます。
   * 少なくとも Cyrus のサーバーでは、誰もが“plussing”を使うことがで
     きるようにするためには、利用者“anyone”に投稿 ("p") の許可を与え
     る必要があります (“plussing”とはすなわち、user+mailbox@domain 宛
     てに送られたメールが INBOX.mailbox という IMAP のメールボックスに
     届くようにすることです)。



File: gnus-ja.info, Node: Expunging mailboxes, Next: A note on namespaces, Prev: Editing IMAP ACLs, Up: IMAP

メールボックスの削除
--------------------

`nnimap-expunge-on-close' に `never' を設定している場合には、メールボッ
クスのすべての消去 (deleted) された記事を手動で削除 (expunge) する必要
があるでしょう。まさにこれが `G x' が行なうことです。

今のところ消去された記事を表示する方法はありません。ただ消去できるだけ
です。



File: gnus-ja.info, Node: A note on namespaces, Next: Debugging IMAP, Prev: Expunging mailboxes, Up: IMAP

名前空間に関する注意
--------------------

IMAP プロトコルには名前空間 (namespaces) と呼ばれる概念があり、以下の
RFC2060 の文書で記述されています:

     5.1.2.  メールボックス名前空間命名規則

        習慣により "#" で始まっているすべてのメールボックス名の最初の階層要素
        は、残りの名前の "名前空間" を示している。これは、それぞれ独自の名前
        空間を持つ異なるメールボックス保管の間での、曖昧さを取り除くことを可
        能にする。

           例えば USENET ニュースグループへのアクセスを提供する実装は、USENET
           ニュースグループ名前空間を他のメールボックスから分離するために、
           "#news" 名前空間を用いてもよい。こうして comp.mail.misc ニュースグ
           ループは "#news.comp.mail.misc" というメールボックス名を持ち、名前
           "comp.mail.misc" は別のオブジェクト (例えば、利用者の個人メールボッ
           クス) を指すことはありうる。

     (訳註: http://kame.zit.to/~obata/imap/rfc/rfc2060ja.txt より転載)

Gnus における IMAP の実装を保証する記述がこの文書には無い一方で、いくつ
かのサーバーは Gnus のメールボックスの名前の使い方では動作しないやり方
で名前空間接頭語 (namespace prefix) を使っています。

具体的には、ワシントン大学の IMAP サーバーは `#driver.mbx/read-mail' の
ようなメールボックス名を使っていて、それは CREATE と APPEND コマンドで
だけ有効です。メールボックスが作られた後 (またはメッセージがメールボッ
クスに追加された後) では、それは名前空間接頭語を付けずにアクセス、すな
わち `read-mail' されなければなりません。Gnus は利用者が CREATE と
APPEND コマンドだけで入力したメールボックス名を保証できないので、絶対に
名前空間接頭語が付いたメールボックス名を Gnus で使ってはいけません。

`#driver.*/' について、どのように接頭語を使えば良いかについてのさらなる
情報は、UoW IMAPD の文書を見て下さい。それらは強力な工具なので、どんな
効果があるかが確かな場合だけ使って下さい。



File: gnus-ja.info, Node: Debugging IMAP, Prev: A note on namespaces, Up: IMAP

IMAP のデバッグ
---------------

IMAP は NNTP や POP3 よりもっと複雑なプロトコルです。実装上のバグが無い
とは言い切れないので、私たちは、すぐにそれらを直すために最善を尽くしま
す。あなたが奇妙な振る舞いに出会ったとしたら、サーバーか Gnus のどちら
かにバグがある可能性があります。

あなたが一般的なネットワーク・プロトコルに精通しているならば、Gnus とサー
バーの間でやりとりされるプロトコル・ダンプを読むことによって、おそらく
いくつかの手掛かりを抽出することができるでしょう。精通していなくても、
プロトコル・ダンプを IMAP に関するバグ報告に含めれば、その問題の解決に
とって重要なデータで私たちを助けることになります。したがって Gnus の
IMAP バグを報告するときに、プロトコル・ダンプを含めることを強く奨励しま
す。

プロトコル・ダンプは、それを有効にしているとたくさんのデータを生成する
ので、ディフォルトでは無効になっています。有効にするには、以下のように
`imap-log' を設定して下さい:

     (setq imap-log t)

これはサーバーとのやりとりを何でも `imap.el' パッケージに記録させます。
その記録は `*imap-log*' というバッファーに格納されます。ときとして、
`BAD' という札が付けられるエラーメッセージを探して下さい。でも、バグを
提出するときは、すべてのデータを含めるようにして下さい。



File: gnus-ja.info, Node: Other Sources, Next: Combined Groups, Prev: IMAP, Up: Select Methods

その他のグループ源
==================

Gnus はただ単にニュースやメールを読む以上のことができます。以下に示す方
法によって、Gnus でディレクトリーやファイルを、あたかもニュースグループ
であるかのように閲覧することができるようになります。

* Menu:

* Directory Groups::            ディレクトリーをニュースグループのように読む
* Anything Groups::             Dired?  誰が dired なんて使うの?
* Document Groups::             個別のファイル群はグループの素
* SOUP::                        SOUP パケットを「オフライン」で読む
* Mail-To-News Gateways::       メールからニュースへのゲートウェイを通して記事を投稿する



File: gnus-ja.info, Node: Directory Groups, Next: Anything Groups, Prev: Other Sources, Up: Other Sources

ディレクトリーグループ
----------------------

たくさんの記事が個別のファイルとして入っているディレクトリーがあれば、
それをニュースグループとして扱うことができます。もちろん、ファイルは数
字のファイル名をもっていなければなりません。

素晴らしい Emacs のパッケージの中でも最も素晴らしい `ange-ftp' (とその
後継の `efs') について触れるのに、ここは良い機会でしょう。私が `nndir'
を書いたときは、これ (ディレクトリーを読むバックエンド) についてはあま
り考えていませんでした。とんでもないことだね。

`ange-ftp' はこの情況を劇的に変化させました。例えばディレクトリー名とし
て `ange-ftp' の様式で `/ftp.hpc.uh.edu:/pub/emacs/ding-list/' というファ
イル名をディレクトリー名として入力したとすると、`ange-ftp' あるいは
`efs' は実に「シナ」の向こうのディレクトリーをニュースグループとして読
めるようになるのです。おーい、分散ニュースだぞーっ!

     (訳注:「シナ」(原典 `sina') は China のことか?)

`nndir' は NOV ファイル群が存在すればそれらを利用します。

`nndir' は「読み出し専用」のバックエンドです--この選択方法では、記事の
削除や期限切れ消去を行なうことはできません。`nndir' が使えるものなら何
でも、`nnmh' あるいは `nnml' でも使うことができるので、もし読み出し専用
ではない `nndir' が必要だと思ったら、これらのどちらかの方法に切り替える
こともできます。



File: gnus-ja.info, Node: Anything Groups, Next: Document Groups, Prev: Directory Groups, Up: Other Sources

なんでもグループ
----------------

`nneething' は `nndir' バックエンド (単一のスプール風ディレクトリーを読
むバックエンド) のほんの少し先にあるもので、それはどんなディレクトリー
でもニュースグループに見せかけてしまいます。不思議ですが真実です。

`nneething' にディレクトリーを与えると、そのディレクトリーを走査して各
ファイルに記事番号を割り当てます。そのようなグループに入ったら、
`nneething' は Gnus が使える「ヘッダー」を作らなくてはなりません。つま
るところ Gnus はニュースリーダーなんです。忘れているかもしれないので念
のため。`nneething' はこれを二段階で処理します。最初に、対象となるそれ
ぞれのファイルを覗いてまわります。もしそのファイルが記事のように見えた
なら (すなわち最初の数行がヘッダーのように見えたら) それをヘッダーとし
て使います。もしそれがヘッダーの無いただの適当なファイル (例えば C のソー
スファイル) だったら、`nneething' はヘッダーを虚空からでっち上げます。
これはファイルの所有者、名前および日付を使い、それらの要素を元にできる
ことを何でもやります。

これはあなたにとってはすべて自動的に起こることで、あなたはニュースグルー
プにとても良く似た何かを見せられることになるでしょう。本当に寸分違わな
い、ニュースグループのようなものを。記事を選択すると、それはいつものよ
うに記事バッファーに表示されるでしょう。

ディレクトリーを表わしている行を選択すると、Gnus はいきなりあなたをこの
`nneething' グループのための新しい概略バッファーに連れて行くでしょう。
以下同様に、あなたがそうしたければ、この方法で全ディスクを駆け巡ること
ができます。ですが、Gnus は本当は dired ではないし、そのように意図され
たものでもないことは覚えておいて下さい。

ここでの動作には二つの全体的なモードがあります-- 一時モードと固定モード
です。一時的な操作を行なっているときは (すなわちグループバッファーで
`G D')、Gnus はどのファイルを読んだか、どのファイルが新しいか、などの情
報を憶えておきません。普通に `G m' で固定 `nneething' グループを作れば、
Gnus は記事番号とファイル名の対応表を憶えておくので、このグループを他の
グループと同様に扱うことができるようになります。固定 `nneething' グルー
プを活かすと、それが未読記事をいくつ含んでいるかを知らせてもらえる、等々
の利便があります。

いくつかの変数があります:

`nneething-map-file-directory'
     すべての固定 `nneething' グループの対応表が、このディレクトリーに
     格納されます。このディフォルトは `~/.nneething/' です。

`nneething-exclude-files'
     この正規表現に合致するファイルはすべて無視されます。自動保存ファイ
     ルなどを除外するのに便利に使えます。そしてそれがまさにディフォルト
     で行なわれる動作です。

`nneething-include-files'
     どのファイルをグループに含めるかを示す正規表現です。この変数が
     `nil' でなければ、この正規表現に合致するファイルだけが含まれます。

`nneething-map-file'
     対応表ファイルの名前です。



File: gnus-ja.info, Node: Document Groups, Next: SOUP, Prev: Anything Groups, Up: Other Sources

文書グループ
------------

`nndoc' は単一のファイルをニュースグループとして読むことをできるように
する、ちょっと気の利いたやつです。複数のファイルの種別がサポートされて
います:

`babyl'
     Babyl (Rmail) 形式のメールボックス。

`mbox'
     標準 Unix mbox ファイル。

`mmdf'
     MMDF 形式のメールボックス。

`news'
     一つのファイルにまとめられた複数のニュース記事。

`rnews'
     rnews のバッチ転送形式。

`nsmail'
     Netscape のメールボックス。

`mime-parts'
     MIME のマルチパートのメッセージ。

`standard-digest'
     標準 (RFC1153) のまとめ送り形式。

`mime-digest'
     MIME のまとめ送りメッセージ。

`lanl-gov-announce'
     ロスアラモス国立研究所 (LANL) Gov Announce からの発表メッセージ。

`rfc822-forward'
     RFC822 で転送されたメッセージ。

`outlook'
     Outlook のメールボックス。

`oe-dbx'
     Outlook Express の dbx メールボックス。

`exim-bounce'
     Exim MTA から跳ね返されたメッセージ。

`forward'
     非公式の規則で転送されたメッセージ。

`rfc934'
     RFC934 形式で転送されたメッセージ。

`mailman'
     mailman のまとめ送り。

`clari-briefs'
     Clarinet のニュース項目を要約したまとめ送り。

`slack-digest'
     非標準まとめ送り形式--だいたいのものを扱えるが、下手。

`mail-in-mail'
     最後の手段。

特別な「ファイル種別」である `guess' を使うこともできます。これを使うと、
見ているファイルの種別が何かを `nndoc' が推測しようとします。また、
`digest' というファイル種別は、そのファイルがどのまとめ送り形式かを
`nndoc' に推測させます。

`nndoc' はファイルを書き換えようとしたり、余分なヘッダーを挿入しようと
したりはしません--単に、ファイルをそのグループを作る元として使えるよう
にする、というようなことです。それだけのことです。

保存された古い記事を持っていて、それを新しくてかっこいい Gnus のメール
バックエンドに追加したいなら、おそらく `nndoc' が助けになるはずです。例
えば新しい `nnml' グループに振り分けたいメールが、今は古い `RMAIL' ファ
イルにメールがあるとしましょう。そういう場合は、そのファイルを `nndoc'
を使って開き (グループバッファーで `G f' 命令 (*Note Foreign Groups::)
を使いましょう)、バッファー内の全記事にプロセス印を (例えば `M P b' で)
付けてから、それらが `nnml' グループ群に振り分けられるように (`B r' 命
令を使って) 再スプールして下さい。すべてがうまくいけば、`RMAIL' ファイ
ル内のすべてのメールは、たくさんの `nnml' ディレクトリーの中にも格納さ
れます。そうしたら、あの厄介な `RMAIL' を削除してしまっても良いでしょう。
あなたにガッツがあれば!

仮想サーバー変数:

`nndoc-article-type'
     これは `mbox', `babyl', `digest', `news', `rnews', `mmdf',
     `forward', `rfc934', `rfc822-forward', `mime-parts',
     `standard-digest', `slack-digest', `clari-briefs', `nsmail',
     `outlook', `oe-dbx', `mailman' および `mail-in-mail' または
     `guess' のいずれかでなくてはなりません。

`nndoc-post-type'
     この変数は、そのグループをニュースグループとみなすかメールグループ
     とみなすかを Gnus に伝えます。二つの有効な値は `mail' (ディフォル
     ト) および `news' です。

* Menu:

* Document Server Internals::   あなた独自の文書種別を追加する方法



File: gnus-ja.info, Node: Document Server Internals, Prev: Document Groups, Up: Document Groups

文書サーバーの内部
..................

`nndoc' で認識される新しい文書の種別を追加することは難しくありません。
その文書がどのように見えるかの定義を仕上げ、その文書種別を認識するため
の述語関数を書いて、`nndoc' を手なずけるだけで良いのです。

まず、これが文書の種別の定義の例です:

     (mmdf
      (article-begin .  "^\^A\^A\^A\^A\n")
      (body-end .  "^\^A\^A\^A\^A\n"))

この定義は種別を示すためのユニークな名前 ("name") と、それに続く仮想的
な変数名およびその設定値の単純な連なりからなります。以下が使うことがで
きる変数です--変数の数に圧倒されないで下さい。ほとんどの文書の種別は、
ごくわずかな設定で定義することができます:

`first-article'
     これが設定されていると、`nndoc' はこの正規表現に合致する何かが見つ
     かるまで、すべてのテキストを読み飛ばします。それより前のすべてのテ
     キストは完全に無視されます。

`article-begin'
     この設定は、すべての文書の種別の定義に必ず存在しなければなりません。
     それぞれの記事の始まりがどのように見えるかを指定する正規表現です。
     単純な正規表現では対処できないもっと複雑なことをしたい場合は、これ
     の代わりに `article-begin-function' を使うことができます。

`article-begin-function'
     これを設定する場合は、それぞれの記事の開始位置にポイントを移動させ
     る関数を指定して下さい。これは `article-begin' より優先されます。

`head-begin'
     これを設定する場合は、記事のヘッダーの始まりに合致する正規表現を指
     定して下さい。単純な正規表現では対処できないもっと複雑なことをした
     い場合は、これの代わりに `head-begin-function' を使うことができま
     す。

`head-begin-function'
     これを設定する場合は、記事のヘッダーの開始位置にポイントを移動させ
     る関数を指定して下さい。これは `head-begin' より優先されます。

`head-end'
     これを設定する場合は、記事のヘッダーの最後に合致する正規表現を指定
     して下さい。ディフォルトは `^$'、つまり空行です。

`body-begin'
     これを設定する場合は、記事のボディーの始まりに合致する正規表現を指
     定して下さい。ディフォルトは `^\n' です。単純な正規表現では対処で
     きないもっと複雑なことをしたい場合は、これの代わりに
     `body-begin-function' を使うことができます。

`body-begin-function'
     これを設定する場合は、記事のボディーの開始位置にポイントを移動させ
     る関数を指定して下さい。これは `body-begin' より優先されます。

`body-end'
     これを設定する場合は、記事のボディーの最後に合致する正規表現を指定
     して下さい。単純な正規表現では対処できないもっと複雑なことをしたい
     場合は、これの代わりに `body-end-function' を使うことができます。

`body-end-function'
     これを設定する場合は、記事のボディーの最後の位置にポイントを移動さ
     せる関数を指定して下さい。これは `body-end' より優先されます。

`file-begin'
     これを設定する場合は、ファイルの始まりに合致する正規表現を指定して
     下さい。それより前のすべてのテキストは完全に無視されます。

`file-end'
     これを設定する場合は、ファイルの最後に合致する正規表現を指定して下
     さい。それより後ろのすべてのテキストは完全に無視されます。

このように `nndoc' はこれらの変数を使って、文書ファイルをそれぞれヘッダー
とボディーを持った記事の連なりとして切り分けることができます。しかし、
すべての文書の種別がこのようなニュース風になっているわけではないので、
さらにヘッダーやボディーを Gnus の趣味に合うように変形させる変数が、い
くらか必要になります。

`prepare-body-function'
     これに関数を設定しておくと、記事が要求されたときに呼び出されます。
     これはボディーの開始位置のポイントを引数として呼び出され、文書にい
     くつかのエンコードされた内容物のパートがある場合に有用です。

`article-transform-function'
     これに関数を設定しておくと、記事が要求されたときに呼び出されます。
     これは記事のヘッダーとボディーの両方に、より広範囲な変形を行なうた
     めに使われるものです。

`generate-head-function'
     これに関数を設定しておくと、Gnus が理解できるヘッダーを生成するた
     めに呼び出されます。これは記事番号をパラメーターとして呼び出され、
     その記事のための良質なヘッダーを生成することを求められます。すべて
     の記事のヘッダーが要求されるときに呼び出されます。

`generate-article-function'
     これに関数を設定しておくと、Gnus が理解できる完全な記事を生成する
     ために呼び出されます。これはすべての記事のヘッダーが要求されるとき
     に、記事番号をパラメーターとして呼び出されます。

`dissection-function'
     これに関数を設定しておくと、それだけを使って文書ファイルを記事に切り分け
     るために呼び出されます。これは `first-article',
     `article-begin', `article-begin-function', `head-begin',
     `head-begin-function', `head-end', `body-begin',
     `body-begin-function', `body-end', `body-end-function',
     `file-begin' および `file-end' より優先されます。

私が出会った中で最も複雑な例を見て下さい。標準まとめ送り形式のためのも
のです:

     (standard-digest
      (first-article . ,(concat "^" (make-string 70 ?-) "\n\n+"))
      (article-begin . ,(concat "\n\n" (make-string 30 ?-) "\n\n+"))
      (prepare-body-function . nndoc-unquote-dashes)
      (body-end-function . nndoc-digest-body-end)
      (head-end . "^ ?$")
      (body-begin . "^ ?\n")
      (file-end . "^End of .*digest.*[0-9].*\n\\*\\*\\|^End of.*Digest *$")
      (subtype digest guess))

70 文字のダッシュ (`-') の行より前はすべて無視されるというのが分かりま
すね。また `^End of' で始まる行より後ろもすべて無視されます。各記事は
30 文字のダッシュの行で始まり、ヘッダーとボディーの区切りの行は一個のス
ペースを含むことがあり、そしてボディーはそれが渡される前に
`nndoc-unquote-dashes' を通されます。

あなた独自の文書のための定義を `nndoc' で使えるようにするには、
`nndoc-add-type' 関数を使って下さい。これは二つのパラメーターをとりま
す-- 一つ目は定義そのもので、二つ目の (省略可能な) パラメーターは、この
定義を文書の種別を定義する連想リストのどこに置くかを指定します。この連
想リストは順番に走査され、与えられた種別 TYPE に対して
`nndoc-TYPE-type-p' が呼び出されます。したがって、例えば `mmdf' という
種別であるかどうかを調べるためには `nndoc-mmdf-type-p' が呼び出され、他
の種別の場合も同様です。これらの種別述語関数は、文書がその種別でない場
合は `nil' を返し、その種別である場合は `t' を返し、その種別かもしれな
いときは数値を返さなくてはなりません。高い数値は高い可能性を意味し、低
い数値は低い可能性を意味します。`0' は正しい値の中でもっとも低い数値で
す。



File: gnus-ja.info, Node: SOUP, Next: Mail-To-News Gateways, Prev: Document Groups, Up: Other Sources

SOUP
----

PC の世界の人々はよく、「オフライン」ニュースリーダーについて話をしてい
ます。それらはリーダーとニュース配送を合体させた、奇っ怪なものどもです。
内蔵モデムプログラム付きでね。うげーっ!

もちろん、我らが Unix キチガイの人間ども (原典: Unix Weenie types of
human beans) は `uucp' だとか `nntpd' のようなものを使い、神の領域たる
メール、ニュースの配送を正しく設定するのです。そして…、僕たちはただ普
通のニュースリーダーを使います。

しかし、あなたがとても遅いモデムを持っていてこれらを正しく設定すること
に興味が無ければ、ほんの少し脳みそに楽をさせる方をするのも時には便利で
しょう。

SOUP というファイル形式は、ニュースとメールをサーバーから家のマシンへと
転送し、それをまた戻すために開発されました。ちょっと面倒くさいかもしれ
ませんがね。

はじめにいくつか用語を:

"server"
     これは外の世界に繋がっていて、あなたがニュースやメールを送受信する
     マシンです。

"home machine"
     これはあなたが実際に読んだり返事を書いたりしたいマシンです。これは
     普通、他の世界といかなる形でも接続されていません。

"packet"
     メッセージや命令を含んでいる何か。パケットには二種類あります。

     "message packets"
          これはサーバーで作られるパケットで、普通はあなたが読むための
          たくさんのメッセージを含んでいます。これらはディフォルトでは
          `SoupoutX.tgz' という名前です。ここで X は数字です。

     "response packets"
          このパケットは自宅マシンで作られるパケットで、普通はあなたが
          書いた返事を含んでいます。これらはディフォルトでは
          `SoupinX.tgz' という名前です。ここで X は数字です。

  1. まずサーバーにログインして SOUP パケットを作りましょう。SOUP 専用
     に供されたもの (`awk' プログラムのようなもの) を使っても良いし、
     Gnus の SOUP 命令を使ってパケットを作っても良いです (`O s' や `G
     s b' に続いて `G s p') (*Note SOUP Commands::)。

  2. パケットを自宅に転送しましょう。電車に、船に、自動車に、あるいはモ
     デムに、でも結構です。

  3. パケットをあなたのホームディレクトリーに置きましょう。

  4. 基本サーバーか二次サーバーとして `nnsoup' バックエンドを使うように
     して、あなたの自宅のマシンで Gnus に火を入れましょう。

  5. ニュース記事やメールを読んで、必要なものに返事やフォロー記事を書き
     ましょう (*Note SOUP Replies::)。

  6. これらの返事を SOUP パケットにまとめるために、`G s r' 命令を実行し
     ましょう。

  7. このパケットをサーバーに転送しましょう。

  8. このパケットを Gnus の `G s s' 命令で送信しましょう。

  9. あとはこれを死ぬまで繰り返しましょう。

というわけで、読むために `nnsoup' を使い、それらの SOUP パケットをまと
めて送り出すためには Gnus を使うという分業システムが手に入りました。

* Menu:

* SOUP Commands::               SOUP パケットを作って送り出す命令
* SOUP Groups::                 SOUP パケットを読むためのバックエンド
* SOUP Replies::                メールとニュースを `nnsoup' に引き継がせる方法



File: gnus-ja.info, Node: SOUP Commands, Next: SOUP Groups, Prev: SOUP, Up: SOUP

SOUP 命令
.........

これらは SOUP パケットを作成して操作するための命令です。

`G s b'
     現在のグループのすべての未読記事をパケットにまとめます
     (`gnus-group-brew-soup')。このコマンドはプロセス/接頭引数の習慣に
     従います。

`G s w'
     すべての SOUP データファイルを保存します (`gnus-soup-save-areas')。

`G s s'
     返信パケットからすべての返信を送出します
     (`gnus-soup-send-replies')。

`G s p'
     すべてのファイルを SOUP パケットにまとめます
     (`gnus-soup-pack-packet')。

`G s r'
     すべての返信を返信パケットにまとめます (`nnsoup-pack-replies')。

`O s'
     この概略モード命令は、現在の記事を SOUP パケットに追加します
     (`gnus-soup-add-article')。これはプロセス/接頭引数の習慣に従います
     (*Note Process/Prefix::)。

Gnus がこれらすべてのものをどこに置くかをカスタマイズするための、いくつ
かの変数があります。

`gnus-soup-directory'
     SOUP パケットの作成中に Gnus が中間ファイルを保存するディレクトリー
     です。ディフォルトは `~/SoupBrew/' です。

`gnus-soup-replies-directory'
     返信パケットの送信中に Gnus が使用する一時ディレクトリーです。
     `~/SoupBrew/SoupReplies/' がディフォルトです。

`gnus-soup-prefix-file'
     Gnus が最後に使った接頭語を保存するファイル名です。ディフォルトは
     `gnus-prefix' です。

`gnus-soup-packer'
     SOUP パケットをまとめる命令を作るためのフォーマット文字列です。ディ
     フォルトは `tar cf - %s | gzip > $HOME/Soupout%d.tgz' です。

`gnus-soup-unpacker'
     SOUP パケットを取り出す命令を作るためのフォーマット文字列です。ディ
     フォルトは `gunzip -c %s | tar xvf -' です。

`gnus-soup-packet-directory'
     Gnus が返信パケットを探す場所です。ディフォルトは `~/' です。

`gnus-soup-packet-regexp'
     `gnus-soup-packet-directory' にある SOUP パケットに合致する正規表
     現です。



File: gnus-ja.info, Node: SOUP Groups, Next: SOUP Replies, Prev: SOUP Commands, Up: SOUP

SOUP グループ
.............

`nnsoup' は SOUP パケットを読むためのバックエンドです。これは入ってきた
パケットを読み込み、それを取り出し、あなたの都合が良いときにそこで読む
ディレクトリーに展開します。

これらはこの振る舞いをカスタマイズできる変数です:

`nnsoup-tmp-directory'
     `nnsoup' が SOUP パケットを展開するとき、このディレクトリー内で行
     ないます (ディフォルトは `/tmp/')。

`nnsoup-directory'
     次に `nnsoup' は、それぞれのメッセージと索引ファイルをこのディレク
     トリーに移動させます。ディフォルトは `~/SOUP/' です。

`nnsoup-replies-directory'
     すべての返信は、返信パケットにまとめられる前にこのディレクトリーに
     格納されます。ディフォルトは `~/SOUP/replies/' です。

`nnsoup-replies-format-type'
     返信パケットの SOUP 形式です。ディフォルトは `?n' (rnews) で、この
     変数には触るべきではないと私は思います。たぶん文書に明記すべきでさ
     えなかったね。しまった! もう手遅れか。

`nnsoup-replies-index-type'
     返信パケットの索引の種類です。ディフォルトは `?n' で、意味は「なし」
     です。これもいじるんじゃないよ!

`nnsoup-active-file'
     `nnsoup' がたくさんの情報を格納する場所です。これは `nntp' で言う
     ところの「アクティブファイル」ではなく、Emacs Lisp のファイルです。
     このファイルを無くしてしまったり、何か壊してしまったら、あなたは死
     にます。ディフォルトは `~/SOUP/active' です。

`nnsoup-packer'
     返信 SOUP パケットをまとめる命令を作るためのフォーマット文字列です。
     ディフォルトは `tar cf - %s | gzip > $HOME/Soupin%d.tgz' です。

`nnsoup-unpacker'
     入ってくる SOUP パケットを展開するための命令文字列の形式です。ディ
     フォルトは `gunzip -c %s | tar xvf -' です。

`nnsoup-packet-directory'
     入ってきたパケットを `nnsoup' が探す場所です。ディフォルトは `~/'
     です。

`nnsoup-packet-regexp'
     入ってきた SOUP パケットに合致する正規表現です。ディフォルトは
     `Soupout' です。

`nnsoup-always-save'
     `nil' 以外であれば、メッセージを一通投稿する度にその返信バッファー
     を保存します。



File: gnus-ja.info, Node: SOUP Replies, Prev: SOUP Groups, Up: SOUP

SOUP 返信
.........

単に `nnsoup' を使うだけで、自動的に送信したニュース記事やメールが
SOUP 返信パケットに納まるわけではありません。そうするためには、もうちょっ
と働かなくてはなりません。

`nnsoup-set-variables' 命令は、あなたのすべてのフォローアップ記事と返信
が SOUP システムの処理に渡るように、適切な変数を設定します。

具体的には、これが実際に行なわれることです。

     (setq message-send-news-function 'nnsoup-request-post)
     (setq message-send-mail-function 'nnsoup-request-mail)

本当にそれだけです。ニュース記事だけを SOUP システムに処理させたければ、
最初の行だけを使って下さい。メールだけを SOUP させたいなら、二番目を使っ
て下さい。



File: gnus-ja.info, Node: Mail-To-News Gateways, Prev: SOUP, Up: Other Sources

メールからニュースへのゲートウェイ
----------------------------------

あなたのローカルの `nntp' サーバーが何らかの理由で投稿を許可してい
なくても、数ある mail-to-news ゲートウェイを使って投稿することができます。
`nngateway' バックエンドはこのインターフェースを提供します。

このバックエンドからは何も読み出せないことに注意して下さい--これは投稿
するためだけに使われます。

以下はサーバー変数です。

`nngateway-address'
     これが mail-to-news ゲートウェイのアドレスです。

`nngateway-header-transformation'
     ニュースヘッダーは、mail-to-news ゲートウェイが受け付けられるよう
     に、何か奇妙なやり方で変形しておかなければならないことがしばしばで
     す。この変数はどんな変形処理が呼び出されるべきかを指示するもので、
     ディフォルトでは `nngateway-simple-header-transformation' になりま
     す。その関数は変形しようとするヘッダーの領域だけに狭められたバッ
     ファーで、ゲートウェイのアドレスを一つの引数として呼び出されます。

     ディフォルトの関数は、単に `Newsgroups' ヘッダーとゲートウェイのア
     ドレスに基づいた新しい `To' ヘッダーを挿入します。例えば、以下のよ
     うな `Newsgroups' ヘッダーを持つ記事には、

          Newsgroups: alt.religion.emacs

     次のような `To' ヘッダーが挿入されます。

          To: alt-religion-emacs@GATEWAY

     以下の関数が用意されています:

     `nngateway-simple-header-transformation'
          NEWSGROUP@`nngateway-address' のような `To' ヘッダーを作りま
          す。

     `nngateway-mail2news-header-transformation'
          `nngateway-address' のような `To' ヘッダーを作ります。

例です:

     (setq gnus-post-method
           '(nngateway
             "mail2news@replay.com"
             (nngateway-header-transformation
              nngateway-mail2news-header-transformation)))

したがってこれを使うには、単にこんな風にすれば良いでしょう:

     (setq gnus-post-method '(nngateway "GATEWAY.ADDRESS"))



File: gnus-ja.info, Node: Combined Groups, Next: Email Based Diary, Prev: Other Sources, Up: Select Methods

合併グループ
============

Gnus は、すべてのグループの種類を混合して、大きなグループに合併させるこ
とができます。

* Menu:

* Virtual Groups::              たくさんのグループの記事を合併する
* Kibozed Groups::              ニューススプールの中からの記事を検索する



File: gnus-ja.info, Node: Virtual Groups, Next: Kibozed Groups, Prev: Combined Groups, Up: Combined Groups

仮想グループ
------------

"nnvirtual" グループは、実は複数のグループを寄せ集めたものに過ぎません。

例えば、小さなグループをたくさん読むのが嫌になってきたら、それらを一つ
の大きなグループに入れて、嫌になるくらい巨大で手に負えないグループを読
むことができます。これはコンピューティングの醍醐味だね!

選択方法として `nnvirtual' を指定して下さい。アドレスは、それを構成する
グループに合致する正規表現です。

仮想グループで付けられたすべての印は、その構成要素のグループの記事にくっ
つけられます。つまり、仮想グループで記事に可視記事の印を付けると、その
記事はもともとの構成要素のグループでも可視記事になります。(そして逆も成
り立ちます--構成要素のグループで付けた印は、仮想グループでも表示されま
す。)  空の仮想グループを作るには、グループバッファーで `G V'
(`gnus-group-make-empty-virtual') を実行し、`M-e'
(`gnus-group-edit-group-method') で選択方法の正規表現を編集して下さい。

これが、Andrea Dworkin に関するすべてのニュースグループを、一つの巨大で
シアワセなニュースグループにまとめる `nnvirtual' 選択方法の例です:

     (nnvirtual "^alt\\.fan\\.andrea-dworkin$\\|^rec\\.dworkin.*")

構成要素のグループは基本グループでも外部グループでも構いません。すべて
問題無く動くはずですが、もしあなたのコンピューターが爆発でもしてしまっ
たら、それはたぶん私が悪いんでしょうね。

利用者が (訳注: 記事を投稿する人たちが) Distribution ヘッダーを使って配
布範囲を制限している場合に、同じグループを複数のサーバーから寄せ集める
ことは、本当にうまい考えかもしれません。`soc.motss' を日本のサーバーと
ノルウェーのサーバーの両方から読みたければ、グループの正規表現として以
下のものを使うことができるでしょう:

     "^nntp\\+server\\.jp:soc\\.motss$\\|^nntp\\+server\\.no:soc\\.motss$"

(でもちょっと注意。`G m' でグループを作成するときは、バックスラッシュを
二重に付けてはいけません。そして文字列の最初と最後の引用記号 (`"..."')
も取り払って下さい。)

これはまあ、すらすらと動作するはずです--両方のグループのすべての記事は
一つのグループに入り、重複も無いはずです。スレッド表示 (とその他) も通
常通り動作するでしょうけれど、記事の並ぶ順序には問題があるかもしれませ
ん。日付による並べ替えが、ここでは一つの選択肢になるかもしれません
(*Note Selecting a Group::)。

なお、ここで一つだけ制限があります--仮想グループに含まれるグループはす
べて生きている (すなわち購読または非購読の) 状態でなくてはなりません。
削除された (killed) グループあるいはゾンビのグループは `nnvirtual' グルー
プを構成するグループになることはできません。

`nnvirtual-always-rescan' 変数が `nil' でなければ (それ、つまり
非-`nil' がディフォルト)、`nnvirtual' は仮想グループに入ったときに常に
未読記事を走査します。この変数が `nil' になっていて、仮想グループを作っ
た後に構成要素のグループで記事を読んだ場合は、その構成要素のグループで
読まれた記事は、仮想グループに現れてしまうでしょう。共通な構成要素のグ
ループを持つ二つの仮想グループがある場合にも、この影響があります。そう
いう場合には、この変数を `t' にするべきです。さもなければ、仮想グループ
に入る度に、毎回その仮想グループの上で `M-g' を叩いても良いでしょう--こ
れにはほぼ同様の効果があります。

`nnvirtual' はメールとニュースの両方のグループを構成要素のグループにす
ることができます。`nnvirtual' グループの記事に返答するときは、
`nnvirtual' は記事の出所の構成要素のグループのバックエンドに、それが
ニュースのバックエンドであるかメールのバックエンドであるかを尋ねなけれ
ばなりません。しかし `^' をしたときには、普通は構成要素のバックエンドが
これを知るための確実な方法が無いので、その場合 `nnvirtual' は、Gnus に
記事はニュースではないバックエンドからやって来たと告げます。(単にそれが
安全な側なので。)

これらの場合にメッセージバッファーで `C-c C-n' を行なうと、応答しようと
している記事から `Newsgroups' 行を抜き出して挿入します。

`nnvirtual' グループは、記事と印以外は構成要素のグループから継承しませ
ん--例えばグループパラメーターもそうなのですが、それらは継承されません。



File: gnus-ja.info, Node: Kibozed Groups, Prev: Virtual Groups, Up: Combined Groups

Kiboze グループ
---------------

OED (オックスフォード英語大辞典) によれば、"Kiboze" する、とは、「ニュー
ススプール全体 (あるいはその一部) を grep すること」と定義されています。
`nnkiboze' はこれをあなたのために行なってくれるバックエンドです。嬉しい
なあ! これでどんな NNTP サーバーでも、要りもしない検索で止まってしまう
まで酷使することができるぞ。ああ、なんて幸せなんだ!

kiboze グループを作るには、グループバッファーで `G k' 命令を使って下さ
い。

`nnkiboze' 方法におけるアドレス欄は、`nnvirtual' と同様に、`nnkiboze'
に「含めたい」グループに合致する正規表現です。ここが `nnkiboze' と
`nnvirtual' バックエンドの最も類似している点です。

構成要素のグループを列挙するこの正規表現に加えて、`nnkiboze' グループに
は、グループ内のどの記事を含めるかを決めるスコアファイルがなくてはなり
ません (*Note Scoring::)。

あなたが欲しい `nnkiboze' グループを作成した後で、`M-x
nnkiboze-generate-groups' を実行しなければなりません。この命令は時間が
かかります。とってもかかります。すごく、すごーくかかります。Gnus はその
`nnkiboze' グループの一部となるべき記事があるかどうかを調べるために、全
部の構成要素のグループの全部の記事からヘッダーを取得し、それらすべてに
対してスコア処理を実行しなくてはならないのです。

限定した正規表現を使って、構成要素のグループの数を抑えて下さい。さもな
いと、システム管理者はあなたに閉口してしまい、NNTP サーバーからあなたを
追い出して二度と入れないようにしてしまうかもしれません。もっと変なこと
だって起こりました。

`nnkiboze' を構成するグループは生きている必要はありません--死んでいても
良いし、外部グループでも構いません。無制限です。

`nnkiboze' グループを生成すると、二つのファイルが `nnkiboze-directory'
に書き込まれます。そのディフォルトは `~/News/kiboze/' です。一方はその
グループのすべての記事の NOV ヘッダー行を含み、もう一方は構成要素の記事
を見つけるためにどのグループが検索されたかの情報を格納する、`.newsrc'
の補助ファイルです。

既読になった `nnkiboze' グループの記事は、それらの記事の NOV 行が NOV
ファイルから削除されます。



