Info file: hurd-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `hurd-ja.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.




INFO-DIR-SECTION Kernel
START-INFO-DIR-ENTRY
* Hurd: (hurd).                 Using and programming the Hurd kernel servers.
END-INFO-DIR-ENTRY


Copyright (C) 1994-1998 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.


Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.





File: hurd-ja.info, Node: Top, Next: Introduction, Prev: (dir), Up: (dir)

The GNU Hurd
************

This file documents the GNU Hurd kernel component.  This edition of
the documentation was last updated for version 0.2 of the Hurd.

* Menu:

* Introduction::                このマニュアルの使い方。
* Installing::                  Setting up Hurd software on your computer.
* Bootstrap::                   Turning a computer into a Hurd machine.
* Foundations::                 Hurdを通して使われている基本的な特徴。
* Input and Output::            I/Oチャネルの読み書き。
* Files::                       Regular file and directory nodes.
* Special Files::               Files with unusual Unix-compatible semantics.
* Stores::                      Generalized units of storage.
* Stored Filesystems::          物理的なメディアのためのファイルシステム。
* Twisted Filesystems::         既存データに対する新しい階層の提供。
* Distributed Filesystems::     異なるマシン間でのファイル共有。
* Networking::                  Interconnecting with other machines.
* Terminal Handling::           Helping people interact with the Hurd.
* Running Programs::            Program execution and process management.
* Authentication::              Verifying user and server privileges.
* Index::                       Guide to concepts, functions, and files.

 -- The Detailed Node Listing ---

Introduction

* Audience::                    このマニュアルが書かれる対象の人々。
* Features::                    Hurdをインストールし使用する理由。
* Overview::                    Hurdの基本的なアーキテクチャ。
* History::                     Hurdがいかにして生まれたか。
* Copying::                     Hurdはフリー・ソフトウェアである。

Installing

* Binary Distributions::        Obtaining ready-to-run GNU distributions.
* Cross-Compiling::             Building GNU from its source code.

Bootstrap

* Bootloader::                  Starting the microkernel, or other OSes.
* Server Bootstrap::            Waking up the Hurd.
* Shutdown::                    Letting the Hurd get some rest.

Server Bootstrap

* Invoking serverboot::         Starting a set of interdependent servers.
* Boot Scripts::                Describing server bootstrap relationships.
* Invoking boot::               Running a Hurd under another Hurd.

Foundations

* Threads Library::             あらゆるHurdサーバとライブラリは
                                マルチスレッド化されている。
* Microkernel Object Library::  マイクロカーネル・オブジェクト・モデル(MOM)。
* Ports Library::               サーバのport受信権の管理。
* Integer Hash Library::        整数を鍵としたハッシュ表。
* Misc Library::                GNU Cライブラリにすぐに入るもの。
* Bug Address Library::         Hurdのバグを報告する場所。

Ports Library

* Buckets and Classes::         port編成の基本単位。
* Port Rights::                 port権の`libports'との間での移動。
* Port Metadata::               port関連の情報の管理。
* Port References::             漏曳や欠失に対する保護。
* RPC Management::              RPC操作のロックと割り込み。

Input and Output

* Iohelp Library::              I/Oの認証とロックの管理。
* Pager Library::               マルチスレッド化された外部ページャの実装。
* I/O Interface::               RPCに基く入出力チャネル。

Iohelp Library

* I/O Users::                   ユーザ認証の管理。
* Conch Management::            非難された共有I/Oの実装。

Pager Library

* Pager Management::            外部ページャへの高水準なインターフェース。
* Pager Callbacks::             ユーザが定義しなければならない関数。

I/O Interface

* I/O Object Ports::            I/Oオブジェクトへのポートの働き方。
* Simple Operations::           read、writeやseek。
* Open Modes::                  操作の一部に影響する状態ビット。
* Asynchronous I/O::            I/Oが可能な時の通知のされ方。
* Information Queries::         `io_stat'と`io_server_version'
                                  の実装法。
* Mapped Data::                 I/Oオブジェクトのデータを参照するメモリ・
                                  オブジェクトの入手。

Files

* Translators::                 Extending the Hurd filesystem hierarchy.
* Trivfs Library::              Implementing single-file translators.
* Fshelp Library::              Miscellaneous generic filesystem routines.
* File Interface::              File ports implement the file interface.
* Filesystem Interface::        Translator control interface.

Translators

* Invoking settrans::           Declaring how a node should be translated.
* Invoking showtrans::          Displaying how nodes are translated.
* Invoking mount::              Unix-compatible active filesystem translators.
* Invoking fsysopts::           Modifying translation parameters at runtime.

Trivfs Library

* Trivfs Startup::              Writing a simple trivfs-based translator.
* Trivfs Callbacks::            Mandatory user-defined trivfs functions.
* Trivfs Options::              Optional user-defined trivfs functions.
* Trivfs Ports::                Managing control and protid ports.

Fshelp Library

* Passive Translator Linkage::  Invoking passive translators.
* Active Translator Linkage::   Managing active translators.
* Fshelp Locking::              Implementing file locking.
* Fshelp Permissions::          Standard file access permission policies.
* Fshelp Misc::                 Useful standalone routines.

File Interface

* File Overview::               Basic concepts for the file interface.
* Changing Status::             Changing the owner (etc.) of a file.
* Program Execution::           Executing files.
* File Locking::                Implementing the `flock' call.
* File Frobbing::               Other active calls on files.
* Opening Files::               Looking up files in directories.
* Modifying Directories::       Creating and deleting nodes.
* Notifications::               File and directory change callbacks.
* File Translators::            How to set and get translators.

Stores

* Store Library::               An abstract interface to storage systems.

Store Library

* Store Arguments::             Parsing store command-line arguments.
* Store Management::            Creating and manipulating stores.
* Store I/O::                   Reading and writing data to stores.
* Store Classes::               Ready-to-use storage backends.
* Store RPC Encoding::          Transferring store descriptors via RPC.

Stored Filesystems

* Repairing Filesystems::       軽いファイルシステム・クラッシュからの回復。
* Linux Extended 2 FS::         ポピュラーなLinuxファイルシステム・フォーマット。
* BSD Unix FS::                 BSD Unix 4.xのFast File System。
* ISO-9660 CD-ROM FS::          標準的なCD-ROMフォーマット。
* Diskfs Library::              新しいファイルシステム・サーバの実装。

Diskfs Library

* Diskfs Startup::              stored（FIXME-J:ストアード？）ファイルシステムの初期化。
* Diskfs Arguments::            コマンドライン引数の解析。
* Diskfs Globals::              グローバルな振る舞いの変更。
* Diskfs Node Management::      割り当て、リファレンス・カウンティング、I/O、
                                  キャッシング、その他のディスク・ノード・ルーチン。
* Diskfs Callbacks::            必須のユーザ定義diskfs関数。
* Diskfs Options::              任意選択のユーザ定義diskfs関数。
* Diskfs Internals::            diskfsの細部の再実装。

Distributed Filesystems

* File Transfer Protocol::      FTPベースの分散ファイルシステム。
* Network File System::         SunのNFS: 出来は悪いが、よく使われているファイルシステム。

File Transfer Protocol

* FTP Connection Library::      Managing remote FTP server connections.

Networking

* Socket Interface::            Network communication I/O protocol.

Authentication

* Auth Interface::              Auth ports implement the auth interface.

Auth Interface

* Auth Protocol::               Bidirectional authentication.






File: hurd-ja.info, Node: Introduction, Next: Installing, Prev: Top, Up: Top

導入
****

GNU Hurd (1) (*Note Introduction-Footnotes::)はGNUプロジェクトがUnixカー
ネルを置き換えるものである。HurdはMachマイクロカーネルの上で動作するサー
バの集まりであり、通常Unixカーネルや(Linuxのような)似たようなカーネル
によって実装されている、ファイル・システム、ネットワーク・プロトコル、
ファイル・アクセス制御やその他の機能を実装している。

* Menu:

* Audience::                    このマニュアルが書かれる対象の人々。
* Features::                    Hurdをインストールし使用する理由。
* Overview::                    Hurdの基本的なアーキテクチャ。
* History::                     Hurdがいかにして生まれたか。
* Copying::                     Hurdはフリー・ソフトウェアである。



File: hurd-ja.info  Node: Introduction-Footnotes, Up: Introduction

(1) "Hurd"という名前は、"Hird of Unix-Replacing Daemons"を表す。
"Hird"という名前は、"Hurd of Interfaces Representing Depth"を表す。



File: hurd-ja.info, Node: Audience, Next: Features, Prev: Introduction, Up: Introduction

読者
====

このマニュアルはHurdを使ったり、管理したり、プログラミングしたりするこ
とに興味を持っているすべての人に役立つようにもくろまれている。

もしあなたがエンド・ユーザで、Hurdを走らせるための助けを探しているなら、
このマニュアルの最初の数章でHurdワークステーションをインストールし、開始
し、そしてシャットダウンするための基本的な部分を記述している。もし特定の
プログラムの助けが必要なら、このマニュアルを使う最善の方法は、索引からそ
れを見付けて直接その適切な節に向かうことである。また、`PROGRAM
--help'を走らせてみると良い。それはPROGRAMに対する簡潔な使用法のメッ
セージを表示するだろう (*Note Foundations::)。

このマニュアルの残りはHurdサーバとそれらの実装に関する技術的な議論であ
り、Hurdの変更方法を学びたいと思うまで役には立たないだろう。

このマニュアルはサブシステムに従って構成されており、それぞれの章はその
サブシステムに関連するユーティリティやサーバの説明から始まっている。も
しあなたがシステム管理者で、例えば、Hurdネットワーキング・サブシステム
についてもっと学びたいなら、ネットワーキングの章 (*Note Networking::)
まで飛ばして、関連したユーティリティやサーバを拾い読みして良い。

Hurdサーバの変更の仕方や新しいサーバの書き方に興味があるプログラマは
Hurd が移植されているマイクロカーネル(現在はGNU Machだけ)について学び、
*Note Foundations::を読むことから始めるべきだ。そして、すでに存在する
サーバやそれらが使用するライブラリについて読むことで、あなたが関心のあ
るサブシステムに習熟するべきだ。この時点で、存在するHurdサーバのソース・
コードを勉強し、それらがHurdライブラリをいかにして使用しているかを理解
できるはずだ。

熟練の最終段階はHurdライブラリが実装するRPC (1) (*Note
Audience-Footnotes::)インターフェースを学ぶことだ。それぞれの章の最後
の節では、そのサブシステムで使われているどのHurdインターフェースについ
ても記述している。与えられたサブシステムを理解してしまったなら、Hurdラ
イブラリを改善し、あなた自身のインターフェースを設計し、新しいサブシス
テムを実装するのに、あなたは適任の立場にいるだろう。



File: hurd-ja.info  Node: Audience-Footnotes, Up: Audience

(1) Remote Procedure Call。もし訊く必要があるなら、あなたはHurdプログ
ラミングを出来るようになる前に作業を予定してしまっている。



File: hurd-ja.info, Node: Features, Next: Overview, Prev: Audience, Up: Introduction

特徴
====

Hurdは地球に知られている最も進歩したオペレーティング・システムでは(ま
だ) ないが、たくさんの誘惑的な特徴を持っている。

それはフリー・ソフトウェアである
     誰もがそれをGNU General Public License (*Note Copying::)の下で使
     用し、変更し、再配布することができる。HurdはGNUシステムの一部であ
     り、それはGPLで認可された完全なオペレーティング・システムである。

それは互換性がある
     Hurdは慣れ親しんだプログラミングやユーザ環境を提供する。どの点に
     対しても、Hurdは現代的なUnixライクのカーネルである。HurdはGNU Cラ
     イブラリを使用し、その開発はANSI/ISO、BSD、POSIX、Single Unix、
     SVID、そしてX/Openのような標準を厳密に追いかけている。

それは生き残るように構築されている
     他の有名なカーネル・ソフトウェアと違い、Hurdはその設計を汚さずに
     進化できるような、オブジェクト指向の構造を持っている。この構造は
     Hurdを全体的に書き直さなくても重大な再設計や変更に耐えられるよう
     にするのに役立つだろう。

それはscalableである
     単一プロセッサと対称マルチプロセッサの両方で効率的に動作するよう
     に、Hurd の実装は積極的にマルチスレッド化されている。Hurdのインター
     フェースは透過的なネットワーク・クラスタ("collectives")が可能なよ
     うに設計されている。この機能はまだ実装されていないが。

それは拡張性がある
     Hurdはカーネル・ハッカーになる方法を学んだり、カーネルの技術の新
     しい発想を実装するのに魅力的なプラットホームである。そのシステム
     のあらゆる部分が変更され、拡張されるように設計されている。

それは安定である
     新しいHurdカーネルの構成要素を開発し試験するために、(偶発的でもな
     く)マシンを再起動せずに行うことが可能である。あなた自身のカーネル
     構成要素を動作させることは他のユーザには干渉しないので、特別なシ
     ステム特権は必要とされない。カーネル拡張の仕組みは設計により安全
     である。あなたの変更に権限を与えたり、あなたがシステム管理者だっ
     たりしない限り、その変更を他のユーザに押しつけることは不可能であ
     る。

それは存在する
     Hurdは直ちに動作する現実のソフトウェアである。それは研究プロジェ
     クトや提案ではない。それを使ったり開発したりできるようになるまで
     全く待たなくて良いのだ。




File: hurd-ja.info, Node: Overview, Next: History, Prev: Features, Up: Introduction

概観
====

FIXME: overview of basic Hurd architecture, FAQish in nature




File: hurd-ja.info, Node: History, Next: Copying, Prev: Overview, Up: Introduction

歴史
====

Richard Stallman (RMS)は完全でフリーなオペレーティング・システムを作成
するためのプロジェクトとして、1983年にGNUを発足した。GNU宣言の文章では、
原始的なカーネルがあると彼は言っていた。1986年2月の最初のGNUsletterで、
GNU のカーネルはTRIXであると彼は言っているが、それはマサチューセッツ工
科大学で開発された。

1986年の12月までは、Free Software Foundation (FSF)は "TRIXに必要な変更
の作業を始めた" [Gnusletter, Jan, 1987]。その後ちょっとして、FSFは "カー
ネギーメロン大学のRashid教授とMachカーネルの開発を彼らと共に作業するこ
とについて取り決めること" を始めた [Gnusletter, June, 1987]。その文章
は、FSFがTRIXを直さなければならないよりも、誰か他の人の作品を使いたがっ
ていたことを暗示している。

[Gnusletter, Feb. 1988]において、"バークレーUnixの部分が置き換えられた
後に..."、Machを受け取り、バークレーSpriteファイルシステムをその上に乗
せることをRMSが話していた。

六ヶ月後、FSFは "もし我々がMachを手に入れられないなら、TRIXかバークレー
のSpriteを使うだろう"と言っている。ここで、彼らはSpriteを単なるファイ
ルシステムではなく、完全なカーネルの選択として提出する。

1990年の1月に、彼らは "我々はどんなカーネルの仕事も行っていない。まだ
Machを使用することを望むときに、今カーネル・プロジェクトを発足すること
は我々には意味がない"と言っている [Gnusletter, Jan. 1990]。1991年まで
何も重要なことは起きない。そのときもっと詳細な計画が公表される。

     "我々はなおMachの上で走る多重プロセス・カーネルに興味がある。CMUの弁護
     士は現在、我々が配布できる配布条件でMachをリリースできるかどうか決定して
     いる。もし彼らがそうすると決めれば、我々はおそらく作業を開始するだろう。
     CMUはMachと同じtermで利用できる、Poeと名付けられた単一サーバの部分的な
     Unixエミュレータを持っている。それはいくぶん遅くて最小限の機能を提供して
     いる。我々は多分完全な機能を提供するようにPoeを拡張することから始めるだ
     ろう。後で多重プロセスに分割されたモジュール方式のエミュレータを持つこと
     を望んでいる。" [Gnusletter, Jan. 1991]。

RMSはHurdとLinuxの関係を
`http://www.gnu.org/software/hurd/hurd-and-linux.html'で説明しており、
そこではFSFは1990年にHurdを開発し始めたと彼は言及している。
[Gnusletter, Nov. 1991]により、(Machの上で走る)HurdはGNUの公式カーネル
である。




File: hurd-ja.info, Node: Copying, Prev: History, Up: Introduction

GNU General Public License
==========================


                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.  675
     Mass Ave, Boston, MA 02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.


Preamble
--------

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if
you distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to
copy, distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on,
we want its recipients to know that what they have is not the
original, so that any problems introduced by others will not reflect
on the original authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at
all.

  The precise terms and conditions for copying, distribution and
modification follow.

   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
     a notice placed by the copyright holder saying it may be
     distributed under the terms of this General Public License.  The
     "Program", below, refers to any such program or work, and a "work
     based on the Program" means either the Program or any derivative
     work under copyright law: that is to say, a work containing the
     Program or a portion of it, either verbatim or with modifications
     and/or translated into another language.  (Hereinafter,
     translation is included without limitation in the term
     "modification".)  Each licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based
     on the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an
     appropriate copyright notice and disclaimer of warranty; keep
     intact all the notices that refer to this License and to the
     absence of any warranty; and give any other recipients of the
     Program a copy of this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section
     1 above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any
          change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands
          interactively when run, you must cause it, when started
          running for such interactive use in the most ordinary way,
          to print or display an announcement including an appropriate
          copyright notice and a notice that there is no warranty (or
          else, saying that you provide a warranty) and that users may
          redistribute the program under these conditions, and telling
          the user how to view a copy of this License.  (Exception: if
          the Program itself is interactive but does not normally
          print such an announcement, your work based on the Program
          is not required to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and
     separate works in themselves, then this License, and its terms,
     do not apply to those sections when you distribute them as
     separate works.  But when you distribute the same sections as
     part of a whole which is a work based on the Program, the
     distribution of the whole must be on the terms of this License,
     whose permissions for other licensees extend to the entire whole,
     and thus to each and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the
     terms of Sections 1 and 2 above provided that you also do one of
     the following:

       a. Accompany it with the complete corresponding
          machine-readable source code, which must be distributed
          under the terms of Sections 1 and 2 above on a medium
          customarily used for software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than
          your cost of physically performing source distribution, a
          complete machine-readable copy of the corresponding source
          code, to be distributed under the terms of Sections 1 and 2
          above on a medium customarily used for software interchange;
          or,

       c. Accompany it with the information you received as to the
          offer to distribute corresponding source code.  (This
          alternative is allowed only for noncommercial distribution
          and only if you received the program in object code or
          executable form with such an offer, in accord with
          Subsection b above.)

     The source code for a work means the preferred form of the work
     for making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it
     contains, plus any associated interface definition files, plus
     the scripts used to control compilation and installation of the
     executable.  However, as a special exception, the source code
     distributed need not include anything that is normally
     distributed (in either source or binary form) with the major
     components (compiler, kernel, and so on) of the operating system
     on which the executable runs, unless that component itself
     accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are
     not compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program
     is void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy
     simultaneously your obligations under this License and any other
     pertinent obligations, then as a consequence you may not
     distribute the Program at all.  For example, if a patent license
     would not permit royalty-free redistribution of the Program by
     all those who receive copies directly or indirectly through you,
     then the only way you could satisfy both it and this License
     would be to refrain entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe
     any patents or other property right claims or to contest validity
     of any such claims; this section has the sole purpose of
     protecting the integrity of the free software distribution
     system, which is implemented by public license practices.  Many
     people have made generous contributions to the wide range of
     software distributed through that system in reliance on
     consistent application of that system; it is up to the
     author/donor to decide if he or she is willing to distribute
     software through any other system and a licensee cannot impose
     that choice.

     This section is intended to make thoroughly clear what is
     believed to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version,
     but may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the
     Program does not specify a version number of this License, you
     may choose any version ever published by the Free Software
     Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to
     the author to ask for permission.  For software which is
     copyrighted by the Free Software Foundation, write to the Free
     Software Foundation; we sometimes make exceptions for this.  Our
     decision will be guided by the two goals of preserving the free
     status of all derivatives of our free software and of promoting
     the sharing and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS
     OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
     YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH
     ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                     END OF TERMS AND CONDITIONS


How to Apply These Terms to Your New Programs
---------------------------------------------

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR

     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

Also add information on how to contact you by electronic and paper
mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.

The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright
     interest in the program `Gnomovision'
     (which makes passes at compilers) written
     by James Hacker.

     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

This General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library,
you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use
the GNU Library General Public License instead of this License.




File: hurd-ja.info, Node: Installing, Next: Bootstrap, Prev: Introduction, Up: Top

Installing
**********

Before you can use the Hurd on your favorite machine, you'll need to
install all of its software components.  Currently, the Hurd only runs
on Intel i386-compatible architectures (such as the Pentium), using
the GNU Mach microkernel.

If you have unsupported hardware or a different microkernel, you will
not be able to run the Hurd until all the required software has been
"ported" to your architecture.  Porting is an involved process which
requires considerable programming skills, and is not recommended for
the faint-of-heart.  If you have the talent and desire to do a port,
contact <bug-hurd@gnu.org> in order to coordinate the effort.

* Menu:

* Binary Distributions::        Obtaining ready-to-run GNU distributions.
* Cross-Compiling::             Building GNU from its source code.




File: hurd-ja.info, Node: Binary Distributions, Next: Cross-Compiling, Prev: Installing, Up: Installing

Binary Distributions
====================

By far the easiest and best way to install the Hurd is to obtain a GNU
binary distribution.  Even if you plan on recompiling the Hurd itself,
it is best to start off with an already-working GNU system so that you
can avoid having to reboot every time you want to test a program.


You can get GNU from a friend under the conditions allowed by the GNU
GPL (*Note Copying::).  Please consider sending a donation to the Free
Software Foundation so that we can continue to improve GNU software.

You can also FTP the complete GNU system from your closest GNU mirror,
or `ftp://ftp.gnu.org/pub/gnu/'.  The GNU binary distribution is
available in a subdirectory called `gnu-N.M', where N.M is the version
of the Hurd that this GNU release corresponds to (0.2 at the time of
this writing).  Again, please consider donating to the Free Software
Foundation.

The format of the binary distribution is prone to change, so this
manual does not describe the details of how to install GNU.  The
`README' file distributed with the binary distribution gives you
complete instructions.

After you follow all the appropriate instructions, you will have a
working GNU/Hurd system.  If you have used Linux-based GNU systems or
other Unix-like systems before, the Hurd will look quite familiar.
You should play with it for a while, referring to this manual only
when you want to learn more about the Hurd.  Have fun!

If the Hurd is your first introduction to the GNU operating system,
then you will need to learn more about GNU in order to be able to use
it.  You should talk to friends who are familiar with GNU, in order to
find out about classes, online tutorials, or books which can help you
learn more about GNU.

If you have no friends who are already using GNU, you can find some
useful starting points at the GNU web site, `http://www.gnu.org/'.
You can also send e-mail to <help-hurd@gnu.org>, to contact fellow
Hurd users.  You can join this mailing list by sending a request to
<help-hurd-request@gnu.org>.




File: hurd-ja.info, Node: Cross-Compiling, Prev: Binary Distributions, Up: Installing

Cross-Compiling
===============

Another way to install the Hurd is to use an existing operating system
in order to compile all the required Hurd components from source code.
This is called "cross-compiling", because it is done between two
different platforms.

*This process is not recommended unless you are porting the Hurd to a
new platform.* Cross-compiling the Hurd to a platform which already
has a binary distribution is a tremendous waste of time... it is
frequently necessary to repeat steps over and over again, and you are
not even guaranteed to get a working system.  Please, obtain a GNU
binary distribution (*Note Binary Distributions::), and use your time
to do more useful things.  If you are capable of cross-compiling, then
you are definitely skilled enough to make more useful (and creative)
modifications to the GNU system.

If you are interested in porting the Hurd to a new platform, you
should send e-mail to the <bug-hurd@gnu.org> mailing list in order to
coordinate your efforts.  People on that list will give you advice on
what to look out for, as well as helping you find other people who are
interested in working on the same port.




File: hurd-ja.info, Node: Bootstrap, Next: Foundations, Prev: Installing, Up: Top

Bootstrap
*********

Bootstrapping is the procedure by which your machine loads the
microkernel and transfers control to the Hurd servers. (1) (*Note
Bootstrap-Footnotes::)


* Menu:

* Bootloader::                  Starting the microkernel, or other OSes.
* Server Bootstrap::            Waking up the Hurd.
* Shutdown::                    Letting the Hurd get some rest.


File: hurd-ja.info  Node: Bootstrap-Footnotes, Up: Bootstrap

(1) The term "bootstrapping" refers to a Dutch legend about a boy
who was able to fly by pulling himself up by his bootstraps.  In
computers, this term refers to any process where a simple system
activates a more complicated system.



File: hurd-ja.info, Node: Bootloader, Next: Server Bootstrap, Prev: Bootstrap, Up: Bootstrap

Bootloader
==========

The "bootloader" is the first software that runs on your machine.
Many hardware architectures have a very simple startup routine which
reads a very simple bootloader from the beginning of the internal hard
disk, then transfers control to it.  Other architectures have startup
routines which are able to understand more of the contents of the hard
disk, and directly start a more advanced bootloader.

Currently, "GRUB" (1) (*Note Bootloader-Footnotes::) is the preferred
GNU bootloader.  GRUB provides advanced functionality, and is capable
of loading several different kernels (such as Linux, DOS, and the *BSD
family).

From the standpoint of the Hurd, the bootloader is just a mechanism to
get the microkernel running and transfer control to `serverboot'.  You
will need to refer to your bootloader and microkernel documentation
for more information about the details of this process.



File: hurd-ja.info  Node: Bootloader-Footnotes, Up: Bootloader

(1) The GRand Unified Bootloader, available from
`http://www.uruk.org/grub/'.



File: hurd-ja.info, Node: Server Bootstrap, Next: Shutdown, Prev: Bootloader, Up: Bootstrap

Server Bootstrap
================

The `serverboot' program is responsible for loading and executing the
rest of the Hurd servers.  Rather than containing specific
instructions for starting the Hurd, it follows general steps given in
a user-supplied boot script.

To bootstrap the Hurd, the microkernel must start this program as its
first task, and to pass it appropriate arguments.  `serverboot' may
also be invoked while the Hurd is already running, which allows users
to start their own complete sub-Hurds (*Note Invoking boot::).

* Menu:

* Invoking serverboot::         Starting a set of interdependent servers.
* Boot Scripts::                Describing server bootstrap relationships.
* Invoking boot::               Running a Hurd under another Hurd.




File: hurd-ja.info, Node: Invoking serverboot, Next: Boot Scripts, Prev: Server Bootstrap, Up: Server Bootstrap

Invoking `serverboot'
---------------------

The `serverboot' program has the following synopsis:

     serverboot -SWITCH... [[HOST-PORT DEVICE-PORT] ROOT-NAME]

Each SWITCH is a single character, out of the following set:

`a'
     Prompt the user for the ROOT-NAME, even if it was already
     supplied on the command line.

`d'
     Prompt the user to strike a key after the boot script has been
     read.

`q'
     Prompt the user for the name of the boot script.  By default, use
     `ROOT-NAME:/boot/servers.boot'.

All the SWITCHES are put into the `${boot-args}' script variable.

HOST-PORT and DEVICE-PORT are integers which represent the microkernel
host and device ports, respectively (and are used to initialize the
`${host-port}' and `${device-port}' boot script variables).  If these
ports are not specified, then `serverboot' assumes that the Hurd is
already running, and fetches the current ports from the procserver
(FIXME xref).

ROOT-NAME is the name of the microkernel device that should be used as
the Hurd bootstrap filesystem.  `serverboot' uses this name to locate
the boot script (described above), and to initialize the
`${root-device}' script variable.




File: hurd-ja.info, Node: Boot Scripts, Next: Invoking boot, Prev: Invoking serverboot, Up: Server Bootstrap

Boot Scripts
------------

FIXME: finish




File: hurd-ja.info, Node: Invoking boot, Prev: Boot Scripts, Up: Server Bootstrap

Invoking `boot'
---------------

The `boot' program is used to start a set of core Hurd servers while
another Hurd is already running.  You will rarely need to do this, and
it currently requires superuser privileges (to access the host
privileged port), but it is interesting to note that it can be done.

Usually, you would make changes to only one server, and simply tell
your programs to use it in order to test out your changes.  This
process can be applied even to the core servers.  However, some
changes have far-reaching effects, and so it is nice to be able to
test those effects without having to reboot the machine.

The `boot' program has the following synopsis:

     boot [OPTION]... BOOT-SCRIPT ROOT-STORE

BOOT-SCRIPT is the name of the boot script (*Note Boot Scripts::).
ROOT-STORE is the store that is used as the root partition (*Note
Store Library::).

Here are the steps you can follow to test out a new set of servers:

  1. Create a new root partition and initialize it with your favorite
     filesystem format.  The `boot' program uses libstore, so you can
     use any valid store as your root, with any options that libstore
     recognizes:

          $ dd if=/dev/zero of=my-partition bs=1024 count=80
          $ mke2fs ./my-partition

     It is better to use a raw partition, if possible.  With a raw
     partition, the sub-Hurd doesn't depend on its parent for anything
     except the default pager.

  2. Copy the core servers, C library, and any of your modified
     programs onto the new partition:

          $ settrans -c ./my-root /hurd/ext2fs `pwd`/my-partition
          $ (cd my-root && tar -zxf ../my-files.tar.gz)

  3. Use some clever shadowfs hacks (FIXME xref) to mirror the rest of
     your programs under the modified partition.  Copying them will
     work, too, if you don't like shadowfs.

  4. Create a boot script on the new partition, in
     `/boot/servers.boot'.

  5. Make your root filesystem read-only for the parent Hurd, to
     prevent any conflicts:

          $ settrans -g ./my-root
          $ settrans -c ./my-root /hurd/ext2fs -r `pwd`/my-partition

  6. Run `boot' on your new partition:

          $ boot -D ./my-root ./my-root/boot/servers.boot ./my-partition

Note that sharing microkernel devices between the two running Hurds
may cause conflicts, so don't get any funny ideas.  When you're
finished testing your new Hurd, then you can run the `halt' or
`reboot' programs to return control to the parent Hurd.

If you're satisfied with your new Hurd, you can arrange for your
bootloader to start it, and reboot your machine.  Then, you'll be in a
safe place to overwrite your old Hurd with the new one, and reboot
back to your old configuration (with the new Hurd servers).




File: hurd-ja.info, Node: Shutdown, Prev: Server Bootstrap, Up: Bootstrap

Shutdown
========

FIXME: finish




File: hurd-ja.info, Node: Foundations, Next: Input and Output, Prev: Bootstrap, Up: Top

基礎
****

あらゆるHurdプログラムは以下の付加的な引数を受け取る。

`--help'
     簡潔な使い方のメッセージを表示し、終了する。このメッセージはプロ
     グラムの解説書を読むことの代わりではなく、プログラムが理解する特
     定のコマンドラインのオプションについて思い出すのに役に立つのであ
     る。

`--version'
     プログラムのバージョン情報を出力し、終了する。

この章の残りで、Hurdをプログラマに対して紹介する。もしあなたがプログラ
マでないなら、この章はあなたには大して意味がない... 特定のHurdプログラ
ムの記述まで飛ばすことを考えるべきだ (*Note Audience::)。

Hurdのユーティリティやサーバを書くための有用なツールの組を提供するため
に、Hurdの配布にはたくさんのライブラリが含まれている。これらのライブラ
リのいくつかはHurdにだけではなく、一般的にマイクロカーネルに基くプログ
ラムを書くのに役立つ。これらの基本的なライブラリは理解するのに難しくは
なく、それらは良い開始点である。なぜなら、Hurdの残りの部分は非常に激し
くそれらに頼っているからだ。

* Menu:

* Threads Library::             あらゆるHurdサーバとライブラリは
                                マルチスレッド化されている。
* Microkernel Object Library::  マイクロカーネル・オブジェクト・モデル(MOM)。
* Ports Library::               サーバのport受信権の管理。
* Integer Hash Library::        整数を鍵としたハッシュ表。
* Misc Library::                GNU Cライブラリにすぐに入るもの。
* Bug Address Library::         Hurdのバグを報告する場所。



File: hurd-ja.info, Node: Threads Library, Next: Microkernel Object Library, Prev: Foundations, Up: Foundations

スレッド・ライブラリ
====================

マイクロカーネルや土台となるハードウェアのよって提供される多重処理の能
力を十分に利用するために、Hurdサーバやライブラリは全て積極的にマルチス
レッド化されている。Hurdのスレッド・ライブラリ、`libthreads'はデフォル
トのHurdスレッドの実装を含み、それは`<cthreads.h>'で宣言されている。

現在(1998年4月)、Hurdはcthreadsを使っているが、それはすでにCMUによって
完全に解説されている。最後には、それはPOSIX pthreadsを使うように移行さ
れるだろう。それはたくさんのところで解説されている。

(GNU Cライブラリを含む)Hurd配布物の中の個々のライブラリは完全にスレッ
ド・セーフで、Hurdサーバ自身は積極的にマルチスレッド化されている。




File: hurd-ja.info, Node: Microkernel Object Library, Next: Ports Library, Prev: Threads Library, Up: Foundations

マイクロカーネル・オブジェクト・ライブラリ
==========================================

一般に尋ねられる質問はHurdはMachマイクロカーネルのOpen Groupのバージョ
ンに移植されているかどうかだ。その答えは"いいえ"だ。

現在(1998年4月)、Hurdは非常にGNU Machマイクロカーネルに依存しており、
それはユタ大学のMach 4から派生している。しかしながら、Hurdの開発者は
Machの限界をあまりにも気にし過ぎている。

`libmom'はHurdを他のメッセージ通信式マイクロカーネルに移植できるように
するために必要とされるいくつかの段階のうち最初のものである。"MOM"は
"Microkernel Object Model"を表し、一般的なメッセージ通信式マイクロカー
ネルによって提供される基本的なサービスの抽象概念である。それはHurdサー
バとCライブラリがマイクロカーネルに依存したカーネル呼び出しを行わない
でいいように、必要な隔離を行うだろう。

でも、現在では、`libmom'はまだ発展中であり、完全にHurdに組み込まれるに
はいくらか時間がかかるだろう。




File: hurd-ja.info, Node: Ports Library, Next: Integer Hash Library, Prev: Microkernel Object Library, Up: Foundations

portのライブラリ
================

portはカーネルによって所有される通信路である。

portは別々の送信権と受信権を持ち、それらはカーネルを通してタスクからタ
スクへ譲られても良い。port権はUnixのファイル記述子と似ている。それらは
カーネル呼び出しを行うときにportを識別するのに使われるタスク毎の整数で
ある。送信権はRPCリクエストをportに遅るために必要で、受信権はRPCリクエ
ストに応対するために必要である。受信権は単一の"portset"に集められても
良く、それは有用な構成単位として役に立つ。

単一スレッドのRPCクライアントでは、portを管理し類別することは難しい処
理ではない。しかしながら、複雑なマルチスレッドのサーバでは、portset を
管理するのにより抽象的なインターフェースを持つことは、サーバの抽象的な
データを管理することと同様、役に立つのである。

Hurdのportのライブラリ、`libports'はその必要性を満たす。`libports'関数
は`<hurd/ports.h>'で宣言されている。

* Menu:

* Buckets and Classes::         port編成の基本単位。
* Port Rights::                 port権の`libports'との間での移動。
* Port Metadata::               port関連の情報の管理。
* Port References::             漏曳や欠失に対する保護。
* RPC Management::              RPC操作のロックと割り込み。



File: hurd-ja.info, Node: Buckets and Classes, Next: Port Rights, Prev: Ports Library, Up: Ports Library

BucketとClass
-------------

`libports'の"bucket"はただのportの組と、いくらかの抽象データとロックだ
けである。`libports'関数の全てはbucketに対して操作する。

 -- Function: struct port_bucket * ports_create_bucket (void)
     新しい、空のbucketを作って返す。

portの"class"は個々のportの集まりで、それは簡便に扱うことができ、解放
ルーチンを強制している。bucketとclassはまったくorthogonalである。class
のportが全て同じbucketに入っている必要性はなく、bucketのportが全て同じ
classに入っている必要性もない。

 -- Function: struct port_class ports_create_class (void (*CLEAN_ROUTINE) (void *PORT), void (*DROPWEAK_ROUTINE) (void *PORT))
     新しいport classを作って返す。もし非ゼロなら、CLEAN_ROUTINEはこの
     classの割り当てられたportオブジェクトが破壊されるときにそれぞれに
     対して呼び出されるだろう。もし非ゼロなら、DROPWEAK_ROUTINEは弱い
     参照が減少するようにリクエストするときに呼び出されるだろう。(もし
     DROPWEAK_ROUTINEがnullなら、弱い参照と強い参照はこのclassのportに
     対して等価だろう。)

少なくとも一つのbucketとclassを作ってしまったら、新しいportを作り、こ
れらのbucketに収めて良い。あなたのアプリケーションの必要性に依存して、
port の生成に対して少数の異なる関数がある。

 -- Function: error_t ports_create_port (struct port_class *CLASS, struct port_bucket *BUCKET, size_t SIZE, void *RESULT)
     CLASSとBUCKETの新しいportを作り、RESULTに入れて返す。SIZEバイトが
     port構造体とユーザが定義するプライベートなデータを保持するために
     割り当てられるだろう。

 -- Function: error_t ports_create_port_noinstall (struct port_class *CLASS, struct port_bucket *BUCKET, size_t SIZE, void *RESULT)
     実際にはportをBUCKETの根底にあるportsetに入れられないことを除いて、
     `ports_create_port'とちょうど同じである。これはportが完全に初期化
     される前にport権が配られなければならない場合に使われることを意図
     されている。この呼び出しを使うと、portを初期化し終わりportsetにあ
     なた自身がそれを入れるまで、そのportにRPCサービスが起こらないこと
     が保証される。

 -- Function: error_t ports_import_port (struct port_class *CLASS, struct port_bucket *BUCKET, mach_port_t PORT, size_t SIZE, void *RESULT)
     存在する*受信*権に対し、新しいport構造体を作ってRESULTに返す。
     BUCKET、SIZE、そしてCLASS引数は`ports_create_port'と同様である。




File: hurd-ja.info, Node: Port Rights, Next: Port Metadata, Prev: Buckets and Classes, Up: Ports Library

port権
------

以下の関数はport受信権をport構造体との間で移動する。

 -- Function: void ports_reallocate_port (void *PORT)
     現在PORTと結び付いている受信権を破棄し、新しい受信権を割り当てる。

 -- Function: void ports_reallocate_from_external (void *PORT, mach_port_t RECEIVE)
     現在PORTと結び付いている受信権を破棄し、RECEIVEを新しい受信権とし
     て指定する。

 -- Function: void ports_destroy_right (void *PORT)
     現在PORTと結び付いている受信権を破棄する。この呼び出しの後に、
     `ports_reallocate_port'と`ports_reallocate_from_external'は使えな
     い。

 -- Function: mach_port_t ports_claim_right (void *PORT)
     現在PORTと結び付いている受信権を返す。PORTに対する効果は受信権自
     体には影響しないことを除いて`ports_destroy_right'と同じである。マ
     ルチスレッド化されているサーバでは、このportがportsetから除かれる
     前にメッセージがすでにキューから除かれているかもしれないことに注
     意せよ。そのようなメッセージからは`EOPNOTSUPP'エラーを得るであろ
     う。

 -- Function: error_t ports_transfer_right (void *TOPT, void *FROMPT)
     FROMPTからTOPTへ受信権を移す。(あたかも`ports_destory_right'が呼
     ばれたように)FROMPTは破棄された権利を持つようになり、(あたかも
     `ports_reallocate_from_external'が呼ばれたよう)TOPTの古い権利は破
     棄される。

 -- Function: mach_port_t ports_get_right (void *PORT)
     PORTと結び付いている受信権の名前を返す。ユーザは責任を持って、こ
     の名前から普通の送信権を作らねばならない。




File: hurd-ja.info, Node: Port Metadata, Next: Port References, Prev: Port Rights, Up: Ports Library

portの抽象データ
----------------

`libports'関数のそれぞれへのPORT引数が`void *'であって`struct
port_info *'ではないことを指摘するのは重要だ。これは任意の抽象的な情報
をあなたの`libports'に管理されるportへ追加できるために行われている。単
に最初の要素が`struct port_info'であるような、あなた自身の構造体を定義
すれば、どんな`libports'関数へもPORT引数としてこれらの構造体へのポイン
タを使うことができる。

以下の関数はあなた自身があつらえたport構造体に収められる抽象データを管
理するのに役立つ。

 -- Function: void * ports_lookup_port (struct port_bucket *BUCKET, mach_port_t PORT, struct port_class *CLASS)
     PORTを探し、参照を割り当てて、結び付いているport構造体を返す。こ
     の呼び出しが失敗すると、ゼロを返す。もしBUCKETが非ゼロなら、それ
     は検索するためのbucketを指定する。そうでなければ全てのbucketが検
     索されるだろう。もしCLASSが非ゼロなら、PORTがCLASSにないなら検索
     が失敗するだろう。

 -- Function: error_t ports_bucket_iterate (struct port_bucket *BUCKET, error_t (*FUN) (void *PORT))
     BUCKETの各portに対し一度だけFUNを呼び出す。




