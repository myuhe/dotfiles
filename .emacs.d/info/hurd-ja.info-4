Info file: hurd-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `hurd-ja.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.




INFO-DIR-SECTION Kernel
START-INFO-DIR-ENTRY
* Hurd: (hurd).                 Using and programming the Hurd kernel servers.
END-INFO-DIR-ENTRY


Copyright (C) 1994-1998 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.


Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.





File: hurd-ja.info, Node: Diskfs Globals, Next: Diskfs Node Management, Prev: Diskfs Arguments, Up: Diskfs Library

Diskfsグローバル関数、グローバル変数
------------------------------------

以下の関数や変数は、このライブラリの全般的な振舞いを制御する。あなたの
書くコールバック関数はこれらを参照する必要があるかもしれないが、これら
を変更したり再定義したりする必要はないはずである。

 -- Variable: mach_port_t diskfs_default_pager
 -- Variable: mach_port_t diskfs_exec_ctl
 -- Variable: mach_port_t diskfs_exec
 -- Variable: auth_t diskfs_auth_server_port
     これらはそれぞれ、デフォルト・ページャ、execserverのcontrol port
     （FIXME-J:コントロール・ポート、制御ポート？）、execserverそれ自
     身、authserverへのsend rights（FIXME-J:センド・ライト？）である。

 -- Variable: mach_port_t diskfs_fsys_identity
     ファイルシステムの`io_identity' identity port（FIXME-J:アイデンティ
     ティ・ポート？）。

 -- Variable: char ** diskfs_argv
     デフォルトの引数パーサによりセットされた、diskfsの起動コマンドラ
     イン。あなたが引数パーサを使わないのであれば、これを自分でセット
     すること。これはprocserverに与えるために、ブートストラップ・ファ
     イルシステムによってのみ使用される。

 -- Variable: char * diskfs_boot_flags
     ブートストラップ・ファイルシステムの場合、カーネルから渡されたコ
     マンドライン・オプション。ブートストラップ・ファイルシステムでな
     い場合は、この２つのケースを区別するのに使えるようゼロが入る。

 -- Variable: struct rwlock diskfs_fsys_lock
     ファイルシステム・レベルの操作を行っている間はこのロックを保有す
     ること。特に害のない操作を行うユーザは単にreader lock（FIXME-J）
     を保有するだけで良いが、他のスレッドに悪影響を及ぼす可能性のある
     操作ではwriter lock（FIXME-J）を保有するべきである。

 -- Variable: volatile struct mapped_time_value * diskfs_mtime
     diskfsルーチンによって使用されている現在のシステム時刻。これは、C
     のライブラリ関数`maptime_read'によって`struct timeval'に変換され
     る(FIXME xref)。

 -- Variable: int diskfs_synchronous
     すべての操作が同期的に行われなければならない場合のみ真となる。こ
     れがセットされている場合、アロケーション（FIXME-J:割当て？）情報
     が永遠に同期されるようにするのはフォーマット固有のコードの責任で
     ある。これ以外のことはフォーマット非依存のコードにより実行される。

 -- Function: error_t diskfs_set_sync_interval (int INTERVAL)
     INTERVAL秒ごとにファイルシステムに対してsync（FIXME-J）を実行する
     ため、スレッドを生成する。INTERVALがゼロの場合は、スレッドの生成
     を行わない。スレッドの生成時にエラーが発生した場合は、エラー値が
     返される。エラーが発生しなかった場合はゼロが返される。２回目以降
     の呼出し時にも新しいスレッドが生成され、古いスレッドは(最終的には)
     取り除かれる。いずれにしろ古いスレッドはこれ以上sync（FIXME-J）を
     実行することはない。

 -- Variable: spin_lock_t diskfs_node_refcnt_lock
     ページャのリファレンス・カウント・ロック。

 -- Variable: int diskfs_readonly
     ファイルシステムが現在書込み可能であればゼロがセットされる。

 -- Function: error_t diskfs_set_readonly (int READONLY)
     アクティブなファイルシステムのモードを、読込みのみ可能なモード、
     もしくは、書込み可能なモードに変更する。同時に現在のモードを反映
     するようグローバル変数DISKFS_READONLYをセットする。エラーが返され
     た場合は、何も変更されていない。このルーチンを呼出している間は、
     DISKFS_FSYS_LOCKを保有していなければならない。

 -- Function: int diskfs_check_readonly (void)
     ファイルシステムに書込みを行う操作の前に、そのファイルシステムが
     読込みのみ可能かどうかをチェックする。読込みのみ可能であればゼロ
     以外の値を返し、そうでなければゼロを返す。

 -- Function: error_t diskfs_remount (void)
     すべてのin-core（FIXME-J）データ構造をディスクから再度読込む。こ
     の関数の呼出しは、DISKFS_READONLYが真である場合しか成功することは
     ありえない。このルーチンを呼出している間は、DISKFS_FSYS_LOCKを保
     有していなければならない。

 -- Function: error_t diskfs_shutdown (int FLAGS)
     ファイルシステムをシャットダウンする。FLAGSの意味は、
     `fsys_shutdown'の場合と同様である。




File: hurd-ja.info, Node: Diskfs Node Management, Next: Diskfs Callbacks, Prev: Diskfs Globals, Up: Diskfs Library

Diskfsノード管理
----------------

すべてのファイルやディレクトリはdiskfs"ノード"である。以下の関数は、あ
なたの書いたdiskfsコールバックがノードやノードへのreference（FIXME-J:
リファレンス、参照？）を管理するのを支援してくれるものである。

 -- Function: void diskfs_drop_node (struct node *NP)
     ノードNPはもはやreference（FIXME-J:リファレンス、参照？）を持たな
     いので、すべてをクリーンな（FIXME-J）状態にする。
     DISKFS_NODE_REFCNT_LOCKは保有されていなければならず、この関数から
     復帰する際に解放される。NPはロックされていなければならない。

 -- Function: void diskfs_node_update (struct node *NP, int WAIT)
     `NP->dn_stat'の情報を使用して、disk fields（FIXME-J:ディスク・フィー
     ルド？）をセットする。必要であればctime、atime、mtimeを更新する。
     WAITが真であれば、物理的なメディアの更新が完全に終了するまで復帰
     しない。

 -- Function: void diskfs_nref (struct node *NP)
     ノードNPに対してhard reference（FIXME-J）を追加する。ノードにhard
     reference（FIXME-J）があらかじめ存在しない場合、そのノードをロッ
     クすることはできない(なぜなら、ロックを保有するためにはhard
     reference（FIXME-J）を保有していなければならないのであるから)。

 -- Function: void diskfs_nput (struct node *NP)
     ノードNPのロックを解除し、hard reference（FIXME-J）を解放する。こ
     れが最後のhard reference（FIXME-J）であり、かつ、そのファイルに対
     するリンクが存在しなければ、light reference（FIXME-J）を除去する
     よう要求する。

 -- Function: void diskfs_nrele (struct node *NP)
     NPのhard reference（FIXME-J）を解放する。NPが何者かによってロック
     されていれば、これが最後のhard reference（FIXME-J）であることはあ
     りえない(なぜなら、ロックを保有するためにはhard reference
     （FIXME-J）を保有していなければならないのであるから)。これが最後
     のhard reference（FIXME-J）であり、かつ、リンクが存在しなければ、
     light reference（FIXME-J）を除去するよう要求する。

 -- Function: void diskfs_nref_light (struct node *NP)
     ノードに対してlight reference（FIXME-J）を追加する。

 -- Function: void diskfs_nput_light (struct node *NP)
     ノードNPのロックを解除し、light reference（FIXME-J）を解放する。

 -- Function: void diskfs_nrele_light (struct node *NP)
     NPに対するlight reference（FIXME-J）を解放する。NPが何者かによっ
     てロックされていれば、これが最後のreference（FIXME-J:リファレンス、
     参照？）であることはありえない(なぜなら、ロックを保有するためには
     hard reference（FIXME-J）を保有していなければならないのであるから)。

 -- Function: error_t diskfs_node_rdwr (struct node *NP, char *DATA, off_t OFF, size_t AMT, int DIRECTION, struct protid *CRED, size_t *AMTREAD)
     これは、ファイルの読み書きを行う場合や自動的なファイル・サイズの
     拡張が必要である場合に、他のファイルシステム・ルーチンから呼出さ
     れるものである。NPは読み書きされるノードであり、ロックされていな
     ければならない。DATAの指すデータがファイルに書込まれたり、あるい
     は、ファイルから読込まれたデータがDATAの指す領域に書込まれたりす
     る。OFFは、I/Oが実際に行われるべきファイル中の場所を示す(負の値は
     許されない)。AMTはDATAのサイズであり、どれだけのデータをコピーす
     るべきかを示す。DIRは、読込みの場合はゼロであり、書込みの場合はゼ
     ロ以外の値である。CREDは、アクセスを行っているユーザを示す(ファイ
     ルを拡張しようとする試みの正当性を判断するためだけに使われる)。読
     込みの場合、実際に読込まれたデータのサイズが`*AMTREAD'に入れられ
     る。

 -- Function: void diskfs_notice_dirchange (struct node *DP, enum dir_changed_type TYPE, char *NAME)
     `dir_notice_changes'によってディレクトリDPに関するnotification
     （FIXME-J）を要求したユーザに対して、notification（FIXME-J）を送
     信する。変更の種類と変更により影響を受けた名前が、それぞれTYPEと
     NAMEである。これは、`diskfs_direnter'、`diskfs_dirremove'、
     `diskfs_dirrewrite'、および、そのディレクトリを変更する任意の関数
     から、その変更が完全に終了した後に呼出されるべきものである。

 -- Function: struct node * diskfs_make_node (struct disknode *DN)
     DNを物理的なdisknode（FIXME-J）とする新しいnode構造体を作成する。
     新しく作成されたノード（node）は、hard reference（FIXME-J）を１個
     持ち、light reference（FIXME-J）は持たない。

以下のノード操作関数群は一般的には有用ではないが、diskfs関数を再定義す
る必要がある場合には便利であるかもしれない。

 -- Function: error_t diskfs_create_node (struct node *DIR, char *NAME, mode_t MODE, struct node **NEWNODE, struct protid *CRED, struct dirstat *DS)
     新しいノードを作成し、そのモードをMODEとする。MODEに`IFDIR'が含ま
     れていれば、新しいディレクトリ中の`.'と`..'も初期化する。作成され
     たノードはNPPに入れて返す。CREDは、この関数の呼出しに責任を負うユー
     ザを識別する。NAMEがゼロ以外の値であれば、新しく作成されたノード
     をNAMEという名前でDIRにリンクする。DSは、ノード作成のために事前に
     呼出された`diskfs_lookup'の結果である(DIRは、`diskfs_lookup'の呼
     出し以降ロックされたままである)。DIRは、少なくともディスク・アロ
     ケーション（FIXME-J:割当て？）方針のヒントとして、常にこの関数に
     渡されなければならない。

 -- Function: void diskfs_set_node_times (struct node *NP)
     `NP->dn_set_ctime'がセットされていれば、しかるべく
     `NP->dn_stat.st_ctime'を変更する。atimeとmtimeについても同じよう
     な操作を行う。

 -- Function: struct node * diskfs_check_lookup_cache (struct node *DIR, char *NAME)
     キャッシュの中からDIRの中のNAMEを探す。既知の範囲でそのようなエン
     トリが存在しなければゼロを返す。そのようなエントリが存在しないこ
     とが確実であれば-1を返す。これ以外の場合は、新しく割当てられた
     reference（FIXME-J:リファレンス、参照？）とともに、エントリに対応
     するNPを返す。

 -- Function: error_t diskfs_cached_lookup (int CACHE_ID, struct node **NPP)
     `*NPP'の中のCACHE_IDに対応するノードを返す。

 -- Function: void diskfs_enter_lookup_cache (struct node *DIR, struct node *NP, char *NAME)
     ノードNPは、DIRの中でNAMEという名前で見つけられたものである。NPが
     NULLであれば、この名前のエントリがディレクトリの中に存在しないこ
     とが確認されたということを意味する。

 -- Function: void diskfs_purge_lookup_cache (struct node *DP, struct node *NP)
     ディレクトリDPの中のノードとしてNPを参照する、キャッシュ内のすべ
     てのreference（FIXME-J:リファレンス、参照？）を除去する。




File: hurd-ja.info, Node: Diskfs Callbacks, Next: Diskfs Options, Prev: Diskfs Node Management, Up: Diskfs Library

Diskfsコールバック
------------------

ほかのいくつかのHurdライブラリと同様、`libdiskfs'もあなたがアプリケー
ション固有のコールバック関数を実装することをあてにしている。あなたは以
下の関数と変数を定義*しなければならない*。また、いくつかのdiskfsオプショ
ンのデフォルト値は、良いファイルシステム・サポートを提供するためには変
更するべきであるので、*Note Diskfs Options::も参照するべきである。

 -- Structure: struct dirstat
     この型はあなたが定義しなければならない。この型が、`diskfs_lookup'
     の呼出しから`diskfs_direnter'、`diskfs_dirremove'、
     `diskfs_dirrewrite'のいずれか１つの呼出しまでの間、情報を保有する
     ことになる。これらの呼出しが以下に説明するように機能するために十
     分な情報が、この型の中に保持されなければならない。

 -- Variable: size_t diskfs_dirstat_size
     これは`struct dirstat'のバイト単位のサイズでなければならない。

 -- Variable: int diskfs_link_max
     これは、１個のファイルに対して存在することのできるリンクの最大個
     数であり、正の整数でなければならない。`dir_rename'の実装は、許さ
     れるリンク数がただの１個である場合に処理を成功させる方法を知らな
     い。そのようなフォーマットの場合、あなたは自分で`dir_rename'を再
     実装する必要がある。

 -- Variable: int diskfs_maxsymlinks
     これは、１回の`dir_pathtrans'の呼出しでたどることのできるシンボリッ
     ク・リンクの最大数を示す正の整数である。この値を超過すると、
     `dir_pathtrans'は`ELOOP'を返すことになる。

 -- Variable: struct node * diskfs_root_node
     ここにはファイルシステムのルート・ノードをセットする。

 -- Variable: char * diskfs_server_name
     ここにはファイルシステム・サーバの名前をセットする。

 -- Variable: char * diskfs_server_version
     ここにはサーバのバージョンを示す文字列をセットする。

 -- Variable: char * diskfs_disk_name
     これは、このファイルシステムが解釈している特定のディスクを何らか
     の形で識別する文字列でなければならない。通常これは、メッセージを
     表示したり、同一のファイルシステム・タイプの複数のインスタンスを
     区別するためにのみ使用される。このファイルシステムが外部メディア
     に一切アクセスしないのであれば、これをゼロとして定義する。

 -- Function: error_t diskfs_set_statfs (fsys_statfsbuf_t *STATFSBUF)
     ファイルシステムの現在の状態を反映するよう適切な値を`*STATFSBUF'
     にセットする。

 -- Function: error_t diskfs_lookup (struct node *DP, char *NAME, enum lookup_type TYPE, struct node **NP, struct dirstat *DS, struct protid *CRED)
 -- Function: error_t diskfs_lookup_hard (struct node *DP, char *NAME, enum lookup_type TYPE, struct node **NP, struct dirstat *DS, struct protid *CRED)
     あなたは`diskfs_lookup'を定義するべきではない。なぜなら、これは単
     に`diskfs_lookup_hard'に対するラッパーに過ぎず、既に`libdiskfs'の
     中で定義されているからである。

     (ロックされている)ディレクトリDPの中で名前NAMEを捜し出す(ルックアッ
     プする)。TYPEは、`LOOKUP'、`CREATE'、`RENAME'、`REMOVE'のいずれか
     である。CREDは、呼出しを行ったユーザを識別する。

     名前NAMEが見つかればゼロを返し、(NPの値がゼロ以外であれば) それに
     対応するノードを指すように`*NP'をセットするこのノードはロックされ
     なければならない。その名前が見つからない場合は`ENOENT'を返し、(NP
     の値がゼロ以外であれば) `*NP'にゼロをセットする。NPがゼロであれば、
     見つかったノードは一時的にであれロックされてはならない。(見つかっ
     たノードに対するパーミションのチェックがしばしば実行されなければ
     ならない) `REMOVE'と`RENAME'のためのルックアップの場合、NPは常に
     セットされる。

     DSの値がゼロ以外であれば、要求されたルックアップ種別TYPEによって
     振舞いが変わることになる。

     `LOOKUP'
          `diskfs_drop_dirstat'によって無視されるよう`*DS'をセットする。

     `CREATE'
          成功した場合は、
          `diskfs_drop_dirstat'によって無視されるよう`*DS'をセットする。
          失敗した場合は、
          将来の`diskfs_direnter'の呼出し用に`*DS'をセットする。

     `RENAME'
          成功した場合は、
          将来の`diskfs_dirrewrite'の呼出し用に`*DS'をセットする。
          失敗した場合は、
          将来の`diskfs_direnter'の呼出し用に`*DS'をセットする。

     `REMOVE'
          成功した場合は、
          将来の`diskfs_dirremove'の呼出し用に`*DS'をセットする。
          失敗した場合は、
          `diskfs_drop_dirstat'によって無視されるよう`*DS'をセットする。

     この関数の呼出し側は、次の２つのことを保証する。まず第１に、DSが
     ゼロ以外であれば、ディレクトリDPのロックが解除される前に、上にリ
     ストされた適切な呼出しが行われること、もしくは、
     `diskfs_drop_dirstat'がDSを引数として呼出されることを保証する。第
     ２に、今回ルックアップ関数を呼出してから*DSを使用する(もしくは、
     破棄する) までの間に、このディレクトリに対してルックアップ関数は
     一切呼出されないことを保証する。

     あなたが`diskfs_rename_dir'、`diskfs_clear_directory'、
     `diskfs_init_dir'のライブラリ・バージョンを使うのであれば、`..'に
     対するルックアップでは、フラグ`SPEC_DOTDOT'がORされているかもしれ
     ない。要求されたルックアップ種別TYPEによっては、これが特別な意味
     を持つ。

     `LOOKUP'
          復帰する前に、DPのロックは解除されなければならず、また、その
          reference（FIXME-J:リファレンス、参照？）は除去されなければ
          ならない。

     `CREATE'
          `SPEC_DOTDOT'が与えられないことは保証されているので、このケー
          スは無視してよい。

     `RENAME'
     `REMOVE'
          どちらの場合も、見つかったノード(`*NP')は既にロックされてい
          る。したがって、それをさらにロックしたり、reference
          （FIXME-J:リファレンス、参照？）を追加したりしないこと。

     名前NAMEがディレクトリの中に存在しない場合は`ENOENT'を返す。NAME
     が、このファイルシステムのルートの`..'を指している場合は、
     `EAGAIN'を返す。`EIO'を返すことが適切な場合には、`EIO'を返す。

 -- Function: error_t diskfs_direnter (struct node *DP, char *NAME, struct node *NP, struct dirstat *DS, struct protid *CRED)
 -- Function: error_t diskfs_direnter_hard (struct node *DP, char *NAME, struct node *NP, struct dirstat *DS, struct protid *CRED)
     あなたは`diskfs_direnter'を定義するべきではない。なぜなら、これは
     単に`diskfs_direnter_hard'に対するラッパーに過ぎず、既に
     `libdiskfs'の中で定義されているからである。

     ディレクトリDPにNAMEという名前でNPを追加する。これは、`CREATE'、
     もしくは、`RENAME'の`diskfs_lookup'呼出しが失敗した後にのみ呼出さ
     れることになる。DPは、この`diskfs_lookup'の呼出し以降ロックされた
     ままであり、DSの内容は、`diskfs_lookup'の呼出しによってセットされ
     たままの状態である。また、NPはロックされている。CREDは、この関数
     の呼出しに責任を負うユーザを識別する(ディレクトリ拡張の正当性を判
     断するためだけに使われる)。

 -- Function: error_t diskfs_dirrewrite (struct node *DP, struct node *OLDNP, struct node *NP, char *NAME, struct dirstat *DS)
 -- Function: error_t diskfs_dirrewrite_hard (struct node *DP, struct node *NP, struct dirstat *DS)
     あなたは`diskfs_dirrewrite'を定義するべきではない。なぜなら、これ
     は単に`diskfs_dirrewrite_hard'に対するラッパーに過ぎず、既に
     `libdiskfs'の中で定義されているからである。

     これは、`RENAME'の`diskfs_lookup'呼出しが成功した後にのみ呼出され
     ることになる。この呼出しにより、ディレクトリDPに見つかった名前は、
     それが以前に参照していたノードに換わって、ノードNPを指すように変
     更されているはずである。DPは、この`diskfs_lookup'の呼出し以降ロッ
     クされたままであり、DSの内容は、`diskfs_lookup'の呼出しによってセッ
     トされたままの状態である。また、NPはロックされている。

     `diskfs_dirrewrite'については、さらに追加仕様がある。NAMEは、DPの
     中で以前参照されていたノードOLDNPに対応していた名前である。更新さ
     れるのはこのreference（FIXME-J:リファレンス、参照？）である。
     `DP->dirmod_reqs'がゼロ以外であれば、`diskfs_dirrewrite'は
     `diskfs_notice_dirchange'も呼出す。

 -- Function: error_t diskfs_dirremove (struct node *DP, struct node *NP, char *NAME, struct dirstat *DS)
 -- Function: error_t diskfs_dirremove_hard (struct node *DP, struct dirstat *DS)
     あなたは`diskfs_dirremove'を定義するべきではない。なぜなら、これ
     は単に`diskfs_dirremove_hard'に対するラッパーに過ぎず、既に
     `libdiskfs'の中で定義されているからである。

     これは、`REMOVE'の`diskfs_lookup'呼出しが成功した後にのみ呼出され
     ることになる。この呼出しにより、ディレクトリDSに見つかった名前は
     削除されているはずである。DPは、この`diskfs_lookup'の呼出し以降ロッ
     クされたままであり、DSの内容は、`diskfs_lookup'の呼出しによってセッ
     トされたままの状態である。

     `diskfs_dirremove'については、さらに追加仕様がある。
     `DP->dirmod_reqs'がゼロ以外であれば、このルーチンは
     `diskfs_notice_dirchange'も呼出さなければならない。削除されるエン
     トリは、NAMEという名前を持ち、NPを参照している。

 -- Function: error_t diskfs_drop_dirstat (struct node *DP, struct dirstat *DS)
     DSは、ディレクトリDPに対する`diskfs_lookup'の前回の呼出しによって
     セットされたものである。`diskfs_direnter'、`diskfs_dirrewrite'、
     `diskfs_dirremove'が以前に呼出されていなければ、この関数が呼出さ
     れることは保証されている。この関数は、`struct dirstat'により保持
     されているどのような状態も解放するべきである。DPは、
     `diskfs_lookup'の呼出し以降ロックされたままの状態である。

 -- Function: void diskfs_null_dirstat (struct dirstat *DS)
     `diskfs_drop_dirstat'が無視するようにDSを初期化する。

 -- Function: error_t diskfs_get_directs (struct node *DP, int ENTRY, int N, char **DATA, u_int *DATACNT, vm_size_t BUFSIZ, int *AMT)
     ロックされたディレクトリ・ノードDPのENTRYから始まるN個のディレク
     トリ・エントリを返す。これらのエントリは、現在`*DATACNT'バイトの
     領域を指す`*DATA'に入れられる。このサイズが十分でない場合には、
     `*DATA'に対して`vm_allocate'を呼出す。`*DATACNT'には、実際に使用
     された総サイズをセットする。AMTにはコピーされたエントリの数を入れ
     る。ただし、BUFSIZバイトを超えてコピーしないこと。BUFSIZがゼロで
     あれば、`*DATACNT'の上限はない。Nが-1であれば、AMTの上限はない。

 -- Function: int diskfs_dirempty (struct node *DP, struct protid *CRED)
     ロックされたディレクトリDPが空であれば、ゼロ以外の値を返す。ユー
     ザが、`diskfs_clear_directory'と`diskfs_init_directory'を再定義し
     ていなければ、「空」とは「`.'というラベルのエントリと`..'というラ
     ベルのエントリだけを持つ」という意味である。CREDは、この呼出しを
     行ったユーザを識別する...  そのディレクトリを探索することがこのユー
     ザにはできない場合、このルーチンの呼出しは失敗しなければならない。

 -- Function: error_t diskfs_get_translator (struct node *NP, char **NAMEP, u_int *NAMELEN)
     (`diskfs_node_translated'が真であるような) ロックされたノードNPに
     ついて、そのトランスレータの名前を捜し出す。新たにmallocにより獲
     得された領域にその名前を格納し、その名前全体の長さを`*NAMELEN'に
     セットする。

 -- Function: error_t diskfs_set_translator (struct node *NP, char *NAME, u_int NAMELEN, struct protid *CRED)
     ロックされたノードNPについて、そのトランスレータの名前としてNAME
     の値を、また、その名前のバイト長としてNAMELENの値を、それぞれセッ
     トする。CREDは、この関数の呼出しに責任を負うユーザを識別する。

 -- Function: error_t diskfs_truncate (struct node *NP, off_t SIZE)
     ロックされたノードNPの長さをSIZEバイトに切り詰める。NPの長さが既
     にSIZEバイト以下であれば、何もしない。これがsymlink（FIXME-J:シン
     ボリック・リンク？）である(かつ、`diskfs_shortcut_symlink'がセッ
     トされている) 場合は、`diskfs_create_symlink_hook'がリンクのター
     ゲットをどこか別の場所にセットしている場合でも、そのsymlink
     （FIXME-J:シンボリック・リンク？）は除去されなければならない。

 -- Function: error_t diskfs_grow (struct node *NP, off_t SIZE, struct protid *CRED)
     ロックされたノードNPに対して割当てられたディスクを、少なくとも
     SIZEバイト以上になるようサイズを拡張し、実際に割当てられたサイズ
     を`NP->allocsize'にセットする。割当てられているサイズが既にSIZEバ
     イトである場合には、何もしない。CREDは、この関数の呼出しに責任を
     負うユーザを識別する。

 -- Function: error_t diskfs_node_reload (struct node *NODE)
     この関数は、ディスクに対して一切書込みを行うことなく、ディスクか
     らノードNODEに固有なデータをすべて再読込みしなければならない。こ
     れは常に、DISKFS_READONLYが真にセットされた状態で呼出される。

 -- Function: error_t diskfs_reload_global_state (void)
     この関数は、キャッシュされているすべてのグローバルな状態を無効に
     しなければならない。また、ディスクに対して一切書込みを行うことな
     く、必要に応じてディスクからそれを再読込みしなければならない。こ
     れは常に、DISKFS_READONLYを真にセットした状態で呼出される。常に、
     この関数の呼出しに続いて、すべてのアクティブなノードに対して
     `diskfs_node_reload'が呼出されるので、この関数ではノード固有のデー
     タを再読込みする必要はない。

 -- Function: error_t diskfs_node_iterate (error_t (*FUN) (struct node *NP))
     アクティブなノードNPの１つ１つについて、FUNを呼出す。ノードは、
     FUNの呼出しの間はロックされる。FUNが任意のノードについてゼロ以外
     の値を返した場合は、即座に処理を停止し、その値を返す。

 -- Function: error_t diskfs_alloc_node (struct node *DP, mode_t MODE, struct node **NP)
     ロックされたディレクトリDPの中でモードMODEを持つノードとするため
     に新しいノードを割当てる。ただし、実際にそのモードをセットしたり、
     ディレクトリを変更したりすることはしない。これらは、呼出し側によっ
     て行われるからである。このリクエストに責任を負うユーザは、CREDに
     より識別することができる。新しく割当てられたノードを`*NP'にセット
     する。

 -- Function: void diskfs_free_node (struct node *NP, mode_t MODE)
     ノードNPを解放する。(`NP->dn_stat.st_mode'がゼロであったものにつ
     いては) ディスク上のコピーは既に`diskfs_node_update'によって同期
     が取られている。NPのかつてのモードがMODEである。

 -- Function: void diskfs_lost_hardrefs (struct node *NP)
     ロックされたノードNPは、まだいくつかlight reference（FIXME-J）は
     持つものの、ちょうど最後のhard reference（FIXME-J）を失ったところ
     である。

 -- Function: void diskfs_new_hardrefs (struct node *NP)
     ロックされたノードNPはこれまでhard reference（FIXME-J）を持たなかっ
     たが、ちょうど１つ獲得したところである。したがって、実際にユーザ
     がいなくてもlight reference（FIXME-J）を持つことができるようになっ
     た。

 -- Function: void diskfs_try_dropping_softrefs (struct node *NP)
     ノードNPは、まだいくつかlight reference（FIXME-J）は持つものの、
     ちょうど最後のhard reference（FIXME-J）を失ったところである。
     light reference（FIXME-J）に解放可能なものがあれば、それを解放す
     るような手段を講じる。DISKFS_NODE_REFCNT_LOCKとNPはどちらもロック
     されている。この関数は、`diskfs_lost_hardrefs'の後に呼出される。

 -- Function: void diskfs_node_norefs (struct node *NP)
     ノードNPはもはやreference（FIXME-J:リファレンス、参照？）を持たな
     い。`*NP'が保持されるべきでなければ、それも含めてローカルな状態を
     解放する。DISKFS_NODE_REFCNT_LOCKは保有されている。

 -- Function: error_t diskfs_set_hypermetadata (int WAIT, int CLEAN)
     フォーマット固有のバッファにある、ページングされていないメタデー
     タをディスクに書込む。この書込みは、WAITの値がゼロであれば、非同
     期に行われる。CLEANの値がゼロ以外であれば、この書込みが行われた後
     にファイルシステムは完全にクリーンな状態になり、ページングされて
     いないメタデータがその事実を示すことができなければならない。

 -- Function: void diskfs_write_disknode (struct node *NP, int WAIT)
     `NP->dn_stat'の中の情報とそれに関連するフォーマット固有の情報をディ
     スクに書込む。WAITが真であれば、物理的なメディアが完全に更新され
     た後にはじめて復帰する。

 -- Function: void diskfs_file_update (struct node *NP, int WAIT)
     ファイルNPの内容とそれに関連するすべてのメタデータをディスクに書
     込む。一般にこれは、メタデータのほとんどの部分に関して
     `diskfs_node_update'を呼出すことになる。WAITが真であれば、物理的
     なメディアが完全に更新された後にはじめて復帰する。

 -- Function: mach_port_t diskfs_get_filemap (struct node *NP, vm_prot_t PROT)
     NPのファイル内容に対応するメモリ・オブジェクトのポート(send right
     （FIXME-J:センド・ライト？）)を返す。PROTは、許容される最大限のア
     クセスを示す。エラーが発生した場合には、`MACH_PORT_NULL'を返し、
     `errno'をセットする。

 -- Function: struct pager * diskfs_get_filemap_pager_struct (struct node *NP)
     ロックされたノードNPに対してdiskfs_get_filemapが返したページャを
     参照する`struct pager *'を返す。この戻り値は、`pager_memcpy'の引
     数として使うのに適している。

 -- Function: vm_prot_t diskfs_max_user_pager_prot (void)
     すべてのアクティブなユーザ・ページャに設定された最大限の`prot'パ
     ラメータ(`diskfs_get_filemap'の第２引数) のビットごとのORを返す。

 -- Function: int diskfs_pager_users (void)
     ユーザによって使用されているかもしれないエクスポートされたページャ・
     ポートが存在すればゼロ以外の値を返す。この関数がゼロを返すまでは、
     それ以上のページャの生成はブロックされるべきである。

 -- Function: void diskfs_sync_everything (int WAIT)
     すべてのページャをsync（FIXME-J）して、hypermetadata（FIXME-J:ハ
     イパメタデータ？）を除き、ディスク上に存在するべきデータをすべて
     書込む。WAITが真であれば、物理的なメディアが完全に更新された後に
     はじめて復帰する。

 -- Function: void diskfs_shutdown_pager (void)
     すべてのページャをシャットダウンする。これは一度始めると元に戻す
     ことはできず、ファイルシステムが終了する時に実行される。




File: hurd-ja.info, Node: Diskfs Options, Next: Diskfs Internals, Prev: Diskfs Callbacks, Up: Diskfs Library

Diskfsオプション
----------------

このサブセクションで説明する関数や変数には既に`libdiskfs'の中にデフォ
ルトの実装があるため、それらを再定義するよう強制されることはない。ケー
ス・バイ・ケースで、それらを再定義しても構わない。

オプション(任意選択)の変数はいずれも、プログラムが起動したらすぐに(例
えば引数解析のようなdiskfs関数の呼出しを行うよりも前に) 値をセットしな
ければならない。

 -- Variable: int diskfs_hard_readonly
     ファイルシステムのメディアを決して書込み可能にすることができない
     のであれば、この変数にゼロ以外の値をセットするべきである。

 -- Variable: char * diskfs_extra_version
     --versionオプションが使われた際に表示されるべき追加的なバージョン情報をここにセットする。

 -- Variable: int diskfs_shortcut_symlink
     これは、ファイルシステム・フォーマットがショートカットのためのシ
     ンボリック・リンクtranslation(FIXME-J:翻訳、トランスレーション？) 
     をサポートしている場合に限り、ゼロ以外の値を取るべきである。ライ
     ブラリは、ユーザがこのノードの内容を直接読み書きできないことを保
     証する。ライブラリがこのような保証を行うのは、symlink
     hook(FIXME-J:シンボリック・リンクをフックする、シンボリック・リン
     クのフック？)関数(`diskfs_create_symlink_hook'と
     `diskfs_read_symlink_hook') が`EINVAL'を返す場合か、それらの関数
     が定義されていない場合だけである。たとえhook function(FIXME-J:フッ
     ク関数？)が使われている場合でも、ライブラリは、`dn_stat.st_size'
     フィールドがsymlink(FIXME-J:シンボリック・リンク？)の長さであるこ
     とを知っている。

 -- Variable: int diskfs_shortcut_chrdev
 -- Variable: int diskfs_shortcut_blkdev
 -- Variable: int diskfs_shortcut_fifo
 -- Variable: int diskfs_shortcut_ifsock
     これらの変数は、ファイルシステム・フォーマットが、ショートカット
     のためのキャラクタ・デバイス・ノード、ブロック・デバイス・ノード、
     FIFO、UNIXドメイン・ソケットのtranslation(FIXME-J:翻訳、ランスレー
     ション？)をそれぞれサポートしている場合にのみ、ゼロ以外の値を取る
     べきである。

 -- Variable: int diskfs_default_sync_interval
     最初のdiskfsスレッドが（`diskfs_spawn_first_thread'の中で）起動さ
     れた時に、この値を引数として`diskfs_set_sync_interval'が呼出され
     る。この変数のデフォルトの値は30であり、このデフォルトでは、ディ
     スク・バッファは少なくとも30秒ごとにフラッシュされることになる。

 -- Function: error_t diskfs_validate_mode_change (struct node *NP, mode_t MODE)
 -- Function: error_t diskfs_validate_owner_change (struct node *NP, uid_t UID)
 -- Function: error_t diskfs_validate_group_change (struct node *NP, gid_t GID)
 -- Function: error_t diskfs_validate_author_change (struct node *NP, uid_t AUTHOR)
 -- Function: error_t diskfs_validate_flags_change (struct node *NP, int FLAGS)
 -- Function: error_t diskfs_validate_rdev_change (struct node *NP, dev_t RDEV)
     ノードNPが要求されたとおりに変更可能であればゼロを返す。これはす
     なわち、NPのモードをMODEに、オーナをUIDに、グループをGIDに、
     author（FIXME-J：作成者？）をAUTHORに、フラグをFLAGSに、ロー・デ
     バイス番号をRDEVに、それぞれ変更可能である場合を指す。変更可能で
     ない場合はエラー・コードを返す。

     モードやフラグをクリアすることは常に可能でなければならない。
     diskfsは、これらをクリアする前に許可を求めることはしない。

 -- Function: void diskfs_readonly_changed (int READONLY)
     これは、ディスクが読込みのみ可能なモードから読み書き可能なモード
     に変更された時、あるいは、その逆の変更が行われた時に呼出される。
     READONLYは新しい状態を表す（これはDISKFS_READONLYにも反映される）。
     ファイルシステムが書込み可能なものとなる場合、この関数は初期起動
     時にも呼出される。

 -- Variable: error_t (* diskfs_create_symlink_hook ) (struct node *NP, char *TARGET)
     この関数ポインタがゼロ以外の値である場合（かつ、
     `diskfs_shortcut_symlink'がセットされている場合）、
     symlink(FIXME-J:シンボリック・リンク？)をセットするためにその関数
     が呼出される。その関数が`EINVAL'を返した場合、あるいは、そもそも
     関数がセットされていない場合、通常の方式（すなわち、ファイル・デー
     タへの書込み）が使われる。これ以外のエラーが返された場合は、その
     エラーはユーザに返される。

 -- Variable: error_t (* diskfs_read_symlink_hook ) (struct node *NP, char *TARGET)
     この関数ポインタがゼロ以外の値である場合（かつ、
     `diskfs_shortcut_symlink'がセットされている場合）、
     symlink(FIXME-J:シンボリック・リンク？)の内容を読込むためにその関
     数が呼出される。その関数が`EINVAL'を返した場合、あるいは、そもそ
     も関数がセットされていない場合、通常の方式（すなわち、ファイル・
     データの読込み）が使われる。これ以外のエラーが返された場合は、そ
     のエラーはユーザに返される。

 -- Function: error_t diskfs_rename_dir (struct node *FDP, struct node *FNP, char *FROMNAME, struct node *TDP, char *TONAME, struct protid *FROMCRED, struct protid *TOCRED)
     （FDPを親ディレクトリ・ノードとして持ち、そのディレクトリの中で
     FROMNAMEという名前を持つ）ディレクトリ・ノードFNPを、ディレクトリ
     TDPの中でTONAMEという名前を持つように、名前変更する。これらのノー
     ドはどれもロックされておらず、関数の復帰時にどれもロックされてい
     てはならない。このルーチンはserialize（FIXME-J:シリアライズ？）さ
     れるので、再入可能である必要はない。ディレクトリがこのルーチン以
     外によって名前変更されることは決してない。FROMCREDはFDPとFNPに対
     して責任を負うユーザである。また、TOCREDはTDPに対して責任を負うユー
     ザである。このルーチンは、`.'と`..'は普通の慣例どおり通常のリンク
     によって表されるものと想定している。あなたが実装するフォーマット
     においてこの想定が正しくない場合、あなたはこの関数を再定義しなけ
     ればならない。

 -- Function: error_t diskfs_clear_directory (struct node *DP, struct node *PDP, struct protid *CRED)
     ディレクトリDPから`.'と`..'のエントリをクリア（FIXME-J:削除？）す
     る。DPの親ディレクトリがPDPであり、この親ディレクトリに対して責任
     を負うユーザはCREDにより識別される。どちらのディレクトリもロック
     されていなければならない。このルーチンは、`.'と`..'は普通の慣例ど
     おり通常のリンクによって表されるものと想定している。あなたが実装
     するフォーマットにおいてこの想定が正しくない場合、あなたはこの関
     数を再定義しなければならない。

 -- Function: error_t diskfs_init_dir (struct node *DP, struct node *PDP, struct protid *CRED)
     ロックされたノードDPは新規ディレクトリである。これに構造体
     （FIXME-J:構造？）を提供するために必要なリンクをすべて追加する。
     このノードの親ノードが（ロックされている）PDPである。このルーチン
     は、PDPに対して`diskfs_lookup'を呼出さないこともある。この新規ディ
     レクトリは、`diskfs_dirempty'の意味する範囲においてクリア
     （FIXME-J:？）でなければならない。このルーチンは、`.'と`..'は普通
     の慣例どおり通常のリンクによって表されるものと想定している。あな
     たが実装するフォーマットにおいてこの想定が正しくない場合、あなた
     はこの関数を再定義しなければならない。CREDは、この関数呼出しをお
     こなったユーザを識別する。




File: hurd-ja.info, Node: Diskfs Internals, Prev: Diskfs Options, Up: Diskfs Library

Diskfsの内部詳細
----------------

このライブラリは以下の関数群もエクスポートしている。ただし、このライブ
ラリが提供している他の関数群を再定義するのでなければ、これらは一般的に
は有用ではない。

 -- Function: error_t diskfs_create_protid (struct peropen *PO, struct iouser *USER, struct protid **CRED)
     ユーザUSERを指すCREDの中の既存のperopen POに対応するprotidを作成
     して返す。ノード`PO->np'はロックされていなければならない。

 -- Function: error_t diskfs_start_protid (struct peropen *PO, struct protid **CRED)
     peropen POに対応する、ユーザ識別情報を持たないprotidをCREDの中に
     構築して返す。ノード`PO->np'はロックされていなければならない。

 -- Function: void diskfs_finish_protid (struct protid *CRED, struct iouser *USER)
     `diskfs_start_protid'により開始されたprotid CREDの構築を終了させ
     る。protidに組み込まれるユーザがUSERである。

 -- Function: void diskfs_protid_rele (void *ARG)
     protid CREDがもはやreference（FIXME-J:リファレンス、参照？）を持
     たなくなった時に呼出される。protidへのreference（FIXME-J:リファレ
     ンス、参照？）はポート管理ライブラリによって保守されるため、これ
     はクリーンな（FIXME-J:？）ルーチンの一覧に含められる。ポート・ラ
     イブラリがこの構造体を解放する。

 -- Function: struct peropen * diskfs_make_peropen (struct node *NP, int FLAGS, struct peropen *CONTEXT)
     ノードNP上にオープン・フラグFLAGSを持つ新しいperopen構造体を作成
     して返す。`root_parent'、`shadow_root'、`shadow_root_parent'の各
     フィールドの初期値は、CONTEXTがゼロ以外であればそこからコピーされ
     る。CONTEXTがゼロであれば、これらの値はいずれもゼロにセットされる。

 -- Function: void diskfs_release_peropen (struct peropen *PO)
     POに対するreference（FIXME-J:リファレンス、参照？）・カウントをデ
     クリメントする。

 -- Function: error_t diskfs_execboot_fsys_startup (mach_port_t PORT, int FLAGS, mach_port_t CTL, mach_port_t *REAL, mach_msg_type_name_t *REALPOLY)
     この関数は、execserverのブートストラップのために`S_fsys_startup'
     により呼出される。execserverは本物のノードがなくても機能すること
     ができるので、このようなぺてんが可能である（FIXME-J:？）。引数は
     `<hurd/fsys.defs>'の中の`fsys_startup'と同様である。

 -- Function: int diskfs_demuxer (mach_msg_header_t *INP, mach_msg_header_t *OUTP)
     diskfsポートに対して入ってくる`libports'メッセージをdemultiplex
     （FIXME-J:？）する。

diskfsライブラリは、fs、io、fsys、interrupt、notifyの各インターフェイ
スをdemultiplex（FIXME-J:？）するための関数群も提供している。すべての
サーバ・ルーチンは、`diskfs_S_'という接頭辞を持つ。これらのルーチンに
ついては、`file_t'型、もしくは、`io_t'型の`in'（入力）引数は、スタブか
らは`struct protid *'として見える。




File: hurd-ja.info, Node: Twisted Filesystems, Next: Distributed Filesystems, Prev: Stored Filesystems, Up: Top

Twisted（FIXME-J:？）ファイルシステム
*************************************

Hurdでは、ファイルシステムに対するリクエストをトランスレータが別のトラ
ンスレータへ転送することが可能であり、これにより、背後にあるデータが同
一であっても、それが複数の異なる見え方をするというような実装を実現する
ことが可能になる。この章で説明するトランスレータは、データに対する直接
的なアクセスを提供するものではない。むしろ、既存の物理的なファイルシス
テム・レイアウトを単純化するのに役立つ構成ツールである。

これらのトランスレータは細心の注意を払って使うべきである。さもないと、
ファイルシステムは厳密なツリー構造であってほしいと考えている人々に、誤っ
て害を与えることがあるかもしれない。 (1) (*Note Twisted
Filesystems-Footnotes::)

FIXME: finish


symlink, firmlink
=================

hostmux, usermux
================

shadowfs
========



File: hurd-ja.info  Node: Twisted Filesystems-Footnotes, Up: Twisted Filesystems

(1) ねじれ曲がったファイルシステムの迷路の中で迷子になってしまう、等々
...



File: hurd-ja.info, Node: Distributed Filesystems, Next: Networking, Prev: Twisted Filesystems, Up: Top

分散ファイルシステム
********************

分散ファイルシステムは、何らかのネットワーク接続を使って別々のマシン間
でファイルを共有するために設計されている。そのデザインは、stored
（FIXME-J）ファイルシステムのデザインとは大きく異なっている(*Note
Stored Filesystems::)。ネットワークの遅延や障害といった問題に対処する
必要があり、また、複数のファイル・サーバ間でやりとりされる複雑な
authentication（FIXME-J:認証？）プロトコルやreplication（FIXME-J）プロ
トコルを必要とする可能性もある。

* Menu:

* File Transfer Protocol::      FTPベースの分散ファイルシステム。
* Network File System::         SunのNFS: 出来は悪いが、よく使われているファイルシステム。




File: hurd-ja.info, Node: File Transfer Protocol, Next: Network File System, Prev: Distributed Filesystems, Up: Distributed Filesystems

File Transfer Protocol
======================

FIXME: finish

* Menu:

* FTP Connection Library::      Managing remote FTP server connections.


ftpcp, ftpdir
-------------

ftpfs
-----



File: hurd-ja.info, Node: FTP Connection Library, Prev: File Transfer Protocol, Up: File Transfer Protocol

FTP Connection Library
----------------------

FIXME: finish




File: hurd-ja.info, Node: Network File System, Prev: File Transfer Protocol, Up: Distributed Filesystems

Network File System
===================

FIXME: finish


nfsd
----

nfs
---




File: hurd-ja.info, Node: Networking, Next: Terminal Handling, Prev: Distributed Filesystems, Up: Top

Networking
**********

FIXME: this subsystem is in flux 
* Menu:

* Socket Interface::            Network communication I/O protocol.



pfinet
======

pflocal
=======

libpipe
=======



File: hurd-ja.info, Node: Socket Interface, Prev: Networking, Up: Networking

Socket Interface
================

FIXME: net frobbing stuff may be added to socket.defs




File: hurd-ja.info, Node: Terminal Handling, Next: Running Programs, Prev: Networking, Up: Top

Terminal Handling
*****************

FIXME: finish


term
====

term.defs
=========




File: hurd-ja.info, Node: Running Programs, Next: Authentication, Prev: Terminal Handling, Up: Top

Running Programs
****************

FIXME: finish


ps, w
=====

libps
=====

exec
====

proc
====

crash
=====




File: hurd-ja.info, Node: Authentication, Next: Index, Prev: Running Programs, Up: Top

Authentication
**************

FIXME: finish

* Menu:

* Auth Interface::              Auth ports implement the auth interface.


addauth, rmauth, setauth
========================

su, sush, unsu
==============

login, loginpr
==============

auth
====



File: hurd-ja.info, Node: Auth Interface, Prev: Authentication, Up: Authentication

Auth Interface
==============

FIXME: finish

* Menu:

* Auth Protocol::               Bidirectional authentication.



File: hurd-ja.info, Node: Auth Protocol, Prev: Auth Interface, Up: Auth Interface

Auth Protocol
-------------

FIXME: finish




File: hurd-ja.info, Node: Index, Prev: Authentication, Up: Top

Index
*****


* Menu:

* FTP:                          File Transfer Protocol.  4.
* GRUB:                         Bootloader.             12.
* GRand Unified Bootloader:     Bootloader.             12.
* MOM:                          Microkernel Object Library.  12.
* Microkernel Object Model:     Microkernel Object Library.  12.
* NFS:                          Network File System.    4.
* RAID-0:                       Store Classes.          198.
* XP (external pager):          Pager Library.          5.
* appending disks:              Store Classes.          171.
* auth.defs:                    Auth Interface.         4.
* /boot/servers.boot:           Boot Scripts.           4.
* `concat' store:               Store Classes.          170.
* concatenation, disk:          Store Classes.          171.
* conch:                        Conch Management.       5.
* `copy' store:                 Store Classes.          124.
* cthreads.h:                   Threads Library.        4.
* `device drivers':             Store Classes.          66.
* `device' store:               Store Classes.          65.
* disk-based filesystems:       Stored Filesystems.     4.
* disk concatenation:           Store Classes.          171.
* disk striping:                Store Classes.          198.
* diskfs_S_*:                   Diskfs Internals.       48.
* diskfs.h:                     Diskfs Library.         4.
* disks, appending:             Store Classes.          171.
* disks, interleaving:          Store Classes.          198.
* ext2fs:                       Linux Extended 2 FS.    4.
* external pager (XP):          Pager Library.          5.
* file_chauthor:                Changing Status.        17.
* file_chflags:                 Changing Status.        22.
* file_chmod:                   Changing Status.        20.
* file_chown:                   Changing Status.        12.
* file_exec:                    Program Execution.      5.
* file_lock:                    File Locking.           9.
* file_lock_stat:               File Locking.           9.
* file_set_size:                Changing Status.        32.
* `file' store:                 Store Classes.          81.
* file_utimes:                  Changing Status.        28.
* filesystems, disk-based:      Stored Filesystems.     4.
* fs.defs:                      File Interface.         4.
* fsck:                         Repairing Filesystems.  4.
* fshelp.h:                     Fshelp Library.         4.
* fsys.defs:                    Filesystem Interface.   4.
* ftpconn.h:                    FTP Connection Library.  4.
* `gunzip' store:               Store Classes.          150.
* halt:                         Shutdown.               4.
* ihash.h:                      Integer Hash Library.   4.
* `ileave' store:               Store Classes.          197.
* interleaving disks:           Store Classes.          198.
* io_async:                     Asynchronous I/O.       5.
* io_clear_some_openmodes:      Open Modes.             5.
* io.defs:                      I/O Interface.          4.
* io_duplicate:                 I/O Object Ports.       40.
* io_get_icky_async_id:         Asynchronous I/O.       39.
* io_get_openmodes:             Open Modes.             5.
* io_get_owner:                 Asynchronous I/O.       39.
* io_map:                       Mapped Data.            5.
* io_mod_owner:                 Asynchronous I/O.       39.
* io_read:                      Simple Operations.      17.
* io_readable:                  Simple Operations.      43.
* io_reauthenticate:            I/O Object Ports.       49.
* io_restrict_auth:             I/O Object Ports.       43.
* io_seek:                      Simple Operations.      38.
* io_select:                    Asynchronous I/O.       29.
* io_server_version:            Information Queries.    47.
* io_set_all_openmodes:         Open Modes.             5.
* io_set_some_openmodes:        Open Modes.             5.
* io_stat:                      Information Queries.    5.
* io_write:                     Simple Operations.      5.
* iohelp_fetch_shared_data:     Conch Management.       5.
* iohelp_get_conch:             Conch Management.       5.
* iohelp.h:                     Iohelp Library.         4.
* iohelp_handle_io_get_conch:   Conch Management.       5.
* iohelp_handle_io_release_conch: Conch Management.     5.
* iohelp_initialize_conch:      Conch Management.       5.
* iohelp_put_shared_data:       Conch Management.       5.
* iohelp_verify_user_conch:     Conch Management.       5.
* isofs:                        ISO-9660 CD-ROM FS.     4.
* libdiskfs:                    Diskfs Library.         4.
* libfshelp:                    Fshelp Library.         4.
* libftpconn:                   FTP Connection Library.  4.
* libhurdbugaddr:               Bug Address Library.    4.
* libihash:                     Integer Hash Library.   4.
* libiohelp:                    Iohelp Library.         4.
* libmom:                       Microkernel Object Library.  4.
* libpager:                     Pager Library.          4.
* libports:                     Ports Library.          4.
* libshouldbeinlibc:            Misc Library.           4.
* libstore:                     Store Library.          4.
* libstorefs:                   Diskfs Library.         12.
* libthreads:                   Threads Library.        4.
* libtrivfs:                    Trivfs Library.         4.
* linear concatenation:         Store Classes.          171.
* mom.h:                        Microkernel Object Library.  4.
* `mvol' store:                 Store Classes.          225.
* pager.h:                      Pager Library.          4.
* ports.h:                      Ports Library.          4.
* `query' store:                Store Classes.          22.
* reboot:                       Shutdown.               4.
* `remap' store:                Store Classes.          249.
* serverboot:                   Server Bootstrap.       4.
* servers.boot:                 Boot Scripts.           4.
* settrans:                     Invoking settrans.      4.
* socket.defs:                  Socket Interface.       4.
* store.h:                      Store Library.          4.
* striping, disk:               Store Classes.          198.
* `task' store:                 Store Classes.          97.
* trivfs.h:                     Trivfs Library.         4.
* `typed_open' store:           Store Classes.          38.
* ufs:                          BSD Unix FS.            4.
* `zero' store:                 Store Classes.          112.


