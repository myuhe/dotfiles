Info file: hustler.,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `elisplec.texi'
using `texinfmt.el' version 2.37 of 24 May 1997.







File: hustler., Node: Top, Next: Writing Major Modes, Prev: (dir), Up: (dir)

* Menu:

* Writing Major Modes::         メジャーモードを書こう
* Construction of Emacs-Lisp::  Emacs-Lisp の構文
* Functions You Must Know::     最低限の関数をおさえる
* Completion Input::            補完入力とその周辺
* Concept Index::               
* Function Index::              
* Variable Index::              

 -- The Detailed Node Listing ---

メジャーモードを書こう

* What is Major Mode?::         
* Requirements of a Major Mode::  メジャーモードの必須条件
* Defining Major Mode Functions::  メジャーモード関数の定義
* Exercise 1::                  章末問題 1
* Summary 1::                   まとめ 1
* By-talk 1::                   

メジャーモードの必須条件

* Setting Mode Names::          モード名の設定
* Setting Keymaps::             キーマップの設定
* Setting Keys::                キーの割当て
* Declaring Local Maps::        ローカルマップ使用宣言

メジャーモード関数の定義

* Interactive Functions::       インタラクティブ関数
* Binding Interactive Functions to Keys::  インタラクティブ関数をキーにバイ
                                           ンドする
* Defining Functions::          関数を実際に定義する

Emacs-Lisp の構文

* Variables::                   変数
* Control Structure::           制御構造
* Arithmetic::                  算術
* Exercise 2::                  章末問題
* By-talk 2::                   余談 2 関数・変数
* By-talk 3::                   余談 3 デバッギング
* By-talk 4::                   余談 4 プログラムの評価

変数

* Declaring Variables::         変数の宣言
* Restricting Variables::       変数の束縛

制御構造

* if::                          
* or::                          
* and::                         
* cond::                        
* while::                       
* catch trow::                  

算術

* Operators::                   演算子
* Arithmetic Functions::        算術関数

最低限の関数をおさえる

* Cursor Motion::               カーソルの移動
* Inserting and Deleting Strings::  文字列挿入/削除
* By-talk 5::                   余談 5 雑関数
* By-talk 6::                   余談 6 Emacs-Lisp のスコープ

カーソル移動

* Relative Motion::             相対移動
* Absolute Motion::             絶対移動
* Motion Boundary Check::       移動境界の検査
* Absolute Motion Summary::     絶対移動関係のまとめ
* Motion by Search::            検索移動
* Search Functions Summary::    検索関数のまとめ
* Saving point Position::       ポイント位置の保存

相対移動

* Character Motion::            char 単位移動
* Word Motion::                 word 単位移動
* Line Motion::                 line 移動

絶対移動

* point::                       ポイント
* Motion by Point::             ポイント移動
* Moving to a Line::            行移動
* Moving to a Column::          桁移動

検索移動

* Lisp Escape Characters::      Lisp エスケープキャラクタ
* String Search::               文字列検索
* Word Search::                 単語検索
* Regular Expression Search::   正規表現検索
* Major Metacharacters::        代表的なメタキャラクタ
* Skipping Characters::         文字(種)スキップ
* Accessing Search Results::    検索結果へのアクセス

検索関数のまとめ

* Exercise 3-1::                練習問題 3-1

文字列挿入/削除

* Inserting Strings::           文字列挿入
* Transforming Types::          文字列と他の型の変換
* Type Transformation::         型変換
* Deleting Strings::            文字列削除
* Replacing Strings::           文字列置換
* Buffer Editing Functions Summary::  バッファ編集関数のまとめ

文字列挿入

* insert-char::                 文字の挿入
* self-insert-command::         

文字列と他の型の変換

* format::                      

型変換

* Getting Strings::             文字列の取込み
* Numerical Transformation::    数値変換
* Strings Transformation::      文字列変換
* String Manipulation Functions::  文字列操作関数

余談 6 Emacs-Lisp のスコープ

* Exercise 3-2::                練習問題 3-2

補完入力とその周辺

* Normal Input Functions::      一般入力関数
* Completion Input Functions::  補完入力関数
* By-talk 7::                   余談 7 マクロ

補完入力関数

* List::                        リスト
* List Structure::              リストの構造
* List Manipulation Functions::  リスト処理関数
* Association Lists::           連想リスト

リスト処理関数

* Creating lists::              リストの作成
* Accessing list Elements::     リストの要素の参照
* Adding Elements to list::     リストの要素の追加
* Appending lists::             リストどうしの結合
* List Related Predicates::     述語関数等

余談 7 マクロ

* Exercise 4-1::                余談練習小問題
* completing-read::             
* Variables Controlling Completion::  補完を制御する関数
* try-completion::              
* all-completion display-completion-list::  



File: hustler., Node: Writing Major Modes, Next: Construction of Emacs-Lisp, Prev: Top, Up: Top

メジャーモードを書こう
**********************


  多くの `Emacs(-Lisp)' 関係の教本の常識を無視して、いきなりここから始めま
す。これがもっとも早い道だと信じるからで、事実私もそうしてきました。


* Menu:

* What is Major Mode?::         
* Requirements of a Major Mode::  メジャーモードの必須条件
* Defining Major Mode Functions::  メジャーモード関数の定義
* Exercise 1::                  章末問題 1
* Summary 1::                   まとめ 1
* By-talk 1::                   




File: hustler., Node: What is Major Mode?, Next: Requirements of a Major Mode, Prev: Writing Major Modes, Up: Writing Major Modes

メジャーモードってなに
======================

  多くの `Emacs-Lisp' プログラマがで最終的に目指す目標の一つが、「メジャー
モードが書けるようになる」ことでしょう。メジャーモードとは、例えば 
`c-mode' のように対象となるテキストの種別に適した、もっと言うと「専用の」
編集モードの事を指します。

  `GNU Emacs' では、編集ファイルのファイル名のパターンと、そのファイルを編
集する時に用いるメジャーモードを決定するものとして、変数 `auto-mode-alist' 
を使用しています。これは今まで、いろいろなパッケージをインストールしたこと
のある人なら、設定したことがあるでしょうから、詳しい構造などについては述べ
ません。




File: hustler., Node: Requirements of a Major Mode, Next: Defining Major Mode Functions, Prev: What is Major Mode?, Up: Writing Major Modes

メジャーモードの必須条件
========================

  では、早速メジャーモードを書いてみましょう。その前に、メジャーモードの備
えているべき最低限の条件について整理してみましょう。

   * モード名を設定する。
   * 使用するキーマップを設定する。
   * 必要な変数を設定する。

たったこれだけなのです。

* Menu:

* Setting Mode Names::          モード名の設定
* Setting Keymaps::             キーマップの設定
* Setting Keys::                キーの割当て
* Declaring Local Maps::        ローカルマップ使用宣言




File: hustler., Node: Setting Mode Names, Next: Setting Keymaps, Prev: Requirements of a Major Mode, Up: Requirements of a Major Mode

モード名の設定
--------------

  モード名は、変数 `major-mode' にシンボルとして入れます。

     (setq major-mode 'my-mode)

  ついでに、モードラインのモード名フィールドも変えましょう。これは、変数 
`mode-name' に文字列で設定します。

     (setq mode-name "MY mode")

  どちらも、今から書こうとするモードの名前を設定します。好きな名前で構いま
せん。




File: hustler., Node: Setting Keymaps, Next: Setting Keys, Prev: Setting Mode Names, Up: Requirements of a Major Mode

キーマップの設定
----------------

  「どのキーを押した時に、どの機能を呼び出すか」という対応表のことを 
`Emacs' ではキーマップと言います。`C-n', `C-p' など、どのモードでもほぼ共
通で使えるキーバインドはグローバルマップに、モードに固有のキーバインドは、
ローカルマップに設定します。通常グローバルマップは変数 `global-map' を*常
に*使用します。(*Note setting global-map: Binding Interactive Functions to
Keys.)

  メジャーモードが固有のキーバインドを使用する場合、独自のローカルマップを
作成し、そのローカルマップを使用する宣言をしなければなりません。ローカルマッ
プを作成するには次のようにします。この例では変数 `my-local-map' をローカル
マップとしています。

     (setq my-local-map (make-keymap))これで、`my-local-map' というローカ
ルマップが作成できました。あとは、このマップに必要なキーバインドを定義して
行くだけです。




File: hustler., Node: Setting Keys, Next: Declaring Local Maps, Prev: Setting Keymaps, Up: Requirements of a Major Mode

キーの割当て
------------

  ローカルマップにキーを割当てるには、関数 `define-key' を使用します。
`define-key' は引数を三つ取り、順に、キーマップ、割当キー(文字列)、機能(シ
ンボル)となっています。では `vi' のように `hjkl' に左下上右を割当ててみま
しょう。

     (define-key my-local-map "h" 'backward-char)
     (define-key my-local-map "j" 'previous-line)
     (define-key my-local-map "k" 'next-line)
     (define-key my-local-map "l" 'forward-char)




File: hustler., Node: Declaring Local Maps, Prev: Setting Keys, Up: Requirements of a Major Mode

ローカルマップ使用宣言
----------------------

  では、今 `my-local-map' に割当てたバインド有効となるように、ローカルマッ
プの使用宣言をします。

     (use-local-map my-local-map)これで、カレントバッファで `hjkl' が有効
になります。




File: hustler., Node: Defining Major Mode Functions, Next: Exercise 1, Prev: Requirements of a Major Mode, Up: Writing Major Modes

メジャーモード関数の定義
========================

* Menu:

* Interactive Functions::       インタラクティブ関数
* Binding Interactive Functions to Keys::  インタラクティブ関数をキーにバイ
                                           ンドする
* Defining Functions::          関数を実際に定義する




File: hustler., Node: Interactive Functions, Next: Binding Interactive Functions to Keys, Prev: Defining Major Mode Functions, Up: Defining Major Mode Functions

インタラクティブ関数
--------------------

  メジャーモードを起動する関数を定義する前に インタラクティブ関数について
知っておきましょう。`Emacs-Lisp' の関数には、インタラクティブ関数と、そう
でない関数があります。`C-n' や `M-x gnus' のようにキーボード操作で直接呼び
出すことができる関数をインタラクティブ関数と言います。それ以外の関数は、ユー
ザが直接呼び出すことはできず、様々な処理の下請関数としてだけ呼ばれます。
`C-f' にバインドされている `forward-char' ももちろんインタラクティブ関数と
なっています。

  メジャーモードの核となる関数は、当然インタラクティブ関数にしなければなり
ませんから、関数定義は次のような形になります。

     (defun my-mode ()
       (interactive)
       モード名の設定
       キーマップの設定
     )

今のところは、「関数定義の先頭におまじない `(interactive)' を入れる」と覚
えておいて下さい。(*Note defun: By-talk 2.)




File: hustler., Node: Binding Interactive Functions to Keys, Next: Defining Functions, Prev: Interactive Functions, Up: Defining Major Mode Functions

インタラクティブ関数をキーにバインドする
----------------------------------------

  簡単なインタラクティブ関数を定義して、実際にキーに割当ててみましょう。バッ
ファに `Hello, world!' とだけ表示する関数は次のようになります。

     (defun hello-word ()
       (interactive)
       (insert "Hello, world!\n"))

すぐに試してみたいので、グローバルマップにキー割当してしまいましょう。

     (define-key global-map "\C-ch" 'hello-world)

これで、`C-ch' を押すとバッファに `hello, world!' が挿入されます。




File: hustler., Node: Defining Functions, Prev: Binding Interactive Functions to Keys, Up: Defining Major Mode Functions

関数を実際に定義する
--------------------

  ここまでで、必要最低限の知識は全て揃いました。次のようなメジャーモードが
作成できるはずです。

   * `my-mode' という名前のメジャーモードである。
   * `hjkl' でカーソル移動することができる。
   * `C-ch' を押すと `Hello, world!' が入力できる。

実際の関数定義は、次のようになります。


     (defun my-mode ()
       (interactive)
       (setq major-mode 'my-mode
         mode-name "MY mode")
       (setq my-local-map (make-keymap))
       (define-key my-local-map "h" 'backward-char)
       (define-key my-local-map "j" 'previous-line)
       (define-key my-local-map "k" 'next-line)
       (define-key my-local-map "l" 'forward-char)
       (define-key my-local-map "\C-ch" 'hello-world)
       (use-local-map my-local-map))

     (defun hello-world ()
       (interactive)
       (insert "Hello, world!\n"))





File: hustler., Node: Exercise 1, Next: Summary 1, Prev: Defining Major Mode Functions, Up: Writing Major Modes

章末問題 1
==========

問 1-1 `a-z' どのキーを押しても、「僕るねえもんナリよ」が挿入される
     「るねきちモード」を作りなさい。

答の提出をもって、参加表明とみなします。よろしゅうに


あっという間に宿題を提出した優秀な人へ追加問題。

問1-2 `a-z' を押すと、対応するアルファベットで、「僕luneえもんAなり
     よ」〜「僕luneえもんZなりよ」と、文字列の入る `luneえもんモード' を作
     成せよ。

暇な人だけ解いて下さい。




File: hustler., Node: Summary 1, Next: By-talk 1, Prev: Exercise 1, Up: Writing Major Modes

まとめ 1
========

  大事なことを書き忘れたかもしれない。面倒なので、これは junk風の書き方で
許して。

   * `Emacs-Lisp' プログラムは、`.el' という拡張子のファイルにする。
   * ファイルの先頭に `;-*- Emacs-Lisp -*-' と入れる。
   * `defun' した関数を評価するには、その関数にカーソルを合わせて `ESC
     C-x' する。すると即座に呼び出せる。
   * 括弧を一つだけ評価したい時には、閉じ括弧の右にカーソルをおいて `M-x
     eval-last-sexp'

                     --- ここまで Emacs-Lisp mode ---


   * 簡単な `Lisp' 式(S式と言う)をすぐに実行(評価と言う)するには 
     `*scratch*' バッファを利用する。
   * `*scratch*' バッファで何かS式を書いたら閉じ括弧の右で `C-j' を押すと
     すぐに評価されて結果が `*scratch*' バッファに入る。

  これだけ知ってれば、あなたも今日から `Emacs-Lisp' プログラマ。では good
luck!




File: hustler., Node: By-talk 1, Prev: Summary 1, Up: Writing Major Modes

余談 1 「〜関係の関数はないかな?」を探す。
==========================================

  関数を探す時に使うと便利なのが、`apropos' です。`M-x apropos' で出て来る
プロンプトで、関数名の正規表現を入力します。何か文字列操作のための関数を探
したかったら、

     M-x apr
     Apropos: string

などと問い合わせると良いでしょう。正規表現での指定なので、`string' で始ま
る関数を調べたかったら、`^string'という検索していも可能です。

ですから、今回の場合は、

     M-x apr
     Apropos: ^....-.......-....$

で、検索すれば良かったということになります。





File: hustler., Node: Construction of Emacs-Lisp, Next: Functions You Must Know, Prev: Writing Major Modes, Up: Top

Emacs-Lisp の構文
*****************


  本章では、`Lisp' 言語とみた場合の変数の扱いや、制御構造の表現の仕方につ
いて簡単に触れます。

* Menu:

* Variables::                   変数
* Control Structure::           制御構造
* Arithmetic::                  算術
* Exercise 2::                  章末問題
* By-talk 2::                   余談 2 関数・変数
* By-talk 3::                   余談 3 デバッギング
* By-talk 4::                   余談 4 プログラムの評価




File: hustler., Node: Variables, Next: Control Structure, Prev: Construction of Emacs-Lisp, Up: Construction of Emacs-Lisp

変数
====

  `Lisp' では変数は一つのシンボルとして存在しています。シンボルへの値の代
入は `set' によって行います。シンボル `foo' へ、値5を代入するには、

     (set 'foo 5)

としますが、一般的にはこれと等価な、

     (setq foo 5)

という書式を用います。`setq' は値の代入なので、常に変数の値は更新されます。

* Menu:

* Declaring Variables::         変数の宣言
* Restricting Variables::       変数の束縛



File: hustler., Node: Declaring Variables, Next: Restricting Variables, Prev: Variables, Up: Variables

変数の宣言
----------

  `defvar' は `setq' とは異なり変数の宣言のみを行います。書式は

     (defvar   シンボル 初期値 ドキュメンテーション文字列)

となっています。もし第一引数のシンボルが既に存在していた場合はその値は変更
しません。このため、`Emacs-Lisp' プログラムで使用するカスタマイズ可能な変
数のデフォルト値の設定をするためによく使われます。



File: hustler., Node: Restricting Variables, Prev: Declaring Variables, Up: Variables

変数の束縛
----------

  `Emacs' では多くの `Emacs-Lisp' プログラムが動作するため、シンボル名の衝
突は確実に回避しなければなりません。関数の内外にかかわらず単純に `setq' や 
`defvar' されたシンボルはすべてグローバル変数になってしまうので他のプログ
ラムの存在を考えると好ましくありません。そこで変数の有効範囲(スコープ)を制
限するために `let' を用います。

     (let (変数リスト) 実行部...)

「変数リスト」の部分は「変数名」または「(変数名 初期値)」の任意の個数の並
びです。変数名だけ指定するとその変数の値は `nil' にセットされます。次の例
は変数 `case-fold-search' を `t' にセットしてインクリメンタルサーチを呼び
出します。

     (let ((case-fold-search t))
       (isearch-forward))

`case-fold-search' は検索の時に大文字小文字を区別しないというフラグで、グ
ローバル変数となっています。`let' はグローバル変数の値を一時的に変更するた
めにも利用できます。

しかしカスタマイズ変数などはグローバルに値を保持する必要があるので、グロー
バル変数はやはり必要です。さらに、関数名はすべてグローバルシンボルとして扱
われます。そこで、グローバルシンボルを使用する時には、「すべてのグローバル
シンボルには作成パッケージ固有の接頭辞をつける」ことが強く勧められています。
例えば `supercite' パッケージで用いるシンボルには全て `sc-' という接頭辞が
ついています。




File: hustler., Node: Control Structure, Next: Arithmetic, Prev: Variables, Up: Construction of Emacs-Lisp

制御構造
========

`Emacs-Lisp' で主に用いる制御構造を説明します。

* Menu:

* if::                          
* or::                          
* and::                         
* cond::                        
* while::                       
* catch trow::                  



File: hustler., Node: if, Next: or, Prev: Control Structure, Up: Control Structure

if
--

  `if' は第一引数を評価し、それが `nil' でない値(今後 `non-nil')を返した場
合第二引数を評価しその値を返し、`nil' だった場合第三引数以降を (もしあれば)
評価し、最後の値を返します。

     (if CONDITION T-body Else-body...)

もし、条件が `non-nil' の時に評価したい関数が複数ある場合は、 `progn' を用
いて次のようにします。

     (if CONDITION (progn T-body...) Else-body...)

`progn' は任意個の引数を取り、最後の引数の値を `progn' の値として返します。




File: hustler., Node: or, Next: and, Prev: if, Up: Control Structure

or
--

  `or' は与えられた引数全てを順に評価し、`non-nil' を返すものがあった場合、
それを `or' の返す値とします。もしすべての引数を評価したものが `nil' だっ
た場合、`or' は `nil' を返します。

  ある変数の値が `t' の時に動作が禁止される関数などは次のように表現します。

     (or foo-key-map (setq foo-key-map (make-key-map)))

また、`or' のもつ「または」という意味で、次のように使うこともできます。

     (if (or A B) 処理)




File: hustler., Node: and, Next: cond, Prev: or, Up: Control Structure

and
---

  `and' は与えられた引数を順に評価し、`nil' を返すものが見つかったら直ちに 
`nil' を返します。最後の引数まで `non-nil' を返した場合、`and' は最後の引
数の値を返します。




File: hustler., Node: cond, Next: while, Prev: and, Up: Control Structure

cond
----

  `cond' は次の書式によります。

     (cond
      (式1  式1がnon-nilの時に返す式...)
      (式2  式2がnon-nilの時に返す式...)
         :
      (式n  式nがnon-nilの時に返す式...))


  次の例は、変数 `var-a', 変数 `var-b', 関数 `func-c' の値を順次調べて、ど
れかが `non-nil' の時に後続する関数群を評価します。もし、`var-a', `var-b',
`func-c' のどれも `nil' を返す時は、最後の条件ブロックの式が `t' なので最
後のブロックを評価します。

     (cond
      (var-a     (message "A!"))
      (var-b     (insert  "B!"))
      ((func-c)  (insert  "C"))
      (t     (message "NO!") (ding)))

なお、`cond' は途中の条件式が `non-nil' を返し後続するブロックを評価したら、
残りの条件ブロックは評価せずに抜けてしまいます。 `cond' の返す値は、
(`non-nil' を返した)条件ブロックの最後の式が返す値です。




File: hustler., Node: while, Next: catch trow, Prev: cond, Up: Control Structure

while
-----

  最初の条件式が `non-nil' である間、二番目以降の引数をくり返し評価します。

     (while 条件式 実行部...)

  これはループを形成する時に用いることができます。C の `for' または 
`while' のような繰り返しを行う時は、通常 `let' と組み合わせて次のように用
います。

     (let ((i ?a))
       (while (<= i ?z)
         (insert i)
         (setq i (1+ i))))

上の例は、`a〜z' をバッファ中に挿入します。この例から想像が付くように、 
`Emacs-Lisp' では文字コードを `?文字' で表現します。`?a' は `a' の文字コー
ドを示すので、97 と等価です。

  `while' は常に `nil' を返します(最後は条件式が `nil' となって終了するか
ら)。




File: hustler., Node: catch trow, Prev: while, Up: Control Structure

catch, throw
------------

  `catch' と `throw' は対にして使います。`catch' の書式を見ると、

     (catch タグ 実行部...)

となっていて、「実行部...」のいずれかで「タグ」が `throw' されると直ちに 
`catch' を抜けます。`throw' は

     (throw タグ 値)

のように使用し、この時の `catch' の返す値は第二引数の「値」となります。
もし「実行部...」で「タグ」が `throw' されなかった時は「実行部
...」の最後の値が `catch' の返す値となります。

  この関数のペアは、終了のタイミングの予測できないループを表現する時に使う
と便利です。例えば、バッファ末までに判定関数 `foo' を満足する行があるか調
べる場合を考えます。`catch', `throw' を使わずに書く場合は次のようになるで
しょう。

     (let (found)        ;局所フラグ nil 初期値
       (while (and (not found)(not eobp))
         (if (foo) (setq found t)
           (forward-line 1)))
       (if found
           見つかった場合の処理
         見つからなかった場合の処理))

ループが回る毎にフラグ `found' が `t' でないことを調べているので、少々無駄
な気がします。これを `catch', `throw' を使って書き直すと、

     (if (catch 'found
           (while (not eobp)
         (if (foo) (throw 'found t)
           (forward-line 1))))
         見つかった場合の処理
       見つからなかった場合の処理)

となります。もし `(foo)' が `non-nil' を返す行があった場合はループ内部で 
`'found' が `throw' されるので、`catch' 関数の値は `'found' となり最も外側
の `if' は見つかった場合の処理を評価します。逆に、 `foo' を満たす行が見つ
からなかった場合、内部の `while' が `nil' を返して終了するため、外側の 
`if' も、見つからなかった場合の処理を評価します。




File: hustler., Node: Arithmetic, Next: Exercise 2, Prev: Control Structure, Up: Construction of Emacs-Lisp

算術
====

* Menu:

* Operators::                   演算子
* Arithmetic Functions::        算術関数



File: hustler., Node: Operators, Next: Arithmetic Functions, Prev: Arithmetic, Up: Arithmetic

演算子
------

  `Emacs-Lisp' で使える演算子には以下のものがあります。

`%, *, +, -, /'
     剰余, 乗算, 加算, 減算, 除算
`1+, 1-'
     1加算, 1減算
`<, <=, =, /=, >, >='
     比較演算子(/=は≠)

`Lisp' では `*', `+', `-' は複数のオペランドを取ることができます。`-' は引
数が一つの時はその符号を反転し、二つ以上の時は一つ目の引数から残りの引数全
てを引きます。

また次の述語関数も必要でしょう。

`numberp(integerp)'
     数値なら `t' を返す

独自に定義した関数で受け取った引数が数値かどうか判定する時などに利用します。




File: hustler., Node: Arithmetic Functions, Prev: Operators, Up: Arithmetic

算術関数
--------

  利用頻度が高いと思われるものだけ紹介します。

`max, min'
     引数のうち(最大,最小)のものを返す
`random'
     24bits長の擬似乱数を返す引数として`t' を与えると乱数の種を変えて値を
     返す




File: hustler., Node: Exercise 2, Next: By-talk 2, Prev: Arithmetic, Up: Construction of Emacs-Lisp

章末問題 2
==========

問

     前問「るねきちモード」の `a-z' のキーバインドのうち、どれか一つのキー
     を押すと「自爆」と言ってバッファを消去する機能を付け加えよ。

     ヒント: char-to-string, ding, message, erase-buffer




File: hustler., Node: By-talk 2, Next: By-talk 3, Prev: Exercise 2, Up: Construction of Emacs-Lisp

余談 2 関数・変数
=================

基本的なことですが、変数は

     var

と、単体で参照し、関数は

     (func args...)

と括弧つきの形で参照します。

  `defun' の形は次のようになっています。

     (defun 関数名 (引数リスト) 関数定義)

引数に何もとらない時は空リストにして

     (defun 関数名 () 関数定義)

とします。

  さて、`Emacs-Lisp' の場合関数は必ず値を返します。関数の値は、その関数中
で最後に評価されたものの値となります。例えば次の関数の返り値は5となります。

     (defun foo () 5)

したがって次の例では、変数 `bar' に値5が返ることとなります。

     (setq bar (foo))

関数の返す値は、「最後に評価されたもの」であり「最後に書いてある式の値」で
はないので注意して下さい。

     (defun baz (arg)
       (if (< arg 0) (- arg) arg))

という例では、引数 `arg' が負の場合 `(- arg)' が、正の場合 `arg' が `baz' 
の返り値となります。




File: hustler., Node: By-talk 3, Next: By-talk 4, Prev: By-talk 2, Up: Construction of Emacs-Lisp

余談 3 デバッギング
===================

  変数の値を途中で表示させたい時には `message' 関数を使うと便利です。 
`message' 関数は C の `printf' のようなフォーマットが使えます。例えば、途
中で変数 `foo' の値を見たい時は

     (message "foo = %d" foo)

とします。もし、次の `message' などがすぐに出てしまい読み取れない時などは、
`sit-for' 関数を使ってn秒間止まらせると良いでしょう。

     (message "foo = %d" foo)
     (sit-for 2)     ;2秒間停止
         :
     (message "bar = %d" bar)



File: hustler., Node: By-talk 4, Prev: By-talk 3, Up: Construction of Emacs-Lisp

余談 4 プログラムの評価
=======================

  `defun' した関数を評価する時は、`ESC C-x' を使うのが良いでしょう。この時
関数を定義したらその場で `ESC C-x' をしてしまいましょう。するとその間数名
は以後どの場所でも、`ESC TAB' によって補完することが可能になります(変数名
も同様)。

     (defun lune-random ()
       なんちゃらかんちゃら)
     (defun lune-mode ()
       (interactive)
       (setq key lun

というところで、`ESC TAB' を押すと、`lune-random' が補完されます。

  さて出来上がった関数を評価する時は主に二つの方法が考えられます。

  1. `ESC ESC' で関数を評価するS式を入れる。
  2. `*scratch*' バッファに移ってS式を入れて `C-j' する。

上の `lune-random' 関数を試したい時は、

  1. ESC ESC `Eval: (lune-random) RET'
  2. `*scratch*'バッファに移動`(lune-random) C-j'

(2)の場合、`C-j' を押す直前のS式が評価されます。したがって、

     (setq random (lune-random))
                              ~~

の、最後の括弧の上で `C-j' を押すと `(lune-random)' だけが評価され `setq' 
されず、行末で `C-j' を押すと `setq' 全体が評価されます。




File: hustler., Node: Functions You Must Know, Next: Completion Input, Prev: Construction of Emacs-Lisp, Up: Top

最低限の関数をおさえる
**********************

  どんなメジャーモードでも書けるようになるために、必要最低限の関数を一気に
覚えてしまいましょう。ここでとり上げる必要最低限のコマンドは以下のものです。
    
   * カーソル移動(検索)
   * 文字列挿入/削除

* Menu:

* Cursor Motion::               カーソルの移動
* Inserting and Deleting Strings::  文字列挿入/削除
* By-talk 5::                   余談 5 雑関数
* By-talk 6::                   余談 6 Emacs-Lisp のスコープ



File: hustler., Node: Cursor Motion, Next: Inserting and Deleting Strings, Prev: Functions You Must Know, Up: Functions You Must Know

カーソル移動
============

  カーソルの移動コマンドには、相対移動、絶対移動、検索移動があります。いず
れもキーに割当てられている機能なので、関数名を知っているものもあるでしょう。

* Menu:

* Relative Motion::             相対移動
* Absolute Motion::             絶対移動
* Motion Boundary Check::       移動境界の検査
* Absolute Motion Summary::     絶対移動関係のまとめ
* Motion by Search::            検索移動
* Search Functions Summary::    検索関数のまとめ
* Saving point Position::       ポイント位置の保存



File: hustler., Node: Relative Motion, Next: Absolute Motion, Prev: Cursor Motion, Up: Cursor Motion

相対移動
--------

  `Emacs-Lisp' プログラムではあまり用いることのない関数ですが、各関数と引
数について説明します。

* Menu:

* Character Motion::            char 単位移動
* Word Motion::                 word 単位移動
* Line Motion::                 line 移動



File: hustler., Node: Character Motion, Next: Word Motion, Prev: Relative Motion, Up: Relative Motion

char 単位移動
.............

  `forward-char', `backward-char' どちらも引数を一つ取り、移動桁数を決定し
ます。前に3つ進みたい時は、`(forward-char 3)' のように呼び出します。もちろ
んこれらの関数は、`C-f', `C-b' にバインドされています。




File: hustler., Node: Word Motion, Next: Line Motion, Prev: Character Motion, Up: Relative Motion

word 単位移動
.............

  `forward-word', `backward-word' も移動単語数を指定する引数を一つ取ります。
`M-f', `M-b' にバインドされています。




File: hustler., Node: Line Motion, Prev: Word Motion, Up: Relative Motion

line 移動
.........

  行移動というと、`C-n', `C-p' にバインドされている `next-line',
`previous-line' を想像すると思いますが、これらの関数は `Emacs-Lisp' プログ
ラム中で用いません。これらの関数には `goal-column' の制御などの機能が含ま
れるため、プログラム中からはより単純で信頼性の高い `forward-line' を使用し
ます。なお、 `backward-line' という関数はないので、上に移動するには負の引
数を渡します。




File: hustler., Node: Absolute Motion, Next: Motion Boundary Check, Prev: Relative Motion, Up: Cursor Motion

絶対移動
--------

* Menu:

* point::                       ポイント
* Motion by Point::             ポイント移動
* Moving to a Line::            行移動
* Moving to a Column::          桁移動



File: hustler., Node: point, Next: Motion by Point, Prev: Absolute Motion, Up: Absolute Motion

ポイント
........

  カーソルの絶対移動の基準となる「ポイント」について知っておく必要がありま
す。`Emacs' ではカーソルの位置をバッファの先頭からのオフセットで管理してい
ます。このオフセット値を返す関数が `(point)' です。これに関連して、バッファ
の先頭は `(point-min)'、末尾は `(point-max)' で得ることができます。




File: hustler., Node: Motion by Point, Next: Moving to a Line, Prev: point, Up: Absolute Motion

ポイント移動
............

  指定するポイント位置に移動する関数が `goto-char' です。引数を一つ取り、
移動先のポイントを受け取ります。バッファの先頭に移動するには次のようにしま
す。

     (goto-char (point-min))

  なお、バッファの先頭にジャンプする `M-<' の関数名を知っている人は
「`(beginning-of-buffer)' でもいいんでしょ?」と思われるかもしれませんが、
これと `(end-of-buffer)' は特別な理由のない限り、 `Emacs-Lisp' プログラム
中から利用してはいけません。これは、マーク位置を変更してしまうため、ユーザ
に思わぬ動作を起こさせる可能性があるからです。




File: hustler., Node: Moving to a Line, Next: Moving to a Column, Prev: Motion by Point, Up: Absolute Motion

行移動
......

  n行目に移動する関数として、`goto-line' があります。行番号引数として渡し
ます。なお、バッファの先頭は1行目と数えます。逆に、現在の行番号を得るには
次のようにします。

     (count-lines (point-min) (point))




File: hustler., Node: Moving to a Column, Prev: Moving to a Line, Up: Absolute Motion

桁移動
......

  n桁目に移動する関数は `move-to-column' で、0から始まる桁数を引数として渡
します。現在の桁数は `(current-column)' で得ることができます。

  また、行頭/行末への移動関数は、`beginning-of-line', `end-of-line' です。
この二つは比較的よく使われます。




File: hustler., Node: Motion Boundary Check, Next: Absolute Motion Summary, Prev: Absolute Motion, Up: Cursor Motion

移動境界の検査
--------------

  相対移動絶対移動共に現在のポイント位置が移動できる終端まで来たかどうかの
チェックをする必要がある場合があります。ポイント位置がバッファ中の特定の位
置にあるかどうかを検査する関数には以下のものがあります。

`(bobp) / (eobp)'
     バッファ先頭/末尾
`(bolp) / (eolp)'
     行頭/行末

関数 `bobp/eobp' は現在のポイント位置がバッファ先頭/末尾なら真(t) を、そう
でなければ偽(nil)を返します。バッファ末に達するまでなにかの処理を繰り返す
というケースはしばしば必要になります。次のような形で書けるでしょう。

     (while (not (eobp)) ;(while 条件式 処理1...処理n)
       処理
       (forward-line 1))




File: hustler., Node: Absolute Motion Summary, Next: Motion by Search, Prev: Motion Boundary Check, Up: Cursor Motion

絶対移動関係のまとめ
--------------------

ここまでに出てきた関数をまとめましょう。

         ・ポイント値を返す関数  point, point-min, point-max
         ・移動関数              forward-char, backward-char
                                 forward-word, backward-word
                                 forward-line
                                 goto-char, goto-line
                                 move-to-column
                                 beginning-of-line, end-of-line
         ・位置に関する述語関数  bobp, eobp, bolp, eolp




File: hustler., Node: Motion by Search, Next: Search Functions Summary, Prev: Absolute Motion Summary, Up: Cursor Motion

検索移動
--------

  プログラム中でカーソル位置を決定するのに最も頻繁に使用するのが検索です。
ここは必ず押さえましょう。

  検索は大別して、

   * 増分検索(インクリメンタルサーチ)
   * 文字列検索
   * 単語検索
   * 正規表現検索
   * 文字(種)スキップ

に分けられます(分けます)。これらのうち、インクリメンタルサーチは対話的に用
いることを前提としているため、`Emacs-Lisp' プログラム中からは滅多に利用す
ることはないでしょう。これ以外のものの利用の仕方を説明します。

* Menu:

* Lisp Escape Characters::      Lisp エスケープキャラクタ
* String Search::               文字列検索
* Word Search::                 単語検索
* Regular Expression Search::   正規表現検索
* Major Metacharacters::        代表的なメタキャラクタ
* Skipping Characters::         文字(種)スキップ
* Accessing Search Results::    検索結果へのアクセス



File: hustler., Node: Lisp Escape Characters, Next: String Search, Prev: Motion by Search, Up: Motion by Search

Lisp エスケープキャラクタ
.........................

  検索関数には検索したいパターンを文字列として渡すわけですが、その文字列中
に `\' を含む場合は注意が必要です。`\' は `Emacs-Lisp' で扱う文字列中で特
別な意味を持つエスケープキャラクタとなっています。 C言語の文字列中で使う 
`\n' のような働きを持っています。主なシーケンスには次のものがあります。

`\\'
     \自身
`\C-英字'
     コントロールコード(`\^英字' も可)
`\e'
     ESC(1Bh)
`\"'
     "
`\n'
     改行文字(LF)
`\r'
     復帰文字(CR)
`\a'
     ベル(C-g)
`\b'
     バックスペース(C-h)
`\f'
     改頁文字(C-l)
`\t'
     タブコード(C-i)

  Cを扱ったことのある人は「`\\' とかなら慣れてるから平気」と思われるかもし
れません。しかし、正規表現の検索パターンを指定する場合には、正規表現での 
`\' エスケープと、`Lisp' の `\' エスケープが重なってしまうので非常に繁雑で
す。正規表現検索で、`\' 自身を探すにはパターン文字列として、`\\\\'を指定す
ることになります。

  このような注意点があることだけを念頭において検索関数の理解に進みましょう。




File: hustler., Node: String Search, Next: Word Search, Prev: Lisp Escape Characters, Up: Motion by Search

文字列検索
..........

  探したい文字列がはっきりとわかっている場合には普通の文字列検索である 
`search-forward', `search-backward' を利用します。これらの関数は引数を一つ
から四つ取ります(二つ目以降は省略可)。

     (search-forward 文字列 範囲 エラー処理 繰り返し回数)

各引数について説明します。

`1.文字列'
     検索したい文字列.
`2.範囲'
     どこまで検索するかをポイント位置で指定する. バッファ末までの時は nil 
     を指定する.
`3.エラー処理'
     見つからなかった場合の処理を指定.  エラーを発生して欲しい時は `nil' 
     を、単に `nil' を返して欲しい時は `t' を、検索範囲末まで移動して欲し
     い時は `nil', `t' 以外を渡す.
`4.繰り返し回数'
     この引数で指定した回数だけ検索を繰り返す.

後述する正規表現検索も同数の引数を取りますが引数の意味として違うのは、第一
引数だけです。もちろん正規表現検索関数の第一引数は正規表現のパターン文字列
を指定します。

  `search-forward/backward' を用いた典型的な処理形態は次のようになります。

     (if (search-forward "文字列" nil t)
         (progn 見つかった場合の処理)
       見つからなった場合の処理)




File: hustler., Node: Word Search, Next: Regular Expression Search, Prev: String Search, Up: Motion by Search

単語検索
........

  `TeX' を検索する時に `LaTeX' にはマッチして欲しくない時のように、単語単
位での検索に有効なのが `word-search-forward(backward)' です。引数は 
`search-forward' の第一引数を単語に置き換えたものです。



File: hustler., Node: Regular Expression Search, Next: Major Metacharacters, Prev: Word Search, Up: Motion by Search

正規表現検索
............

  `re-search-forward', `re-search-backward' がおそらく最もよく用いる検索関
数となるでしょう。第一引数に検索したい正規表現パターンを指定します。
`Emacs-Lisp' で扱える正規表現全てについてはほかの解説書に譲ります。ここで
は必要最低限のものに絞ってメタキャラクタの説明をします。




File: hustler., Node: Major Metacharacters, Next: Skipping Characters, Prev: Regular Expression Search, Up: Motion by Search

代表的なメタキャラクタ
......................

`.'
     任意の一文字にマッチ
`*'
     直前の正規表現の0回以上の繰り返し
`+'
     直前の正規表現の1回以上の繰り返し
`?'
     直前の正規表現の0回か1回の繰り返し
`^'
     行頭にマッチ
`$'
     行末にマッチ
`[文字リスト]'
     「文字リスト」のうち一文字にマッチ
`[^文字リスト]'
     「文字リスト」にないものにマッチ
`[X-Y]'
     ASCIIコードが「X」のものから「Y」のものどれかにマッチ
`[-^A-Z]'
     「-」か「^」か「A〜Zのうちどれか」

これだけ覚えておけば、ほとんどの検索が可能です。なお、正規表現の検索と組み
合わせた処理は極めて重要なので、別に節を設けて解説します。




File: hustler., Node: Skipping Characters, Next: Accessing Search Results, Prev: Major Metacharacters, Up: Motion by Search

文字(種)スキップ
................

  単語の先頭にポイントが位置する時に、単語末までポイントを移動したい、ある
いはその逆のことをしたい時などに `skip-chars-forward',
`skip-chars-backward' が利用できます。これらの関数は一つまたは二つの引数を
取ります。

     (skip-chars-forward スキップ文字リスト スキップ境界)

             1.スキップ文字リスト    正規表現の[]の中味と同様に指定し
                                     ます。
             2.スキップ境界          文字スキップを行う境界をポイント
                                     値で指定します。これを越えてポイ
                                     ントが進むことはありません。

  英単語の先頭にポイントがある時に、単語末までポイントを移動するには次のよ
うにします。

     (skip-chars-forward "A-Za-z")




File: hustler., Node: Accessing Search Results, Prev: Skipping Characters, Up: Motion by Search

検索結果へのアクセス
....................

  次の例で `def' を検索した場合の検索後のポイント位置は

     abc def ghi
         ~  ~

前方向検索の時は `def' の次の位置、後ろ方向検索の時は `d' の位置になります。
これはインクリメンタルサーチなどを前後方向で行った場合のカーソル位置と同じ
なので、容易に想像がつくことでしょう。

  しかし、検索がマッチした部分をアクセスする時に、検索後のポイント位置を当
てにしていたのでは、検索方向によって場合分けしなければならないので通常はこ
れを利用しません。検索のマッチ部分を取得する関数が `match-beginning',
`match-end' です。上記の例の、マッチ部分の始まり(dの位置)と、終わり(fの次
の位置)はそれぞれ、

     (match-beginning 0)
     (match-end 0)

で得ることができます。どちらも引数として数値である0を渡しています。実はこ
の部分は、正規表現にグループを用いた場合のグループ番号を意味していて、 0 
は「マッチした部分全体」という特殊な意味を持っています。例えば上記の例を次
の正規表現で検索した場合を考えてみましょう。

     (re-search-forward
       "\\(a.*\\) *\\(d.*\\) *\\(g.*\\)" nil t)

`Emacs' の正規表現のグルーピングは `\(グループ\)' で行いますが、 
`Emacs-Lisp' で `\' を正規表現関数に渡すためには `\\' と表記しなければなら
ないことに注意して下さい。さて、この正規表現の意味は、

     ・`a'で始まる任意の文字列(これをグループ1とする)のあとに
       `d'で始まる任意の文字列(これをグループ2とする)と
       `g'で始まる任意の文字列(これをグループ3とする)が続く

となります。




File: hustler., Node: Search Functions Summary, Next: Saving point Position, Prev: Motion by Search, Up: Cursor Motion

検索関数のまとめ
----------------

     ・検索関数          search-forward, search-backward
                         word-search-forward, word-search-backward
                         re-search-forward, re-search-backward
     ・文字スキップ      skip-chars-forward, skip-chars-backward
     ・検索結果位置取得  match-beginning, match-end

* Menu:

* Exercise 3-1::                練習問題 3-1




File: hustler., Node: Exercise 3-1, Prev: Search Functions Summary, Up: Search Functions Summary

練習問題 3-1
............

問先のるねきちモードにおいて、`a' を押した時に既にバッファ中に存在す
     る「僕るねえもん `A_n' なりよ」を数え、その数に応じて「僕るねえもん 
     `A_(n+1)' なりよ」を挿入する用に書き換えよ。

       すなわち、`b' を押した時にバッファ中に「僕るねえもん `B' なりよ」が
     いた場合は「僕るねえもん `B2' なりよ」を、`c' を押した時にバッファ中
     に「僕るねえもん `C' なりよ」、「僕るねえもん `C2' なりよ」、…、「僕
     るねえもん `C10' なりよ」がいた場合は「僕るねえもん `C11' なりよ」を
     挿入する。

     ヒント:
             point, re-search-*ward, \\(\\), buffer-substring
             match-beginning, match-end, string-to-int

         ・全てのマッチする文字列に対して処理

             現在位置を保存
             先頭へ
             (while (re-search-forward パターン nil t)
               処理)
             処理
             位置を復帰

     ポイント:
             ・グローバル変数は避けましょう。
             ・A1, A2, A5 なんて時はどうしましょうかね?
               適当に仕様を決めて下さい(A3とかA6とか)。

     ただ、これによってアルゴリズムがかなり変わる↑




