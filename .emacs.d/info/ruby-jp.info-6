This is ruby-jp.info, produced by makeinfo version 3.12o (+ Japanese
Patch 0.61) from Ruby.texi.

INFO-DIR-SECTION Languages
START-INFO-DIR-ENTRY
* ruby-jp: (ruby-jp).           Ruby Language Reference Manual (Japanese)
END-INFO-DIR-ENTRY

     このinfoファイルは、Rubyリファレンスマニュアル(HTML版)

     <http://www.netlab.co.jp/ruby/jp/man-1.3/>
     for `Ruby' Version 1.4.0
     written by まつもと ゆきひろ <matz@netlab.co.jp>
     Last modified: Mon Aug 16 15:46:22 1999

     を元に機械的にTexinfo形式へ変換して作成しました。したがって、本文
     に対する著作権はまつもと ゆきひろ氏にあるものとします。


File: ruby-jp.info,  Node: glossary_s,  Next: glossary_t,  Prev: glossary_r,  Up: Ruby Glossary

S
=

   - Sather

     オブジェクト指向プログラミング言語．matzはEiffel (*note Ruby用語
     集: Ruby Glossary.)よりもSatherが好きだ．しかし，Satherもやっぱ
     りRubyには全然似ていない．

   - `self'

     レシーバ (*note Ruby用語集: Ruby Glossary.)を参照する式．なぜ
     `self'かというと，メソッド (*note Ruby用語集: Ruby Glossary.)  を
     動詞と考えるとレシーバは主語に当たり，メソッドから見ると*自分*で
     あるからという説があるが，Rubyでは深く考えず，単にSmalltalk
     (*note Ruby用語集: Ruby Glossary.)を真似ただけだ，という説が有力
     である．

   - Smalltalk

     オブジェクト指向プログラミング言語．現在のオブジェクト指向
     (*note Ruby用語集: Ruby Glossary.)というパラダイム (*note Ruby用
     語集: Ruby Glossary.)の基礎を築いた言語．

   - `super'

     オーバーライドしたメソッドから上位のメソッドを呼び出す方法．引数
     を省略した時には呼び出し元のメソッドと同じ引数で呼び出される．

        - 問題:

          引数として与えられた変数の値を変更した場合には，`super'で元
          の値が渡るか，変更した値が渡るか．

                       def foo(a)
                          print a
                       end
                       def self.foo(a)
                         a=25
                         super
                       end
                       foo(5)    # 5 or 25??

        - 答え:

          元の値(5)


File: ruby-jp.info,  Node: glossary_t,  Next: glossary_u,  Prev: glossary_s,  Up: Ruby Glossary

T
=

   - Thread

     もとはThread of controlの略．一連の制御の流れのこと．Rubyでは一
     つのプログラムの中に複数のスレッドが存在できる．



File: ruby-jp.info,  Node: glossary_u,  Next: glossary_v,  Prev: glossary_t,  Up: Ruby Glossary

U
=

   - `undef'

     メソッドを未定義状態にすること．継承 (*note Ruby用語集: Ruby
     Glossary.)  もMix-in (*note Ruby用語集: Ruby Glossary.)もクラスに
     メソッドを追加することだが，`undef'を使えばメソッドを取り除くこ
     とができる．ただし，クラスの実装に必要なメソッド(メソッド内部か
     ら呼ばれているメソッド)を外してしまうと痛い目に遭う．



File: ruby-jp.info,  Node: glossary_v,  Next: glossary_w,  Prev: glossary_u,  Up: Ruby Glossary

V
=


File: ruby-jp.info,  Node: glossary_w,  Next: glossary_x,  Prev: glossary_v,  Up: Ruby Glossary

W
=


File: ruby-jp.info,  Node: glossary_x,  Next: glossary_y,  Prev: glossary_w,  Up: Ruby Glossary

X
=


File: ruby-jp.info,  Node: glossary_y,  Next: glossary_z,  Prev: glossary_x,  Up: Ruby Glossary

Y
=


File: ruby-jp.info,  Node: glossary_z,  Next: glossary_aa,  Prev: glossary_y,  Up: Ruby Glossary

Z
=


File: ruby-jp.info,  Node: glossary_aa,  Next: glossary_ka,  Prev: glossary_z,  Up: Ruby Glossary

あ
==

   - イテレータ, Iterator

     繰り返し子．メソッドに渡すことのできるあるコードの集まりをブロッ
     クと呼び，ブロックが与えられたメソッドをイテレータと呼ぶ(ことも
     ある)．一般にブロックは複数回実行されるので繰り返し子(iterate＝
     繰り返す)と呼ばれるが，慣習として一度しか実行しなかったり，繰り
     返さない場合にもブロックの与えられたメソッドをイテレータと呼ぶこ
     とがある．しかし，一回でもゼロ回でも繰り返しには違いないので嘘つ
     きとは呼ばないように．

     イテレータの中では`yield' (*note Rubyの文法: Ruby Syntax.)を使っ
     てブロックを実行することができる．

     あ，そうそう．内部でブロックを評価しないメソッドにブロックを与え
     てもなにも起きない．エラーも起きないが，がっかりしないように．

   - インスタンス, Instance

     オブジェクト (*note Ruby用語集: Ruby Glossary.)のこと．オブジェク
     トがあるクラスに所属することを強調する意味あいがあるらしい．オブ
     ジェクトなんだかインスタンスなんだか混乱してオブジェクト指向に挫
     折する人は多いと聞く．

   - インスタンス変数, Instance Variable

     オブジェクトに固有の変数のこと．Rubyのインスタンス変数は識別子の
     直前に`@'をつけたものであり，メソッドの中からしか参照できない．

   - オーバーライド, Override

     再定義 (*note Ruby用語集: Ruby Glossary.)のこと．スーパークラスま
     たはinclude (*note Ruby用語集: Ruby Glossary.)しているモジュール
     で定義されているメソッドと同じ名前のメソッドを定義すること．オー
     バーライドした上位のメソッドは`super' (*note Ruby用語集: Ruby
     Glossary.)を使って呼び出すことができる．

   - オブジェクト, Object

     *もの*のこと．「愛」は多分オブジェクトではないが，「ラブレター」
     はオブジェクトである．あるものがものであるか，そうでないかは多分
     に哲学的である．この辺がオブジェクト指向は難しいといわれる原因か
     も知れない．コンピュータ業界ではメモリ中の特定の空間のことをオブ
     ジェクトと呼ぶ人がいたりする人がいる．困ったものだ．カプセル化
     (*note Ruby用語集: Ruby Glossary.)，抽象データ型 (*note Ruby用語
     集: Ruby Glossary.)参照．

   - オブジェクト指向

     オブジェクトを基本にしたパラダイム (*note Ruby用語集: Ruby
     Glossary.)．英語の"Object-Oriented"という形容詞が，日本に来て名
     詞化した．オブジェクトを考え方の中心に置けば，なんでも良いように
     も思えるが，一般的には

        * 継承 (*note Ruby用語集: Ruby Glossary.)

        * カプセル化 (*note Ruby用語集: Ruby Glossary.)

        * ポリモルフィズム (*note Ruby用語集: Ruby Glossary.)  (あるい
          は動的結合 (*note Ruby用語集: Ruby Glossary.))

     が必要らしい．なんでも解決できる「魔法」のように考える人もいるが，
     世の中そんなに甘くない．誕生から20数年を経てようやっと実用的に使
     われるようになった…んだろうな，多分．

   - オブジェクト指向設計, Object-Oriented Design

     オブジェクトを基本にしたシステム設計

   - オブジェクト指向プログラミング, Object-Oriented Programming

     オブジェクトを基本にしたプログラミング．

   - オブジェクト指向分析, Object-Oriented Analysis

     オブジェクトを基本にしたシステム分析．



File: ruby-jp.info,  Node: glossary_ka,  Next: glossary_sa,  Prev: glossary_aa,  Up: Ruby Glossary

か
==

   - カプセル化, Encapsulation

     データに対する直接的な操作はデータの型に付随する特定の手続き(メ
     ソッド (*note Ruby用語集: Ruby Glossary.)と呼ぶ)からだけ行うこと
     により，内部構造や処理のアルゴリズムを外部から隠してしまうこと．
     抽象データ型 (*note Ruby用語集: Ruby Glossary.)参照．

     Rubyはインスタンス変数はメソッドからしか参照できないので，カプセ
     ル化が強制されているといえる．

   - 環境変数, Environment Variable

     親プロセスから子プロセスに対して受け渡される値．`ENV' (*note
     Ruby用語集: Ruby Glossary.)でアクセスされる．子プロセスに渡るの
     は環境変数のコピーなので，子プロセスから親プロセスに環境変数を使っ
     て情報を受け渡すことはできない．親はなかなか子供に耳を傾けないも
     のである．

   - 関数, Function

     厳密にいうとRubyに関数はない．しかし，レシーバを省略したメソッド
     呼び出しは外見が関数に似ているし，`self' (*note Ruby用語集:
     Ruby Glossary.)やインスタンス変数などレシーバの情報を全く参照し
     ない事実上の関数として働いているといっても良いメソッドもある．だ
     から厳密でない言い方としてそういうメソッドを関数と呼ぶこともある．

     そういう関数(的メソッド)は大抵レシーバを省略した形式でしか呼び出
     せないように可視性 (*note Ruby用語集: Ruby Glossary.)がprivateに
     設定してある．このようなメソッドの代表としてモジュール関数
     (*note Ruby用語集: Ruby Glossary.)がある．

   - クラスメソッド, Class Method

     クラスのメソッド．全てのクラスのクラス`Class' (*note Class::)で
     定義されている全てのクラスで共有されているメソッドとクラスそれぞ
     れが固有に持っている特異メソッド (*note Ruby用語集: Ruby
     Glossary.)とがあるが，そんなことは大した問題ではない．クラスメ
     ソッド内での`self'はクラスであるので勘違いしないように．

   - グローバル変数, Global Variable

     プログラム全体から参照できる変数．危険．多用しないこと．

   - 継承, Inheritance

     先祖や親戚から受け継いだものに頼り切って，自分では最低限のことし
     かしないこと．現実世界では嫌な奴．転じて，あるクラス (*note
     Ruby用語集: Ruby Glossary.)に機能を追加した新しいクラスを作るこ
     と．継承はis-aの関係を表現するのに有効である．たとえば，学生一般
     の性質を記述した「学生」クラスを継承して，実験に苦しめられる「工
     学部生」クラスを作ることができる．is-aの関係がなく，単に性質や機
     能を共有する場合にはMix-in (*note Ruby用語集: Ruby Glossary.)  を
     使うことが望ましいとされる．



File: ruby-jp.info,  Node: glossary_sa,  Next: glossary_ta,  Prev: glossary_ka,  Up: Ruby Glossary

さ
==

   - 再定義, Redefinition

     オーバーライド (*note Ruby用語集: Ruby Glossary.)のこと．

   - 辞書, Dictionary

     項目からその定義を取り出すことができるもの．転じてハッシュ
     (*note Ruby用語集: Ruby Glossary.)の別名．オブジェクト指向の起源
     とも呼べるSmalltalk (*note Ruby用語集: Ruby Glossary.)においてハッ
     シュに相当するデータ構造が「辞書」と呼ばれていたせいで辞書という
     用語になじんでいる一群の人々がいる．

   - 初期化, Initialize

     オブジェクト(あるいは「なにか」)を「使える」状態にすること．イン
     スタンスの初期化には`initialize' (*note Object::) メソッドを再定
     義する．クラスのメソッド`new' (*note Class::)のデフォルトの定義
     は新たに生成したインスタンスに対して，`initialize'を実行する．
     `new'への引数はそのまま`initialize'に渡される．また，`new'がブ
     ロックとともに呼び出された時には`initialize'にそのブロックがその
     まま与えられる．

     ということは`Class#new' (*note Class::) を再定義する必要はないは
     ずだ．

   - スクリプト, Script

     台本．転じて，インタープリタが解釈する比較的短いプログラムのこと．
     もちろん中には超大作の台本もある．

   - スクリプト言語, Script Language

     スクリプト (*note Ruby用語集: Ruby Glossary.)に従ってバッチ処理を
     行うインタープリタのこと．人間も台本を読むという点においてスクリ
     プト言語である．

   - 即値，Immediate Value

     参照 (*note Ruby用語集: Ruby Glossary.)ではなく，実際の値が変数に
     格納されるもの．Rubyの現在の実装ではFixnumとnil/true/falseだけが
     即値である．しかし，Fixnumが即値でないRubyの実装があっても構わ
     ないし，モデル上全ての値がオブジェクトへの参照であると考えても差
     し支えない．

   - ソート, Sort

     順番に並べ替えること．Ruby は数え上げる事ができて(`Enumerable'
     がincludeされていて)，各要素に順序が定義されて(<=> が定義されて
     )いれば，配列に限らずどんな複雑なオブジェクトの集まりもソートし
     てくれる．



File: ruby-jp.info,  Node: glossary_ta,  Next: glossary_na,  Prev: glossary_sa,  Up: Ruby Glossary

た
==

   - 大域脱出, Non-Local Exit

     `break' (*note Rubyの文法: Ruby Syntax.), `next' (*note Rubyの文
     法: Ruby Syntax.), `redo' (*note Rubyの文法: Ruby Syntax.),
     `retry' (*note Rubyの文法: Ruby Syntax.), `return' (*note Rubyの
     文法: Ruby Syntax.)  などのメソッドの範囲内での脱出ではなく，捕捉
     されない限りメソッド呼び出しの階層を遡って中断するタイプのものを
     大域脱出と呼ぶ．Rubyの大域脱出には，例外のよるものと
     `catch/throw'がある．

     ほとんどの例外は(`exit'で発生する`SystemExit' を含めて`rescue'
     (*note Rubyの文法: Ruby Syntax.)  で捕捉できるが，捕捉することに
     意味がない例外(例:メモリ割当に失敗した/インタプリタそのもののバ
     グ)は捕捉の対称にならない．

     `catch/throw'はthrowされると指定されたタグと同じタグを持つ
     catchまで一気にジャンプするものである．

   - 抽象データ型, Abstract Data Type

     データの構造とそのデータに対する操作をひとまとめにしたものを抽象
     データ型と呼ぶ．抽象データに対する操作は必ずその操作を経由する必
     要がある．結果，データ構造は外部からは直接参照されず，内部構造の
     変更が外部に悪影響を及ぼさない．このことをカプセル化 (*note
     Ruby用語集: Ruby Glossary.)と呼ぶ．

   - 定数, Constant

     一度定義したら値を変えることができない変数 (*note Ruby用語集:
     Ruby Glossary.)．でも，この定義は矛盾しているなあ．

   - 動的結合, Dynamic Binding

     操作の対象のデータ型に合わせて適切な手続き(メソッド)が実行時に選
     択されること．プログラムの柔軟性を高める働きがある．オブジェクト
     指向の要件のひとつ．Rubyでは変数 (*note Ruby用語集: Ruby
     Glossary.)に型が無いので動的結合は必然である．

   - 特異クラス, Singleton Class

     ある特定のオブジェクトだけのための仮想的なクラス．

   - 特異メソッド, Singleton Method

     ある特定のオブジェクトにだけ定義されたメソッド．メソッド (*note
     Ruby用語集: Ruby Glossary.)参照．特異メソッドは以下の場合に他の
     オブジェクトにも引き継がれる．

        * `clone' (*note Kernel::)した場合

        * サブクラスを作った場合
     特異メソッドで元のクラスのメソッドをオーバーライドした場合はもと
     のメソッドはsuper (*note Rubyの文法: Ruby Syntax.)で呼び出すこと
     ができる．

   - ドキュメント, Document

     matzの苦手なもの．彼は普段から「ソースがドキュメントだ．バグも完
     全に記述されている」と主張しているが，誰も受け入れない．当り前だ．



File: ruby-jp.info,  Node: glossary_na,  Next: glossary_ha,  Prev: glossary_ta,  Up: Ruby Glossary

な
==


File: ruby-jp.info,  Node: glossary_ha,  Next: glossary_ma,  Prev: glossary_na,  Up: Ruby Glossary

は
==

   - バイトオーダー, Byte Order

     `0x1234'という4バイトデータを`1,2,3,4' と配置するか，`4,3,2,1'と
     配置するかということ．前者をビッグエンディアン (*note Ruby用語集
     : Ruby Glossary.)，後者をリトルエンディアン (*note Ruby用語集:
     Ruby Glossary.)と呼ぶ．どちらが良いかという論争は時のはじめから
     続いていてまだ結論が出ていない．

   - 破壊的, Destructive

     `String#chop!' (*note String::), `Array#concat' (*note Array::)
     などのメソッドは，レシーバの状態を変化させるので，「破壊的な作
     用をする」という．めったにコンピュータを壊すことはない．

   - ハッシュ, Hash

     Rubyにおけるキーから値へのマッピングを表すデータ構造．連想配列
     (*note Ruby用語集: Ruby Glossary.)とか辞書 (*note Ruby用語集:
     Ruby Glossary.)とも呼ばれる．ハッシュがハッシュと呼ばれるのはそ
     の実現に「ハッシュ表」と呼ばれるアルゴリズムが使われているからで
     ある．ハッシュというのは「切り刻む」という意味で，「ハッシュド・
     ビーフ」の「ハッシュ」である．

   - パラダイム, Paradigm

     「考え方」の難しい表現．素直に分かりやすい言葉を使えばいいのに…．

   - ビックエンディアン, Big Endian

     アメリカ大陸原住民…はインディアン．こっちはエンディアンで語源は
     スウィフトの「ガリバー旅行記」に出て来る卵を丸い端から食べる人た
     ちである．当然，尖った端から食べる人たちはリトルエンディアン
     (*note Ruby用語集: Ruby Glossary.)である．コンピュータ業界では
     CPUなどがデータを並べる時の形式のひとつで，ネットワーク族はビッ
     グエンディアンを好むという．バイトオーダー (*note Ruby用語集:
     Ruby Glossary.)参照

   - ビルトインクラス, Built-In Class

     Rubyインタプリタ組み込みでインスタンスの構造が通常のオブジェクト
     と異なるクラス．これらのクラスやそのサブクラスのインスタンスは
     インスタンス変数 (*note Ruby用語集: Ruby Glossary.)を持てないな
     ど，構造の違いから来る制限がある．これらのクラスを継承したクラス
     を定義することはお勧めしない．Rubyのビルトインクラスは以下の通り
     である

        * Array (*note Array::)

        * Bignum (*note Bignum::)

        * Class (*note Class::)

        * Data (*note Ruby用語集: Ruby Glossary.)

        * FalseClass

        * File (*note File::)

        * Fixnum  (*note Fixnum::)

        * Float (*note Float::)

        * Hash (*note Hash::)

        * IO (*note IO::)

        * MatchingData (*note Ruby用語集: Ruby Glossary.)

        * Module (*note Module::)

        * NilClass (*note NilClass::)

        * Proc (*note Proc::)

        * Regexp (*note Regexp::)

        * String (*note String::)

        * Struct (*note Struct::)

        * Thread (*note Threadライブラリ: The Thread Library.)

        * TrueClass

   - ブロック, Block

     ループを構成したり，家や塀を建てたり，人を殴ったりするもの．

   - 変数, Variable

     オブジェクトにつける名札．Rubyの変数にはグローバル変数 (*note
     Ruby用語集: Ruby Glossary.)，ローカル変数 (*note Ruby用語集:
     Ruby Glossary.)，インスタンス変数 (*note Ruby用語集: Ruby
     Glossary.)がある．それと定数 (*note Ruby用語集: Ruby
     Glossary.)は値を変えることができないので，*変*数ではないが，名札
     であるという点においては変数と同じである．

   - ポリモルフィズム, 多態, Polymorphism

     対象になるオブジェクトによって実際の操作が決定されること．Rubyで
     はレシーバ (*note Ruby用語集: Ruby Glossary.)のオブジェクトに応じ
     てメソッドが選択されることによって実現されている．

        - 例

                       obj = "abc"
                       print obj.length, "\n"          # => 3
                       obj = [1,2,3,4]
                       print obj.length, "\n"          # => 4



File: ruby-jp.info,  Node: glossary_ma,  Next: glossary_ya,  Prev: glossary_ha,  Up: Ruby Glossary

ま
==

   - モジュール関数, Module Function

     関数 (*note Ruby用語集: Ruby Glossary.)のように用いられるメソッド
     の中で，モジュールのメソッドとしても，特異メソッドとしても定義さ
     れているものはモジュール関数と呼ばれる．例えばMath (*note
     Math::)モジュールのほとんどのメソッドはモジュール関数である．こ
     れらのメソッドは，例えば

                  Math.sqrt(2)

     という形式でも

                  include Math
                  sqrt(2)

     という形式でも使えて便利である．

   - メソッド, Method

     オブジェクト (*note Ruby用語集: Ruby Glossary.)に対する操作．操作
     対象のオブジェクト(レシーバ (*note Ruby用語集: Ruby
     Glossary.))は`self' (*note Ruby用語集: Ruby Glossary.)で参照でき
     る．Rubyの場合ビルトインクラス (*note Ruby用語集: Ruby
     Glossary.)のオブジェクトを除けば，オブジェクトの構造は動的に決ま
     るので，あるオブジェクトの性質はそのオブジェクトに定義されている
     メソッドによって決定される．



File: ruby-jp.info,  Node: glossary_ya,  Next: glossary_ra,  Prev: glossary_ma,  Up: Ruby Glossary

や
==


File: ruby-jp.info,  Node: glossary_ra,  Next: glossary_wa,  Prev: glossary_ya,  Up: Ruby Glossary

ら
==

   - リトルエンディアン, Little Endian

     最初10人いて段々減っていく．コンピュータ業界ではデータを並べる時
     の形式のひとつで，非常に大きなシェアを持つあるCPUメーカーはリト
     ルエンディアンを好むという．バイトオーダー (*note Ruby用語集:
     Ruby Glossary.)参照

   - 例外, Exception

     例外的な状況で発生するもの．例外が発生すると`begin' (*note
     Rubyの文法: Ruby Syntax.)の`rescue'節を使って明示的に捕捉されな
     い限り，呼び出し階層を遡ってプログラム(thread)の実行は中断される．
     例外のおかげでRubyプログラムはほとんどの場合例外的な状況について
     いちいちチェックせずにすむ．例外の発生した場所の情報は`$@'に，
     例外そのものに関する情報は`$!'に格納されている．

   - レシーバ, Receiver

     メソッドの実行主体．メソッド呼び出し式の``.''の左側にあるもの．
     メソッド内では`self' (*note Ruby用語集: Ruby Glossary.)で参照で
     きる．レシーバのインスタンス変数 (*note Ruby用語集: Ruby
     Glossary.)は`@変数名'という形式でアクセスできる．

   - 連想配列, Associative Array

     ハッシュ (*note Ruby用語集: Ruby Glossary.)の別名．ハッシュが任意
     のキーから値を取り出すことができるので，「連想」と，またハッシュ
     は添字が数字でない配列とみなすことができるので「配列」と呼ぶらし
     い．昔々は連想配列(連想記憶と呼ばれていた)はハードウェアによって
     実現されるものだと考えられていたが，計算速度の向上や適切なアルゴ
     リズムの発見(「ハッシュ表」と呼ぶ．ハッシュの語源)によりソフトウェ
     アのみによって実現されるようになった．

   - ローカル変数, Local Variable

     ある範囲内でのみ参照可能な変数．その範囲をスコープと呼ぶ．Rubyの
     スコープは

        * プログラム全体

        * クラス・モジュール定義

        * メソッド定義

        * ブロック
     で，ブロックだけは外側のスコープのローカル変数もアクセスできる．
     ローカル変数の有効範囲はスコープでの最初の代入が現れた場所からス
     コープの終りまでである．有効範囲は静的に決まり，実際に実行される
     かどうかは関係ない．



File: ruby-jp.info,  Node: glossary_wa,  Next: glossary__symbol,  Prev: glossary_ra,  Up: Ruby Glossary

わ
==


File: ruby-jp.info,  Node: glossary__symbol,  Prev: glossary_wa,  Up: Ruby Glossary

Symbol
======


File: ruby-jp.info,  Node: Variable Index,  Next: Function Index,  Prev: Ruby Glossary,  Up: Top

変数索引
********

* Menu:

* $:                                     variables.
* $!:                                    variables.
* $":                                    variables.
* $$:                                    variables.
* $&:                                    variables.
* $':                                    variables.
* $*:                                    variables.
* $+:                                    variables.
* $,:                                    variables.
* $-0:                                   variables.
* $-a:                                   variables.
* $-d:                                   variables.
* $-F:                                   variables.
* $-I:                                   variables.
* $-i:                                   variables.
* $-K:                                   variables.
* $-l:                                   variables.
* $-p:                                   variables.
* $-v:                                   variables.
* $.:                                    variables.
* $/:                                    variables.
* $0:                                    variables.
* $1,:                                   variables.
* $::                                    variables.
* $;:                                    variables.
* $<:                                    variables.
* $=:                                    variables.
* $>:                                    variables.
* $?:                                    variables.
* $\:                                    variables.
* $_:                                    variables.
* $`:                                    variables.
* $DEBUG:                                variables.
* $FILENAME:                             variables.
* $KCODE:                                variables.
* $LOAD_PATH:                            variables.
* $stderr:                               variables.
* $stdin:                                variables.
* $stdout:                               variables.
* $VERBOSE:                              variables.
* $~:                                    variables.
* ARGF:                                  constants.
* ARGV:                                  constants.
* DATA:                                  constants.
* E:                                     Math.
* ENV:                                   constants.
* FALSE:                                 constants.
* NIL:                                   constants.
* PI:                                    Math.
* PRIO_PGRP:                             Process.
* PRIO_PROCESS:                          Process.
* PRIO_USER:                             Process.
* RUBY_PLATFORM:                         constants.
* RUBY_RELEASE_DATE:                     constants.
* RUBY_VERSION:                          constants.
* Separator:                             File.
* STDERR:                                constants.
* STDIN:                                 constants.
* STDOUT:                                constants.
* TRUE:                                  constants.
* WNOHANG:                               Process.
* WUNTRACED:                             Process.

