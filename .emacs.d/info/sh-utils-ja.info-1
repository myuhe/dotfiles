Info file: sh-utils-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `sh-utils-ja.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.







START-INFO-DIR-ENTRY
* Shell utilities(ja): (sh-utils-ja).             GNU shell utilities.
* basename(ja): (sh-utils-ja)basename invocation. Strip directory and suffix.
* chroot(ja): (sh-utils-ja)chroot invocation.     Specify the root directory.
* date(ja): (sh-utils-ja)date invocation.         Print/set system date and time.
* dirname(ja): (sh-utils-ja)dirname invocation.   Strip non-directory suffix.
* echo(ja): (sh-utils-ja)echo invocation.         Print a line of text.
* env(ja): (sh-utils-ja)env invocation.           Modify the environment.
* expr(ja): (sh-utils-ja)expr invocation.         Evaluate expressions.
* factor(ja): (sh-utils-ja)factor invocation.     Print prime factors
* false(ja): (sh-utils-ja)false invocation.       Do nothing, unsuccessfully.
* groups(ja): (sh-utils-ja)groups invocation.     Print group names a user is in.
* hostname(ja): (sh-utils-ja)hostname invocation. Print or set system name.
* id(ja): (sh-utils-ja)id invocation.             Print real/effective uid/gid.
* logname(ja): (sh-utils-ja)logname invocation.   Print current login name.
* nice(ja): (sh-utils-ja)nice invocation.         Modify scheduling priority.
* nohup(ja): (sh-utils-ja)nohup invocation.       Immunize to hangups.
* pathchk(ja): (sh-utils-ja)pathchk invocation.   Check file name portability.
* printenv(ja): (sh-utils-ja)printenv invocation. Print environment variables.
* printf(ja): (sh-utils-ja)printf invocation.     Format and print data.
* pwd(ja): (sh-utils-ja)pwd invocation.           Print working directory.
* seq(ja): (sh-utils-ja)seq invocation.           Print numeric sequences
* sleep(ja): (sh-utils-ja)sleep invocation.       Delay for a specified time.
* stty(ja): (sh-utils-ja)stty invocation.         Print/change terminal settings.
* su(ja): (sh-utils-ja)su invocation.             Modify user and group id.
* tee(ja): (sh-utils-ja)tee invocation.           Redirect to multiple files.
* test(ja): (sh-utils-ja)test invocation.         File/string tests.
* true(ja): (sh-utils-ja)true invocation.         Do nothing, successfully.
* tty(ja): (sh-utils-ja)tty invocation.           Print terminal name.
* uname(ja): (sh-utils-ja)uname invocation.       Print system information.
* users(ja): (sh-utils-ja)users invocation.       Print current user names.
* who(ja): (sh-utils-ja)who invocation.           Print who is logged in.
* whoami(ja): (sh-utils-ja)whoami invocation.     Print effective user id.
* yes(ja): (sh-utils-ja)yes invocation.           Print a string indefinitely.
END-INFO-DIR-ENTRY

このファイルは，GNUシェルユーティリティを説明します．

Copyright (C) 1994, 95, 96 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.





File: sh-utils-ja.info, Node: Top, Next: Introduction, Prev: (dir), Up: (dir)

GNUシェルユーティリティ
***********************


このマニュアルは，GNUシェルユーティリティのバージョン2.0を解説します．

* Menu:

* Introduction::                Caveats, overview, and authors.
* Common options::              Common options.

* Date input formats::          Specifying date strings.
* Printing text::               echo printf yes
* Conditions::                  false true test expr
* Redirection::                 tee
* File name manipulation::      dirname basename pathchk
* Working context::             pwd stty printenv tty
* User information::            id logname whoami groups users who
* System context::              date uname hostname
* Modified command invocation:: chroot env nice nohup su
* Delaying::                    sleep
* Numeric operations::          factor seq

* Index::                       General index.



File: sh-utils-ja.info, Node: Introduction, Next: Common options, Prev: Top, Up: Top

はじめに
********


まずはじめに，このマニュアルは不完全です．特に`stty'セクションは，他の
GNUマニュアルの標準に到達するまでには，本質的な再構成と追加の説明文が
必要です．一般的に説明文が足りません．マニュアルは現在，何をするべきか
知っていて，その方法を思い出す必要しかない人を想定しています．このため，
興味がある場合はこのマニュアルの改善に参加してください．GNUコミュニティ
全体が恩恵をあずかります．

これらのプログラムには，シェルスクリプトを書くときのみ役に立つものもあ
ります．このようなユーティリティは，実際，シェルスクリプト(を拡張する)
"言語"です．それ以外は，対話的なとき役に立つときがあります．

GNUシェルユーティリティは，POSIX.2標準とほとんど互換性があります．

バグを`bug-sh-utils@gnu.org'に報告してください．バージョンナンバー，マ
シンアーキテクチャ，入力ファイル，期待したもの，得られたもの，そして，
なぜ間違っているかを含めることを忘れないでください．差分は歓迎しますが，
推察が困難なときもあるので，同様に問題の記述も含めてください．*Note
Bugs: (gcc)Bugs.

このマニュアルは元々，配布されているUnixのmanページから持ってきていて，
それはDavid MacKenzieが書き，Jim Meyeringが更新しました．今読んでいる
ものは，これらのユーティリティに対する権威のあるドキュメントです．man
ページは既に管理されていません．Fran@,{c}ois Pinardが，最初にTexinfo書
式に変更しました．Karl Berryが，索引の作成，いくつかの再編成，そして，
結果の編集を行いました．Richard Stallmanは，全体の処理についていつもの
有益な洞察を寄与しました．



File: sh-utils-ja.info, Node: Common options, Next: Printing text, Prev: Introduction, Up: Top

共通のオプション
****************


ある特定のオプションはこれらのプログラムの全てで利用可能です．それぞれ
のプログラムの個別の記述で書くのではなく，ここで記述します．(実際，全
てのGNUプログラムはそれらを受け入れる(または受け入れるべき)です．)

これらのプログラムの多くは曖昧な文字列を引数として受け入れます．その場
合，`--help'と`--version'は，コマンドライン引数にただ一つだけある場合
のみこれらのオプションとして受け入れます．


`--help'
     全ての利用可能なオプションをリストアップする使用方法のメッセージ
     を出力し，正しく終了します．

`--version'
     バージョンナンバーを出力し，正しく終了します．





File: sh-utils-ja.info, Node: Date input formats

日付入力の書式
**************


最初の引用：

     我々の時間を計る単位は，秒から月まであり，かなり複雑で，非対称で，
     連結できないので，徹頭徹尾，頭の計算で間に合わせることは，ほとん
     ど不可能です．本当に，非道な神が我々を時間の奴隷にし，ぼんやりし
     た繰り返し仕事と不快な驚きへの従属から，我々が逃げることをほとん
     ど不可能にしようと企てたので，彼は我々の現在のシステムを伝える以
     上のことを行うことができませんでした．それは，台形の建築用ブロッ
     クの集合に似ていて，垂直や水平の表面が無く，最も単純な考えで，建
     造物を飾り立てることを要求された言語に似ていて，役に立たない微粒
     子と長い遠回しな表現です．我々がはっきりとした，または，少なくと
     も頭打ちな経験に直面することを可能にした，より成功した言語と科学
     ののパターンと異なり，我々の時間を計るシステムは，静かにそして繰
     り返し，時間の恐怖を呼び起こします．

     ... それは，建築家がフィートで長さを，メートルで幅を，そしてellで
     高さを計る必要があるかのようなものです．基本的な指示用のマニュア
     ルで，五つの異なる言語の知識を必要とするかのようなものです．我々
     が，どうにもならない混乱した気分で，この間の火曜日や日曜日からの
     一週間といった，短い過去あるいは近い将来を調査することがよくある
     のは，不思議ではありません． ... (1) (*Note Date input
     formats-Footnotes::)

     --- Robert Grudin, `Time and the Art of Living'.

このセクションでは，GNUプログラムが受け入れる，文章上での日付の表現を
記述します．これらは，ユーザが様々なプログラムの引数として供給可能な文
字列です．(`getdate'関数による)Cのインターフェースはここでは述べません．

ここでの日付の構文は，西暦0年から表現することは可能ですが，コンピュー
タの整数は，そのような(比較的)長い時間に対し余りに大きすぎます．Unixシ
ステム上で意味があるものとして利用可能な最も早い日付は，UTCの1970年の1
月1日の真夜中です．

* Menu:

* General date syntax::            Common rules.
* Calendar date item::             19 Dec 1994.
* Time of day item::               9:20pm.
* Time zone item::                 EST, DST, BST, UTC, ...
* Day of week item::               Monday and others.
* Relative item in date strings::  next tuesday, 2 years ago.
* Pure numbers in date strings::   19931219, 1440.
* Authors of getdate::             Bellovin, Salz, Berets, et al.



File: sh-utils-ja.info  Node: Date input formats-Footnotes, Up: Date input formats

(1) この引用の訳は，訳者本人が理解できていません．



File: sh-utils-ja.info, Node: General date syntax

一般的な日付の構文
==================


"日付"は，空白で分けられた多くの項目を含む，空も可能な文字列です．曖昧
にならないとき，空白は省略できます．空の文字列は今日の始まり(すなわち
真夜中)を意味します．項目の順序は重要ではありません．日付の文字列は，
項目の多くの特色を含むことができます．

   * カレンダーの日付項目
   * その日の時間の項目
   * タイムゾーンの項目
   * 曜日の項目
   * 相対的な項目
   * 純粋な数字

我々は，これらの項目形式のそれぞれを，以下で順番に記述します．

いくつかの数字を，ほとんどの文脈で単語で書き出すことができます．これは
曜日の項目や相対的な項目を指定するとき，最も役に立ちます(以下を参照し
てください)．ここにリストがあります．1に対する`first'，2に対する`next'，
3に対する`third'，4に対する`fourth'，5に対する`fifth'，6に対する
`sixth'，7に対する`seventh'，8に対する`eighth'，9に対する`ninth'，10に
対する`tenth'，11に対する`eleventh'，そして12に対する`twelfth'です．ま
た`last'は，正確に-1を意味します．

月をこの方法で書くとき，"完全な綴り"の代わりに，それは数字で書かれてい
ると考えられます．これは文字に変更することもできます．

英文字の大文字小文字は，日付では完全に無視されます．コメントは，適切に
入れ子状になった丸カッコに含まれる限り，丸カッコの間で導入可能です．数
字に続かないハイフンは，現在無視されます．数字の前に前置されるゼロは無
視されます．




File: sh-utils-ja.info, Node: Calendar date item

カレンダーの日付の項目
======================


"カレンダーの日付の項目"は年の日付を指定します．それは，月が数字で指定
されるか文字で指定されるかによって異なりますこれら全ての文字列は，同じ
カレンダーの日付を指定します．

     1970-09-17           # ISO 8601.
     70-9-17              # これは，世紀をデフォルトで想定します．
     70-09-17             # 前置されるゼロは無視されます．
     9/17/72              # U.S.の一般的な表記です．
     24 September 1972
     24 Sept 72           # Septemberの省略指定です．
     24 Sep 72            # 三文字の省略は常に利用可能です．
     Sep 24, 1972
     24-sep-72
     24sep72

年も削除できます．この場合，最後に指定された年，または，無ければ現在の
年が利用されます．例えば，以下のようになります．

     9/17
     sep 17

ここに規則があります．

数字の月に対し，ISO 8601書式`YEAR-MONTH-DAY'が可能で，YEARは正の数，
MONTHは01と12の間の数，そしてDAYは01と31の間の数です．数字が10未満の場
合，前置されるゼロが存在する必要があります．YEARが100未満の場合，この
世紀を強制するために1900が加えられます．対称的に，合州国でよく使用され
る`MONTH/DAY/YEAR'も受け入れられます．同様に，年を削除すると
`MONTH/DAY'です．

文字の月は完全に綴ることもできます．`January'，`February'，`March'，
`April'，`May'，`June'，`July'，`August'，`September'，`October'，
`November'，または，`December'です．文字の月は最初の三文字で省略でき，
省略のドットの後置も可能です．`September'の代わりに`Sept'と書くことも
許可されています．

月が文字で書かれるとき，カレンダーの日付は以下のようにして与えられます．

     DAY MONTH YEAR
     DAY MONTH
     MONTH DAY YEAR
     DAY-MONTH-YEAR

または，年を省略します．

     MONTH DAY




File: sh-utils-ja.info, Node: Time of day item

日付の時間の項目
================

日付文字列での"日付の時間の項目"は，与えられた日付の時間を指定します．
ここにいくつか例があり，全て同じ時間を表現しています．

     20:02:0
     20:02
     8:02pm
     20:02-0500      # EST(合州国東部標準時)

より一般的に，日付の時間は，`HOUR:MINUTE:SECOND' として与えることがで
き，HOURは0と23の間の数字，MINUTEは0と59 の間の数字，そしてSECONDは0と
59の間の数字です．代わりに，`:SECOND'は省略でき，その場合，それは0です．

時間に`am'や`pm'(または，`a.m.'や`p.m.')が続く場合，HOURは1から12まで
の実行に限定され，`:MINUTE'は省略できます(ゼロとされます)．`am'は午前
を示し，`pm'は午後を示します．この注釈で，12は1の前になります．真夜中
は`12am'で，一方正午は`12pm'です．

時刻は，代わりにタイムゾーン修正を続けることができ，それは`SHHMM'とし
て表現され，Sは`+'または`-'，HHは時間の数字，そしてMMは地域の分の数字
になります．タイムゾーン修正がこのように与えられるとき，それは，世界標
準時(UTC)に関連する時間として解釈され，タイムゾーンや地域的タイムゾー
ンに対する，あらゆる前置される指定に優先します．日付の時間のMINUTEの部
分は，タイムゾーン修正が使用されるとき省略できません．これは，時間の分
数部分でタイムゾーン修正を指定する唯一の方法です．

`am'/`pm'やタイムゾーン修正は，どちらか一方のみ指定でき，両方はできま
せん．



File: sh-utils-ja.info, Node: Time zone item

タイムゾーンの項目
==================


"タイムゾーンの項目"は，国際的なタイムゾーンを指定し，小さな文字集合で
示されます．それらは下位互換性の理由でサポートされますが，それらは実際
は曖昧なので推奨されません．例えば，省略の`EST'はオーストラリアと合州
国では異なる意味を持ちます．含まれるピリオドは全て無視されます．軍のタ
イムゾーン指定は単一文字を使用します．現在，完全な地域の時間のみ，タイ
ムゾーン項目で表現できます．タイムゾーン修正のより優れた制御に付いては，
前のセクションを参照してください．

ここに，多くのサマータイムを使用しないタイムゾーンがあり，地域の時間の
値で印付けされています．

-1200
     軍では`Y'です．
-1100
     軍では`X'です．
-1000
     軍では`W'です．
-0900
     軍では`V'です．
-0800
     `PST'はPacific Standardで，軍では`U'です．
-0700
     `MST'はMountain Standardで，軍では`T'です．
-0600
     `CST'はCentral Standardで，軍では`S'です．
-0500
     `EST'はEastern Standardで，軍では`R'です．
-0400
     `AST'はAtlantic Standardで，軍では`Q'です．
-0300
     軍では`P'です．
-0200
     軍では`O'です．
-0100
     軍では`N'です．
+0000
     `GMT'はGreenwich Mean，`UT'はUniversal，`UTC'はCoordinated
     Universal，`WET'はWestern European，そして，ISO 8601と軍では`Z'で
     す．
+0100
     軍では`A'で，`CET'はCentral European，`MET'はMidden Europesche
     Tijd (Dutch)，そして`MEZ'はMittel-Europ"aische Zeit (German)です．
+0200
     軍では`B'で，`EET'はEastern Europeanです．
+0300
     軍では`C'です．
+0400
     軍では`D'です．
+0500
     軍では`E'です．
+0600
     軍では`F'です．
+0700
     軍では`G'です．
+0800
     軍では`H'です．
+0900
     軍では`IC'で，`JST'は日本標準時です．
+1000
     軍では`K'で，`GST'はGuam Standardです．
+1100
     軍では`L'です．
+1200
     軍では`M'で`NZST'はNew Zealand Standardです．

ここに，多くのサマータイム(DST)のタイムゾーンがあり，地域の時間の値で
印付けされています．また，以下のDSTではないタイムゾーンで，分けられた
単語(すなわち，空白で分けられているもの)の文字列`DST'が続くものは，対
応するDSTタイムゾーンが指定できます．

-0700
     `PDT'はPacific Daylightです．
-0600
     `MDT'はMountain Daylightです．
-0500
     `CDT'はCentral Daylightです．
-0400
     `EDT'はEastern Daylightです．
-0300
     `ADT'はAtlantic Daylightです．
+0100
     `BST'はBritish Summerで，`WEST'はWestern European Summerです．
+0200
     `CEST'はCentral European Summer，`MEST'はMidden Europesche
     S. Tijd (Dutch)，そして`MESZ'はMittel-Europ"aische Sommerzeit
     (German)です．
+1300
     `NZDT'はNew Zealand Daylightです．




File: sh-utils-ja.info, Node: Day of week item

曜日の項目
==========


曜日の明示的な記述は，将来，曜日に到達するよう，(必要なら)日付に前置さ
れます．

曜日は，完全に綴ることができます．`Sunday'，`Monday'，`Tuesday'，
`Wednesday'，`Thursday'，`Friday'，または，`Saturday'．曜日は，最初の
三文字で省略でき，追加のピリオドを続けることができます．特別な省略とし
て，`Tuesday'に対する`Tues'，`Wednesday'に対する`Wednes'，そして，
`Thursday'に対する`Thur'や`Thurs'も許可されます．

前置された追加分の週を移動するため，数字を曜日項目に前置することができ
ます．それは，`third monday'のような表現が最も良い使用法です．この文脈
では，`last DAY'や`next DAY'も受け入れられます．それらはDAYで表現され
ている日付の1週間前，または後になります．

曜日に続くカンマは無視されます．




File: sh-utils-ja.info, Node: Relative item in date strings

日付文字の相対的な項目
======================


`相対的な項目'は，日付(それが無い場合は現在の日付)を前後に調整します．
相対的な項目の効果は蓄積されます．ここにいくつか例があります．

     1 year
     1 year ago
     3 years
     2 days

時間の置換の単位は，年や月全体を移動するため，文字列`year'や`month'が
選択できます．年や月は全てが同じ期間ではないので，これらは曖昧な単位で
す．より正確な単位は，14日と等価な`fortnight'，7日と等価な`week'，24時
間と等価な`day'，60分と等価な`hour'，60秒と等価な`minute'や`min'，そし
て1秒と等価な`second'や`sec'です．これらの単位の`s'接尾子は受け入れら
れ，無視されます．

時間の単位は乗数を前置でき，それは追加の符号付きの数字で与えられます．
符号無しの数字は，正の符号として扱われます．全く数字が無いものは，乗数
として1が暗示されます．文字列`ago'が続く相対的な項目は，値-1の乗数が前
置された単位と等価です．

文字列`tomorrow'は，未来の1日と等価で(`day'と等価)，文字列`yesterday'
は，過去の1日と等価です(`day ago'と等価)．

文字列`now'や`today'は，ゼロ値の時間を置換する相対的な項目で，これらの
文字列は，，ゼロ値の時間を置換することは，前の項目で変化されていないと
きの現在時間を表現するという事実に由来します．それらは`12:00 today'の
ように，他の項目を強調するために使用できます．文字列`this' もゼロ値の
時間を置換する意味を持ちますが，`this thursday'のような日付文字列で好
まれます．

相対的な項目が，DSTと非DST(またはその逆)の境界を跨る日付を結果として生
じるとき，時間は現地時間にしたがって調整されます．



File: sh-utils-ja.info, Node: Pure numbers in date strings

日付文字列の純粋な数字
======================


純粋な10進数の正確な解釈は，日付文字列の文脈に依存します．

10進数が，形式YYYYMMDDで，他のカレンダーの日付項目(*Note Calendar date
item::)が，その日付項目の前に現われない場合，YYYYは年，MMは月の数字，
そしてDDは月の日付として，指定されたカレンダーの日付として読み込まれま
す．

10進数が形式HHMMで，他の日付の時間の項目がその日付文字列の前に現われな
い場合，HHは日付の時間，そしてMMは時間の分として，指定された日付の時間
として読み込まれます．MMは省略もできます．

カレンダーの日付と日付の時間が，両方とも日付文字列の数字の左に現われ，
そして相対的な項目が無い場合，数字は年に優先します．




File: sh-utils-ja.info, Node: Authors of getdate

`getdate'の著者
===============


`getdate'は元々，Chapel HillのNorth Carolina大学にいるときにSteven
M. Bellovin (<smb@research.att.com>)によって実装されました．コードはそ
の後Usenetの2人に捻りを加えられ，Rich $alz (<rsalz@bbn.com>)とJim
Berets (<jberets@bbn.com>)が，1990 年8月に完全に点検しました．GNUシス
テムに対する様々な修正は，David MacKenzie，Jim Meyering他によってなさ
れました．

この章は元々，Franc,ois Pinard (<pinard@iro.umontreal.ca>)が
`getdate.y'ソースコードから生成し，K. Berry (<kb@cs.umb.edu>)が編集し
ました．




File: sh-utils-ja.info, Node: Printing text, Next: Conditions, Prev: Common options, Up: Top

テキストの表示
**************


このセクションは，テキスト文字列を画面に表示するコマンドを説明します．

* Menu:

* echo invocation::             Print a line of text.
* printf invocation::           Format and print data.
* yes invocation::              Print a string until interrupted.




File: sh-utils-ja.info, Node: echo invocation, Next: printf invocation, Prev: Printing text, Up: Printing text

`echo': テキストの行を表示(Print a line of text)
================================================


`echo'は，与えられたそれぞれのSTRINGを，それぞれの間にスペースを用い，
最後のものの後に改行を用いて，標準出力に書き出します．構文は以下のとお
りです．

     echo [OPTION]... [STRING]...

プログラムは以下のオプションも受け入れます．*Note Common options::,も
参照してください．

`-n'
     終りの改行を出力しません．

`-e'
     それぞれのSTRINGで，以下のバックスペースエスケープされた文字の解
     釈を可能にします．

     `\a'
          警報(ベル)
     `\b'
          バックスペース
     `\c'
          終りの改行を抑制
     `\f'
          用紙送り
     `\n'
          改行
     `\r'
          キャリッジリターン
     `\t'
          水平タブ
     `\v'
          垂直タブ
     `\\'
          バックスラッシュ
     `\NNN'
          ASCIIコードがNNN(８進数)の文字．NNNが有効な数字でない場合，
          それは文字通りに出力されます．





File: sh-utils-ja.info, Node: printf invocation, Next: yes invocation, Prev: echo invocation, Up: Printing text

`printf': データの書式化と出力
==============================

`printf'はテキストの書式化された表示を行います．構文は以下のとおりです．

     printf FORMAT [ARGUMENT]...

`printf'は，C `printf'関数と同じ方法で，`%'指示語と`\'エスケープを解釈
しながらFORMAT文字列を表示します．与えられたARGUMENTのすべてを変換する
必要があるので，FORMAT引数は再利用されます．

`printf'は追加の指示語`%b'があり，それは，FORMAT文字列と同じ方法で`\'
エスケープを解釈しながら，その引数文字列を表示します．

`printf'は，表示文字を指定するとき，FORMAT内の`\0ooo'を(OOOが0から3桁
の8進の場合)8進数として，そして，表示文字を指定するとき，`\xhhh'を(HHH
が0から3桁の16進の場合)16進数として解釈します．

追加のエスケープ`\c'は，`printf'にそれ以上の出力を生成させません．

オプションは，単独の`--help'や`--version'だけです．*Note Common
options::.




File: sh-utils-ja.info, Node: yes invocation, Prev: printf invocation, Up: Printing text

`yes': 中断するまで文字列を出力
===============================


`yes'は，スペースで分けられた改行が続くコマンド行引数を，キルされるま
で永遠に出力します．引数が与えられない場合は，改行が続く`y'を，キルさ
れるまで永遠に出力します．

オプションは，単独の`--help'や`--version'だけです．*Note Common
options::.




File: sh-utils-ja.info, Node: Conditions, Next: Redirection, Prev: Printing text, Up: Top

条件
****


このセクションは，その出力ではなく，終了ステータスが主に役に立つコマン
ドを記述します．このためそれらは，シェルの`if'文の条件やパイプラインの
最後のコマンドとしてよく使用されます．

* Menu:

* false invocation::            Do nothing, unsuccessfully.
* true invocation::             Do nothing, successfully.
* test invocation::             Check file types and compare values.
* expr invocation::             Evaluate expressions.




File: sh-utils-ja.info, Node: false invocation, Next: true invocation, Prev: Conditions, Up: Conditions

`false': 何もせず失敗します
===========================


`false'は，"失敗"を意味する1の終了ステータスを返す以外何もしません．そ
れは，シェルスクリプトの失敗のコマンドが必要な位置で使用することが可能
です．

`false'は，`--help'と`--version'を含む，すべてのコマンドライン引数を無
視し，それは，そうしない場合，プログラマがあてにしている期待する動作を
変更するためです． (1) (*Note false invocation-Footnotes::)

このバージョンの`false'は，Cプログラムとして実装されていて，そのため，
シェルスクリプトの実装より安全かつ高速になり，アカウントの使用を禁止す
る目的のダミーシェルとして安全に使用できます．



File: sh-utils-ja.info  Node: false invocation-Footnotes, Up: false invocation

(1) 訳注：実際にはこれらのオプションを受け入れますが，失敗の終了ステー
タスを返します．



File: sh-utils-ja.info, Node: true invocation, Next: test invocation, Prev: false invocation, Up: Conditions

`true': 何もせず成功します
==========================


`true'は，"成功"を意味する0の終了ステータスを返す以外何もしません．そ
れは，シェルスクリプトの成功のコマンドが必要な位置で使用することが可能
ですが，シェル組み込みコマンド `:' (コロン)は同じことをより高速に行い
ます．

`true'は，`--help'と`--version'を含む，すべてのコマンドライン引数を無
視し，それは，そうしない場合，プログラマがあてにしている期待する動作を
変更するためです． (1) (*Note true invocation-Footnotes::)

このバージョンの`true'は，Cプログラムとして実装されていて，そのため，
シェルスクリプトの実装より安全かつ高速になり，アカウントの使用を禁止す
る目的のダミーシェルとして安全に使用できます．



File: sh-utils-ja.info  Node: true invocation-Footnotes, Up: true invocation

(1) 訳注：実際にはこれらのオプションを受け入れますが，成功の終了ステー
タスを返します．



File: sh-utils-ja.info, Node: test invocation, Next: expr invocation, Prev: true invocation, Up: Conditions

`test': ファイル形式の調査と値の比較
====================================


条件式EXPRの評価に依存して，0(真)または1(偽)のステータスを返します．表
現のそれぞれの部分は，分離された引数にする必要があります．

`test'には，ファイルのステータスの調査，文字演算子，そして数字比較の演
算子があります．

ほとんどのシェルは，同じ名前の組み込みコマンドがあるため，スクリプト内
や対話的に簡素なコマンド名を使用すると，ここで記述するものと異なる機能
を得る可能性があります．

以下のオプションの他に，`test'は，単独の`--help'や`--version'を受け入
れます．*Note Common options::. 単一のオプションなしの引数も可能です．
`test'は，引数がnullでない場合，真を返します．

* Menu:

* File type tests::             -[bcdfhLpSt]
* Access permission tests::     -[gkruwxOG]
* File characteristics tests::  -e -s -nt -ot -ef
* String tests::                -z -n = !=
* Numeric tests::               -eq -ne -lt -le -gt -ge
* Connectives for test::        ! -a -o




File: sh-utils-ja.info, Node: File type tests, Next: Access permission tests, Prev: test invocation, Up: test invocation

ファイル形式のテスト
--------------------


これらのオプションは，ファイルの特定の形式をテストします．(ファイルの
すべてですが，すべてのファイルが同じではありません！)


`-b FILE'
     FILEが存在し，ブロックスペシャルデバイスの場合，真です．

`-c FILE'
     FILEが存在し，キャラクタスペシャルデバイスの場合は真です．

`-d FILE'
     FILEが存在し，ディレクトリの場合は真です．

`-f FILE'
     FILEが存在し，通常のファイルの場合は真です．

`-h FILE'
`-L FILE'
     FILEが存在し，シンボリックリンクの場合は真です．

`-p FILE'
     FILEが存在し，名前付きパイプの場合は真です．

`-S FILE'
     FILEが存在し，ソケットの場合は真です．

`-t [FD]'
     FDが端末上で開かれている場合は真です．FDが省略された場合，それは
     デフォルトで1(標準出力)になります．





File: sh-utils-ja.info, Node: Access permission tests, Next: File characteristics tests, Prev: File type tests, Up: test invocation

アクセス許可のテスト
--------------------


これらのオプションは，特定のアクセス許可をテストします．


`-g FILE'
     FILEが存在し，そのセットグループidビットが設定されている場合は真
     です．

`-k FILE'
     FILEが存在し，"スティッキー"ビットが設定されている場合は真です．

`-r FILE'
     FILEが存在し，読み込み可能な場合は真です．

`-u FILE'
     FILEが存在し，セットユーザidビットが設定されている場合は真です．

`-w FILE'
     FILEが存在し，書き込み可能な場合は真です．

`-x FILE'
     FILEが存在し，実行可能な場合は真です．

`-O FILE'
     FILEが存在し，現在実施中のユーザidに所有されている場合は真です．

`-G FILE'
     FILEが存在し，現在実施中のグループidに所有されている場合は真です．





File: sh-utils-ja.info, Node: File characteristics tests, Next: String tests, Prev: Access permission tests, Up: test invocation

ファイルの特徴テスト
--------------------


これらのオプションはその他のファイルの特徴を調査します．


`-e FILE'
     FILEが存在している場合は真です．

`-s FILE'
     FILEが存在し，大きさがゼロより大きい場合は真です．

`FILE1 -nt FILE2'
     FILE1がFILE2より(修正日で)新しい場合は真です．

`FILE1 -ot FILE2'
     FILE1がFILE2より(修正日で)古い場合は真です．


`FILE1 -ef FILE2'
     FILE1とFILE2が同じデバイスとi-node番号を持つ場合，すなわち，それ
     らがお互いにハードリンクの場合は真です．





File: sh-utils-ja.info, Node: String tests, Next: Numeric tests, Prev: File characteristics tests, Up: test invocation

文字列のテスト
--------------


これらのオプションは文字列の特徴をテストします．文字列は`test'に対し引
用符で囲みませんが，例えばスペースのような，シェルで特別な意味を持つ文
字を保護するために，それらを引用符で囲む必要があるかもしれません．


`-z STRING'
     STRINGの長さがゼロの場合は真です．

`-n STRING'
`STRING'
     STRINGの長さがゼロではないの場合は真です．

`STRING1 = STRING2'
     文字列が等しい場合は真です．

`STRING1 != STRING2'
     文字列が等しくない場合は真です．





File: sh-utils-ja.info, Node: Numeric tests, Next: Connectives for test, Prev: String tests, Up: test invocation

数値テスト
----------


数値の関係です．引数は，完全な数値(負も可能です)，または，STRINGの
長さを評価する特別な式`-l STRING'にする必要があります．


`ARG1 -eq ARG2'
`ARG1 -ne ARG2'
`ARG1 -lt ARG2'
`ARG1 -le ARG2'
`ARG1 -gt ARG2'
`ARG1 -ge ARG2'
     これらの算数の二項演算子は，それぞれ，ARG1がARG2に比べて，等しい，
     等しくない，小さい，以下，大きい，または以上の場合に真を返します．


例えば以下のようにします．

     test -1 -gt -2 && echo yes
     => yes
     test -l abc -gt 1 && echo yes
     => yes
     test 0x100 -eq 1
     error--> test: integer expression expected before -eq




File: sh-utils-ja.info, Node: Connectives for test, Prev: Numeric tests, Up: test invocation

`test'に対する連結
------------------


通常の論理結合子です．


`! EXPR'
     EXPRが偽の場合は真です．

`EXPR1 -a EXPR2'
     EXPR1とEXPR2の両方が真の場合は真です．

`EXPR1 -o EXPR2'
     EXPR1またはEXPR2のどちらかが真の場合は真です．





File: sh-utils-ja.info, Node: expr invocation, Prev: test invocation, Up: Conditions

`expr': 式の評価
================


`expr'は式を評価し，結果を標準出力に書き出します．それぞれの式のトーク
ンは，分離している引数にする必要があります．

オペランドは数字または文字列のどちらかになります．`expr'は，あらゆるも
のが，適用されているオペレーションに依存して，整数または文字列がオペラ
ンドの位置に存在することを強制します．

文字列は`expr'対し引用符で囲みませんが，例えばスペースのような，シェル
で特別な意味を持つ文字を保護するために，それらを引用符で囲む必要がある
かもしれません．

演算子は，挿入辞シンボルや前置キーワードとして与えることができます．カッ
コは，通常の方法のグループとして使用可能です(しかし，シェルがカッコを
評価することを避けるために，カッコを引用符で囲む必要があります)．

終了ステータスは，以下のようになります．

     0 式がnullでも0でもない場合．
     1 式がnullまたは0の場合．
     2 有効な式の場合．

* Menu:

* String expressions::          <colon> match substr index length quote
* Numeric expressions::         + - * / %
* Relations for expr::          | & < <= = == != >= >
* Examples of expr::            Examples.




File: sh-utils-ja.info, Node: String expressions, Next: Numeric expressions, Prev: expr invocation, Up: expr invocation

文字列式
--------


`expr'は，パターンマッチングと，その他の文字列演算子をサポートします．
これらは，(次のセクションの)数字と関係の両演算子より低い優先順位になり
ます．


`STRING : REGEX'
     パターンマッチングを実行します．引数は文字列に制限され，2番目は，
     `^'が暗黙に前置された(基本的にGNU流の`grep'の)正規表現と考慮され
     ます．最初の引数は，この正規表現に対し一致の評価がなされます．

     一致の評価が成功し，REGEXが`\('と`\)'を使用している場合，`:'式は，
     サブ式に一致したSTRINGの一部となります．それ以外の場合は一致した
     文字の数を返します．

     一致の評価に失敗した場合，REGEXで`\('と`\)'が使用されていれば`:'
     演算子はnull文字を返し，それ以外では0を返します．

     最初の`\( ... \)'の組のみ，戻り値に関係します．追加の組は，正規表
     現演算子のグループ化の意味しかありません．

     正規表現内では，`\+'，`\?'，そして`\|'は，それぞれ，1以上，ゼロ以
     上，オア分離の選択肢の演算子です．SunOSとその他の`expr'はこれらを
     通常の文字として扱います．(POSIXは，どちらの動作も許可します．)正
     規表現の構文の詳細は，*Note Regular Expression Library:
     (regex)Top.例は*Note Examples of expr::,にあります．

`match STRING REGEX'
     パターンマッチングを行う別の方法です．これは，`STRING :
     REGEX'と同じです．

`substr STRING POSITION LENGTH'
     少なくともLENGTHの長さの，POSITIONから始まる，STRINGのサブ文字列
     を返します．POSITIONまたはLENGTHのどちらかが，負，ゼロ，または数
     字以外の場合，null文字列を返します．

`index STRING CHARSET'
     CHARSETの最初の文字が見つかった，STRINGの最初の位置を返します．
     CHARSETの文字がSTRINGで見つからない場合は，0を返します．

`length STRING'
     STRINGの長さを返します．

`quote TOKEN'
     キーワードのようなMATCHや，演算子のような`/'の場合でも，TOKENを文
     字列として解釈します．これで，`expr length quote "$x"'や`expr
     quote "$x" : '.*/\(.\)''のテストが可能となり，$X の値が(例えば)
     `/'や`index'に偶然なった場合でも，正しくなります．この演算子はGNU
     の拡張です．環境変数`POSIXLY_CORRECT'が設定されているときは，利用
     不可能です．


`expr'にキーワードとして文字列を解釈させるために，`quote'演算子を使用
する必要があります．




File: sh-utils-ja.info, Node: Numeric expressions, Next: Relations for expr, Prev: String expressions, Up: expr invocation

数式
----


`expr'は，通常の算術演算子をサポートし，優先順位は順に増加します．(前
のセクションの)文字列演算子は，より順位の低い演算子で，(次のセクション
の)連結子は，より順位が高くなります．


`+ -'
     加算と減算です．どちらの引数も数字が強制されます．そうでない場合
     はエラーを生じます．

`* / %'
     乗算，除算，剰余です．どちらの引数も数字が強制されます．そうでな
     い場合はエラーを生じます．





File: sh-utils-ja.info, Node: Relations for expr, Next: Examples of expr, Prev: Numeric expressions, Up: expr invocation

`expr'の関係式
--------------


`expr'は，通常の論理結合と関係式をサポートします．これらは(前のセクショ
ンの)文字や数字の演算子より優先順位が高くなっています．ここに，低い優
先順位を最初にしたリストがあります．


`|'
     最初の引数がnullや0でない場合はそれを，それ以外では二番目の引数を
     返します．

`&'
     どちらの引数もnullや0でない場合は最初の引数を，それ以外では0を返
     します．

`< <= = == != >= >'
     引数を比較し，関係が真の場合は1を，それ以外では0を返します．`=='
     は`='の同義語です．`expr'は最初に，両方の引数を数字に強制し，数値
     の比較を行います．どちらかの強制が失敗した場合，辞書的な比較を行
     います．





File: sh-utils-ja.info, Node: Examples of expr, Prev: Relations for expr, Up: expr invocation

`expr'の使用例
--------------

ここに，シェルのメタ文字を引用符で囲むものを含む，いくつかの例がありま
す．

Bourne互換シェルで，シェル変数`foo'に1を加えます．
     foo=`expr $foo + 1`

`$fname'に保存されているファイル名のディレクトリ以外の部分を，`/'を含
めずに出力します．
     expr $fname : '.*/\(^.*\)' '^|' $fname

`\+'が演算子だということを表示する例です．
     expr aaa : 'a\+'
     => 3

     expr abc : 'a\(.\)c'
     => b
     expr index abcdef cz
     => 3
     expr index index a
     error--> expr: syntax error
     expr index quote index a
     => 0




File: sh-utils-ja.info, Node: Redirection, Next: File name manipulation, Prev: Conditions, Up: Top

リダイレクション
****************


Unixシェルは，通常いくつかの形式の"リダイレクション"を提供します-- コ
マンドの入力元や出力先を変更する方法です．しかし，一つの便利なリダイレ
クションは，シェルではなく，コマンドで分けられて実行ます．その記述がこ
こにあります．

* Menu:

* tee invocation::              Redirect output to multiple files.




File: sh-utils-ja.info, Node: tee invocation, Prev: Redirection, Up: Redirection

`tee': 出力を複数のファイルにリダイレクトする
=============================================


`tee'コマンドは，標準入力を標準出力と，引数で与えられたあらゆるファイ
ルにコピーします．これは，データをパイプに送るだけでなく，コピーを保存
したいときに役に立ちます．構文は以下のとおりです．

     tee [OPTION]... [FILE]...

存在しないファイルに書き出す場合，それは作成されます．既存のファイルに
書き出す場合，前から含まれているデータは，`-a'オプションが使用されない
場合は上書きされます．

プログラムは以下のオプションを受け入れます．*Note Common options::,も
参照してください．

`-a'
`--append'
     標準入力を与えられたファイルに，上書きせずに追加します．

`-i'
`--ignore-interrupts'
     中断シグナルを無視します．





File: sh-utils-ja.info, Node: File name manipulation, Next: Working context, Prev: Redirection, Up: Top

ファイル名の操作
****************


このセクションはファイル名を操作するコマンドを記述します．

* Menu:

* basename invocation::         Strip directory and suffix from a file name.
* dirname invocation::          Strip non-directory suffix from a file name.
* pathchk invocation::          Check file name portability.




File: sh-utils-ja.info, Node: basename invocation, Next: dirname invocation, Prev: File name manipulation, Up: File name manipulation

`basename': ディレクトリと接尾子をファイル名から除去
====================================================


`basename'は，前置されるディレクトリ要素をNAMEから削除します．構文は以
下のとおりです．

     basename NAME [SUFFIX]

SUFFIXが指定され，NAMEの終りが同じ場合，それはNAMEから同様に削除されま
す．`basename'は結果を標準出力に出力します．

オプションは`--help'と`--version'だけです．*Note Common options::.




File: sh-utils-ja.info, Node: dirname invocation, Next: pathchk invocation, Prev: basename invocation, Up: File name manipulation

`dirname': ディレクトリ以外の接尾子をファイル名から除去
=======================================================


`dirname'は，最後のスラッシュで分離されている(おそらくファイル名となる)
文字列の内容以外をすべて出力します．構文は以下のとおりです．

     dirname NAME

NAMEは単一の要素で，`dirname'は(現在のディレクトリを意味する) `.'を表
示します．

オプションは`--help'と`--version'だけです．*Note Common options::.




File: sh-utils-ja.info, Node: pathchk invocation, Prev: dirname invocation, Up: File name manipulation

`pathchk': ファイル名の移植性を調査
===================================


`pathchk'は，ファイル名の移植性を調査します．構文は以下のとおりです．

     pathchk [OPTION]... NAME...

それぞれのNAMEに対し，`pathchk'はこれらの条件が真かどうかのメッセージ
を出力します．
  1. NAMEに存在するディレクトリの一つが検索(実行)許可を持たない．
  2. NAMEの長さが，ファイルシステムのファイル名の長さの最大より長い．

  3. 既存のディレクトリ名に一致するNAMEの一つの要素の長さが，ファイル
     システムのファイル名の要素の長さの最大より長い．

プログラムは以下のオプションも受け入れます．*Note Common options::,も
参照してください．


`-p'
`--portability'
     根底にあるファイルシステムの長さ調査を実行する代わりに，POSIX.1の
     移植性のための最小制限に対し，それぞれのファイル名とその要素の長
     さをテストします．ファイル名が，ファイル名文字集合の，移植性にな
     い文字を含まないことも調査します．


終了ステータス．

     0 すべての指定されたファイル名が，すべてのテストを通過した場合．
     1 それ以外．




File: sh-utils-ja.info, Node: Working context, Next: User information, Prev: File name manipulation, Up: Top

作業中のコンテクスト
********************


このセクションは，作業しているコンテクストを表示または変更するコマンド
を記述します．現在のディレクトリ，端末設定，その他です．次のセクション
のユーザ関連のコマンドも参照してください．

* Menu:

* pwd invocation::              Print working directory.
* stty invocation::             Print or change terminal characteristics.
* printenv invocation::         Print environment variables.
* tty invocation::              Print file name of terminal on standard input.




File: sh-utils-ja.info, Node: pwd invocation, Next: stty invocation, Prev: Working context, Up: Working context

`pwd': 作業中のディレクトリを表示
=================================


`pwd'は，現在のディレクトリの完全に解決された名前を出力します．すなわ
ち，出力される名前のすべての要素は，実際のディレクトリ名です--シンボリッ
クリンクではありません．

ほとんどのシェルは同じ名前の組み込みコマンドがあるので，装飾なしのスク
リプト内や対話的なコマンド名を用いると，ここで記述している以外の異なる
機能を得る可能性があります．

オプションは単独の`--help'と`--version'だけです．*Note Common
options::.




File: sh-utils-ja.info, Node: stty invocation, Next: printenv invocation, Prev: pwd invocation, Up: Working context

`stty': 端末の特徴を表示または変更
==================================


`stty'は，ボーレートのような，端末の特徴を表示または変更します．構文は
以下のとおりです．

     stty [OPTION] [SETTING]...
     stty [OPTION]

設定行がない場合，`stty'は，ボーレート，(システムがサポートする)回線制
御数，そして`stty sane'で設定された値から変更された回線設定を表示しま
す．デフォルトで，モードの読み込みと設定は標準入力に接続されているtty
回線で実行されますが，これは`--file'オプションで修正可能です．

`stty'は，端末回線処理の状況を変更する，以下で記述するような多くのオプ
ションではない引数を受け入れます．

プログラムは以下のオプションを受け入れます．*Note Common options::,も
参照してください．

`-a'
`--all'
     すべての現在の設定を人間が読める形式で出力します．このオプション
     は，あらゆる回線設定と組み合わせて使用することはできません．

`-F DEVICE'
`--file DEVICE'
     標準入力に接続しているtty回線の代わりに，DEVICEで指定されているファ
     イル名で開かれた回線を設定します．このオプションは，`clocal'が設
     定されていない場合，キャリア検出回線が高速ではないので，POSIX tty
     のブロッキングを避けるために，`O_NONDELAY'フラグの使用を要求する
     POSIX ttyを開くために必要です．そのため，従来の方法でシェルがデバ
     イスを開くことが，常に可能なわけではありません．

`-g'
`--save'
     他の`stty'コマンドが現在の設定を復元するための引数として使用可能
     な形式で，すべての現在の設定を表示します．このオプションは，あら
     ゆる回線設定と組み合わせて使用することはできません．


多くの設定は，前置される`-'で止めることが可能です．そのような引数は，
それら記述で"取り消し可能"として以下では印がついています．記述自身は，
肯定の場合を述べていて，すなわち，(もちろん，明言されていなければ)取り
消しでは*ありません*．

設定には，拡張を使用しているため，すべてのPOSIXシステムで利用可能では
ないものもあります．そのような引数はその記述で"非POSIX"という印がつい
ています．非POSIXシステムでは，これらやその他の設定も利用可能ではあり
ませんが，すべてのバリエーションを説明するのは実行不可能です．まずは，
試してみてください．

* Menu:

* Control::                     Control settings
* Input::                       Input settings
* Output::                      Output settings
* Local::                       Local settings
* Combination::                 Combination settings
* Characters::                  Special characters
* Special::                     Special settings




File: sh-utils-ja.info, Node: Control, Next: Input, Prev: stty invocation, Up: stty invocation

制御設定
--------

制御設定です．

`parenb'
     出力の一般的なパリティビットと，入力の期待するパリティビットです．
     取り消し可能です．

`parodd'
     (取り消す場合も)偶パリティです．取り消し可能です．

`cs5'
`cs6'
`cs7'
`cs8'
     文字サイズを5，6，7，または8ビットに設定します．

`hup'
`hupcl'
     最後の処理がttyを閉じるとき，ハングアップシグナルを送ります．取り
     消し可能です．

`cstopb'
     2つのストップビット(取消しの場合は1つ)を使用します．取り消し可能
     です．

`cread'
     入力の受信を許可します．取り消し可能です．

`clocal'
     モデム制御シグナルを利用不可能にします．取り消し可能です．

`crtscts'
     RTS/CTSフロー制御を利用可能にします．非POSIXです．取り消し可能で
     す．




File: sh-utils-ja.info, Node: Input, Next: Output, Prev: Control, Up: stty invocation

入力設定
--------


`ignbrk'
     ブレーク文字を無視します．取り消し可能です．

`brkint'
     ブレークを中断シグナルにします．取り消し可能です．

`ignpar'
     パリティエラーの文字を無視します．取り消し可能です．

`parmrk'
     (255-0の文字の順に)パリティーエラーに印を付けます．取り消し可能で
     す．

`inpck'
     入力パリティチェックを可能にします．取り消し可能です．

`istrip'
     入力文字のハイビット(8番目)をクリアします．取り消し可能です．

`inlcr'
     ニューラインをキャリッジリターンに変換します．取り消し可能です．

`igncr'
     キャリッジリターンを無視します．取り消し可能です．

`icrnl'
     キャリッジリターンをニューラインに変換します．取り消し可能です．

`ixon'
     XON/XOFFフロー制御(すなわち，`CTRL-S'/`CTRL-Q')を可能にします．取
     り消し可能です．

`ixoff'
`tandem'
     システム入力バッファがほぼいっぱいのときの`stop'文字と，再びほと
     んど空になったときの`start'文字の送信を可能にします．取り消し可能
     です．

`iuclc'
     大文字を小文字に変換します．非POSIXです．取り消し可能です．

`ixany'
     あらゆる文字の出力の再開を許可します(取消しの場合は開始文字のみで
     す)．非POSIXです．取り消し可能です．

`imaxbel'
     入力バッファがいっぱいになったときに文字が届いた場合，ビープを鳴
     し，入力バッファをフラッシュしないことを可能にします．非POSIXです．
     取り消し可能です．




File: sh-utils-ja.info, Node: Output, Next: Local, Prev: Input, Up: stty invocation

出力設定
--------

これらの引数は出力に関連する処理です．

`opost'
     出力を後処理します．取り消し可能です．

`olcuc'
     小文字を大文字に変換します．非POSIXです．取り消し可能です．

`ocrnl'
     キャリッジリターンをニューラインに変換します．非POSIXです．取り消
     し可能です．

`onlcr'
     ニューラインをキャリッジリターンに変換します．非POSIXです．取り消
     し可能です．

`onocr'
     最初の列のキャリッジリターンを出力しません．非POSIXです．取り消し
     可能です．

`onlret'
     ニューラインがキャリッジリターンを実行します．非POSIXです．取り消
     し可能です．

`ofill'
     遅延に対する時間調整の代わりに，文字の補充(パディング)を使用しま
     す．非POSIXです．取り消し可能です．

`ofdel'
     補充に対し，null文字の代わりにデリート文字を使用します．非POSIXで
     す．取り消し可能です．

`nl1'
`nl0'
     ニューラインの遅延形式です．非POSIXです．

`cr3'
`cr2'
`cr1'
`cr0'
     キャリッジリターンの遅延形式です．非POSIXです．

`tab3'
`tab2'
`tab1'
`tab0'
     水平タブの遅延形式です．非POSIXです．

`bs1'
`bs0'
     バックスペースの遅延形式です．非POSIXです．

`vt1'
`vt0'
     垂直タブの遅延形式です．非POSIXです．

`ff1'
`ff0'
     フォームフィードの遅延形式です．非POSIXです．




File: sh-utils-ja.info, Node: Local, Next: Combination, Prev: Output, Up: stty invocation

ローカル設定
------------


`isig'
     `interrupt'， `quit'，そして`suspend'特殊文字を可能にします．取り
     消し可能です．

`icanon'
     `erase'，`kill'，`werase'，そして`rprnt'特殊文字を可能にします．
     取り消し可能です．

`iexten'
     非POSIX特殊文字を可能にします．取り消し可能です．

`echo'
     入力文字をエコーバックします．取り消し可能です．

`echoe'
`crterase'
     `erase'文字をバックスペース-スペース-バックスペースとしてエコーバッ
     クします．取り消し可能です．

`echok'
     `kill'文字の後のニューラインをエコーバックします．取り消し可能で
     す．

`echonl'
     他の文字をエコーバックしていなくても，ニューラインをエコーバック
     します．取り消し可能です．

`noflsh'
     `interrupt'と`quit'特殊文字の後のフラッシュを不可能にします．取り
     消し可能です．

`xcase'
     `icanon'が設定されているとき，同じ小文字に`\'を前置することで，入
     力と出力の大文字を可能にします．非POSIXです．取り消し可能です．

`tostop'
     端末に書き込もうとしているバックグラウンド処理を停止します．非
     POSIXです．取り消し可能です．

`echoprt'
`prterase'
     削除された文字を後方の`\'と`/'の間にエコーバックします．非POSIXで
     す．取り消し可能です．

`echoctl'
`ctlecho'
     制御文字を，そのままではなく，ハット表示(`^C')でエコーバックしま
     す．非POSIXです．取り消し可能です．

`echoke'
`crtkill'
     `echoctl'と`echok'の設定の代わりに，`echoprt'と`echoe'の設定で示
     すものとして，行のそれぞれの文字を削除することで，`kill'特殊文字
     をエコーバックします．非POSIXです．取り消し可能です．




File: sh-utils-ja.info, Node: Combination, Next: Characters, Prev: Local, Up: stty invocation

組み合わせ設定
--------------

組み合わせ設定です．

`evenp'
`parity'
     `parenb -parodd cs7'と同じです．取り消し可能です．取り消しの場合
     は，`-parenb cs8'と同じです．

`oddp'
     `parenb parodd cs7'と同じです．取り消し可能です．取り消しの場合は，
     `-parenb cs8'と同じです．

`nl'
     `-icrnl -onlcr'と同じです．取り消し可能です．取り消しの場合は，
     `icrnl -inlcr -igncr onlcr -ocrnl -onlret'と同じです．

`ek'
     `erase'と`kill'特殊文字をそのデフォルト値にリセットします．

`sane'
     以下と同じです．cread -ignbrk brkint -inlcr -igncr icrnl -ixoff
     -iuclc -ixany imaxbel opost -olcuc -ocrnl onlcr -onocr -onlret
     -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0 isig icanon iexten echo
     echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl
     echoke そして，すべての特殊文字をそのデフォルト値に設定します．

`cooked'
     `brkint ignpar istrip icrnl ixon opost isig icanon'と同じで，
     `min'と`time'文字が`eof'と`eol'文字と同じ場合は，`eof'と`eol'文字
     をそのデフォルト値に設定します．取り消し可能です．取り消しの場合
     は，`raw'と同じです．

`raw'
     以下と同じです．-ignbrk -brkint -ignpar -parmrk -inpck -istrip
     -inlcr -igncr -icrnl -ixon -ixoff -iuclc -ixany -imaxbel -opost
     -isig -icanon -xcase min 1 time 0 取り消し可能です．取り消しの場
     合は，`cooked'と同じです．

`cbreak'
     `-icanon'と同じです．取り消し可能です．取り消しの場合は，`icanon'
     と同じです．

`pass8'
     `-parenb -istrip cs8'と同じです．取り消し可能です．取り消しの場合
     は，`parenb istrip cs7'と同じです．

`litout'
     `-parenb -istrip -opost cs8'と同じです．取り消し可能です．取り消
     しの場合は，`parenb istrip opost cs7'同じです．

`decctlq'
     `-ixany'と同じです．非POSIXです．取り消し可能です．

`tabs'
     `tab0'と同じです．取り消し可能です．取り消しの場合は，`tab3'と同
     じです．

`lcase'
`LCASE'
     `xcase iuclc olcuc'と同じです．非POSIXです．取り消し可能です．

`crt'
     `echoe echoctl echoke'と同じです．

`dec'
     `echoe echoctl echoke -ixany intr ^C erase ^? kill C-u'と同じです．




File: sh-utils-ja.info, Node: Characters, Next: Special, Prev: Combination, Up: stty invocation

特殊文字
--------


特殊文字のデフォルト値はシステム毎に異なります．それらは，構文`name
value'で設定され，nameは以下にリストアップされていて，valueはハット表
示(`^C')の文字通り，または，16進を示す`0x'，8真数を示す`0'，または，10
進を示すその他もので始まる整数のどちらかで，与えることが可能です．

GNU sttyに対し，`^-'や`undef'の値を与えることで，特殊文字を使用不可能
にします．(これは，Ultrix `stty'と互換性がなく，それは特殊文字を使用不
可能にするために`u'の値を使用します．GNU `stty'は，値`u'を他と同じよう
に扱い，言い換えると，特殊文字をUに設定します．)


`intr'
     中断シグナルを送信します．

`quit'
     終了シグナルを送信します．

`erase'
     最後に入力された文字を削除します．

`kill'
     現在の行を削除します．

`eof'
     ファイルの終りを送信します(入力を終了します)．

`eol'
     行の終りです．

`eol2'
     行の終りの別文字です．非POSIXです．

`swtch'
     異なるシェルレイヤーに切り替えます．非POSIXです．

`start'
     停止後の出力を再開します．

`stop'
     出力を停止します．

`susp'
     端末の停止シグナルを送信します．

`dsusp'
     入力をフラッシュした後，停止シグナルを送信します．非POSIXです．

`rprnt'
     現在の行を再描画します．非POSIXです．

`werase'
     最後に入力された単語を消去します．非POSIXです．

`lnext'
     入力された次の文字を，それが特殊文字の場合でも，そのまま入力しま
     す．非POSIXです．




File: sh-utils-ja.info, Node: Special, Prev: Characters, Up: stty invocation

特殊設定
--------


`min N'
     `-icanon'が設定されているとき，制限されている時間値までに安全に読
     み込む文字の最小数を設定します．

`time N'
     `-icanon'が設定されているとき，文字の最小数が読み込まれていない場
     合，読み込み時間切れまでの10秒単位の数字を設定します．

`ispeed N'
     入力速度をNに設定します．

`ospeed N'
     出力速度をNに設定します．

`rows N'
     ttyカーネルドライバに端末の行数Nを伝えます．非POSIXです．

`cols N'
`columns N'
     カーネルに端末の列数Nを伝えます．非POSIXです．

`size'
     端末が持っているとカーネルが想像する，列と行の数を表示します．(カー
     ネルで行と列をサポートしないシステムでは，特に環境変数`LINES'と
     `COLUMNS'が代わりに使用されます．しかし，GNU `stty'はそれについて
     何も知りません．)非POSIXです．

`line N'
     回線制御Nを使用します．非POSIXです．

`speed'
     端末の速度を出力します．

`N'
     入出力の速度をNに設定します．Nは，以下の一つになります．0 50 75
     110 134 134.5 150 200 300 600 1200 1800 2400 4800 9600 19200
     38400 `exta' `extb'です．`exta'は19200と同じです．`extb'は38400と
     同じです．`-clocal'が設定されている場合，0は回線を切断します．




File: sh-utils-ja.info, Node: printenv invocation, Next: tty invocation, Prev: stty invocation, Up: Working context

`printenv': すべてまたはいくつかの環境変数を出力
================================================


`printenv'は，環境変数の値を出力します．構文は以下のとおりです．

     printenv [OPTION] [VARIABLE]...

引数がしていされていない場合，`printenv'はすべての環境変数の値を出力し
ます．それ以外の場合，それは，それぞれの設定されているVARIABLE の値を
出力し，設定されていないものには何もしません．

オプションは，単独の`--help'または`--version'だけです．*Note Common
options::.

終了ステータス．

     0 すべての指定された変数が見つかった場合．
     1 指定された変数の少なくとも一つが見つかった場合．
     2 書き込みエラーが発生した場合．




File: sh-utils-ja.info, Node: tty invocation, Prev: printenv invocation, Up: Working context

`tty': 標準入力につながっている端末のファイル名を出力
=====================================================


`tty'は，標準入力が接続してある端末のファイル名を出力します．標準入力
が端末でない場合，それは，`not a tty'を出力します．構文は以下のとおり
です．

     tty [OPTION]...

プログラムは以下のオプションも受け入れます．*Note Common options::,も
参照してください．


`-s'
`--silent'
`--quiet'
     何も出力しません．終了ステータスを返すだけです．

`tty'の終了ステータスです．

     0 標準入力が端末の場合．
     1 標準入力が端末でない場合．
     2 不正な引数が与えられた場合．
     3 書き込みエラーが発生した場合．




File: sh-utils-ja.info, Node: User information, Next: System context, Prev: Working context, Up: Top

ユーザ情報
**********


このセクションは，ユーザに関連する情報を出力するコマンドを記述します．
login，グループ，その他です．

* Menu:

* id invocation::               Print real and effective uid and gid.
* logname invocation::          Print current login name.
* whoami invocation::           Print effective user id.
* groups invocation::           Print group names a user is in.
* users invocation::            Print login names of users currently logged in.
* who invocation::              Print who is currently logged in.




File: sh-utils-ja.info, Node: id invocation, Next: logname invocation, Prev: User information, Up: User information

`id': 実際と実効のuidとgidを出力
================================


`id'は，与えられたユーザや，ユーザが指定されていない場合はそれを実行し
ているプロセスの情報を出力します．構文は以下のとおりです．

     id [OPTION]... [USERNAME]

デフォルトで，それは実際のユーザid，実際のグループid，実際のユーザidと
異なる場合は実効ユーザid，実際のグループidと異なる場合は実効グループid，
そして，追加のグループidを出力します．

それぞれのこれらの数値は，識別文字が前置され，カッコ内に対応するユーザ
やグループ名が続きます．

オプションで，`id'は，上記の情報の一部のみを出力します．*Note Common
options::,も参照してください．

`-g'
`--group'
     グループidのみ出力します．

`-G'
`--groups'
     追加のグループのみ出力します．

`-n'
`--name'
     ID番号の代わりにユーザやグループの名前を出力します．`-u'，`-g'，
     または`-G'が必要です．

`-r'
`--real'
     実効の代わりに，実際のユーザやグループのidを出力します．`-u'，
     `-g'，または`-G'が必要です．


`-u'
`--user'
     ユーザidのみ出力します．




File: sh-utils-ja.info, Node: logname invocation, Next: whoami invocation, Prev: id invocation, Up: User information

`logname': 現在のログイン名を出力
=================================



`logname'は，ファイル`/etc/utmp'に見つかる，呼び出しているユーザ名を出
力し，0のステータスで終了します．呼び出しているプロセスに対する
`/etc/utmp'項目がない場合，`logname'はエラーメッセージを出力し，1のス
テータスで終了します．

オプションは`--help'と`--version'のみです．*Note Common options::.




File: sh-utils-ja.info, Node: whoami invocation, Next: groups invocation, Prev: logname invocation, Up: User information

`whoami': 実効ユーザidの出力
============================


`whoami'は，現在の実効ユーザidに関連しているユーザ名を出力します．コマ
ンド`id -un'と同じです．

オプションは`--help'と`--version'のみです．*Note Common options::.




File: sh-utils-ja.info, Node: groups invocation, Next: users invocation, Prev: whoami invocation, Up: User information

`groups': ユーザが所属するグループ名を出力
==========================================


`groups'は，与えられたそれぞれのUSERNAME，または，名前が与えられない場
合は現在のプロセスに対する，プライマリと追加のグループ名を出力します．
名前が与えられた場合は，それぞれのユーザ名が，ユーザのグループのリスト
の前に出力されます．構文は以下のとおりです．


     groups [USERNAME]...

グループリストは，コマンド`id -Gn'の出力と同じです．

オプションは`--help'と`--version'のみです．*Note Common options::.




File: sh-utils-ja.info, Node: users invocation, Next: who invocation, Prev: groups invocation, Up: User information

`users': 現在ログインしているユーザのログイン名を出力
=====================================================


`users'は，現在のホストに現在ログインしているユーザの，空白で分けられ
たユーザ名のリストを，単一行に出力します．それぞれのユーザ名はログイン
セッションに対応するので，一回以上のログインセッションがあるユーザは，
ユーザ名が回数と同じ数だけ出力にあらわれます．構文は以下のとおりです．

     users [FILE]

FILE引数がない場合は，`users'は，その情報をファイル`/etc/utmp'から，抽
出します．ファイル引数が与えられた場合は，`users'は，代わりにそのファ
イルを使用します．普通は，`/etc/wtmp'を選択します．

オプションは`--help'と`--version'だけです．*Note Common options::.




File: sh-utils-ja.info, Node: who invocation, Prev: users invocation, Up: User information

`who': 現在ログインしているユーザを出力
=======================================


`who'は，現在ログオンしているユーザの情報を出力します．構文は以下のと
おりです．

     `who' [OPTION] [FILE] [am i]

非オプション引数が与えられていない場合，`who'は，現在ログオンしている
それぞれのユーザに対し，以下の情報を出力します．ログイン名，端末回線，
ログイン時間，そして，リモートホスト名やXディスプレイです．


非オプション引数が1つ与えられている場合，`who'は，`/etc/utmp' の代わり
に，それをログオンしているユーザの記録を含むファイル名として使用します．
通常，以前ログインしていた人を見るために，`/etc/wtmp'が引数として与え
られます．

非オプションが2つ与えられている場合，`who'は，(標準入力から決定される)
それを実行しているユーザの項目のみ出力し，それにはホスト名が前置されま
す．伝統的に，2つの与えられる引数は，`am i'で，`who am i'となります．

プログラムは以下のオプションも受け入れます．*Note Common options::,も
参照してください．

`-m'
     `who am i'と同じです．

`-q'
`--count'
     ログイン名と，ログオンしているユーザの数のみを出力します．他のす
     べてのオプションに優先します．

`-s'
     無視します．他のバージョンの`who'との互換性のためです．

`-i'
`-u'
`--idle'
     ログイン時間後，ユーザがアイドル状態の時間と分の数を出力します．
     `.'  は，ユーザがこの1分間の間にアクティブだったということを意味
     します．`old'は，ユーザが24時間以上アイドル状態だということを意味
     します．

`-l'
`--lookup'
     DNSルックアップを通じて，utmpで見つかるホスト名の標準化を試みます．
     これは，自動ダイアルアップインターネットアクセスを用いたシステム
     で，重大な遅延を引き起こすため，デフォルトではありません．

`-H'
`--heading'
     列の見出しを出力します．

`-w'
`-T'
`--mesg'
`--message'
`--writable'
     それぞれのログイン名の後に，ユーザのメッセージステータスを示す文
     字を出力します．

          `+' `write'メッセージが利用可能です．
          `-' `write'メッセージが利用不可能です．
          `?' 端末デバイスが見つかりません．





File: sh-utils-ja.info, Node: System context, Next: Modified command invocation, Prev: User information, Up: Top

システムコンテクスト
********************


このセクションは，システム全体の情報を出力または変更するコマンドを記述
します．

* Menu:

* date invocation::             Print or set system date and time.
* uname invocation::            Print system information.
* hostname invocation::         Print or set system name.




File: sh-utils-ja.info, Node: date invocation, Next: uname invocation, Prev: System context, Up: System context

`date': システムの日付と時間を出力または設定
============================================


引数を伴わない`date'は，(以下で記述する)`%c'指示語の書式で，現在の時間
と日付を出力します．構文は以下のとおりです．

     date [OPTION]... [+FORMAT]
     date [-u|--utc|--universal] [ MMDDHHMM[[CC]YY][.SS] ]


`+'で始まる引数が与えられた場合，`date'は現在の時間と日付(または，以下
で参照できる，`--date'オプションで指定された日付と時間)を，引数で定義
された書式で出力し，それは，`strftime'関数と同じです．`%'で始まる指示
語以外の，書式文字列内の文字は，変更されずに出力されます．指示語は以下
で記述します．

* Menu:

* Time directives::             %[HIklMprsSTXzZ]
* Date directives::             %[aAbBcdDhjmUwWxyY]
* Literal directives::          %[%nt]
* Padding::                     Pad with zeroes, spaces (%_), or nothing (%-).
* Setting the time::            Changing the system clock.
* Options for date::            Instead of the current time.
* Examples of date::            Examples.



File: sh-utils-ja.info, Node: Time directives, Next: Date directives, Prev: date invocation, Up: date invocation

時間指示語
----------


時間に関連する`date'の指示語です．

`%H'
     時間(00...23)
`%I'
     時間(01...12)
`%k'
     時間( 0...23)
`%l'
     時間( 1...12)
`%M'
     分(00...59)
`%p'
     ロケールの午前または午後
`%r'
     時間で，12時間基準(hh:mm:ss [AP]M)
`%s'
     エポック，すなわち1970年1月1日00:00:00 UTCからの秒(GNU拡張)です．
     この値は，エポックとlocaltimeシステムコールで定義される現在の日付
     の間の時間だということに注意してください．それは，`--date'オプショ
     ンで変更されません．
`%S'
     秒(00...61)
`%T'
     時間で，24時間基準(hh:mm:ss)
`%X'
     ロケールの時間表現(%H:%M:%S)
`%z'
     RFC-822スタイルの数値的なタイムゾーン(例えば，-0600や+0100)，また
     は，タイムゾーンが決定できない場合は何もしません．この値は*現在の
     *タイムゾーンを反映します．それは，`--date'オプションで変更されま
     せん．
`%Z'
     タイムゾーン(例えば，EDT)，または，タイムゾーンが決定できない場合
     は何もしません．この値は*現在の*タイムゾーンを反映することに注意
     してください．それは，`--date'オプションで変更されません．




File: sh-utils-ja.info, Node: Date directives, Next: Literal directives, Prev: Time directives, Up: date invocation

日付指示語
----------


日付に関連する`date'指示語です．

`%a'
     ロケール略記される曜日の名前(Sun...Sat)
`%A'
     ロケールの完全な週の曜日の名前で，可変長(Sunday...Saturday)
`%b'
     ロケールの略記される月の名前(Jan...Dec)
`%B'
     ロケールの完全な月の名前で，可変長(January...December)
`%c'
     ロケールの日付と時間(Sat Nov 04 12:02:33 EST 1989)
`%d'
     月の何日目(01...31)
`%D'
     日付(mm/dd/yy)
`%h'
     %bと同じ
`%j'
     年の何日目(001...366)
`%m'
     月(01...12)
`%U'
     日曜日を週の最初の日として用いた，年の何週目(00...53)です．新年の
     最初の日曜日の前の日付は，0週目になります．
`%V'
     月曜日を週の最初の日として用いた，年の何週目の10進(00...53)です．
     新年の1月1日が含まれる週が，4日以上の日を含む場合，それは第1週と
     考えられます．それ以外の場合は，前年の53週目となり，翌週が第1週と
     なります．(ISO 8601: 1988標準を参照してください．)
`%w'
     週の何日目(0...6)で，0は日曜日に対応します．
`%W'
     月曜日を週の最初の日として用いた，年の何週目(00...53)です．新年の
     最初の月曜日の前の日付は，0週目になります．
`%x'
     ロケールの日付表現(mm/dd/yy)
`%y'
     最後の2桁を用いた年(00...99)
`%Y'
     年(1970....)




File: sh-utils-ja.info, Node: Literal directives, Next: Padding, Prev: Date directives, Up: date invocation

リテラル指示語
--------------


リテラル文字列を生成する`date'の指示語です．

`%%'
     リテラルの%
`%n'
     改行
`%t'
     水平タブ




File: sh-utils-ja.info, Node: Padding, Next: Setting the time, Prev: Literal directives, Up: date invocation

パディング
----------


デフォルトで，`date'は数値フィールドをゼロでパディングし，例えば，数字
の月は，常に2桁で出力されます．GNU `date'は，以下の`%'と指示語の間の数
値修飾子を認識します．

`-'
     (ハイフン) フィールドをパディングしません．出力を人間が利用する目
     的の場合役に立ちます．
`_'
     (アンダースコア)フィールドをスペースでパディングします．出力に固
     定数の文字が必要で，ゼロでは混乱する場合，役に立ちます．

これらはGNU拡張です．

ここに違いを表現する例があります．

     date +%d/%m -d "Feb 1"
     => 01/02
     date +%-d/%-m -d "Feb 1"
     => 1/2
     date +%_d/%_m -d "Feb 1"
     =>  1/ 2




File: sh-utils-ja.info, Node: Setting the time, Next: Options for date, Prev: Padding, Up: date invocation

時間の設定
----------


`+'で始まらない引数が与えられた場合，`date'は，システム時計をその引数
(以下で記述)で指定された時間と日付に設定します．システム時計を設定する
ため，適切な特権を持っている必要があります．`--date'と`--set'オプショ
ンは，引数として使用できません．`--universal'オプションは，指定された
時間と日付がローカルなタイムゾーンではなく世界標準時に関連することを示
すために，引数として使用できます．

引数は，完全な数字から成り立つ必要があり，それは以下の意味を持ちます．

MM
     月
DD
     月の日付
HH
     時間
MM
     分
CC
     年の最初の2桁(オプション)
YY
     年の最後の2桁(オプション)
SS
     秒(オプション)

`--set'オプションもシステム時計を設定します．次のオプションを参照して
ください．




File: sh-utils-ja.info, Node: Options for date, Next: Examples of date, Prev: Setting the time, Up: date invocation

`date'のオプション
------------------


プログラムは以下のオプションも受け入れます．*Note Common options::,も
参照してください．


`-d DATESTR'
`--date=DATESTR'
     現在の時間と日付の代わりに，DATESTRで指定された時間と日付を表示し
     ます．DATESTRは，ほとんどあらゆる一般的な書式が可能です．月の名前，
     タイムゾーン，`am'と`pm'，`yesterday'，`ago'，`next'，等を含める
     ことが可能です．*Note Date input formats::.

`-f DATEFILE'
`--file=DATEFILE'
     `-d'と同様に，DATEFILEのそれぞれの行を解析し，結果の時間と日付を
     表示します．DATEFILEが`-'の場合，標準入力を使用します．`date'の実
     行を何度も開始するシステムのオーバーへッドは無視できないので，こ
     れは多くの日付を処理するとき役に立ちます．

`-I[TIMESPEC]'
`--iso-8601[=TIMESPEC]'
     ISO 8601書式`%Y-%m-%d'を使用して日付を表示します．

     オプション引数のTIMESPECは，含める時間の追加の単語の数を指定しま
     す．以下の一つになるはずです．
     `auto'
          デフォルトの動作です．日付のみ出力します．
     `hours'
          日付に時間を追加します．
     `minutes'
          時間と分を追加します．
     `seconds'
          時間，分，そして秒を追加します．

     時間の用語を表示する場合，書式`%z'を使用したタイムゾーンを含めま
     す．`--utc'も指定されている場合，`%z'の場所に`%Z'を使用します．

`-R'
`--rfc-822'
     RFC-822で指定される書式`%a, %_d %b %Y %H:%M:%S %z'で時間と日付を
     表示します．`--utc'も指定されている場合，`%z'の場所に`GMT' を使用
     します．

`-r FILE'
`--reference=FILE'
     現在の時間と日付の代わりに，FILEが最後に編集された時間を参照して，
     時間と日付を表示します．

`-s DATESTR'
`--set=DATESTR'
     時間と日付をDATESTRに設定します．上記の`-d'を参照してください．

`-u'
`--utc'
`--universal'
     ローカル(壁時計の)時間の代わりに，世界標準時で時間と日付を表示ま
     たは設定を行います．




File: sh-utils-ja.info, Node: Examples of date, Prev: Options for date, Up: date invocation

`date'の例
----------


ここにいくつかの例があります．上記セクションの`-d'オプションに対するド
キュメントも参照してください．


   * 一昨日の日付を出力します．
          date --date='2 days ago'

   * これから3ヶ月と1日先の日付を出力します．
          date --date='3 months 1 day'

   * 今年のクリスマスが年の何日目かを出力します．
          date --date='25 Dec' +%j

   * 現在の月の完全な名前と日を出力します．
          date '+%B %d'

     しかし，月の最初の9日の間，`%d'はゼロパディングした2桁のフィールド
     に展開するため，これは期待するものでない可能性があり，例えば，`date
     -d 1may '+%B %d''は`May 01'を出力します．

   * 1桁の日の前置されるゼロを日付に付けないで出力するため，パディング
     を完全に抑制する(GNU拡張)の`-'修飾子を使用可能です．
          date -d=1may '+%B %-d'

   * システム時計を設定するとき，`date'の多くの非GNUバージョンが要求す
     る書式で，現在の日付と時間を出力します．
          date +%m%d%H%M%Y.%S

   * システム時計を2分進める設定です．
          date --set='+2 minutes'

   * RFC-822で指定される書式で日付を出力するため，`date --rfc'を使用し
     てください．そうするとこのようになりました．

          Mon, 25 Mar 1996 23:34:17 -0600

   * 日付文字を，エポック(1970-01-01 00:00:00 UTC)からの秒数に変換する
     ため，`%s'書式を用いた`--date'オプションを使用してください．それ
     は，日付毎の並べ替え，および/または，グラフ化，および/または，比
     較に役立つはずです．以下のコマンドは，エポックより1秒以上後の時間
     に対し，エポックからの秒数を出力しますが，タイムゾーンの5時間後
     (ケンブリッジ，マサチューセッツ) では，このように全体でエポックの
     5時間と1秒後となります．

          date --date='1970-01-01 00:00:01 UTC +5 hours' +%s
          18001

     上記の例でタイムゾーン情報を指定*していない*と仮定します．そのと
     き，文字列を解釈するとき，日付はコンピュータのタイムゾーンの考え
     を使用します．イングランドのグリニッジにいる場合，得るものはこの
     ようになります．

          # local time zone used
          date --date='1970-01-01 00:00:01' +%s
          1

   * 日付を並べ替えたりグラフ化したりしている場合，生の日付の値は，エ
     ポックからの秒として表現可能です．しかし，ほとんどの人は，日付
     `946684800'を見て，"ああ，それは2000年最初の秒だ"と簡単には気が付
     きません．

          date --date='2000-01-01 UTC' +%s
          946684800

     そのような扱いにくい秒数を，より読みやすい形式に変換するため，こ
     のようなコマンドを使用してください．

          date -d '1970-01-01 946684800 sec' +"%Y-%m-%d %T %z"
          2000-01-01 00:00:00 +0000





