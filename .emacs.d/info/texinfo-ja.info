これは $s、  $s より makeinfo バージョン  $s によって作成されました。

このマニュアルはGNU Texinfo(バージョン4.2, 28 March 2002)
に対するもので，それは単一のソースファイルからオンライン情報と印刷された
マニュアルの両方を生成することが可能なドキュメントシステムです．

  Copyright (C) 1988, 90, 91, 92, 93, 95, 96, 97, 98, 99, 2000, 01, 02
Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."
  
INFO-DIR-SECTION Texinfo documentation system
START-INFO-DIR-ENTRY
* Texinfo(ja): (texinfo-ja).           The GNU documentation format.
* install-info(ja): (texinfo-ja)Invoking install-info. Update info/dir entries.
* texi2dvi(ja): (texinfo-ja)Format with texi2dvi.      Print Texinfo documents.
* texindex(ja): (texinfo-ja)Format with tex/texindex.  Sort Texinfo index files.
* makeinfo(ja): (texinfo-ja)Invoking makeinfo.         Translate Texinfo source.
END-INFO-DIR-ENTRY


File: texinfo-ja.info,  Node: Top,  Next: Copying Conditions,  Up: (dir)

Texinfo
*******

このマニュアルはGNU Texinfo(バージョン4.2, 28 March 2002)
に対するもので，それは単一のソースファイルからオンライン情報と印刷された
マニュアルの両方を生成することが可能なドキュメントシステムです．

  Copyright (C) 1988, 90, 91, 92, 93, 95, 96, 97, 98, 99, 2000, 01, 02
Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.1 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover texts
     being "A GNU Manual," and with the Back-Cover Texts as in (a)
     below.  A copy of the license is included in the section entitled
     "GNU Free Documentation License."

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."
  
このマスターメニューの最初の部分で，このInfoドキュメントの主なノードをリ
ストアップしていて，それには@-コマンドと概念の索引が含まれています．メ
ニューの残りはすべて，このドキュメントの下位レベルのノードです．

* Menu:

* Copying Conditions::          Your rights.
* Overview::                    Texinfo in brief.
* Texinfo Mode::                How to use Texinfo mode.
* Beginning a File::            What is at the beginning of a Texinfo file?
* Ending a File::               What is at the end of a Texinfo file?
* Structuring::                 How to create chapters, sections, subsections,
                                  appendices, and other parts.
* Nodes::                       How to write nodes.
* Menus::                       How to write menus.
* Cross References::            How to write cross references.
* Marking Text::                How to mark words and phrases as code,
                                  keyboard input, meta-syntactic
                                  variables, and the like.
* Quotations and Examples::     How to write quotations, examples, etc.
* Lists and Tables::            How to write lists and tables.
* Indices::                     How to create indices.
* Insertions::                  How to insert @-signs, braces, etc.
* Breaks::                      How to force and prevent line and page breaks.
* Definition Commands::         How to describe functions and the like
                                  in a uniform manner.
* Conditionals::                How to specify text for either TeX or Info.
* Internationalization::
* Defining New Texinfo Commands::
* Hardcopy::                    How to convert a Texinfo file to a file
                                  for printing and how to print that file.
* Creating and Installing Info Files::
* Command List::                All the Texinfo @-commands.
* Tips::                        Hints on how to write a Texinfo document.
* Sample Texinfo Files::        Complete examples, including full texts.
* Include Files::               How to incorporate other Texinfo files.
* Headings::                    How to write page headings and footings.
* Catching Mistakes::           How to find formatting mistakes.
* Refilling Paragraphs::        All about paragraph refilling.
* Command Syntax::              A description of @-Command syntax.
* Obtaining TeX::               How to Obtain TeX.
* Copying This Manual::         The GNU Free Documentation License.
* Command and Variable Index::  A menu containing commands and variables.
* Concept Index::               A menu covering many topics.

 --- 詳細なノードのリスト ---

Texinfoの概要

* Reporting Bugs::              Submitting effective bug reports.
* Using Texinfo::               Create printed or online output.
* Info Files::                  What is an Info file?
* Printed Books::               Characteristics of a printed book or manual.
* Formatting Commands::         @-commands are used for formatting.
* Conventions::                 General rules for writing a Texinfo file.
* Comments::                    Writing comments and ignored text in general.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Usually, a Texinfo file has six parts.
* Short Sample::                A short sample Texinfo file.
* History::                     Acknowledgements, contributors and genesis.

Texinfoモードを使用する

* Texinfo Mode Overview::       How Texinfo mode can help you.
* Emacs Editing::               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
* Inserting::                   How to insert frequently used @-commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             How to format for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.

ノードとメニューを更新する

* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.

Texinfoファイルを開始する

* Sample Beginning::            A sample beginning for a Texinfo file.
* Texinfo File Header::
* Document Permissions::
* Titlepage & Copyright Page::  Creating the title and copyright pages.
* The Top Node::                Creating the `Top' node and master menu.
* Global Document Commands::
* Software Copying Permissions::  Ensure that you and others continue to
                                    have the right to use and share software.

Texinfoファイルのヘッダ

* First Line::                  The first line of a Texinfo file.
* Start of Header::             Formatting a region requires this.
* setfilename::                 Tell Info the name of the Info file.
* settitle::                    Create a title for the printed work.
* End of Header::               Formatting a region requires this.

ドキュメントに対する許可

* copying::                     Declare the document's copying permissions.
* insertcopying::               Where to insert the permissions.

タイトルと著作権のページ

* titlepage::                   Create a title for the printed document.
* titlefont center sp::         The `@titlefont', `@center',
                                  and `@sp' commands.
* title subtitle author::       The `@title', `@subtitle',
                                  and `@author' commands.
* Copyright::                   How to write the copyright notice and
                                  include copying permissions.
* end titlepage::               Turn on page headings after the title and
                                  copyright pages.
* headings on off::             An option for turning headings on and off
                                  and double or single sided printing.

`Top'ノードとマスターメニュー

* Top Node Example::
* Master Menu Parts::

大域的なドキュメントコマンド

* documentdescription::         Document summary for the HTML output.
* setchapternewpage::           Start chapters on right-hand pages.
* paragraphindent::             Specify paragraph indentation.
* exampleindent::               Specify environment indentation.

Texinfoファイルの終り

* Printing Indices & Menus::    How to print an index in hardcopy and
                                  generate index menus in Info.
* Contents::                    How to create a table of contents.
* File End::                    How to mark the end of a file.

章の構造

* Tree Structuring::            A manual is like an upside down tree ...
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                The `@top' command, part of the `Top' node.
* chapter::
* unnumbered & appendix::
* majorheading & chapheading::
* section::
* unnumberedsec appendixsec heading::
* subsection::
* unnumberedsubsec appendixsubsec subheading::
* subsubsection::               Commands for the lowest level sections.
* Raise/lower sections::        How to change commands' hierarchical level.

ノード

* Two Paths::                   Different commands to structure
                                  Info output and printed output.
* Node Menu Illustration::      A diagram, and sample nodes and menus.
* node::                        Creating nodes, in detail.
* makeinfo Pointer Creation::   Letting makeinfo determine node pointers.
* anchor::                      Defining arbitrary cross-reference targets.

`@node'コマンド

* Node Names::                  How to choose node and pointer names.
* Writing a Node::              How to write an `@node' line.
* Node Line Tips::              Keep names short.
* Node Line Requirements::      Keep names unique, without @-commands.
* First Node::                  How to write a `Top' node.
* makeinfo top command::        How to use the `@top' command.

メニュー

* Menu Location::               Put a menu in a short node.
* Writing a Menu::              What is a menu?
* Menu Parts::                  A menu entry has three parts.
* Less Cluttered Menu Entry::   Two part menu entry.
* Menu Example::                Two and three part menu entries.
* Other Info Files::            How to refer to a different Info file.

相互参照

* References::                  What cross references are for.
* Cross Reference Commands::    A summary of the different commands.
* Cross Reference Parts::       A cross reference has several parts.
* xref::                        Begin a reference with `See' ...
* Top Node Naming::             How to refer to the beginning of another file.
* ref::                         A reference for the last part of a sentence.
* pxref::                       How to write a parenthetical cross reference.
* inforef::                     How to refer to an Info-only file.
* uref::                        How to refer to a uniform resource locator.

`@xref'

* Reference Syntax::            What a reference looks like and requires.
* One Argument::                `@xref' with one argument.
* Two Arguments::               `@xref' with two arguments.
* Three Arguments::             `@xref' with three arguments.
* Four and Five Arguments::     `@xref' with four and five arguments.

単語と文節に印を付ける

* Indicating::                  How to indicate definitions, files, etc.
* Emphasis::                    How to emphasize text.

定義やコマンド等を示す

* Useful Highlighting::         Highlighting provides useful information.
* code::                        Indicating program code.
* kbd::                         Showing keyboard input.
* key::                         Specifying keys.
* samp::                        A literal sequence of characters.
* verb::                        A verbatim sequence of characters.
* var::                         Indicating metasyntactic variables.
* env::                         Indicating environment variables.
* file::                        Indicating file names.
* command::                     Indicating command names.
* option::                      Indicating option names.
* dfn::                         Specifying definitions.
* cite::                        Referring to books not in the  Info system.
* acronym::                     Indicating acronyms.
* url::                         Indicating a World Wide Web reference.
* email::                       Indicating an electronic mail address.

テキストの強調

* emph & strong::               How to emphasize text in Texinfo.
* Smallcaps::                   How to use the small caps font.
* Fonts::                       Various font commands for printed output.

引用と例

* Block Enclosing Commands::    Different constructs for different purposes.
* quotation::                   Writing a quotation.
* example::                     Writing an example in a fixed-width font.
* verbatim::                    Writing a verbatim example.
* verbatiminclude::             Including a file verbatim.
* lisp::                        Illustrating Lisp code.
* small::                       Forms for `@smallbook'.
* display::                     Writing an example in the current font.
* format::                      Writing an example without narrowed margins.
* exdent::                      Undo indentation on a line.
* flushleft & flushright::      Pushing text flush left or flush right.
* noindent::                    Preventing paragraph indentation.
* cartouche::                   Drawing rounded rectangles around examples.

リストと表

* Introducing Lists::           Texinfo formats lists for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.
* Multi-column Tables::         How to construct generalized tables.

２列の表の作成

* table::                       How to construct a two-column table.
* ftable vtable::               Automatic indexing for two-column tables.
* itemx::                       How to put more entries in the first column.

複数列の表

* Multitable Column Widths::    Defining multitable column widths.
* Multitable Rows::             Defining multitable rows, with examples.

索引

* Index Entries::               Choose different words for index entries.
* Predefined Indices::          Use different indices for different kinds
                                  of entry.
* Indexing Commands::           How to make an index entry.
* Combining Indices::           How to combine indices.
* New Indices::                 How to define your own indices.

索引の統合

* syncodeindex::                How to merge two indices, using `@code'
                                  font for the merged-from index.
* synindex::                    How to merge two indices, using the
                                  default font of the merged-to index.

特別な挿入

* Braces Atsigns::              How to insert braces, `@'.
* Inserting Space::             How to insert the right amount of space
                                  within a sentence.
* Inserting Accents::           How to insert accents and special characters.
* Dots Bullets::                How to insert dots and bullets.
* TeX and copyright::           How to insert the TeX logo
                                  and the copyright symbol.
* pounds::                      How to insert the pounds currency symbol.
* minus::                       How to insert a minus sign.
* math::                        How to format a mathematical expression.
* Glyphs::                      How to indicate results of evaluation,
                                  expansion of macros, errors, etc.
* Footnotes::                   How to include footnotes.
* Images::                      How to include graphics.

@とカッコの挿入

* Inserting An Atsign::         How to insert `@'.
* Inserting Braces::            How to insert `{' and `}'.

スペースの挿入

* Not Ending a Sentence::       Sometimes a . doesn't end a sentence.
* Ending a Sentence::           Sometimes it does.
* Multiple Spaces::             Inserting multiple spaces.
* dmn::                         How to format a dimension.

省略と黒点の挿入

* dots::                        How to insert dots ...
* bullet::                      How to insert a bullet.

TeXと著作権シンボルの挿入

* tex::                         How to insert the TeX logo.
* copyright symbol::            How to use `@copyright'{}.

例のためのglyph

* Glyphs Summary::
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Glyph::                 How to indicate printed output.
* Error Glyph::                 How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Glyph::                 How to indicate the location of point.

glyphの概要

* result::
* expansion::
* Print Glyph::
* Error Glyph::
* Equivalence::
* Point Glyph::

脚注

* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.

改行，改ページの作成と阻止

* Break Commands::              Cause and prevent splits.
* Line Breaks::                 How to force a single line to use two lines.
* - and hyphenation::           How to tell TeX about hyphenation points.
* w::                           How to prevent unwanted line breaks.
* sp::                          How to insert blank lines.
* page::                        How to force the start of a new page.
* group::                       How to prevent unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.

定義コマンド

* Def Cmd Template::            How to structure a description using a
                                  definition command.
* Optional Arguments::          How to handle optional and repeated arguments.
* deffnx::                      How to group two or more `first' lines.
* Def Cmds in Detail::          All the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::

定義コマンド

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.

表示されるテキストの条件

* Conditional Commands::        Specifying text for HTML, Info, or TeX.
* Conditional Not Commands::    Specifying text for not HTML, Info, or TeX.
* Raw Formatter Commands::      Using raw TeX or HTML commands.
* set clear value::             Designating which text to format (for
                                  all output formats); and how to set a
                                  flag to a string that you can insert.

`@set'，`@clear'，そして`@value'

* set value::                   Expand a flag variable to a string.
* ifset ifclear::               Format a region if a flag is set.
* value Example::               An easy way to update edition information.

国際化

* documentlanguage::            Declaring the current language.
* documentencoding::            Declaring the input encoding.

新しいTexinfoコマンドの定義

* Defining Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Beyond basic macro usage.
* alias::                       Command aliases.
* definfoenclose::              Customized highlighting.

ハードコピーの書式化と印刷

* Use TeX::                     Use TeX to format for hardcopy.
* Format with tex/texindex::    How to format with explicit shell commands.
* Format with texi2dvi::        A simpler way to format.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        TeX formatting requirements summary.
* Preparing for TeX::           What to do before you use TeX.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on A4 or A5 paper.
* pagesizes::                   How to print with customized page sizes.
* Cropmarks and Magnification::  How to print marks to indicate the size
                                of pages and how to print scaled up output.
* PDF Output::                  Portable Document Format output.

Infoファイルの作成とインストール

* Creating an Info File::
* Installing an Info File::

Infoファイルの作成

* makeinfo advantages::         `makeinfo' provides better error checking.
* Invoking makeinfo::           How to run `makeinfo' from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run `makeinfo' from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                  in Emacs Lisp are an alternative
                                  to `makeinfo'.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                  to run better.
* makeinfo html::               Generating HTML output.

Infoファイルのインストール

* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                  located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                  to the Info directory.
* Invoking install-info::       `install-info' options.

Texinfoファイルの見本

* Short Sample Texinfo File::
* GNU Sample Texts::

インクルードファイル

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                  menus when using included files.
* Include File Requirements::   What `texinfo-multiple-files-update' expects.
* Sample Include File::         A sample outer file with included files
                                  within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                  has changed over time.

ページ見出し

* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.

書式化の失敗

* makeinfo Preferred::          `makeinfo' finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with TeX formatting.
* Using texinfo-show-structure::  How to use `texinfo-show-structure'.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.

悪いノード参照を見つける

* Using Info-validate::         How to run `Info-validate'.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.

このマニュアルのコピーについて

* GNU Free Documentation License::  License for copying this manual.

     ドキュメントはSexに似ていて，いいときはとってもいいし，ダメなときは何も
     しないのと一緒だね． --Dick Brandon


File: texinfo-ja.info,  Node: Copying Conditions,  Next: Overview,  Prev: Top,  Up: Top

Texinfoのコピー条件
*******************

  Texinfoに関連して現在配布されているプログラムには，`makeinfo'，
`info'，`texindex'，そして`texinfo.tex'が含まれています．
これらのプログラムは"フリー"です．これは，誰でも自由に使用し，自由を
基本として自由に再配布できるということを意味します．Texinfo関連のプログ
ラムはパブリックドメインではありません．著作権があり配布に関して制限があ
りますが，これらの制限は，大変協力的な市民が望むものを全て認めるよう設計
されています．許可されないことは，あなたから得たこれらのプログラムのあら
ゆるバージョンを，他の人が共有することの妨害を試みることです．

具体的には，我々はTexinfoに関連したプログラムのコピーを与える権利をあな
たが持っていることを確かめたいと思っていて，それらの権利とは，あなたがソー
スコードを受け取るか，欲しい場合は入手可能だということ，これらのプログラ
ムを変更したり新しいフリーのプログラムにその一部を使用したりできることと，
そして，これらのことを知っているということです．

皆がそのような権利を持っていることを確認するため，我々は，あなたが他の誰
かから権利を奪うことを禁止する必要があります．例えば，あなたがTexinfoに
関連するプログラムを配布する場合，あなたは，あなたが持つ全ての権利を与え
る必要があります．そして，ソースコードを受け取る，または得られることを確
かめる必要があります．そして，権利について教える必要があります．

また我々自身を守るため，Texinfoに関連するプログラムに対し保証が無いとい
うことを全ての人が理解することを確実にする必要があります．プログラムが誰
かに編集されて渡された場合，受け取ったものが我々が配布したものではないの
で，他人が招いたあらゆる問題が我々の判断の影響を受けていないことを受け取
り人が知っていて欲しいと思います．

Texinfoに関連して配布されている現在のプログラムに対するライセンスの正確
な状態は，一緒に配布されるGeneral Public Licensesで見つかります．このマ
ニュアルは，特にGNU Free Documentation Licenseでカバーされています
(*note GNU Free Documentation License::)．


File: texinfo-ja.info,  Node: Overview,  Next: Texinfo Mode,  Prev: Copying Conditions,  Up: Top

Texinfoの概要
*************

  "Texinfo"(1) (*note Overview-Footnote-1::)
は，オンラインの情報と印刷物の両方を作成するため，単一ファイルを用いたド
キュメントシステムです．これは，１つをオンライン情報，もう１つを印刷物，
といった異なる２つのドキュメントを書く代わりに，１つのドキュメントを書く
だけで良いということを意味します．それゆえ，ワークが修正されたとき，１つ
のドキュメントだけを修正するだけですみます．

* Menu:

* Reporting Bugs::              Submitting effective bug reports.
* Using Texinfo::               Create printed or online output.
* Info Files::                  What is an Info file?
* Printed Books::               Characteristics of a printed book or manual.
* Formatting Commands::         @-commands are used for formatting.
* Conventions::                 General rules for writing a Texinfo file.
* Comments::                    Writing comments and ignored text in general.
* Minimum::                     What a Texinfo file must have.
* Six Parts::                   Usually, a Texinfo file has six parts.
* Short Sample::                A short sample Texinfo file.
* History::                     Acknowledgements, contributors and genesis.


File: texinfo-ja.info,  Node: Overview-Footnotes,  Up: Overview

  (1) "Texinfo"の最初の音節は，"hex"ではなく，
"speck"のように発音されます．この奇妙な発音はTeXの発音が由来ですが，
同じではありません．実際には，単語TeXの`X'は英文字"ex"ではなく
ギリシャ文字"chi"となります．TeXの`X'は名前の`Bach'の最後の音
のように発音してください．しかし，Texinfoは`x'を`k'のように発音して
ください．"Texinfo"を大文字"T"とそれ以外は小文字で綴ってください．


File: texinfo-ja.info,  Node: Reporting Bugs,  Next: Using Texinfo,  Up: Overview

バグの報告
==========

我々は，Texinfoシステム，プログラム，ドキュメント，インストール，その他
あらゆる面で，バグの報告と提案を歓迎します．それらを電子メールで，
<bug-texinfo@gnu.org>に送ってください．Texinfoの最新バージョンは，
`ftp://ftp.gnu.org/gnu/texinfo/'と世界中のミラーサイトで入手可能で す．

管理者が問題を再現するため，バグの報告に十分な情報を含めてください．一般
的に言って以下を意味します．

   *
     Texinfoのバージョンナンバーと一緒に配布されるプログラムやマニュアル．

   * ハードウェアとオペレーティングシステムの名前とバージョン．

   * バグの再現に必要な入力ファイルの内容．

   * 問題の記述とエラー出力のサンプル．

   * `configure'に与えた普通ではないオプション．

   * その他，役に立ちそうなもの．

必要かどうか疑わしい場合はそれを含めてください．重要なものを除くより多く
を含める方が良いでしょう．

  パッチは最も歓迎しますが，できれば`diff -c'(*note Overview:
(diffutils)Top.)で作成し， `ChangeLog'の項目(*note Change Log:
(emacs)Change Log.)を含めてください．

パッチを送るとき，可能であればメッセージを符号化したり分割したりしないで
ください．たとえ大きくても，小さいものがたくさんあるより，１つのプレーン
テキストになっている方が簡単に扱えます． GNU shar
(ftp://ftp.gnu.org/gnu/sharutils/)は，電子メールで複数の
バイナリファイルをまとめる便利な方法です．


File: texinfo-ja.info,  Node: Using Texinfo,  Next: Info Files,  Prev: Reporting Bugs,  Up: Overview

Texinfoを使用する
=================

Texinfoを使用し，普通の本のような形態の印刷ドキュメントの作成が可能で，
それは，章，セクション，相互参照，そして索引が含まれます．同じTexinfoの
ソースファイルから，ノード，メニュー，相互参照，そして索引を用いた，メ
ニュー駆動形式のオンラインInfoファイルを作成することが可能です．また，同
じソースファイルから，ウェブブラウザの利用に適したHTML出力ファイルやXML
ファイルを作成することも可能です．`The GNU Emacs Manual'は，このマ
ニュアル同様，Texinfo ファイルの良い例です．

  印刷ドキュメントを作成するTexinfoソースファイルを，TeX植字プログラム
を使用して処理します(しかし，Texinfo言語はTeXの普通の言語のプレーン
TeXと比べてかなり異なっていて，より厳密になっています)．これは，本や
レポートのように植字して印刷することが可能なDVIファイルを作成します
(*note Hardcopy::)．

  Infoファイルを出力するため，Texinfoソースファイルを，`makeinfo'ユー
ティリティか，Emacsの`texinfo-format-buffer'コマンドで処理してくだ
さい．結果をInfoツリーにインストールすることが可能です(*note Installing
an Info File::)．

  HTMLファイルを出力するために，Texinfoソースファイルで`makeinfo
--html'を実行してください．(例えば)結果をウェブサイトに配置することが可
能です．

  XMLファイルを出力するために，Texinfoソースファイルで`makeinfo
--xml'を実行してください．DocBook(XMLの特殊な形式)を出力するために，
`makeinfo --docbook'を実行してください．DocbookからTexinfo_に_
変換したい場合は，`http://docbook2X.sourceforge.net/'を参照してくだ
さい．

もしあなたがプログラマで，Texinfoに対する出力フォーマットの追加項目を実
装し，GNUプロジェクトに貢献したいというのは素晴らしいことです．しかし，
好みのフォーマットfooのに対して個別に書かれている変換フィルタ
`texi2foo'を書かないでください！ そうすることで，その作業を行なうの
も困難ですが，その後のメンテナンスで余分な仕事が発生します．なぜなら，
Texinfo言語は拡張と更新が続いているためです．その代わりの最善のアプロー
チは，`makeinfo'を，現在Info，プレーンテキスト，HTML，XML，そして
DocBook を生成しているように，新しいフォーマットを生成するよう修正するこ
とです．

  TeXは，ほとんど全てのプリンタで動作します．Infoは，ほとんど全てのコン
ピュータ端末で動作します．HTML出力はほとんど全てのブラウザで動作します．
このため，Texinfoはほとんどの全てのコンピュータユーザが利用可能です．

  TexinfoソースファイルはプレーンのASCIIファイルで，テキストと，植字
と書式化のプログラムに何を行なうのかを伝える"@-コマンド"(`@'
を前置する単語)から成り立っています．Texinfoファイルをテキストエディタで
編集してもかまいませんが，GNU Emacsを使用すると便利で，それはそのエディ
タにはTexinfoモードという特別なモードがあり，それは様々なTexinfoに関する
機能を提供しているためです．(*Note Texinfo Mode::.)

Texinfoソースファイルを書く前に，ノード，メニュー，相互参照，そしてその
他の，例えばこのマニュアルの読み方を学ぶべきです．

オンラインヘルプと印刷マニュアルの両方を作成するため，Texinfoを使用する
ことが可能です．さらにTexinfoは自由に再配布できます．この理由のため，
TexinfoはGNUプロジェクトの公式はドキュメントフォーマットになっています．
詳細は，GNU documentation web page (http://www.gnu.org/doc/)で利用
可能です．

  時々，伝統的なUnix
manページをTexinfoから生成できるようにして欲しいと提
案されます．これはサポートされる可能性は今のところ高くはなく，それはman
ページには非常に厳密な伝統的な書式があるためです．`makeinfo'を
troffフォーマットを出力するよう単に拡張するだけでは不十分です．それゆえ，
良いmanページを出力するには，良いユーザへのチュートリアルと良いリファレ
ンスマニュアルを書き出す通常のTexinfoアプリケーションと比較すると，完全
に異なるソースが必要になります．このことは，生成されたmanページが，異な
る出力形式に対し，異なる方法で，同じ情報を文章にするという，Texinfoのデ
ザインの目的に矛盾します．manページを直接書く方が良いでしょう．

  manページがまだ存在していてそれをサポートしたい場合，プログラム
`help2man'が役に立つかもしれません．それは，プログラムの
`--help'出力から伝統的なmanページを生成します．これは現在，Texinfo
プログラム自身のmanページの生成に実際に使用されています．それはGNUのソフ
トウェアで，Brendan O'Deaによって書かれていて，
`ftp://ftp.gnu.org/gnu/help2man/'で利用可能です．


File: texinfo-ja.info,  Node: Info Files,  Next: Printed Books,  Prev: Using Texinfo,  Up: Overview

Infoファイル
============

Infoファイルは，Infoドキュメントを読むプログラムが処理できるように書式化
されたTexinfoファイルです．(`makeinfo'と
`texinfo-format-buffer'は，TexinfoファイルをInfoファイルに変換する，
２つのコマンドです．)

  Infoファイルは，"ノード"と呼ばれる部分に分けられ，それぞれが一つのト
ピックの説明を含んでいます．それぞれのノードは名前を持っていて，ユーザが
読むテキストと他のノードへポインタを含み，ノードは名前で識別されます．
Infoプログラムは一度に一つのノードを表示し，ユーザが他の関連するノードへ
移動できるコマンドを提供しています．

  Infoの使い方の詳細は，*note info: (info)Top.

Infoファイルのそれぞれのノードには，ノードのトピックのサブトピックを記述
している子ノードがいくつかあります．子ノードの名前は，親ノードの"メ
ニュー"でリストアップされています．これで，Infoコマンドを使用して一つの
子ノードに移動することができます．一般にInfoファイルは本のような構成になっ
ています．ノードが章の論理レベルの場合，子ノードはセクションレベルです．
同様にセクションの子ノードはサブセクションレベルです．

１つの親の全ての子どもは，`Next'と`Previous'で双方向に連鎖していて，お互
いにリンクされています．`Next'ポインタは次のセクションへのリンクを提供し，
`Previous'ポインタは前のセクションへのリンクを提供します．これは，章のセ
クションレベルにあるノードは，お互いにリンクされていることを意味します．
通常，連鎖の順番は親のメニューでの子の順番と同じです．それぞれの子ノード
は，親ノード名を`Up'ポインタに記録しています．最後の子ノードは`Next'ポイ
ンタが無く，最初の子ノードは`Previous'と`Up'ポインタ両方が親になります．
(1) (*note Info Files-Footnote-1::)

ノードが章やセクションやそれに類するものに対応しているような，Infoファイ
ルの本のような構造は，必要条件ではなく慣習の問題です．ノードの，`Up'，
`Previous'と，`Next'ポインタは他のノードを示し，メニューは他のノードを含
んでいます．このため，ノードの構造は方向性のあるグラフにすべきです．しか
し，印刷された本やレポートの章とセクションの構造に対応した構造に準拠して
いるため，通常は，より理解しやすいでしょう．

メニューと，`Next'，`Previous'，そして`Up'ポインタに加え，Infoは参照と呼
ばれるもう１つの種類のポインタを提供していて，それはテキスト中に点在して
いるはずです．これは通常，階層構造に適さないリンクを現す最善の方法です．

通常，印刷された出力物の章とセクションの構造に，ノードが一致するようにド
キュメントを設計します．しかし，議論の材料に対しては正しくないときもよく
あります．そのため，TexinfoはInfoファイルに対するノード構造と，印刷され
た出力物に対するセクション構造を指定する別のコマンドを使います．

一般に，慣習で`Top'と命名されているノードを通じてInfoファイルに入ります．
このノードは通常，ファイルの目的の短い概要とファイルの残り全体の大きなメ
ニューを含んでいます．このノードを起点として，ノードからノードへ移動する
ことで組織的にファイルを横断したり，メインメニューに列挙されたノードを指
定して移動したり，索引メニューで検索して欲しい情報があるノードに直接行く
ことが可能になっています．また，スタンドアローンInfoプログラムで，コマン
ドラインで特定のメニューアイテムを指定することができます(*note Top:
(info-ja)Top.)．

  印刷されたマニュアルのように，順番通りInfoファイルを読みたい場合，
<SPC>を繰り返し押したり，アドバンスInfoコマンド`g *'でファイル全
体を利用することができます．(*note Advanced Info commands:
(info-ja)Expert.)

  `info'ディレクトリの`dir'ファイルは，Infoシステム全体の出発点
としての役目を果たします．そこから，完全なInfoシステムの，それぞれのドキュ
メントの`Top'ノードに行くことができます．

URIでInfoを参照したい場合，以下で例示された(非公式な)構文を使用すること
が可能です．これはEmacs/W3で動作します．以下が例です．
     info:///usr/info/emacs#Dissociated%20Press
     info:emacs#Dissociated%20Press
     info://localhost/usr/info/emacs#Dissociated%20Press

  `info'プログラム自身は，あらゆる種類のURIに続きません．


File: texinfo-ja.info,  Node: Info Files-Footnotes,  Up: Info Files

  (1) ドキュメントには，最初の子に`Previous'ポインタが無いものもあり
ます．時々，最後の子が`Next'ポインタとして次の上のレベルのノード名を持つ
ものもあります．


File: texinfo-ja.info,  Node: Printed Books,  Next: Formatting Commands,  Prev: Info Files,  Up: Overview

印刷された本
============

Texinfoファイルは，印刷された本やマニュアルのように書式化し植字すること
が可能です．こうするためにはTeXが必要で，それは強力で洗練された植字プ
ログラムで，Donald Knuthによって書かれました．(1) (*note Printed
Books-Footnote-1::)

Texinfoをベースにした本は，他の植字方法での印刷物に似ています．タイトル
ページ，著作権ページ，目次，序文，章のようなもの，番号が有るまたは無いセ
クションとサブセクション，相互参照，脚注，そして索引があるはずです．

オンライン情報に変換するつもりがなく，本を書くためにTexinfoを使用するこ
とが可能です．印刷された小説を書くためにTexinfoを使用することも可能で，
メモを書くこともできますが，電子メールの方がもっと簡単なので，これ以外へ
の適用は勧められません．

  TeXは，一般的な植字を目的としたプログラムです．Texinfoは，Texinfoファ
イルを植字するときにTeXが使用する情報(定義と"マクロ")を含むファイ
ル`texinfo.tex'を提供しています．(`texinfo.tex'は，TeXに
Texinfoの@-コマンドをTeXコマンドに変換する方法を伝え，そしてTeXは
植字ドキュメントを作成するための処理が可能となります．)
`texinfo.tex'は，ドキュメントを印刷するための仕様書を含んでいます．
`texinfo.tex'の最新バージョンは，
`ftp://ftp.gnu.org/gnu/texinfo.tex'で取得できます．

  合州国では，ドキュメントは縦横8.5インチx11インチ(216mmx
280mmがデフォルトサイズ)で印刷されることが最も多くなっています．こ
れはデフォルトの大きさです．しかし，7インチx9.25インチ
(178mmx235mmの`@smallbook'サイズ)や，ヨーロッパのA4サ
イズの紙(`@afourpaper')でも印刷可能です．(*Note Printing "Small" Books:
smallbook.  また，*Note Printing on A4 Paper: A4 Paper
も参照してください．)

  `texinfo.tex'で変数を変えることで，印刷されたドキュメントのサイズを
変えることが可能です．さらに，書式化される印刷されたドキュメントでスタイ
ルを変えることも可能です．例えば，サイズや使用しているフォント，それそれ
の段落に対する字下げの量，ハイフネーションされた単語の度合と，それに類す
るものを変えることが可能です．仕様書を変更することで，本を格調高く古臭く
真面目に見せたり，気楽に若々しく陽気に見せたりすることも可能です．

  TeXは自由に配布できます．それは，WEBと呼ばれるPascalのスーパーセット
で書かれていて，Pascalでも(TeX配布物と同梱の変換プログラムを使用しな
がら)Cでもコンパイルすることが可能です．(TeXの詳細は，*Note TeX Mode:
(emacs)TeX Mode.)

  TeXは非常に強力で，非常に多くの機能があります．Texinfoファイルは，
Info形式の文字のみの端末と，植字された本の両方で情報を表現できるので，
Texinfoがサポートする書式化コマンドは必然的に制限されます．

  TeXのコピーを入手するために，*Note How to Obtain TeX: Obtaining
TeXを参照してください．


File: texinfo-ja.info,  Node: Printed Books-Footnotes,  Up: Printed Books

  (1) TeXを持ってい ない場合， `texi2roff'
(ftp://tug.org/texi2roff.tar.gz)プログラムを使用
することも可能です．TexinfoはTeXで使用するために設計されているので，
`texi2roff'はここでは述べません．`texi2roff'は，標準のGNU配布
物ではなく，このマニュアルで述べているすべてのTexinfoの機能を管理したり
更新したりしていません．


File: texinfo-ja.info,  Node: Formatting Commands,  Next: Conventions,  Prev: Printed Books,  Up: Overview

@-コマンド
==========

  Texinfoファイルでは，TeXに印刷されるマニュアルの植字法を伝えたり，
`makeinfo'と`texinfo-format-buffer'にInfoファイルの作成方法を
伝えるコマンドには，`@'が前につきます．それらは"@-コマンド"と
呼ばれています．例えば，`@node'はコードを示すコマンドで，
`@chapter'は章の最初を示すコマンドです．

     *注意してください:*全ての@-コマンドは，`@TeX{}'コマンド
     以外，全体を小文字で書く必要があります．

Texinfoの@-コマンドは，厳密に制限された構成物の集合です．厳密な制限で，
Texinfoファイルを，TeXとInfoファイルに変換するコードの両方が理解する
ことを可能にします．Infoファイルを英数字を表示する端末で表示することが可
能です．同様に，TeXで生成した出力を様々なプリンタで印刷することも可能
です．

  することや受けとる引数に依存して，(1) (*note Formatting
Commands-Footnote-1::)それ自身の行や，文の一部として，
@-コマンドを書く必要があります．

   * `@noindent'のようなコマンドを，行の最初に，行の唯一のテキストとし
     て書いてください(2) (*note Formatting
     Commands-Footnote-2::)．(`@noindent'は，次の改行の最初で段落の始まりと
     しての字下げを妨げます．)

   * `@chapter'のようなコマンドをコマンドの引数が続く行の最初に，この場
     合は行の残りが章のタイトルになるように書いてください．

   * `@dots{}'のようなコマンドを，通常は文中ですが，好きなところに書
     いてください．(`@dots{}'はドット...を作成します)

   * `@code{SAMPLE-CODE}'のようなコマンドを，好きなところに(通
     常は文中ですが)，引数と一緒に，この例ではカッコの中にSAMPLE-CODEの
     ように書いてください．(`@code'はコードとしてテキストに印を付けます．)

   * `@example'のようなコマンドを単独行に書いてください．本文はそれ以降
     の行に書いてください．そして，併せて`@end'コマンドを，この場合は本
     文の後に単独行に書いてください．(`@example'...`@end
     example'は字下げし，例として本体のテキストを植字します．)このような環境
     コマンドの字下げは通常問題ありませんが，複雑で定義しにくい環境での余分な
     スペースは出力に余分なスペースを生成するので注意してください．

一般的な規則として，他のテキストの間に混ぜる場合，コマンドにはカッコが必
要です．しかし行の始まり場合は不要です．`@:'のようなアルファベット
でないコマンドは，規則に対し例外でカッコを必要としません．

Texinfoの経験を積むにつれ，異なるコマンドに書き方をすぐに覚えられるでしょ
う．コマンドの書き方を異なる方法にしているので，全てのコマンドが同じ構文
に正確に従うことに比較すると，より簡単にTexinfoファイルを書いたり読んだ
りできるでしょう．(@-コマンド構文の詳細は，*Note @-Command Syntax:
Command Syntaxを参照してください．)


File: texinfo-ja.info,  Node: Formatting Commands-Footnotes,  Up: Formatting Commands

  (1) 単語"argument"は数学での
使用法から来ていて，二人の論争には関係ありません．それは，コマンドに与え
た情報を参照します．`オックスフォード英語辞典'によると，単語は
"明らかにする，証明する"というラテン語から生じました．このため，`証
明として提出された証拠'と言う意味で，それは`提出された情報'と言われてい
て，数学的な意味から導かれました．由来の他の筋では，単語は，`他人がした
反対の断言に，反対する方法で断言すること'と言う意味から来ていて，
`argument' の意味を論争に導きました．

  (2) 訳注:現在は`@noindent'の直後に文を続けて もかまいません．


File: texinfo-ja.info,  Node: Conventions,  Next: Comments,  Prev: Formatting Commands,  Up: Overview

一般的な構文の慣習
==================

このセクションでは，全てのTexinfoドキュメントで使用されている一般的な慣
習を記述しています．

   * `@'，`{'，そして`}'を除き，印刷可能な全てのASCII
     文字はTexinfoファイルに書くことが可能で，それはそれ自身を意味します．
     `@'はコマンドを導入するエスケープ文字ですが，`{'と`}'
     は特定のコマンドの引数を囲むためだけに使用されます．これらの特別な文字を
     ドキュメントに書くため，`@'文字を，`@@'，`@{'，そし
     て`@}'のように，その前に書いてください．

   * 引用の初めと終りに，シングル引用符文字を二重にした
     ``...''を使用することはTeXの習慣です．この慣習に
     Texinfoファイルも従うべきです．TeXは，
     二重にしたシングル引用符文字を右と左の二重引用符に変換し，Infoは二重にし
     たシングル引用符文字を，ASCIIの二重引用符"に変換します．
     ``...''は"..."になります．

   * 行では，３つのハイフン`---'を--のようなダッシュに対して使用してくだ
     さい．TeXでは，１つまたは２つのハイフンは，通常の植字のダッシュより小
     さいダッシュを印刷します．Infoでは，画面表示で３つのダッシュを２つにしま
     す．

   *
     印刷されたマニュアルで段落の字下げを避けるため，その行の段落の前にコマン
     ド`@noindent'を単独で書いてください(1) (*note
     Conventions-Footnote-1::)．

   * `@iftex'と`@end iftex'コマンドでTexinfoファイルの領域を
     区切る場合，その領域は印刷されたコピーだけに現れます．その領域で，Infoで
     は使用不可能なプレーンTeXの特定のコマンドを使用することが可能です．反
     対に，`@ifnottex'と`@end ifnottex'で囲まれたテキストは，
     TeX_以外の_すべての出力形式に現れます．

     それぞれの出力形式(`html'，`info'，`plaintext')にも，同様
     のコマンドの対があります．*Note Conditionals::.

     *注意:*タブ文字を(逐語的なモード(verbatim mode)以外の)Texinfoファ
     イルで使用しないでください！
     TeXは，可変幅のフォントを使用し，それは
     全ての環境で動作するように，タブを適切に定義することは現実的ではないこと
     を意味します．従って，TeXはタブを単一のスペースとして扱うので，タブの
     ように見えません．さらに，`makeinfo'はタブに対し特別なことをしない
     ので，例えば入力ファイルのタブ文字は出力で異なる字下げとして現れるかもし
     れません．

     この問題を避けるためTexinfoモードは，<TAB>キーを押したとき，GNU
     Emacsに多数のスペースを挿入させます．

     また，タブを１つの領域の複数のスペースに変換するため，Emacsで
     `untabify'を実行することも可能です．


File: texinfo-ja.info,  Node: Conventions-Footnotes,  Up: Conventions

  (1) 訳注:現在は単独行にす る必要はありません．


File: texinfo-ja.info,  Node: Comments,  Next: Minimum,  Prev: Conventions,  Up: Overview

コメント
========

Infoファイルや印刷されたマニュアルに現れないコメントを，Texinfoファイル
に`@comment'コマンドを使用して書くことが可能です(省略された
`@c'でもかまいません)．そのようなコメントは，Texinfoファイルを修正
する人のためです．`@comment'や`@c'に続く行の全てのテキストは
コメントです．行の残りはInfoファイルにも印刷されたマニュアルにも現れませ
ん．

  `@comment'や`@c'を行の途中にたびたび書くことも可能で，
`@comment'や`@c'コマンドの後のテキストのみが現れません．しか
し，`@settitle'と`@setfilename'のようなコマンドは行全体に作
用します．`@comment'や`@c'を，そのようなコマンドを用いている
行では使用することは不可能です．

  Infoファイルや印刷されたマニュアルに現れないテキストの長い範囲を，
`@ignore'と`@end ignore'コマンドを使用して書くことが可能です．
行の最初からそれぞれのコマンドを始めながら，単独行にこれらのコマンドをそ
れぞれ書いてください．これら２つのコマンドの間のテキストは処理された出力
物に現れません．`@ignore'と`@end ignore'をコメントを書くため
に使用することが可能です．

  `@ignore'や，偽の`@ifset'や`@ifclear'の条件式で囲まれ
ているテキストは，書式化された出力に寄与しないという意味で無視されます．
しかし，TeXと`makeinfo'は，ソースファイルのテキストの無視を
_停止する_ときを知るために，無視されたテキストを解析します．つまり，
無視されているテキストに無効なTexinfoコマンドがある場合，エラーメッセー
ジが発生するかもしれません．


File: texinfo-ja.info,  Node: Minimum,  Next: Six Parts,  Prev: Comments,  Up: Overview

Texinfoファイルが必要とするもの
===============================

  慣習では，Texinfoファイルの名前は，(優先順で)拡張子`.texinfo'，
`.texi'，`.txi'，または`.tex'で終ります．長い拡張子が好ま
れるのは，人が読むときファイルの性質がより明確に記述されるためです．短い
拡張子は，長いファイル名を扱えないオペレーティングシステムのためです．

印刷されたマニュアルやInfoファイルのため，Texinfoファイルは以下のような
行で始める*必要があります*．

     \input texinfo
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL

ファイルの内容はこの始まりに続き，Texinfoファイルは以下の行で終る
*必要があります*．

     @bye

以下で説明します．

   * `\input texinfo'行はTeXに`texinfo.tex'ファイルを使用するよ
     うに伝え，それは，Texinfoの@-コマンドをTeXの植字コマンドに変換する方
     法をTeXに伝えます．(バックスラッシュ，`\'を使用することに注意し
     てください．これは，TeXに対して正しいものです．)

   * `@setfilename'行はInfoファイルの名前を提供し，TeXに補助ファイル
     を開くよう伝えます．*`@setfilename'以前のすべての文字は無視
     されます！*

   * `@settitle'行は，印刷されたマニュアルのページヘッダ(やフッタ) のタ
     イトルを指定し，HTML形式の`<head>'の記述のデフォルトになります．厳
     密に言うと，`@settitle'はオプションです -- ドキュメントのタイトル
     が`Untitled'でも気にしなければね．

   * ファイルの終りの行の`@bye'は，フォーマッタにファイルの終りを伝え，
     書式化を停止するように伝えます．

一般的には予備のフォーマットを全く使用しないでしょうが，Texinfoファイル
の最初に以下のような，モード設定とヘッダの始まりとヘッダの終りを含めるで
しょう．

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL
     @c %**end of header

最初の行の`-*-texinfo-*-'で，Emacsはファイル編集時にTexinfoモードに
切替えます．

  `@setfilename'と`@settitle'行の周りにある`@c'行はオプ
ションですが，ファイルの一部でTeXやInfoを実行するために必要です．(詳
細は*Note Start of Header::.)

さらに通常は，Texinfoファイルに，タイトルページ，索引，そしてそれに似た
ものを提供し，それらすべてはこのマニュアルで説明しています．しかし，短い
ドキュメントでは役に立つ最小限のものは，始めの３行と終りの１行だけです．


File: texinfo-ja.info,  Node: Six Parts,  Next: Short Sample,  Prev: Minimum,  Up: Overview

Texinfoファイルの6つの部分
==========================

一般に，Texinfoファイルは最初と最後の最小限以上のものから成り立っていま
す -- 通常は以下でリストアップしている6つの部分から成り立ちます．これら
は以下のセクションで完全に記述しています．

1. ヘッダ
     "ヘッダ"は，ファイルに名前を付け，TeXで使用する定義ファイルと，そ
     の他の管理する仕事を伝えます．

2. 要約の記述と著作権
     "要約の記述と著作権"の部分では，Infoファイルに対するドキュメントの記
     述，著作権通知，そしてコピーの許可から成り立ちます．この部分は，Infoファ
     イルにのみフォーマッタが配置するように，`@ifinfo'と`@end
     ifinfo'コマンドで囲まれています．

3. タイトルと著作権
     "タイトルと著作権"の部分は，印刷されたマニュアルに対するタイトルと著
     作権のページから成り立ちます．この部分は`@titlepage'と`@end
     titlepage'コマンドで囲む必要があります．タイトルと著作権のページは，印刷
     されたマニュアルのみに現れます．

4. `Top'ノードとマスターメニュー
     `Top'ノードはオンラインの出力を開始します．それは印刷されたマニュアルに
     は現れません．上記の部分同様に，コピーの許可をここに含めることを推奨しま
     す．そしてそれは，少なくとも章をリストアップしているトップレベルのメニュー
     を含んでいて，おそらく"マスターメニュー"は，ドキュメント全体のノード
     をリストアップしています．

5. 本体
     ドキュメントの"本体"は，伝統的な本や，百科辞典のように構造化されてい
     ますが，自由な形式でもかまいません．

6. 終り
     "終り"の部分は，索引を印刷したり目次を生成したりするコマンドと，単独
     行の`@bye'コマンドから成り立っています．


File: texinfo-ja.info,  Node: Short Sample,  Next: History,  Prev: Six Parts,  Up: Overview

Texinfoの短いサンプル
=====================

非常に短いが完全なTexinfoファイルは以下のようになり，前のセクションの6つ
の慣習的な部分が列挙されているので，Texinfoソースをどのように表現するの
かが実際に分かるでしょう．ファイルの最初の３つの部分は`\input
texinfo'から`@end titlepage'までで，他より恐ろしく(?)(1) (*note Short
Sample-Footnote-1::)見えます．素材のほとんどが標準的な常套
句です．マニュアルを書くとき，単純にこの部分を適切な名前に変更してくださ
い．

  ここでリストアップしているコマンドの完全なドキュメントは， *Note
Beginning a File::.  GNUのマニュアルで使用されている完全なテキスト
は，*Note GNU Sample Texts::.

  以下では，サンプルテキストは_字下げ_されています．そこでのコメント
はそうなっていません．散らかっているコメントの無い完全なファイルは，
*Note Short Sample Texinfo File::で示されています．

Part 1: ヘッダ
--------------

ヘッダはInfoファイルにも印刷物にも現れません．それは様々な変数を設定し，
それにはInfoファイルの名前とヘッダで使用されているタイトルが含まれていま
す．

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header

Part 2: 要約の記述と著作権
--------------------------

実際のマニュアルには，それを配布するライセンスに対応して，ここにより多く
のテキストを含んでいます．*Note GNU Sample Texts::.

     @copying
     This is a short example of a complete Texinfo file, version 1.0.
     
     Copyright @copyright{} 2002 Free Software Foundation, Inc.
     @end copying

Part 3: タイトルページ，目次，著作権
------------------------------------

タイトルページの部分はオンラインの出力には現れず，印刷されたマニュアルの
みに現れます．我々はもう一度書く代わりに，前のセクションから許可のテキス
トを含めるために，`@insertcopying'コマンドを使用しています．それは
タイトルページの裏側に出力します．`@contents'コマンドは目次を生成
します．

     @titlepage
     @title Sample Title
     
     @c The following two commands start the copyright page.
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage
     
     @c Output the table of contents at the beginning.
     @contents

Part 4: `Top'ノードとマスターメニュー
-------------------------------------

`Top'ノードは，Infoファイルのマスターメニューを含んでいます．印刷された
マニュアルはメニューではなく目次を使用するので，マスターメニューはオンラ
インの出力だけに現れます．我々は，読書への利便性のためコピーに関するテキ
ストも再び含めています．そして，コピーに関するテキストはマニュアルの短い
記述の一部で始まっているので，他のテキストは不要です．

     @ifnottex
     @node Top
     @top Sample
     @end ifnottex

     @insertcopying
     
     @menu
     * First Chapter::    The first chapter is the
                            only chapter in this sample.
     * Index::            Complete index.
     @end menu

Part 5: ドキュメントの本体
--------------------------

本体の部分はドキュメントの全ての部分を含んでいますが，索引と目次は含まれ
ていません．この例は，列挙されたリストを含んでいるノードと章を示していま
す．

     @node First Chapter
     @chapter First Chapter
     
     @cindex chapter, first
     
     This is the first chapter.
     @cindex index entry, another
     
     Here is a numbered list.
     
     @enumerate
     @item
     This is the first item.
     
     @item
     This is the second item.
     @end enumerate

Part 6: ドキュメントの終り
--------------------------

終りの部分は，それ自身が番号付けされていない章とノードとして索引を生成す
るコマンドと，ドキュメントの終りを示す`@bye'コマンドを含んでいます．

     @node Index
     @unnumbered Index
     
     @printindex cp
     
     @bye

結果
----

  サンプルの最初の章の内容のサンプルは以下のように見えます．


     This is the first chapter.

     Here is a numbered list.

       1. This is the first item.

       2. This is the second item.


File: texinfo-ja.info,  Node: Short Sample-Footnotes,  Up: Short Sample

  (1) 訳 注:原文は，look more intimidating


File: texinfo-ja.info,  Node: History,  Prev: Short Sample,  Up: Overview

歴史
====

  Richard M. StallmanがTexinfoフォーマットを発明し，最初のプロセッサを書
き，このマニュアルのEdition 1.0を作成しました．Robert J. Chassell
は，このマニュアルにかなりの修正と拡張を行ない，Edition 1.1を開始しまし
た．Brian Foxは，バージョン3.8まで，スタンドアローンのTexinfo配布物に責
任があり，`makeinfo'と`info'プログラムを書きました．Karl BerryはTexinfo
3.8 から更新し，マニュアルのEdition 2.22を始めました．

この仕事の開発を助けてくれた全てに人々，特に数え切れないパッチを提供して
くれた，疲れを知らないEli Zaretskii とAndreas Schwabに感謝します．
Franc,ois PinardとDavid D. Zuhnは飽きること無く，間違いと曖昧さ
を記録し報告してくれました．Zack Weinbergは，`texinfo.tex'でマクロ
構文を実装するという，不可能ともいえることを行いました．幾度となくほとん
ど似ているエディションの退屈な査読に対し，Melissa Weisshausに特別な感謝
を送ります．その他，何十人もがパッチと提案を提供してくれ，それは
`ChangeLog'ファイルで多いに感謝しています．我々の間違いは，我々自身
のものです．

  ちょっとした歴史:1970年代のCMUで，Brian
Reidは印刷のためにドキュメントを
マークアップするプログラムとScribeという名前の書式を開発しました．それは，
Texinfoが行っている，`@'文字をコマンド導入に使用していました．結果
として，書式化というよりむしろドキュメントの内容を記述するために真剣に検
討されていて，その考えは全面的にTexinfoで適用されています．

一方，MITの人々は他のものを開発し，それはBolioと呼ばれる余り違わない書式
でした．これは，植字の言語としてTeXを使用するように変更され，BoTeX
になりました．最初ののBoTeXのバージョンは0.02で1984年10月31日だったと
思います．

  BoTeXは，印刷されたドキュメントに対するマークアップ言語としてのみ利用
可能で，オンラインドキュメントに対してはできませんでした．Richard
Stallman (RMS)は，BolioとBoTeXの両方で仕事をしました．彼は，Infoと呼
ばれる気のきいたオンラインヘルプ書式を開発し，Texinfoを作成するため，
BoTeXとInfoを組合せ，オンラインと印刷されたハードコピーの両方で読める
ようにしたテキストのためのマークアップ言語となりました．


File: texinfo-ja.info,  Node: Texinfo Mode,  Next: Beginning a File,  Prev: Overview,  Up: Top

Texinfoモードを使用する
***********************

Texinfoファイルは，どんなテキストエディタを選んで編集してもかまいません．
Texinfoファイルは，他のASCIIファイルと差がありません．しかし，GNU
EmacsにはTexinfoモードと呼ばれる特別なモードがあり，仕事が楽になるよう
Emacsコマンドとツールを提供しています．

  この章では，GNU
EmacsのTexinfoモードの機能について述べ，Texinfo書式化言
語の特徴は述べません．そのため，このマニュアルを始めからそのまま読んでい
る場合，この章は軽く流し，詳細にTexinfoフォーマット言語を述べている章を
読み終えた後，ここに戻りたくなるかもしれません．

* Menu:

* Texinfo Mode Overview::       How Texinfo mode can help you.
* Emacs Editing::               Texinfo mode adds to GNU Emacs' general
                                  purpose editing features.
* Inserting::                   How to insert frequently used @-commands.
* Showing the Structure::       How to show the structure of a file.
* Updating Nodes and Menus::    How to update or create new nodes and menus.
* Info Formatting::             How to format for Info.
* Printing::                    How to format and print part or all of a file.
* Texinfo Mode Summary::        Summary of all the Texinfo mode commands.


File: texinfo-ja.info,  Node: Texinfo Mode Overview,  Next: Emacs Editing,  Prev: Texinfo Mode,  Up: Texinfo Mode

Texinfoモードの概要
===================

Texinfoモードは，Texinfoファイルで作業するための特別な機能を提供していま
す．以下のようなことが可能です．

   * よく使用される@-コマンドの挿入．

   * `@node'行の自動生成．

   * Texinfoソースファイルの構造を表示．

   *
     ノードの，`Next'，`Previous'，そして`Up'ポインタの自動的な作成と更新．

   * メニューの自動的な作成と更新．

   * マスターメニューの自動作成．

   * Infoに対するファイルの一部または全部の書式化．

   * ファイルの一部または全部の植字と印刷．

恐らく，最も役に立つ機能の２つは，よく使用する@-コマンドの挿入とノードポ
インタとメニューの作成です．


File: texinfo-ja.info,  Node: Emacs Editing,  Next: Inserting,  Prev: Texinfo Mode Overview,  Up: Texinfo Mode

通常のGNU Emacs編集コマンド
===========================

ほとんどの状況で，通常のテキストモードのコマンドは，Texinfoモードでもテ
キストモード同様に動作します．Texinfoモードは，新しい編集コマンドとツー
ルを，GNU Emacsの一般的な優れた編集能力に追加します．主な違いは，内容に
関係します．Texinfoモードでは，段落を分離する変数と構文の表は，単独行の
Texinfoコマンドが不注意で段落内に含まれないように再定義されています．こ
のため，`M-q' (`fill-paragraph')コマンドは段落を再定義しますが，
隣接している索引コマンドを段落内に混ぜません．

  さらに，Texinfoモードでは，`page-delimiter'に
`texinfo-chapter-level-regexp'の値を設定します．デフォルトでこれは，
章や付録のような等価物に対するコマンドに一致する正規表現です．ページの分
離にこの値を用いることで，`C-x ]'(`forward-page')と`C-x
['(`backward-page')コマンドで，章のタイトルから章のタイトルへ移動し
たり，`C-x p'(`narrow-to-page')コマンドで章を小さくすることが可
能となります．(ページコマンドの詳細は，*Note Pages: (emacs)Pages.)

  Texinfoファイルには望みの名前を付けられますが，慣習で，`.texinfo'，
`.texi'，`.txi'，または`.tex'といった拡張子の一つで終りま
す．長い拡張子は明示的なので好まれますが，短い拡張子はファイル名の長さに
制限があるオペレーティングシステムに必要です．GNU Emacsは，
`.texinfo'，`.texi'，または`.txi'の拡張子を持つファイルの
とき，自動的にTexinfoモードに入ります．また，`-*-texinfo-*-'を最初
の行に持つファイルのときも，Texinfoモードに切り替わります．他のモードか
らTexinfoモードに切替えたい場合は，`M-x texinfo-mode'と入力してくだ
さい．

他のEmacsの機能のように，望みのままにTexinfoモードをカスタマイズしたり拡
張したりすることが可能です．特にキーバインドは非常に簡単に変更できます．
以下で，デフォルトと標準的なキーバインドを述べます．


File: texinfo-ja.info,  Node: Inserting,  Next: Showing the Structure,  Prev: Emacs Editing,  Up: Texinfo Mode

よく使用されるコマンドの挿入
============================

Texinfoモードは，よく使用する様々な@-コマンドをバッファに挿入するコマン
ドを提供しています．これらのコマンドでキーストロークを減らすことができま
す．

  挿入コマンドは，`C-c'を2度の後，@-コマンドの最初の文字を入力し呼び
出します．

`C-c C-c c'
`M-x texinfo-insert-@code'
     `@code{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c d'
`M-x texinfo-insert-@dfn'
     `@dfn{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c e'
`M-x texinfo-insert-@end'
     `@end'を挿入し，`example'や`table'といった，以下に続く正し
     い単語を推測します．(このコマンドはネストされたリストを正確に処理しません
     が，すぐ前のリストに適切な単語を挿入します．)

`C-c C-c i'
`M-x texinfo-insert-@item'
     `@item'を挿入し，次の行の始めにカーソルを配置します．

`C-c C-c k'
`M-x texinfo-insert-@kbd'
     `@kbd{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c n'
`M-x texinfo-insert-@node'
     `@node'と，`Next'，`Previous'，そして`Up'ノードに対し，連続したリ
     ストのコメント行を挿入します．`@node'の後にポイントは配置されます．

`C-c C-c o'
`M-x texinfo-insert-@noindent'
     `@noindent'を挿入し，次の行の最初にカーソルを配置します．

`C-c C-c s'
`M-x texinfo-insert-@samp'
     `@samp{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c t'
`M-x texinfo-insert-@table'
     `@table'とその後に`SPC'を挿入し，<SPC>の後にカーソルを配置 します．

`C-c C-c v'
`M-x texinfo-insert-@var'
     `@var{}'を挿入し，カッコの間にカーソルを配置します．

`C-c C-c x'
`M-x texinfo-insert-@example'
     `@example'を挿入し，次の行の最初にカーソルを配置します．

`C-c C-c {'
`M-x texinfo-insert-braces'
     `{}'を挿入し，カッコの間にカーソルを挿入します．

`C-c C-c }'
`C-c C-c ]'
`M-x up-list'
     前後の閉じたカッコの間を移動します．`C-c C-c ]'は`C-c C-c }'よ
     り簡単ですが，後者の方が覚えやすいです．それで２つのキーバインドとなりま
     す．(また，`C-f'の入力でカッコの間から出ることも可能です．)

  _存在する_単語の周りに，`@code{...}'のようなコマン
ドを書くため，単語の前にカーソルを配置し，`C-u 1 C-c C-c c'と入力し
てください．これで，簡単に既存のプレーンテキストを編集できるようになりま
す．プレフィクス引数の値は，１単語の場合は`1'，2単語の場合は`2'
等のように，カッコの間に含めるそれ以降の単語の数をEmacsに伝えます．前の
単語を囲むために負の引数を使用してください．プレフィクス引数を指定しない
場合，Emacsは@-コマンド文字列を挿入し，カーソルをカッコの間に配置します．
この機能は，`@kbd'と`@var'のような，一つの単語や一行内の単語
を操作する@-コマンドに対してのみ動作します．

  この挿入コマンドの組は，`GNU Emacs Manual'と`GDB Manual'で使用
されている，異なる@-コマンドの頻度の解析後に作成されました．独自の挿入
コマンドを加えたい場合，キーにキーボードマクロをバインドしたり，省略を使
用したり，`texinfo.el'のコードを拡張することが可能です．

  `C-c C-c C-d'(`texinfo-start-menu-description')は，他の挿入コマ
ンドとは異なる挿入コマンドです．それは，メニュー項目行の記述のためのスペー
スに，ノードのセクションや章のタイトルを挿入します．(メニュー項目は３つの
部分があり，項目名，ノード名，そして記述です．ノード名のみ要求されますが，
記述はノードが関係するものの説明を補助します．*Note The Parts of a
Menu: Menu Parts.)

  `texinfo-start-menu-description'を使用するため，メニュー項目行にポ
イントをおき，`C-c C-c C-d'を入力してください．コマンドはノード名に
付属するタイトルを探してコピーし，タイトルを記述として挿入します．編集可
能なように，それは挿入されたテキストの始めにポイントを配置します．メニュー
項目行に記述が含まれている場合，この機能はタイトルを挿入しません．

このコマンドは記述を書くためだけに役立ちます．それは仕事を全部しません．
タイトルはノード名と同じ単語を使いたがるものですが，役に立つ記述にするに
は，異なる単語を使用すべきなので，挿入されたテキストを編集する必要があり
ます．


File: texinfo-ja.info,  Node: Showing the Structure,  Next: Updating Nodes and Menus,  Prev: Inserting,  Up: Texinfo Mode

ファイルのセクションの構造を見る
================================

  `C-c C-s'コマンド(`texinfo-show-structure')を使用して，Texinfo
ファイルのセクションの構造を表示することが可能です．このコマンドは，
`@chapter'や`@section'のような，@-コマンドで始まる行をリス
トアップし，Texinfoファイルのセクションの構造を表示します．それは，結果
として目次を構成します．これらの行は，`*Occur*'と呼ばれる別のバッファ
に表示されます．そのバッファでTexinfoファイルの関連する場所に移動するた
め，行の１つにカーソルを配置し`C-c C-c'コマンド
(`occur-mode-goto-occurrence')を使用することが可能です．

`C-c C-s'
`M-x texinfo-show-structure'
     Texinfoファイルの`@chapter'，`@section'，そしてそれに類似し
     た行を表示します．

`C-c C-c'
`M-x occur-mode-goto-occurrence'
     `*Occur*'バッファのカーソルの下の行に関連する，Texinfoファイルの行
     に移動します．

  `C-u C-c C-s'を入力し，プレフィクス引数を付けて
`texinfo-show-structure'を呼び出す場合，`@chapter'，
`@section'，そしてこれに類する@-コマンドがある行だけでなく，
`@node'行もリストアップします．`@node'行の，`Next'，
`Previous'，そして`Up'ポインタが正しいかどうか調査するため，
`texinfo-show-structure'にプレフィクスを付けて使用することが可能で す．

マニュアルの作業中，現在の章の構造のみに興味があることもよくあります．こ
の場合，`C-x n n'(`narrow-to-region')コマンドを使用し，興味があ
るバッファの領域を区別することが可能で，`texinfo-show-structure'は
その領域のみで動作します．再びバッファの領域全体を見るため，`C-x n w'(`widen')を使用してください．(コマンドの制限は，
*Note Narrowing: (emacs)Narrowing.)

  `texinfo-show-structure'コマンドの提供に加えて，Texinfoモードは，章
レベルの@-コマンドに一致するページ分離変数の値を設定します．これで，
`C-x ]'(`forward-page')と`C-x [' (`backward-page')コマ
ンドを前後の章に移動するために使用したり，`C-x p'
(`narrow-to-page')コマンドを章を小さくするために使用したりすること
が可能です．ページコマンドの詳細は，*Note Pages: (emacs)Pages.


File: texinfo-ja.info,  Node: Updating Nodes and Menus,  Next: Info Formatting,  Prev: Showing the Structure,  Up: Texinfo Mode

ノードとメニューの更新
======================

Texinfoモードは，自動的にメニューとノードポインタを作成し更新するコマン
ドを提供しています．コマンドは"更新"コマンドと呼ばれ，その理由は，作業
後にTexinfoファイルを更新するため最もよく使用されているためです．しかし，
`Next'，`Previous'，そして`Up'ポインタを，何も持たない`@node'行に
挿入したり，何も持たないファイルでメニューを作成したりするために使用する
ことが可能です．

更新コマンドを使用しない場合，メニューとノードポインタを手で書く必要があ
り，それは退屈な仕事です．

* Menu:

* Updating Commands::           Five major updating commands.
* Updating Requirements::       How to structure a Texinfo file for
                                  using the updating command.
* Other Updating Commands::     How to indent descriptions, insert
                                  missing nodes lines, and update
                                  nodes in sequence.


File: texinfo-ja.info,  Node: Updating Commands,  Next: Updating Requirements,  Prev: Updating Nodes and Menus,  Up: Updating Nodes and Menus

更新コマンド
------------

  以下を行なうために，更新コマンドを使用することが可能です．

   *
     ノードに，`Next'，`Previous'，そして`Up'ポインタを挿入したり更新したりし
     ます．

   * セクションに対するメニューを挿入したり更新したりします．

   * Texinfoソースファイルのためのマスターメニューを作成します．

Texinfoの一部や全体の，全てのノードとメニューを更新するためにそのコマン
ドを使用することも可能です．

更新コマンドは慣習に従っているTexinfoファイルでしか動作せず，それは本に
似た階層構造をしているものです．そのようなファイルでの構造的なコマンド行
は，`Top'`@node'行以外のそれぞれの`@node'行に続ける必要があ
ります．("構造的なコマンド行"は，`@chapter'，`@section'
や，他の似たコマンドで始まる行です．)

  `@node'行の直後に続く行や，単一の`@comment'行や，単一の
`@ifinfo'行の後に続く行に，構造的なコマンド行を書くことが可能です．
`@node'行と構造的なコマンド行の間には，１行以上挿入できません．
`@comment'行や`@ifinfo'行のみ挿入できます．

  バッファ全体で動作するコマンドには，`@chapter'や，同等のレベルコマ
ンドを用いているノードが続く`Top'ノードが必要です．メニュー更新コマンド
は，`@chapter'レベルのノードしか持たないTexinfoファイルに対して，
メインやマスターメニューを作成しません！メニュー更新コマンドは，低レベル
のノードの_の中に_メニューを作成するだけです．章のメニューを作成す
るために`Top'ノードを提供する必要があります．

メニュー更新コマンドは現在のバッファ内のノードを参照しないので，他のInfo
ファイルを参照するメニュー項目を削除します．これは欠陥です．メニュー項目
を使用するのではなく，他のInfoファイルを参照する相互参照を使用することが
可能です．更新コマンドは相互参照に影響しません．

Texinfoモードは，よく使用される５つの更新コマンドがあります．２つは，単一
ノード(や領域)のノードポインタやメニューを更新します．２つは，ファイルの
全てのノードポインタとメニューを更新します．もう１つは，
`texinfo-master-menu'コマンドで，完全なファイルのマスターメニューを
作成し，さらにTexinfoファイル全体の全てのノードとメニューを更新します．

  `texinfo-master-menu'コマンドは，主要なコマンドです．

`C-c C-u m'
`M-x texinfo-master-menu'
     全ての他のメニューを含むマスターメニューを作成更新します(既存のメニュー
     があれば，その記述を含めます)．

     引数(対話的な場合は，プレフィクス引数，`C-u,')を用いることで，マスター
     メニューを構築する前に，バッファの全ての通常のメニューを最初に作成更新し
     ます．(マスターメニューについては,*Note The Top Node and Master
     Menu: The Top Node.)

     `texinfo-master-menu'を動作させるため，Texinfoファイルは，`Top'ノー
     ドと，少なくとも１つのサブシーケンスノードがある必要があります．

     広範囲でTexinfoファイルを編集後，以下を入力します．

          C-u M-x texinfo-master-menu
     または
          C-u C-c C-u m

     これで，一度に全てのノードとメニューを，完全に更新します．

他の主要な更新コマンドは小さな仕事をし，人間がノードやメニューをTexinfo
ファイルに書くように設計されています．

  以下のコマンドです．

`C-c C-u C-n'
`M-x texinfo-update-node'
     `Next'，`Previous'，そして`Up'ポインタを，ポインタがあるノード(例えば，
     `@node'行をポイントの前)に挿入します．`@node'行に，`Next'，
     `Previous'，または`Up'ポインタがある場合，古いポインタは削除され新しいも
     のが挿入されます．引数(対話的な場合，`C-u'プレフィクス引数)を用いる
     ことで，このコマンドは領域の全ての`@node'行を更新します(それは，ポ
     イントとマークの間のテキストです)．

`C-c C-u C-m'
`M-x texinfo-make-menu'
     ポイントがあるノードのメニューを作成更新します．引数(対話的な場合は，
     `C-u'プレフィクス引数)を用いることで，コマンドは領域内またはその一部
     のノードに対しメニューを作成更新します．

     `texinfo-make-menu'が既存のメニューを更新する場合は，メニューの記述
     は常に新しいメニューに挿入されます．これは，既存のメニューから同じノード
     名を持つ新しいメニュー項目に記述をコピーすることで行います．ノードメニュー
     が異なる場合，記述は新しいメニューにコピーされません．

`C-c C-u C-e'
`M-x texinfo-every-node-update'
     バッファ内の全てのノードに対し，`Next'，`Previous'，そして`Up'ポインタを
     挿入する，または更新します．

`C-c C-u C-a'
`M-x texinfo-all-menus-update'
     バッファ内の全てのメニューを作成するまたは更新します．引数(対話的な場合
     はプレフィクス引数`C-u')を用いることで，メニューで作業する前に，最初
     に全てのノードを挿入更新します．

     マスターメニューがある場合，`texinfo-all-menus-update'コマンドはそ
     れを更新します．しかし，メニューが無い場合，コマンドは新しいマスターメ
     ニューを作成しません．(そのためには，`texinfo-master-menu'コマンド
     を使用してください．)

     マスターメニューを作成するメリットが無いドキュメントで作業する場合，以下
     のように入力できます．

          C-u C-c C-u C-a
     または
          C-u M-x texinfo-all-menus-update

     これで，全てのノードとメニューを更新します．

  `texinfo-column-for-description'変数は，メニューの記述を字下げする
列数を指定します．デフォルトで値は32ですが，24以下にした方が便利なときが
多いです．`M-x edit-options'コマンド(*note Editing Variable Values:
(emacs)Edit Options.)や，`M-x set-variable' コマンド(*note Examining
and Setting Variables:
(emacs)Examining.)で変数を設定することが可能です．

  また，`texinfo-indent-menu-description'を既存のメニューでの記述の字
下げの列の指定に使用することも可能です．終りに，希望があれば
`texinfo-insert-node-lines'コマンドを，ファイルに足りない
`@node'行を挿入するために使用することが可能です．(詳細は *Note Other
Updating Commands::.)


File: texinfo-ja.info,  Node: Updating Requirements,  Next: Other Updating Commands,  Prev: Updating Commands,  Up: Updating Nodes and Menus

更新の必要条件
--------------

更新コマンドを使用するためには，章，セクション，サブセクション，そしてそ
れに類するものを用いて，Texinfoファイルを階層的に組織化する必要がありま
す．マニュアルの階層構造を構築するとき，一度に１レベル以上`jump down'し
ないでください．章を`Top'ノードの次にすることは可能ですが，セクションは
不可能です．セクションを章の次にすることは可能ですが，サブセクションでは
不可能です．しかし，一度に何レベルでも`jump up'することは可能です -- 例
えば，サブセクションから章にすることは可能です．

  それぞれの`@node'行は，`Top'ノードの行は例外として，
`@chapter'，`@section'，または`@unnumberedsubsec'のよ
うな，構造的なコマンドの行が続きます．

  それぞれの`@node'行や構造的なコマンド行は，以下のような組合せにす
る必要があります．

     @node     Comments,  Minimum, Conventions, Overview
     @comment  node-name, next,    previous,    up
     @section Comments

  または，(`@comment'行が無ければ)以下のようになります．

     @node Comments, Minimum, Conventions, Overview
     @section Comments

  または，(明示的なノードポインタが無ければ)以下のようになります．

     @node Comments
     @section Comments

この例では，`Comments'はノードとセクションの名前です．次のノードは
`Minimum'と呼ばれ，前のノードは`Conventions'と呼ばれます．`Comments'セク
ションは`Overview'ノードにあり，`Up'ポインタで指定されています．
(`@comment'行の代わりに，`@ifinfo'行を書いてもかまいません．)

  ファイルに`Top'ノードがある場合，それは，`top'や`Top'と呼ばれ，
ファイルの最初のノードにする必要があります．

メニュー更新コマンドは，章のセクションメニュー，セクションのサブセクショ
ンメニュー等を作成します．これは，章のメニューが欲しい場合，`Top'ノード
が必要だということを意味します．

  ところで，`makeinfo'コマンドは，`Next'，`Previous'，そして`Up'ポイ
ンタが無い階層的に組織化されたTexinfoファイルに対し，Infoファイルを作成
します．このため，Texinfoファイルが`makeinfo'で書式化されることが確
実な場合，ノード更新コマンドは不要です(`makeinfo'の詳細は， *note
Creating an Info File::)．しかし，`makeinfo'と
`texinfo-format-...'コマンドでは，どちらもファイルにメニューを
挿入する必要があります．


File: texinfo-ja.info,  Node: Other Updating Commands,  Prev: Updating Requirements,  Up: Updating Nodes and Menus

その他の更新コマンド
--------------------

５つの主な更新コマンドに加え，Texinfoモードには，余り使用されていない更新
コマンドもあります．

`M-x texinfo-insert-node-lines'
     Texinfoファイルのある領域全体に`@node'が無い場所では，
     `@chapter'，`@section'，そしてその他のセクションコマンドの前
     に`@node'行を挿入します．

     引数(対話的な場合は，`C-u'プレフィクス引数)を使用することで，
     `texinfo-insert-node-lines'コマンドは，`@node'行を挿入するだ
     けでなく，対応するノードの名前として章やセクションのタイトルも挿入します．
     さらに，既存の名前が無い`@node'行に，ノード名としてタイトルを挿入
     します．ノード名は，セクションや章のタイトルより簡潔にすべきなので，挿入
     されたノード名を手作業で編集する必要があります．

     例えば，以下のようにして，バッファ全体を領域としてマークし，
     `@node'行とタイトルを全体に挿入します．

          C-x h C-u M-x texinfo-insert-node-lines

     このコマンドは，タイトルをノード名として`@node'行に挿入します．
     `texinfo-start-menu-description'コマンド(*note Inserting
     Frequently Used Commands:
     Inserting.)は，タイトルをメニュー項目に記述とし
     て挿入するという，異なる動作になります．しかし，どちらの場合でも挿入され
     たテキストを編集する必要があります．

`M-x texinfo-multiple-files-update'
     分割されているファイルから構築されたドキュメントで，ノードとメニューを更
     新します．プレフィクス引数`C-u'を使用することで，外部ファイルにマス
     ターメニューを作成し挿入します．`C-u 2'のように，数字のプレフィクス
     引数を使用することで，外部ファイルにマスターメニューを作成し挿入する前に，
     全てのメニューと全てのインクルードファイルの，全ての`Next'，`Previous'，
     そして`Up' ポインタを最初に更新します．
     `texinfo-multiple-files-update'コマンドは，ファイルの
     `@include'の付録で述べられています． *Note
     texinfo-multiple-files-update::.

`M-x texinfo-indent-menu-description'
     指定された列の位置に，メニューのすべての記述を字下げします．記述に対して
     より多くのスペースを与えるために，このコマンドを使用することが可能です．
     引数(対話的な場合，`C-u'引数)を使用することで，
     `texinfo-indent-menu-description' コマンドは，領域の全てのメニュー
     の記述をを字下げします．しかし，このコマンドは複数行の記述行の２番目と次
     に続く行を字下げしません．

`M-x texinfo-sequential-node-update'
     現在のノードの直前直後に，ノードの階層レベルに係わらず，`Next'や
     `Previous'ポインタとしてノード名を挿入します．これは，サブセクションの
     `Next'ノードが次の章になることを意味します．連続して並んだノードは，小説
     や順番に読んでいくドキュメントで役立ちます．(しかしInfoでは，`g *'
     コマンドでファイルを順番に見ることができ，順番に並んだノードは厳密には不
     要です．)引数(対話的な場合は，プレフィクス引数)を使用することで，
     `texinfo-sequential-node-update'コマンドは領域の全てのノードを更新
     します．


File: texinfo-ja.info,  Node: Info Formatting,  Next: Printing,  Prev: Updating Nodes and Menus,  Up: Texinfo Mode

Infoの書式化
============

Texinfoモードは，Infoに対してTexinfoファイルの一部または全体を書式化する
コマンドも提供しています．ドキュメントを書いているとき，ファイルの一部だ
け，すなわち領域を書式化したいことがよくあります．

  領域を書式化するために，`texinfo-format-region'や
`makeinfo-region'コマンドを使用することが可能です．

`C-c C-e C-r'
`M-x texinfo-format-region'
`C-c C-m C-r'
`M-x makeinfo-region'
     Infoに対し，現在の領域の書式化を行います．

  バッファ全体を書式化するために，`texinfo-format-buffer'や
`makeinfo-buffer'コマンドを使用することが可能です．

`C-c C-e C-b'
`M-x texinfo-format-buffer'
`C-c C-m C-b'
`M-x makeinfo-buffer'
     Infoに対し，現在のバッファを初期化します．

  例えば，Texinfoを書いた後で以下のように入力します．

     C-u C-c C-u m
または
     C-u M-x texinfo-master-menu

これで，全てのノードとメニューを更新します．そして，Infoファイルを作成す
るため以下のように入力します．

     C-c C-m C-b
または
     M-x makeinfo-buffer

  TeXやInfo書式化コマンドを動作させるため，ファイルには，ヘッダに
`@setfilename'行を含める_必要が_あります．

  Infoの書式化の詳細は，*Note Creating an Info File::.


File: texinfo-ja.info,  Node: Printing,  Next: Texinfo Mode Summary,  Prev: Info Formatting,  Up: Texinfo Mode

書式化と印刷
============

Texinfoファイルの植字と印刷は，最初に印刷するための(DVIと呼ばれる)ファイ
ルを作成しその後でファイルを印刷するという，複数のステップによる処理にな
ります．オプションで索引を作成することも可能です．こうするため，最初に
`tex'植字コマンドを実行した後，`texindex'コマンドを実行する必
要があります．そして，もう一度`tex'コマンドを実行する必要があります．
また別の方法として，必要な索引を自動的に作成する，`texi2dvi'コマン
ドを実行します(*note Format with texi2dvi::)．

ドキュメントを書いているとき，どのように見えるかを確認するため，ファイル
の一部だけを植字し印刷したいときがよくあります．
`texinfo-tex-region'と，この目的に関係するコマンドを使用することが
可能です．`texinfo-tex-buffer'コマンドは，バッファ全体の書式化に使
用してください．

`C-c C-t C-b'
`M-x texinfo-tex-buffer'
     バッファで`texi2dvi'を実行します．バッファでTeXの実行に追加し，
     このコマンドは，必要な場合は自動的に索引を作成更新します．

`C-c C-t C-r'
`M-x texinfo-tex-region'
     領域でTeXを実行します．

`C-c C-t C-i'
`M-x texinfo-texindex'
     `texinfo-tex-region'で書式化されたTexinfoファイルの索引をソートする
     ため，`texindex'を実行します．`texinfo-tex-region'コマンドは，
     自動的に`texindex'を実行しません．それは，`tex'植字コマンドを
     実行するだけです．`texindex'コマンドで生の索引ファイルをソートした
     後，`texinfo-tex-region'コマンドを2回実行する必要があります．(通常，
     領域を書式化したときは索引を書式化せず，バッファを書式化したときのみ行わ
     れます．現在は`texi2dvi'コマンドがあるので，このコマンドはほとんど，
     あるいは全く必要ありません．)

`C-c C-t C-p'
`M-x texinfo-tex-print'
     前もって，`texinfo-tex-buffer'や`texinfo-tex-region'で書式化さ
     れたファイル(またはファイルの一部)を印刷します．

  `texinfo-tex-region'や`texinfo-tex-buffer'が動作するように，ファ
イルを`\input texinfo'行で始める_必要_があり，そして
`@settitle'行を含める必要があります．ファイルは，単独の
`@bye'行で終える必要があります．(`texinfo-tex-region'を使用す
るとき，`@settitle'行を，start-of-headerとend-of-header行で囲む必
要があります．)

  `tex-show-print-queue'のような，他のTeXに関連するコマンドの記述
は，*Note Hardcopy::.


File: texinfo-ja.info,  Node: Texinfo Mode Summary,  Prev: Printing,  Up: Texinfo Mode

Texinfoモードの概要
===================

Texinfoモードには，それぞれのコマンドの組には同じキーで始まるデフォルト
のキーバインドがあります．Texinfoモードのためにカスタムで作成された全て
のコマンドは`C-c'で始まります．キーは多少覚え易くなっています．

挿入コマンド
------------

  挿入コマンドは，`C-c'を2度入力し，挿入する@-コマンドの最初の文字を
入力し呼び出します．(それは，`カスタム挿入'に対する`C-c C-i'の使用よ
り記憶力が必要かもしれませんが，`C-c C-c'は，素早く入力できます．)

     C-c C-c c       `@code'を挿入．
     C-c C-c d       `@dfn'を挿入．
     C-c C-c e       `@end'を挿入．
     C-c C-c i       `@item'を挿入．
     C-c C-c n       `@node'を挿入．
     C-c C-c s       `@samp'を挿入．
     C-c C-c v       `@var'を挿入．
     C-c C-c {       カッコを挿入．
     C-c C-c ]
     C-c C-c }       閉じたカッコの外へ移動．
     
     C-c C-c C-d     Insert a node's section title
                     in the space for the description
                     in a menu entry line.

構造の表示
----------

  `texinfo-show-structure'コマンドは，小さな領域でよく使用されていま
す．

     C-c C-s         全ての見出しをリストアップします．

マスター更新コマンド
--------------------

  `texinfo-master-menu'コマンドはマスターメニューを作成します．そして，
ファイルの全てのノードとメニューの更新にも使用可能です．

     C-c C-u m
     M-x texinfo-master-menu
                     マスターメニューを作成更新します．
     
     C-u C-c C-u m   プレフィクス引数`C-u'を用いることで，
                     最初に全てのノードと普通のメニューを作成更新し，
                     そしてマスターメニューを作成する．

ポインタの更新
--------------

  ポインタを更新するコマンドは，`C-c C-u'と入力してから，
`texinfo-update-node'に対する`C-n'，または，
`texinfo-every-node-update'に対する`C-e'を入力します．

     C-c C-u C-n     ノードの更新．
     C-c C-u C-e     バッファの全てのノードの更新．

メニューの更新
--------------

  メニューの更新コマンドは，`C-c C-u'と入力してから，
`texinfo-make-menu'に対する`C-m'，または，
`texinfo-all-menus-update'に対する`C-a'を入力し呼び出してくださ
い．ノードとメニューの両方を同時に更新するため，`C-c C-u C-a'の前に
`C-u'を入力してください．

     C-c C-u C-m     メニューの作成更新．
     
     C-c C-u C-a     バッファの全ての
                     メニューの作成更新．
     
     C-u C-c C-u C-a プレフィクス引数`C-u'を用いることで，
                     最初に全てのノードを作成更新し
                     そして全てのメニューを作成更新します．

Infoの書式化
------------

  Emacs Lispで書かれているInfoの書式化コマンドは，`C-c C-e'と入力して
から，領域に対し`C-r'，または，バッファ全体に対し`C-b'を入力しま す．

  Cで書かれていて，`makeinfo'プログラムをベースにしたInfoの書式化コマ
ンドは，`C-c C-m'と入力してから，領域に対し`C-r'，または，バッファ
全体に対し`C-b'を入力し呼び出します．

`texinfo-format...'コマンドを使用します．

     C-c C-e C-r     領域の書式化．
     C-c C-e C-b     バッファの書式化．

`makeinfo'を使用します．

     C-c C-m C-r     領域の書式化．
     C-c C-m C-b     バッファの書式化．
     C-c C-m C-l     `makeinfo'出力バッファの更新．
     C-c C-m C-k     `makeinfo'書式化の停止．

植字と印刷
----------

  TeXの植字と印刷コマンドは，`C-c C-t'と入力してから，もう１つ制御コ
マンドを入力して呼び出します．`texinfo-tex-region'に対する`C-r'，
`texinfo-tex-buffer'に対する`C-b'等です．

     C-c C-t C-r     TeXを領域で実行．
     C-c C-t C-b     `texi2dvi'をバッファで実行．
     C-c C-t C-i     `texindex'の実行．
     C-c C-t C-p     DVIファイルの印刷．
     C-c C-t C-q     プリントキューの表示．
     C-c C-t C-d     プリントキューからジョブを削除．
     C-c C-t C-k     現在のTeX書式化の停止．
     C-c C-t C-x     現在停止中のTeX書式化を終了．
     C-c C-t C-l     出力バッファの更新．

その他の更新コマンド
--------------------

  残りの更新コマンドは滅多に使用されないのでキーバインドはありません．

     M-x texinfo-insert-node-lines
                     領域に足りない`@node'行を挿入．
                     プレフィクス引数`C-u'を用いることで，
                     セクションタイトルをノード名として使用．
     
     M-x texinfo-multiple-files-update
                     複数ファイルのドキュメントの更新．
                     プレフィクス引数`C-u 2'を用いることで，
                     最初に全てのインクルードファイルを
                     作成更新．
     
     M-x texinfo-indent-menu-description
                     記述の字下げ．
     
     M-x texinfo-sequential-node-update
                     厳密な順序でノードポインタの挿入．


File: texinfo-ja.info,  Node: Beginning a File,  Next: Ending a File,  Prev: Texinfo Mode,  Up: Top

Texinfoファイルを始める
***********************

情報の特定の部分は，Texinfoファイルの最初に提供する必要があり，それは，
出力ファイルの名前，ドキュメントタイトル，そしてTopノードです．

  この章では，以前に見せた(*note Six
Parts::)最小限の完全なTexinfoソースファ イルを拡張していきます．

* Menu:

* Sample Beginning::            A sample beginning for a Texinfo file.
* Texinfo File Header::         The first lines.
* Document Permissions::        Ensuring your manual is free.
* Titlepage & Copyright Page::  Creating the title and copyright pages.
* The Top Node::                Creating the `Top' node and master menu.
* Global Document Commands::    Affecting formatting throughout.
* Software Copying Permissions::  Ensure that you and others continue to
                                    have the right to use and share software.


File: texinfo-ja.info,  Node: Sample Beginning,  Next: Texinfo File Header,  Up: Beginning a File

Texinfoファイルの始まりのサンプル
=================================

以下のサンプルは，必要なものを表示しています．以下で与えられている要素は，
それ以降のセクションで詳細に説明します．それ以外のコマンドで，Texinfoファ
イルの最初に含められることが多いものもありますが，ここにあるものが最も重
要です．

  GNUマニュアルで使用されている完全なテキストは，*Note GNU Sample
Texts::.

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename INFONAME.info
     @settitle NAME-OF-MANUAL VERSION
     @c %**end of header
     
     @copying
     This manual is for PROGRAM, version VERSION.
     
     Copyright @copyright{} YEARS COPYRIGHT-OWNER.
     
     @quotation
     Permission is granted to ...
     @end quotation
     @end copying
     
     @titlepage
     @title NAME-OF-MANUAL-WHEN-PRINTED
     @subtitle SUBTITLE-IF-ANY
     @subtitle SECOND-SUBTITLE
     @author AUTHOR
     
     @c  The following two commands
     @c  start the copyright page.
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     
     Published by ...
     @end titlepage
     
     @c So the toc is printed in the right place.
     @contents
     
     @ifnottex
     @node Top
     @top TITLE
     
     @insertcopying
     @end ifnottex
     
     @menu
     * First Chapter::    Getting started ...
     * Second Chapter::          ...
       ...
     * Copying::          Your rights and freedoms.
     @end menu
     
     @node First Chapter
     @chapter First Chapter
     
     @cindex first chapter
     @cindex chapter, first
     ...


File: texinfo-ja.info,  Node: Texinfo File Header,  Next: Document Permissions,  Prev: Sample Beginning,  Up: Beginning a File

Texinfoファイルのヘッダ
=======================

  Texinfoファイルは，InfoとTeXに必要な情報を提供する少なくとも３行から始
めます．これらは，`\input texinfo'行，`@settitle'行，そして
`@setfilename'行です．

  また，Texinfoファイルの一部でTeXを実行したい場合，`@settitle'と
`@setfilename'行を，start-of-headerとend-of-header行の間に書く必要
があります．start-of-headerとend-of-headerの行はオプションですが無害なの
で，常に含めた方が良いでしょう．

ドキュメント全体のの書式化に影響のあるコマンドは，ヘッダに含める価値があ
ります．例えば，`@synindex' (*note synindex::)はヘッダに含められる
ことが多いもう一つのコマンドです．見本のテキストの完全なものは， *Note
GNU Sample Texts::.

  このため，Texinfoファイルの始まりは以下のようになります．

     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header

* Menu:

* First Line::                  The first line of a Texinfo file.
* Start of Header::             Formatting a region requires this.
* setfilename::                 Tell Info the name of the Info file.
* settitle::                    Create a title for the printed work.
* End of Header::               Formatting a region requires this.


File: texinfo-ja.info,  Node: First Line,  Next: Start of Header,  Up: Texinfo File Header

Texinfoファイルの最初の行
-------------------------

  TeXに入力する，最上位となるすべてのTexinfoファイルは，以下の行で始め
る必要があります．

     \input texinfo   @c -*-texinfo-*-

この行は，２つの機能を供給します．

  1. ファイルがTeXで処理されるとき，`\input texinfo'コマンドは，
     Texinfoファイルを処理するため必要なマクロを，TeXにロードするよう伝え
     ます．これらは`texinfo.tex'と呼ばれるファイルにあり，TeXまたは
     Texinfo
     ソフトウェアのいずれかでシステムにインストールされているはずです．
     TeXはバックスラッシュ`\'をコマンドの始めの印として使用し，それは
     ちょうどTexinfoが使用する`@'のようなものです．`texinfo.tex'ファ
     イルは，`\'を`@'に切替えます．切替える前にTeXは`\'を
     要求し，それがファイルの最初に現れる理由です．

  2. ファイルをGNU Emacsで編集するとき，`-*-texinfo-*-'モード指定は，
     EmacsにTexinfoモードを使用するように伝えます．


File: texinfo-ja.info,  Node: Start of Header,  Next: setfilename,  Prev: First Line,  Up: Texinfo File Header

ヘッダの始まり
--------------

  start-of-header行は以下のようなTexinfoのコメントです．

     @c %**start of header

  Texinfoファイルの２行目に，start-of-header行を書いてください．
start-of-header行に続けて，`@setfilename'と`@settitle'行と，
オプションで`@smallbook'や`@footnotestyle'のようなドキュメン
ト全体に影響を与えるその他のコマンド行を書いてください．そして
end-of-header行が続きます(*note End of Header::)．

start-of-headerとend-of-headerの行で，Texinfoファイルの一部だけをInfoや
印刷物に書式化することが可能になります．*Note texinfo-format commands::.

  `%**'という奇妙な文字列は，他のコメントが偶然start-of-header行だと
思われないことを保証します．Emacs変数`tex-start-of-header'と/や
`tex-end-of-header'を設定することで，希望のものに変更することが可能
です．*Note Texinfo Mode Printing::.


File: texinfo-ja.info,  Node: setfilename,  Next: settitle,  Prev: Start of Header,  Up: Texinfo File Header

`@setfilename':出力ファイル名を設定する
---------------------------------------

  `makeinfo'やTeXのための主要な入力ファイルとして供給するため，
Texinfoファイルには以下の行を含める必要があります．

     @setfilename INFO-FILE-NAME

  `@setfilename'コマンドを行の最初に書き，同じ行にInfoファイル名を続
けてください．その行に他のものは書かないでください，その行のコマンド後は，
コメントであっても，全てファイル名の一部と考えられます．

  Info書式化コマンドは，`@setfilename'行の前に書かれている全てのもの
を無視し，それはファイルの最初の行(`\input'行)を出力に表示しません．

  `@setfilename'行で生成する出力ファイルの名前を指定します．この名前
はTexinfoファイルの名前とは異なるものにする必要があります．名前を選ぶ慣
習が２つあります．入力ファイル名から(`.texi'のような)拡張子を削除す
る，またはより望ましい`.info'拡張子で置換するいずれかを行なうことが
可能です．

  明示的な`.info'拡張子が好まれますが，オペレーティングシステムには，
長いファイル名を処理できないものもあります．指定したファイル名が十分短い
ときでも問題となるはずです．これは，Infoフォーマッタが長いInfoファイルを
短い間接的なサブファイルに分割し，`-1'，`-2'， ...，
`-10'，`-11'等を，元のファイルの名前に加えるためです (*note Tag Files
and Split Files: Tag and Split Files.)．例えば，サブ
ファイル名`texinfo.info-10'は，ファイル名に１4文字の制限のある古いシ
ステムでは長過ぎます．そのため，このドキュメントのInfoファイル名は，
`texinfo.info'ではなく`texinfo'としています．`makeinfo'
を，MSーDOSのようなファイル名に重大な制限を加えるオペレーティングシステ
ムで実行するとき，それは元のファイル名から数文字削除し，サブファイルのサ
フィックスに十分なものだけ残し，そしてファイル名は，`texin-10'，
`gcc.i12'等になります．

  HTML出力を生成しているとき，`makeinfo'は拡張子を`html'に置換す
る，または，拡張子が無い場合は`.html'を追加します．

  `@setfilename'行は，TeXでマニュアルを植字するとき出力を作成しま
せんが，それにも関わらず不可欠です．それは，索引，相互参照，そしてその他
のTexinfoファイルで使用される追加ファイルを開き，システムに
`texinfo.cnf'ファイルがあれば，それも読み込みます(*note Preparing for
TeX: Preparing for TeX.)．


File: texinfo-ja.info,  Node: settitle,  Next: End of Header,  Prev: setfilename,  Up: Texinfo File Header

`@settitle':ドキュメントのタイトルを設定する
--------------------------------------------

印刷されたマニュアルにするため，Texinfoファイルは，以下のような行を含め
る必要があります．

     @settitle TITLE

  `@settitle'コマンドを行の最初に書き，同じ行にタイトルを続けてくだ
さい．これは，TeXにヘッダやフッタで使用するタイトルを伝えます．その行
には他に何も書かないでください．コマンド以降のその行は，タイトルの一部と
考えられ，それには他の場所ではコメントになるもの含まれます．

  `@settitle'コマンドは，TeXで実際に出力を生成するすべてのものに
前置すべきです．

  `makeinfo'で生成されるHTMLファイルには，TITLEがドキュメン
トの`<title>'として提供され，`<head>'部分にあるデフォルトのド
キュメントの説明になります．それを変更する方法は， *Note
documentdescription::を参照してください．

  `@settitle'コマンドのタイトルは，通常タイトルページのタイトルと同
じですが，タイトルページに現れるタイトルに影響しません．このため，２つは
正確に一致する必要はありません．このため，`@settitle'コマンドのタ
イトルは，タイトルページに現れるタイトルの，短い，あるいは展開されたバー
ジョンにすることが可能です(*note `@titlepage': titlepage.)．

  慣習では，TeXでTexinfoファイルを両面出力物のための書式化するとき，タ
イトルは左側(偶数)のページの見出しに印刷され，現在の章のタイトルは右側
(奇数)のページの見出しに印刷されます．(TeXは，それぞれの
`@chapter'コマンドからの，それぞれの章のタイトルを記憶します．)デ
フォルトで，ページフッタは印刷されません．

  片面スタイルの場合でさえ，TeXは`@settitle'コマンド行を探し，マ
ニュアルタイトルを見出しに含める場合に備えます．

  TeXは，Texinfoファイルの`@end titlepage'以降や，見出しを付ける
`@headings'コマンド以降のテキストに対してのみ，ページ見出しを印刷
します(詳細は，*note The `@headings' Command: headings on off.)．

希望があれば，独自のカスタム見出しとフッタを作成することが可能です．この
処理の詳細な記述は，*Note Page Headings: Headings.


File: texinfo-ja.info,  Node: End of Header,  Prev: settitle,  Up: Texinfo File Header

ヘッダの終り
------------

  ヘッダ行に，以下のようなTexinfoコメントになっているend-of-headerを続
けてください．

     @c %**end of header

  *Note Start of Header::.


File: texinfo-ja.info,  Node: Document Permissions,  Next: Titlepage & Copyright Page,  Prev: Texinfo File Header,  Up: Beginning a File

ドキュメントの許可
==================

ドキュメントに対する著作権の注意とコピーの許可は，様々なTexinfo出力形式
で複数の場所に表す必要があります．このため，Texinfoはこのテキストを一度
宣言するコマンド(`@copying')と，適切な場所にテキストを挿入するため
のもう一つのコマンド(`@insertcopying')を提供しています．

* Menu:

* copying::                 Declare the document's copying permissions.
* insertcopying::           Where to insert the permissions.


File: texinfo-ja.info,  Node: copying,  Next: insertcopying,  Up: Document Permissions

`@copying':コピーの許可を宣言する
---------------------------------

  `@copying'コマンドは，ドキュメントのなるべく最初の部分で提供すべき
です．ヘッダの材料の(*note Texinfo File Header::)直後が推奨される場所で
す．それは慣習に従い，一つまたは二つの文で成り立っていて，それらはプログ
ラムの法的な著作権の行とコピーの許可になります．骨組みの例は以下のように
なります．

     @copying This manual is for PROGRAM (version VERSION),
     which ...
     
     Copyright @copyright{} YEARS COPYRIGHT-OWNER.
     
     @quotation
     Permission is granted to ...
     @end quotation
     @end copying

  `@quotation'は法的には重要性ではありません．前後関係の読み易さを改
善するために存在します．

  GNUのマニュアルで使用されている完全なテキストは，*Note GNU Sample
Texts::.  GNUやそれ以外のフリーなマニュアル自身を配布するライセンスは，
*Note GNU Free Documentation License::.

  `@copying'のテキストは，Info，HTML，そしてXMLの出力ファイルの最初
に，コメントとして出力されます．プレーンテキストやTeXでは，暗黙的に出
力され_ません_．コピーの情報を発行するための`@insertcopying'
の使用はお任せします．詳細は次のセクションを参照してください．

  丸の中の`c'の出力をサポートしている(印刷とHTML)の出力形式では，
`@copyright{}'コマンドで，丸の中の`c'を生成します．Infoとプ
レーンテキストでは，`(C)'を生成します．著作権の注意には，以下の法的
に定義された順番があります．

     Copyright (C) YEARS COPYRIGHT-OWNER.

単語`Copyright'は，たとえ他の言語でマニュアルが書かれている場合でも，常
に英語で書く必要があります．これは国際的な法律のためです．

年のリストは，バージョンが完了したすべての年を(たとえ連続した年にリリー
スされていたとしても)含めるべきです．範囲指定は許可されておらず，それぞ
れの年を，個別にカンマで分けながら書き出す必要があります．

諸作件の所有者(達)は，その作業に対して法的な著作権を保持するものです．作
業をFSFに上としている状況では，所有者は`Free Software Foundation, Inc.'
になります．

  追加情報は，*Note Copyright Notices: (maintain)Copyright Notices.


File: texinfo-ja.info,  Node: insertcopying,  Prev: copying,  Up: Document Permissions

`@insertcopying':許可のテキストを含める
---------------------------------------

  `@insertcopying'コマンドは，単純に単独行に以下のように書きます．

     @insertcopying

  それで，`@copying'で前もって定義されているテキストを挿入します．そ
れは，印刷されたマニュアルの著作権のページで使用する必要があります．

  法的には要求されていませんが，マニュアルのTopノードで
`@insertcopying'を使用することを強く推奨します(*note The Top
Node::)．以下はその理由です．

  `@copying'コマンド自身で，許可のテキストをInfoファイルの最初のノー
ドの_前に_現します．そのテキストは，それぞれのInfo出力ファイルの先
頭にも，法的な必要性からそのままコピーされます．この場所では，Infoを使用
してマニュアルを読んでいる人がこのテキストを見ることは_ありません_
(例外は，高度なInfoコマンド`g *'を使用しているときです)．そのため，
明示的に`@insertcopying'をTopノードに書くことで，マニュアルがフリー
だということが読者に対して明らかになります．

  同様に，`@copying'のテキストは，それぞれのHTML出力ファイルの先頭に，
コメントとして，自動的に含められます．また，このテキストは，(読者がHTML
のソースを見ない限り)見ることができません．そしてまたそのために，コピー
の許可を見えるようにし，フリーを押し進めていくために，
`@insertcopying'をTopノードに書くことが重要です．

  `@copying'で定義される許可のテキストは，XML出力ファイルの最初にも，
自動的に現れます．


File: texinfo-ja.info,  Node: Titlepage & Copyright Page,  Next: The Top Node,  Prev: Document Permissions,  Up: Beginning a File

タイトルと著作権ページ
======================

ハードコピーの出力では，マニュアルの名前と著作者は，通常はタイトルページ
に印刷されます．著作権情報は通常，タイトルページの裏に印刷されます．

タイトルと著作権ページは印刷されたマニュアルには現れますが，Infoファイル
には現れません．このため，Infoファイルで使用不可能な，分かりにくいTeX
植字コマンドを，いくつか使用することが可能です．さらに，Texinfoファイル
の始めのこの部分は，印刷されたマニュアルに現れる著作権の許可のテキストを
含んでいます．

プレーンテキスト出力に対し，タイトルページのような情報を含めたい場合もあ
るでしょう．単純に，`@ifplaintext'と`@end ifplaintext'の間に，
そのような導入素材を配置してください．`makeinfo'は，これをプレー
ンテキスト(`--no-headers')に書くときに，`@insertcopying'と一
緒に含めます．

* Menu:

* titlepage::                   Create a title for the printed document.
* titlefont center sp::         The `@titlefont', `@center',
                                  and `@sp' commands.
* title subtitle author::       The `@title', `@subtitle',
                                  and `@author' commands.
* Copyright::                   How to write the copyright notice and
                                  include copying permissions.
* end titlepage::               Turn on page headings after the title and
                                  copyright pages.
* headings on off::             An option for turning headings on and off
                                  and double or single sided printing.


File: texinfo-ja.info,  Node: titlepage,  Next: titlefont center sp,  Up: Titlepage & Copyright Page

`@titlepage'
------------

  タイトルページと，それに続く著作権ページのための材料は，
`@titlepage'の単独行で開始し，`@end titlepage'の単独行で終了 します．

  `@end titlepage'コマンドは，新しいページから始め，ページの番号付け
を開始します．(ページ見出し生成の詳細は，*Note Page Headings:
Headings.)番号付けされないページにしたいものは，`@titlepage'と `@end
titlepage'コマンドの間に書きます．
`@setcontentsaftertitlepage'コマンドで，目次をその場所に表示するこ
とが可能です(*note Contents::)．

  `@page'コマンドを使用することで，`@titlepage'と`@end
titlepage'コマンドで線引きをした領域での改ページが可能となり，１ページ以
上のページ付けされないものが作成可能となります．これは，著作権ページを作
成する方法です．(`@titlepage'コマンドは，おそらく
`@titleandadditionalpages'と名付けた方がいいのですが，それは長すぎ
ます！)

コンピュータプログラムのマニュアルを書くとき，マニュアルが適合するプログ
ラムのバージョンをタイトルページに書くべきです．マニュアルがプログラムよ
り変更頻度が高い，または，プログラムに依存しない場合，マニュアルのエディ
ション番号(1) (*note titlepage-Footnote-1::)を含める
べきです．これは，マニュアルがどのプログラムのバージョンに対するものかを，
読者が追跡する助けとなります(`Top'ノードは，この情報も含みます． *note
`@top': makeinfo top.)．

Texinfoでは，タイトルページの作成に対して２つの主な方法を提供しています．
１つの方法は，`@titlefont'，`@sp'，そして`@center'コマ
ンドを，ページの単語を中央揃えしたタイトルページを生成するために使います．

  ２番目の方法は，`@title'，`@subtitle'，そして`@author'
コマンドを，タイトルの下に黒い罫線をつけてタイトルページを作成し，著作者
の行とサブタイトルテキストをページで右寄せするために使用します．この方法
では，タイトルページの実際の書式化を何も指定しません．テキストを望み通り
に指定し，Texinfoは書式化を行います．

どちらか一方の方法を使用する，または，両方を組み合わせてもかまいません．
以下のセクションでサンプルを参照してください．

非常に簡単なアプリケーションのためと，伝統的な本の前部の規格外のタイトル
ページのため，Texinfoはタイトルとしてその行の残りの部分を引数とする
`@shorttitlepage'コマンドも提供しています．引数は，ページにそれ自
身を植字し，次は空白のページになります．


File: texinfo-ja.info,  Node: titlepage-Footnotes,  Up: titlepage

  (1) 我々は，独立したマニュアルのバージョンを`edition'と
して，プログラムのバージョンを`version'として参照することが便利だと分か
りました．そうしない場合，慣習的にドキュメントとソフトウェアの両方を同じ
単語で言及することで，お互いに混乱しやすいことが分かりました．


File: texinfo-ja.info,  Node: titlefont center sp,  Next: title subtitle author,  Prev: titlepage,  Up: Titlepage & Copyright Page

`@titlefont'，`@center'，そして`@sp'
------------------------------------

  印刷されたドキュメントに対してタイトルページを作成するため，
`@titlefont'，`@sp'，そして`@center'コマンドを使用する
ことが可能です．(これは，Texinfoのタイトルページを作成する，２つの方法の
最初のものです．)

  タイトル自身に適した大きなフォントを選択するため，`@titlefont'コマ
ンドを使用してください．特に長いタイトルがある場合，１度以上
`@titlefont'を使用することが可能です．

  例えば，以下のようにします．

     @titlefont{Texinfo}

  残りのテキストを中央揃えにするため，行の最初に`@center'コマンドを
使用してください．このため以下のようにします．

     @center @titlefont{Texinfo}

例では，タイトル"Texinfo"は中央揃えされ，タイトルフォントで印刷されま
す．

  縦の空白を挿入するため，`@sp'コマンドを使用してください．例えば，
以下のようにします．

     @sp 2

これで印刷されたページに２行の空白行が挿入されます(`@sp'コマンドの
詳細は，*note `@sp': sp.)．

  この手法のテンプレートは，以下のようになります．

     @titlepage
     @sp 10
     @center @titlefont{NAME-OF-MANUAL-WHEN-PRINTED}
     @sp 2
     @center SUBTITLE-IF-ANY
     @sp 2
     @center AUTHOR
     ...
     @end titlepage

  例の空白は，8.5x11インチのマニュアルに適しています．


File: texinfo-ja.info,  Node: title subtitle author,  Next: Copyright,  Prev: titlefont center sp,  Up: Titlepage & Copyright Page

`@title'，`@subtitle'，そして`@author'
--------------------------------------

  垂直と水平方向に自動的な配置を行なうタイトルページを作成するため，
`@title'，`@subtitle'，そして`@author'コマンドを使用す
ることが可能です．これは前のセクションの記述とは異なり，`@sp'コマ
ンドは垂直方向の空白調整に必要です．

  `@title'，`@subtitle'，そして`@author'コマンドを行の最
初に，タイトル，サブタイトル，または著作者を続けて書いてください．

  `@title'コマンドは，ページの左揃えで通常より大きいフォントでタイト
ルの行を生成します．タイトルには黒い罫線の下線があります．１行のみ可能で
す．`@*'コマンドを，タイトルを２行に分けるために使用してはいけませ
ん．非常に長いタイトルを扱うため，`@title'と`@titlefont'の両
方を使用した方が便利だと分かるかもしれません．このセクションの最後の例を
参照してください．

  `@subtitle'コマンドは，通常の大きさのフォントでページの右側にサブ
タイトルを設定します．

  `@author'コマンドは，著作者達の名前を中間の大きさのフォントで，ペー
ジのその行の左揃えでタイトルページの下の近くに配置します．名前は，タイト
ルの下線より細い黒い罫線の下線があります．(黒い罫線は，`@author'コ
マンド行に，`@page'コマンド行が続く場合に表示されます．)

  `@author'コマンドを使用するための２つの方法があります．
`@author'コマンドで始まった行の残りの部分に，名前を書くことが可能 です．

     @author by Jane Smith and John Doe

または，２つ(またはそれ以上)のそれぞれの前に`@author'を使用して，名
前を書くことも可能です．

     @author Jane Smith
     @author John Doe

(下の名前のみ，黒い罫線の下線がつきます．)

  この方法のテンプレートは，以下のようになります．

     @titlepage
     @title NAME-OF-MANUAL-WHEN-PRINTED
     @subtitle SUBTITLE-IF-ANY
     @subtitle SECOND-SUBTITLE
     @author AUTHOR
     @page
     ...
     @end titlepage

  前のセクションで記述された`@titlefont'の方法と，ここで記述されてい
る`@title'の方法を組み合わせてもかまいません．これは，長いタイトル
の場合に便利です．現実的な例は以下のようになります．

     @titlepage
     @titlefont{GNU Software}
     @sp 1
     @title for MS-Windows and MS-DOS
     @subtitle Edition @value{e} for Release @value{cde}
     @author by Daniel Hagerty, Melissa Weisshaus
     @author and Eli Zaretskii

(ここでの`@value'の使用は，*Note value Example::で述べられています．)


File: texinfo-ja.info,  Node: Copyright,  Next: end titlepage,  Prev: title subtitle author,  Up: Titlepage & Copyright Page

著作権のページ
--------------

国際的な条約で，本の著作権の注意は，タイトルページかタイトルページの裏に
書く必要があります．著作権の注意がタイトルページの裏にあるとき，そのペー
ジは慣習で番号が付きません．そのため，Texinfoでは，著作権のページの情報
を`@titlepage'と`@end titlepage'コマンドの間に書くべきです．

  `@page'コマンドを改ページに使用してください．著作権の注意と著作権
ページの他のテキストがページの下になるように，`@page'コマンドの後
に，以下のような魔法の呪文を使用してください．

     @vskip 0pt plus 1filll

これは，Info書式化コマンドがサポートしていないTeXコマンドです．
`@vskip'コマンドは空白を挿入します．`0pt plus 1filll'は，0ポ
イントの必須の空白を書き，以下のテキストをページの下に書くことに必要な追
加の空白を配置することを意味します．`filll'の３つの`l'を使用し
ていることに注意してください．これは正しい使い方です．

  著作権のテキスト自身を挿入するために，次に`@insertcopying'を書いて
ください(*note Document Permissions::)．

     @insertcopying

発行者のコピーについてのテキスト，ISBN番号，カバーアートのクレジット，そ
してそれ以外のそのような情報を続けてください．

  以下はこれらをすべてまとめて書き込んだ例です．

     @titlepage
     ...
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     
     Published by ...
     
     Cover art by ...
     @end titlepage


File: texinfo-ja.info,  Node: end titlepage,  Next: headings on off,  Prev: Copyright,  Up: Titlepage & Copyright Page

見出しの生成
------------

  `@end titlepage'コマンドは，単独行に書く必要があります．タイトルと
著作権のページの終りの印付けをするだけでなく，TeXにページ見出しとペー
ジ番号の生成も開始させます．

他で述べた繰り返しですが，Texinfoには２つの標準ページ見出しの書式があり，
１つは紙のそれぞれの片側に印刷されたドキュメント(片面印刷)のためで，もう１
つはそれぞれの用紙の両側に印刷されたドキュメント(両面印刷)のためです．こ
れらの書式化を，異なる方法で指定することが可能です．

   * 従来の方法は，`@setchapternewpage'コマンドをタイトルページコマンド
     の前に書くもので，`@end titlepage'で要求された方法でページ見出しの
     生成を開始します(*note setchapternewpage::)．

   *
     他の方法として，生成されたものへのページ見出しを阻止したり，片面または両
     面印刷で開始したりするため，`@headings'コマンドを使用することが可
     能です．(`@headings'コマンドを，`@end titlepage'コマンドの直
     後に書いてください．詳細は，*Note The `@headings' Command:
     headings on off.)

   *
     または，独自のページ見出しとフッタの書式を指定できます．ページ見出しとフッ
     タの詳細は，*Note Page Headings: Headings.

ほとんどのドキュメントは標準的な片面または両面の書式で書式化され，両面印
刷のため`@setchapternewpage odd'を使用し，片面印刷のため
`@setchapternewpage'コマンドは使用しません．


File: texinfo-ja.info,  Node: headings on off,  Prev: end titlepage,  Up: Titlepage & Copyright Page

`@headings'コマンド
-------------------

  `@headings'コマンドは滅多に使用されません．それは，それぞれのペー
ジに印刷するページ見出しとフッタの種類を指定します．通常これは，
`@setchapternewpage'コマンドで制御されます．
`@setchapternewpage'コマンドが望まないことをしたり，独自の定義の前
に前もって定義されているページ見出しを止める場合のみ，`@headings'
コマンドが必要です．`@headings'コマンドを`@end titlepage' コ
マンドの直後に書いてください．

  以下のように，`@headings'を使用することが可能です．

`@headings off'
     ページ見出しの印刷を停止します．

`@headings single'
     片面印刷に適したページ見出しを開始します．

`@headings double'
`@headings on'
     両面印刷に適したページ見出しを開始します．２つのコマンド，
     `@headings on'と`@headings double'は同意語です．

`@headings singleafter'
`@headings doubleafter'
     現在のページを出力した後，それぞれ，`single'または`double'見出
     しを開始します．

`@headings on'
     ページ見出しを開始します．`@setchapternewpage on'の場合は
     `single'で，それ以外では`double'です．

  例えば，前の章の終りに続けて同じページで新しい章を開始するようTeXに伝
えるための`@titlepage'コマンドの前に，`@setchapternewpage
off'を書く場合を考えます．またこのコマンドは，片面印刷のページヘッダを
TeXに植字させます．両面印刷でTeXに植字させるため，`@end
titlepage'コマンドの後に`@headings double'を書いてください．

  `@end titlepage'コマンドを含む行の直後に単独行の`@headings
off'を書くことで，TeXのページ見出しの生成を停止できます．

     @end titlepage
     @headings off

`@headings off'コマンドは，`@end titlepage'コマンドに優先し，
それ以外の場合はTeXにページ見出しを印刷させます．

  ページ見出しとフッタの独自のスタイルを指定することも可能です．詳細は，
*Note Page Headings: Headings.


File: texinfo-ja.info,  Node: The Top Node,  Next: Global Document Commands,  Prev: Titlepage & Copyright Page,  Up: Beginning a File

`Top'ノードとマスターメニュー
=============================

`Top'ノードは，Infoマニュアルへの読者の入口です．そのため，マニュアルの
(バージョンナンバーを含めた)短い記述とコピーの許可を提供するため，
`@insertcopying'コマンド(*note Document Permissions::)で開始し，マ
ニュアル全体のマスターメニューで終えるべきです．もちろん，読者が役に立つ
と思われるその他の一般的な情報を含めるべきです．

  また，`@node Top'行(*note The `@top' Sectioning Command: makeinfo top
command.)の直後に，ドキュメントのタイトルを含む
`@top'セクションコマンド行を書くのも通常の方法です．

`Top'ノードの内容は，オンラインの出力だけに現れます．印刷されたマニュア
ルに現れるものが無いので，`@ifnottex'と`@end ifnottex'コマン
ドで囲まれています．(TeXは`@node'行もメニューも印刷しません．
Infoだけに現れます．厳密には，`@ifnottex'と`@end ifnottext'
でこれらの部分を囲む必要はありませんが，そうするのが最も簡単です．
*Note Conditionally Visible Text: Conditionals.)

* Menu:

* Top Node Example::
* Master Menu Parts::


File: texinfo-ja.info,  Node: Top Node Example,  Next: Master Menu Parts,  Up: The Top Node

Topノードの例
-------------

  以下はTopノードの例です．

     @ifnottex
     @node Top
     @top Sample Title
     
     @insertcopying
     
     Additional general information.
     
     @menu
     * First Chapter::
     * Second Chapter::
     ...
     * Index::
     @end menu


File: texinfo-ja.info,  Node: Master Menu Parts,  Prev: Top Node Example,  Up: The Top Node

マスターメニューの部分
----------------------

  "マスターメニュー"は，ファイル全体のノードをリストアップする詳細なメ
インメニューです．

  マスターメニューは，`@menu'と`@end menu'コマンドで囲まれてい
て，印刷されたドキュメントには現れません．

  一般に，マスターメニューはいくつかの部分に分かれています．

   *
     最初の部分は，Texinfoファイルの主なノードを含みます．章のノード，章のよ
     うなもののノード，そして付録です．

   * ２番目の部分は，索引のノードを含みます．

   *
     ３番目の部分とそれに続く部分はその他の低レベルのノードで，章の順番のリス
     トを含みます．このように，中間メニューを通過するのではなく特定の情報を探
     すとき，探している人は特定のノードへ直接行くことが可能になります．これら
     のメニュー項目は必要ではありません．便利だと思う場合は追加してください．
     それらを使用する場合，`@detailmenu'を最初のものの前に書き， `@end
     detailmenu'を最後のものの後に書きます．そうしなければ
     `makeinfo'は混乱します．

メニューのそれぞれのセクションは記述行で紹介されています．アスタリスクで
始まらない行は，メニュー項目として扱われません．(詳細は，*Note Writing
a Menu::.)

例えば，このマニュアルのマスターメニューは，以下のようになっています(もっ
と多くの項目がありますが．)

     @menu
     * Copying Conditions::  Your rights.
     * Overview::            Texinfo in brief.
     ...
     * Command and Variable Index::
     * Concept Index::
     
     @detailmenu
      --- The Detailed Node Listing ---
     
     Overview of Texinfo
     
     * Reporting Bugs:: ...
     ...
     
     Beginning a Texinfo File
     
     * Sample Beginning:: ...
     ...
     @end detailmenu
     @end menu


File: texinfo-ja.info,  Node: Global Document Commands,  Next: Software Copying Permissions,  Prev: The Top Node,  Up: Beginning a File

大域的なドキュメントコマンド
============================

前のセクションで記述した基本的なコマンド以外に，以下のようなドキュメント
全体に影響のある，追加のコマンドがあります．それらが与えられる場合は，通
常はすべてTopノードの前で与えられます．

* Menu:

* documentdescription::         Document summary for the HTML output.
* setchapternewpage::           Start chapters on right-hand pages.
* paragraphindent::             Specify paragraph indentation.
* exampleindent::               Specify environment indentation.


File: texinfo-ja.info,  Node: documentdescription,  Next: setchapternewpage,  Up: Global Document Commands

`@documentdescription':概要のテキスト
-------------------------------------

  ドキュメントのHTML出力を生成しているとき，`makeinfo'はドキュメン
トの内容を与えるため，`<meta>'エレメントを`<head>'に書き出しま
す．デフォルトで，この"説明"は，`@settitle'コマンド (*note
settitle::)で与えられるドキュメントのタイトルです．これを変更する
ため，`@documentdescription'環境変数を以下のように使用してください．

     @documentdescription
     descriptive text.
     @end documentdescription

これで，HTMLの`<head>'に以下のような出力を生成します．

     <meta name=description content="descriptive text.">

  `@documentdescription'は，ドキュメントの最初のノードの前に指定する
必要があります．


File: texinfo-ja.info,  Node: setchapternewpage,  Next: paragraphindent,  Prev: documentdescription,  Up: Global Document Commands

`@setchapternewpage':
---------------------

公式に製本された本では，通常テキストは紙の両面に印刷され，章は右側のペー
ジから始まり，そして右のページは偶数番号です．しかし，短いレポートではテ
キストが紙の片面だけに印刷されることもよくあります．また短いレポートでは，
章で改ページしないときもありますが，小量の縦方向の空白の後，前の章の終り
と同じページで印刷されます．

  `@setchapternewpage'コマンドを，TeXが章を開始する方法と，紙の片
面や両面への印刷(１面や２面印刷)に対するヘッダの書式化の方法を指定するた
め，様々な引数で使用することが可能です．

  `@setchapternewpage'コマンドを，行の最初に引数を続けて書いてくださ
い．

例えば，それぞれの章を新しい偶数ページから始めるため，以下のように書きま
す．

     @setchapternewpage odd

  `@setchapternewpage'コマンドで，３つの選択肢の１つを指定することが可
能です．

`@setchapternewpage off'
     TeXは，直前の章と同じページで，いくつかの縦方向の空白を挟み，新しい章
     を植字します．また，TeXは片面印刷に対するページヘッダの書式化も行ない
     ます．

`@setchapternewpage on'
     TeXは，新しいページで章を開始させ，片面印刷に対するページヘッダで書式
     化します．これは，短いレポートや個人的な印刷で最もよく使用されている形式
     です．これはデフォルトです．

`@setchapternewpage odd'
     TeXは，新しい章を新しい偶数ページ(右側のページ)で開始させ，両面印刷に
     対する植字をします．これは，本やマニュアルで最もよく使用されている形式で
     す．

奇数番号のページで新しい章や本を開始する印刷の伝統はないので，Texinfoに
は`@setchapternewpage even'コマンドはありません．

  `@setchapternewpage'が設定するデフォルトのヘッダが好みではない場合，
`@headings'コマンドを用いて明示的に制御することが可能です． *Note The
`@headings' Command: headings on off.

  マニュアルや本の最初では，ページの番号付けはされません -- 例えば，本の
タイトルと著作権のページは番号付けされていません．慣習で，目次のページと
序章のページはローマ数字で番号付けされ，それはドキュメントの残りの部分と
連番にはなっていません．

  Infoファイルにはページが無いので，`@setchapternewpage'はそれに対し
効果はありません．

  要求される出力物がドキュメントの本質ではないため，
`@setchapternewpage'コマンドをマニュアルのソースに入れることを推奨
する気はありません．特定のハードコピーを実行する際，デフォルトオプション
(空白ページがない，全てのページで同じヘッダ)が不要な場合，お望みの出力を
指定するために`texi2dvi'に`--texinfo'オプション使用してく ださい．


File: texinfo-ja.info,  Node: paragraphindent,  Next: exampleindent,  Prev: setchapternewpage,  Up: Global Document Commands

段落の字下げ
------------

Texinfoプロセッサは，それぞれの段落の最初の行の始めに空白を挿入し，それ
により段落を字下げします．この字下げを指定するために，
`@paragraphindent'コマンドを使用することが可能です．行の最初に
`@paragraphindent'コマンドを書き，`asis'や数字を続けてくださ い．

     @paragraphindent INDENT

  字下げは，INDENTの値に従います．

`asis'
     既存の字下げを変更しません(TeXでは実装されていません)．

`none'
0
     すべての字下げを取り消します．

N
     Info出力ではN個のスペース文字，TeXではN字下げします．

  INDENTのデフォルト値は３です．`@paragraphindent'は，HTML出力
では無視されます．

  `@paragraphindent'コマンドは，領域の書式化コマンドで指定されたよう
に段落を字下げするので，Texinfoファイルの最初に，end-of-header行の直前に
書くのが最善です．*Note Start of Header::.

  `texinfo-format-buffer'と`texinfo-format-region'の特別なところ
は，`@w'や`@*'コマンドを含む段落を字下げしない(または補充し
ない)ことです．詳細は，*Note Refilling Paragraphs::.


File: texinfo-ja.info,  Node: exampleindent,  Prev: paragraphindent,  Up: Global Document Commands

`@exampleindent':環境に応じた字下げ
-----------------------------------

  Texinfoプロセッサは，`@example'とそれに似たもので囲まれている部分
でそれぞれの行を字下げします．`@exampleindent'コマンドで字下げを指
定することが可能です．`@exampleindent'コマンドを行の始めに書き，
`asis'または数字のいずれかを続けてください．

     @exampleindent INDENT

  字下げは，INDENTの値に従います．

`asis'
     既存の字下げを変更しません(TeXでは実装されていません)．

0
     すべての字下げを取り消します．

N
     Info出力では，N個のスペース文字，TeXではN文字，囲まれた部
     分を字下げします．

  INDENTのデフォルト値は5です．`@exampleindent'はHTML出力では
無視されます．

  `@exampleindent'コマンドは，領域の書式化コマンドで指定されたように
段落を字下げするので，Texinfoファイルの最初に，end-of-header行の前に書く
のが最善です．*Note Start of Header::.


File: texinfo-ja.info,  Node: Software Copying Permissions,  Prev: Global Document Commands,  Up: Beginning a File

ソフトウェアのコピーの許可
==========================

  Texinfoファイルに，文章化された"General Public License"と，配布情報と
ソフトウェアに対する免責を含むセクションがある場合，`Top'ノードの直後に
配置することを推奨します．General Public Licenseは，Project GNUのソフト
ウェアにとって非常に重要です．それは，万人に対するソフトウェアの使用と共
有の維持を保証します．

コピーと配布の情報と免責には，導入部分やマニュアルの最初の章が続きます．

導入部分はTexinfoの必須部分ではありませんが大変役に立ちます．理想的には，
ファイルが何に関係するするのかと，誰が興味を持って読むのかを，そこで明白
に簡潔に述べるべきです．ドキュメントの最初の方に書く人もいますが，一般に，
導入部分にはライセンスと情報の記述が続きます．通常の導入部分は，
`@unnumbered'セクションに書きます．(*Note The `@unnumbered' and
`@appendix' Commands: unnumbered & appendix.)


File: texinfo-ja.info,  Node: Ending a File,  Next: Structuring,  Prev: Beginning a File,  Up: Top

Texinfoファイルを終える
***********************

Texinfoファイルの終りには，索引を作成するコマンドと，(おそらく)完全なも
のと概要の目次を生成するコマンドを含めるべきです．最後に，処理する最終行
に印を付ける`@bye'コマンドを含んでいる必要があります．

  例えば，以下のようにします．

     @node Index
     @unnumbered Index
     
     @printindex cp
     
     @shortcontents
     @contents
     
     @bye

* Menu:

* Printing Indices & Menus::    How to print an index in hardcopy and
                                  generate index menus in Info.
* Contents::                    How to create a table of contents.
* File End::                    How to mark the end of a file.


File: texinfo-ja.info,  Node: Printing Indices & Menus,  Next: Contents,  Up: Ending a File

索引メニューと索引の印刷
========================

索引を印刷するということは，マニュアルやInfoファイルの一部としてそれを含
めることを意味します．これは，`@cindex'やその他の索引項目を生成す
るコマンドをTexinfoファイルで使用しているだけでは，自動的に発生しません．
それらは索引のため生データを蓄積します．索引を生成するため，
`@printindex'コマンドをドキュメントの索引を書きたい場所に含める必
要があります．また，印刷されたマニュアルを作成する過程でソートされた索引
ファイルを生成する際，生データをソートするために`texindex'と呼ばれ
るプログラム(*note Hardcopy::)を実行する必要もあります．ソートされた索引
ファイルは索引の印刷で実際に使用されます．

Texinfoは，前もって定義された6つの個別の形態の索引を提供していて，それぞ
れ以下の表で示す２文字の省略を用いています．しかし，索引を統合したり
(*note Combining Indices::)，独自の索引を定義(*note New Indices::)しても
かまいません．

以下は前もって定義されている索引，その省略，そしてそれに対応する索引項目
コマンドです．

`cp'
     概念の索引(`@cindex')

`fn'
     関数の索引

`vr'
     変数の索引(`@index')

`ky'
     キーの索引(`@kindex')

`pg'
     プログラムの索引(`@pindex')

`tp'
     データ型の索引(`@tindex')

  `@printindex'コマンドは２文字の索引の省略を引数として，対応するソー
トされた索引ファイルを読み込み，索引内に適切に書式化します．

  `@printindex'コマンドは索引に対する章の見出しを生成しません．した
がって，章の見出しを提供し索引を目次に含めるため，適切なセクションや章コ
マンド(通常`@unnumbered')の前に`@printindex'コマンドを書くべ
きです．`@unnumbered'コマンドを`@node'行に前置してください．

  例えば，以下のようにします．

     @node Variable Index
     @unnumbered Variable Index
     
     @printindex vr
     
     @node Concept Index
     @unnumbered Concept Index
     
     @printindex cp

見つけ易くするため，概念の索引を最後に配置することを推奨します．また，読
者が見る場所を一つだけにするため，可能な限り索引を一つにすることを推奨し
ます(*note Combining Indices::)．


File: texinfo-ja.info,  Node: Contents,  Next: File End,  Prev: Printing Indices & Menus,  Up: Ending a File

目次の生成
==========

  `@chapter'，`@section'，そしてその他の構造化コマンドは，目次
を作成する情報を供給していますが，実際の表をマニュアルに表示しません．こ
うするため，`@contents'と/または`@summarycontents'コマンドを
使用する必要があります．

`@contents'
     印刷されたマニュアルに目次を生成し，それは，全ての章，セクション，サブセ
     クションなど，付録や番号付けされない章まで含みます．`@heading'と同
     列のコマンドで生成された見出しは目次に現れません．

`@shortcontents'
`@summarycontents'
     (`@summarycontents'は`@shortcontents'と同義語です．)

     章，付録，そして番号付けされない章のみをリストアップした，短い，または，
     概要の目次を生成します．セクション，サブセクション，そしてサブサブセクショ
     ンは削除されます．長いマニュアルのみ，完全な目次への追加として短い目次が
     必要です．

どちらの目次コマンドも単独行に書くべきです．目次コマンドは，自動的に章の
ような見出しを最初の目次ページのトップに生成するので，その前に
`@unnumbered'のようなセクションコマンドを含めないでください．

Infoファイルは目次の代わりにメニューを使用するので，Indo書式化コマンドは，
目次コマンドを無視します．しかし，`makeinfo'で標準出力に出力を書い
ていない限り，目次は(`makeinfo --no-headers'で生成される)プレーンテ
キスト出力には含まれます．

  HTML出力を生成する際に`makeinfo'で短い目次を書いているとき，短い目
次のリンクは，ドキュメントのテキストではなく，完全な目次の対応する項目を
指し示します．完全な目次のリンクは，ドキュメントの主なテキストを指し示し
ます．

  目次コマンドは，ファイルの最後の索引(前のセクションを参照してください)
の後の`@bye'(次のセクションを参照してください)の直前，または，ファ
イルの最初の`@end titlepage'(*note titlepage::)の後に配置すること
が可能です．前者の利点は，行われた処理を参照するため，目次出力が常に更新
されることです．後者の利点は，目次が適切な場所に印刷されることで，DVIファ
イルを`dviselect'で再配列したり，紙を並べ変える必要が無くなりま す．

著者として，目次コマンドを好きなところに書くことが可能です．しかし，単に
マニュアルを印刷するだけのユーザは，たとえ著者が目次コマンドをドキュメン
トの最後に書いている場合でも，(ここで書かれているような，ほとんどの既存
のTexinfoドキュメントのように)目次をタイトルページの後に書きたいと思うか
もしれません．これは，`@setcontentsaftertitlepage'と/または，
`@setshortcontentsaftertitlepage'で指定することが可能です．最初の
ものは，`@end titlepage'の後に主な目次のみ印刷します．２番目のもの
は，短い目次と主な目次の両方を印刷します．どちらの場合でも，それに続く
`@contents'や`@shortcontents'は(`@end titlepage'がない
場合は)無視されます(`@end titlepage'．

  `@set...contentsaftertitlepage'を，ドキュメントの最初の方(例え
ば`@setfilename'の直後)に含める必要があります．ソースファイルの変
更無しでこれを指定するため`texi2dvi' (*note Format with
texi2dvi::)の使用を推奨します．例えば，以下のようにします．
     texi2dvi --texinfo=@setcontentsaftertitlepage foo.texi


File: texinfo-ja.info,  Node: File End,  Prev: Contents,  Up: Ending a File

ファイルの終りの`@bye'
======================

  `@bye'コマンドはTeXやInfoの書式化を終了します．ファイルの
`@bye'以下の書式化コマンドは読み込まれません．`@bye'は単独行
にすべきです．

  お望みなら，`@bye'行に注釈を続けてもかまいません．これらの注釈は書
式化されず，Infoや印刷されたマニュアルに現れません．それは，`@bye'
後のテキストが`@ignore'...`@end ignore'にあるかのように
なります．また，`@bye'行にEmacsに対するローカルな変数リストを続け
てもかまいません．詳細は，*Note Using Local Variables and the Compile
Command: Compile-Command.


File: texinfo-ja.info,  Node: Structuring,  Next: Nodes,  Prev: Ending a File,  Up: Top

章の構造
********

  "章の構造化"コマンドは，ドキュメントを，章，セクション，サブセクショ
ン，そしてサブサブセクションの階層構造に分けます．これらのコマンドは，大
きな見出しを生成します．それらは，印刷されたマニュアルの目次の情報も提供
します(*note Generating a Table of Contents: Contents.)．

  章の構造化コマンドはInfoノード構造を作成しないので，通常は`@node'
コマンドをそれぞれの章の構造化コマンドの直前に書くべきです (*note
Nodes::)．ノードの構造化コマンドを使用せず章の構造化コマンドを使
用するのは，おそらく，相互参照を含まないドキュメントやInfo形式に変換しな
いドキュメントを書く場合だけでしょう．

印刷可能なドキュメントではなく，InfoファイルのためだけにTexinfoファイル
を書くことはおそらくないでしょう．そうする場合でも，章の構造化コマンドを
それぞれのノードの見出しを作成するために -- 不要ですが -- 書いてもかま
いません．

* Menu:

* Tree Structuring::            A manual is like an upside down tree ...
* Structuring Command Types::   How to divide a manual into parts.
* makeinfo top::                The `@top' command, part of the `Top' node.
* chapter::
* unnumbered & appendix::
* majorheading & chapheading::
* section::
* unnumberedsec appendixsec heading::
* subsection::
* unnumberedsubsec appendixsubsec subheading::
* subsubsection::               Commands for the lowest level sections.
* Raise/lower sections::        How to change commands' hierarchical level.


File: texinfo-ja.info,  Node: Tree Structuring,  Next: Structuring Command Types,  Up: Structuring

セクションのツリー構造
======================

Texinfoファイルは通常，章，セクション，サブセクション，そしてそのような
ものからなる，本のような構造をしています．この構造は，上に根があり，レベ
ルに対応した，章，セクション，サブセクション，そしてサブサブセクションを
持つ木(または，さかさまの木)のように見えます．

それぞれ２つのセクションを持つ章が３つあるTexinfoファイルの図は以下のよう
になります．

                                       Top
                                        |
                  ---------------------------------------------
                 |                      |                      |
                1 章                   2 章                   3 章
                 |                      |                      |
            -----------            -----------            -----------
           |           |          |           |          |           |
      セクション  セクション セクション  セクション セクション  セクション
          1.1         1.2        2.1         2.2        3.1         3.2

  この構造を持つTexinfoファイルで，2章は以下のように開始します．

     @node    Chapter 2,  Chapter 3, Chapter 1, top
     @chapter Chapter 2

  章の構造化コマンドは以下のセクションで述べています．`@node'と
`@menu'コマンドは以下の章で述べています．(*Note Nodes::.  そして，
*Note Menus::を参照してください．)


File: texinfo-ja.info,  Node: Structuring Command Types,  Next: makeinfo top,  Prev: Tree Structuring,  Up: Structuring

構造化コマンドの形式
====================

章を構造化するコマンドは，４つのグループ，またはシリーズに分類され，それ
ぞれは，章，セクション，サブセクション，そしてサブサブセクションの階層レ
ベルに対応する構造化コマンドを含んでいます．

  ４つのグループは，`@chapter'シリーズ，`@unnumbered'シリーズ，
`@appendix'シリーズ，そして`@heading'シリーズです．

それぞれのコマンドは，印刷されたページやInfoファイルで異なるタイトルを生
成します．いくつかのコマンドのみ，印刷された本やマニュアルの目次でリスト
アップされるタイトルを持ちます．

   * コマンドの`@chapter'と`@appendix'シリーズは，印刷されたもの
     や目次に番号や文字が付いた項目を生成します．

   * コマンドの`@unnumbered'シリーズは，印刷されたものや目次に番号無し
     の項目を生成します．特別な使用法がある`@top'コマンドは，このシリー
     ズのメンバーです(*note `@top': makeinfo top.)．

   * コマンドの`@heading'シリーズは，目次に現れない番号付けされない見出
     しを生成します．見出しコマンドは新しいページを開始しません．

   * `@majorheading'コマンドは，`@chapheading'の使用と似た結果を
     生成しますが，見出しの前に大きな縦方向の空白を生成します．

   * `@setchapternewpage'コマンドでは，`@chapter'，
     `@unnumbered'，そして`@appendix'コマンドは，印刷されたマニュ
     アルで新しいページを開始します．`@heading'コマンドではそうなりませ
     ん．

  ４つの章の構造化コマンドのグループは以下のようになります．

                                                            改ページ無し
番号付き       番号無し               文字と番号            番号無し
目次にある     目次にある             目次にある            目次から削除
               `@top'                                       `@majorheading'
`@chapter'     `@unnumbered'          `@appendix'           `@chapheading'
`@section'     `@unnumberedsec'       `@appendixsec'        `@heading'
`@subsection'  `@unnumberedsubsec'    `@appendixsubsec'     `@subheading'
`@subsubsection'`@unnumberedsubsubsec' `@appendixsubsubsec'  `@subsubheading'


File: texinfo-ja.info,  Node: makeinfo top,  Next: chapter,  Prev: Structuring Command Types,  Up: Structuring

`@top'
======

  `@top'コマンドは，Texinfoファイルの最初の`@node Top'行の後に
使用している特別なセクションコマンドです．`@top'コマンドは，
`makeinfo'フォーマッタに`Top'ノードを伝え，マニュアルで暗黙のポイン
タを使用する場合，それはノードツリーのルートとして使用することが可能です．
`@unnumbered'(*note `@unnumbered' and `@appendix': unnumbered &
appendix.)の植字効果と同じです．詳細は，*Note The `@top' Command:
makeinfo top commandを参照してください．

  `@top'ノードとそのメニュー(がある場合)は，InfoとHTML出力のみに現れ，
TeXに現れないようにするため，慣習で，`@ifnottex'環境になります．


File: texinfo-ja.info,  Node: chapter,  Next: unnumbered & appendix,  Prev: makeinfo top,  Up: Structuring

`@chapter'
==========

  `@chapter'はドキュメントの章を識別します．行の最初にコマンドを，同
じ行に続けて章のタイトルを書いてください．

  例えば，このマニュアルのこの章は，"章の構造(Chapter Structuring)"とい
う項目です．`@chapter'行は以下のようになります．

     @chapter Chapter Structuring

  TeXでは，`@chapter'コマンドはドキュメントに章を作成し，章のタイ
トルを指定します．章は自動的に番号付けされます．

  Infoでは，`@chapter'コマンドはタイトルを単独行に現し，行の下にはア
スタリスクの挿入があります．このため，Infoで上の例は以下の出力を生成しま
す．

     Chapter Structuring
     *******************

  Texinfoはコマンド`@centerchap'も提供していて，それは
`@unnumbered'に似ていますが，印刷物でその引数を中央揃えします．こ
の種の形式上の選択は，通常Texinfoでは提案されません．


File: texinfo-ja.info,  Node: unnumbered & appendix,  Next: majorheading & chapheading,  Prev: chapter,  Up: Structuring

`@unnumbered'と`@appendix'
==========================

  `@unnumbered'コマンドを，印刷されたマニュアルであらゆる種類の数字
が付かない章を作成するために使用してください．`@appendix'コマンド
を，印刷されたマニュアルで数字の代わりに文字でラベルが付く付録を作成する
ために使用してください．

  Infoファイル出力に対し，`@unnumbered'と`@appendix'コマンドは，
`@chapter'と同じです．タイトルは単独行で印刷され，下にアスタリスク
の行が付きます．(*Note `@chapter': chapter.)

  付録や番号を付けない章を作成するため，章の作成のように`@appendix'
や`@unnumbered'コマンドを行の最初から書き，同じ行にタイトルを続け
てください．


File: texinfo-ja.info,  Node: majorheading & chapheading,  Next: section,  Prev: unnumbered & appendix,  Up: Structuring

`@majorheading'，`@chapheading'
===============================

  `@majorheading'と`@chapheading'コマンドで，ドキュメントの本
体に章のような見出しを書き出します．

  しかし，いずれのコマンドもTeXに番号付の見出しや目次項目を生成させませ
ん．また，どちらのコマンドも，TeXに印刷されたマニュアルで新しいページ
を開始させません．

  TeXでは，`@majorheading'コマンドは，`@chapheading'コマン
ドが生成するより大きな縦方向の空白を生成します．

  Infoでは，`@majorheading'と`@chapheading'コマンドは
`@chapter'と同じで，下にアスタリスクの行が付いた単独行にタイトルを
出力します．(*Note `@chapter': chapter.)


File: texinfo-ja.info,  Node: section,  Next: unnumberedsec appendixsec heading,  Prev: majorheading & chapheading,  Up: Structuring

`@section'
==========

  印刷されたマニュアルでは，`@section'コマンドは章の中の番号付きのセ
クションとなります．セクションのタイトルは目次に現われます．Infoでは，
`@section'コマンドは`='で下線を引かれたテキストをタイトルとし
て提供します．

  このセクションは，`@section'コマンドが前置されていて，Texinfoファ
イルでは以下のように見えます．

     @section @code{@@section}

  セクションを作成するため，`@section'コマンドを行の最初に書き，同じ
行にセクションのタイトルを続けてください．

  このため，以下のようにします．

     @section This is a section

以下を生成します．

     This is a section
     =================

Infoでは，上記のようになります．


File: texinfo-ja.info,  Node: unnumberedsec appendixsec heading,  Next: subsection,  Prev: section,  Up: Structuring

`@unnumberedsec'，`@appendixsec'，`@heading'
============================================

  `@unnumberedsec'，`@appendixsec'，そして`@heading'コマ
ンドはそれぞれ，`@section'コマンドの，番号無し，付録のようなもの，
そして見出しのようなものと同じです．(*Note `@section': section.)

`@unnumberedsec'
     `@unnumberedsec'コマンドは，番号無しの章の中や，通常の章や付録の中
     で，番号無しのセクションを提供するために使用できます．

`@appendixsec'
`@appendixsection'
     `@appendixsection'は，`@appendixsec'コマンドの長い綴です．２
     つは同じです．

     慣習的に，`@appendixsec'や`@appendixsection'コマンドは，付録
     でのみ使用します．

`@heading'
     `@heading'コマンドは，章の形式の見出しで目次に現われないものに対し
     て，希望の場所でどこで使用してもかまいません．


File: texinfo-ja.info,  Node: subsection,  Next: unnumberedsubsec appendixsubsec subheading,  Prev: unnumberedsec appendixsec heading,  Up: Structuring

`@subsection'コマンド
=====================

サブセクションとセクションの関係は，セクションと章の関係のようなものです．
(*Note `@section': section.)Infoで，サブセクションのタイトルは，
`-'で下線が引かれます．例えば，以下のようになります．

     @subsection This is a subsection

以下を生成します．

     This is a subsection
     --------------------

印刷されたマニュアルでは，サブセクションは目次にリストアップされ，3レベ
ルの深さで番号が付きます．


File: texinfo-ja.info,  Node: unnumberedsubsec appendixsubsec subheading,  Next: subsubsection,  Prev: subsection,  Up: Structuring

`@subsection'のようなコマンド
=============================

  `@unnumberedsubsec'，`@appendixsubsec'，そして
`@subheading'コマンドは，それぞれ，`@subsection'コマンドの，
番号無し，付録のようなもの，そして見出しのようなものと同じです． (*Note
`@subsection': subsection.)

  Infoでは，`@subsection'のようなコマンドはハイフンで下線が引かれた
タイトルを生成します．印刷されたマニュアルでは，`@subheading'コマ
ンドは，番号無しのものと目次に現われないもの以外サブセクションのような見
出しを生成します．同様に，`@unnumberedsubsec'コマンドは，サブセク
ションに似た番号がない見出しを生成し，`@appendixsubsec'コマンドは，
文字と数字でラベルが付いたサブセクションのような見出しを生成します．これ
らのコマンドは両方とも目次に現われる見出しを生成します．


File: texinfo-ja.info,  Node: subsubsection,  Next: Raise/lower sections,  Prev: unnumberedsubsec appendixsubsec subheading,  Up: Structuring

`subsub'コマンド
================

Texinfoでの4番目以下のレベルのセクションコマンドは，`subsub'コマンドです．
以下のものがあります．

`@subsubsection'
     サブサブセクションとサブセクションの関係は，サブセクションとセクションの
     関係のようなものです．(*Note `@subsection': subsection.)印刷さ
     れたマニュアルで，サブサブセクションのタイトルは目次に現われ，４番目の深
     さのレベルで番号を付けられます．

`@unnumberedsubsubsec'
     番号付けされていないサブサブセクションのタイトルは，印刷されたマニュアル
     の目次に現われますが，番号はありません．それ以外で，番号付けされていない
     サブサブセクションはサブサブセクションと同じです．実際にInfoでは，番号付
     けされていないサブサブセクションは，普通のサブサブセクションのように見え
     ます．

`@appendixsubsubsec'
     慣習的に，付録コマンドは付録のためのみに使用され，印刷されたマニュアルで
     は文字と番号が適切に付けられます．それらは目次にも現われます．実際にInfo
     では，付録のサブサブセクションは普通のサブサブセクションのように見えます．

`@subsubheading'
     `@subsubheading'コマンドは，目次に現われない小さい見出しが必要なあ
     らゆる場所で使用できます．実際にInfoでは，サブサブ見出しは普通のサブサブ
     セクションの見出しのように見えます．

Infoでは，`subsub'タイトルはピリオドで下線が引かれます．例えば以下のよう
にします．

     @subsubsection This is a subsubsection

以下を生成します．

     This is a subsubsection
     .......................


File: texinfo-ja.info,  Node: Raise/lower sections,  Prev: subsubsection,  Up: Structuring

`@raisesections'と`@lowersections'
==================================

  `@raisesections'と`@lowersections'コマンドは，章，セクション，
サブセクションのようなものの，階層的レベルをあげたり下げたりします．
`@raisesections'コマンドは，セクションを章，サブセクションをセクショ
ンなどのように変更します．`@lowersections'コマンドは，章をセクショ
ン，セクションをサブセクションなどのように変更します．

他のTexinfoファイルの内部ファイルやインクルードファイルとなる，外部や単
独のTexinfoファイルとして書かれているテキストを含める場合，
`@lowersections'コマンドは役に立ちます．ファイルの最初にコマンドを
書くことで，すべての`@chapter'コマンドは`@section'コマンドで
あるかのように書式化され，すべての`@section'コマンドは
`@subsection'コマンドであるかのように書式化される等のようになりま す．

  `@raisesections'は，章の構造階層でコマンドを１レベルあげます．

       変更前           変更後
     @subsection     @section,
     @section        @chapter,
     @heading        @chapheading,
              等々

  `@lowersections'は，章の構造階層でコマンドを１レベル下げます．

       変更前           変更後
     @chapter        @section,
     @subsection     @subsubsection,
     @heading        @subheading,
              等々

  `@raisesections'や`@lowersections'コマンドは，Texinfoファイ
ルのそれ以降の章の構造化コマンドのみを変更します．`@raisesections'
や`@lowersections'コマンドは単独行に書いてください．

  `@lowersections'コマンドは，`@raisesections'コマンドでキャン
セルされ，逆も同様になります．一般的に，コマンドは以下のように使用します．

     @lowersections
     @include somefile.texi
     @raisesections

  `@raisesections'コマンドが無い場合，ドキュメントのそれ以降全てのセ
クションはレベルが下がります．

コマンドの繰り返しの使用で，階層レベルは一度に１ステップづつ，上がったり
下がったりし続けます．

`章'を上に上げようとすると，章コマンドを再生成します．`サブサブセクショ
ン'を下に下げようとすると，サブサブセクションコマンドを再生成します．


File: texinfo-ja.info,  Node: Nodes,  Next: Menus,  Prev: Structuring,  Up: Top

ノード
******

  "ノード"はTexinfoファイルの主要な部分です．それらは，それ自身が階層
的ではなく，ファイル構造でもありません．ノードは，他のノードの名前を持つ
"ノードポインタ"を含み，ノードをリストアップしている"メニュー"
を含めることも可能です．Infoでは，移動コマンドで指示されたノードやメニュー
のノードリストへ移動することが可能です．ノードポインタとメニューは，Info
ファイルに，章，セクション，サブセクション等のような構造を提供していて，
それらは印刷された本に構造を提供しているものに似ています．

* Menu:

* Two Paths::                   Different commands to structure
                                  Info output and printed output.
* Node Menu Illustration::      A diagram, and sample nodes and menus.
* node::                        Creating nodes, in detail.
* makeinfo Pointer Creation::   Letting makeinfo determine node pointers.
* anchor::                      Defining arbitrary cross-reference targets.


File: texinfo-ja.info,  Node: Two Paths,  Next: Node Menu Illustration,  Up: Nodes

２つのパス
==========

ノードとメニューコマンドと章の構造化コマンドは，専門的にはお互い独立して
います．

   *
     Infoでは，ノードとメニューコマンドは構造を提供しています．章の構造化コマ
     ンドは，下線で区切られた見出しを生成します --
     章ではアスタリスク，セク
     ションではハイフンのようになっています．それ以外は何もしません．

   *
     TeXでは，章の構造化コマンドは章とセクション番号と目次を生成します．ノー
     ドとメニューコマンドは，相互参照の情報を提供します．それ以外は何もしませ
     ん．

ノードポインタとメニューを，Infoファイルを好きなように構造化するために使
用することが可能です．Texinfoファイルで，Info出力が印刷物と異なるように
書くことも可能です．しかし，ほとんど全てのTexinfoファイルは，Info出力の
構造が印刷物の構造に対応するように書かれています．そうしなければ，読者は
不便で理解不能になります．

一般に，印刷物は章が主要な大枝でそこからセクションが枝を出している木のよ
うな階層構造です．同様に，ノードポインタとメニューは，Info出力で一致する
構造を作成するように組織化されています．


File: texinfo-ja.info,  Node: Node Menu Illustration,  Next: node,  Prev: Two Paths,  Up: Nodes

ノードとメニューの図
====================

前で示した，章が３つでそれぞれが２つのセクションを含むTexinfoファイル図
の，コピーは以下のようになります．

  "root"は図の最上部で，"leaves"が最下部です．これはそのような図を書く
慣習的な方法です．それは，さかさまの木を描きます．このため，ルートノード
は`Top'ノードと呼ばれ，`Up'ノードはルートに近い方向へ導きます．

                                       Top
                                        |
                  ---------------------------------------------
                 |                      |                      |
                1 章                   2 章                   3 章
                 |                      |                      |
            -----------            -----------            -----------
           |           |          |           |          |           |
      セクション  セクション セクション  セクション セクション  セクション
          1.1         1.2        2.1         2.2        3.1         3.2

  ２章を開始するため，完全に書かれたコマンドは以下のようになります．

     @node     Chapter 2,  Chapter 3, Chapter 1, Top
     @comment  node-name,  next,      previous,  up

この`@node'行は，このノード名が"Chapter 2"で，`Next'ノードが "Chapter
3"で，`Previous'ノードが"Chapter 1"で，`Up'ノードが"Top"
だということを告げています．ドキュメントが階層的に組織化されている場合
(*note makeinfo Pointer Creation::)，これらのノード名を書くことを省略可
能ですが，ポインタの関係は得られます．

     *注意してください:*`Next'は，マニュアルで同じ階層レベルの次のノー
     ドを参照し，それは，Texinfoファイル内での次のノードである必要はありませ
     ん．Texinfoファイルでは，次のノードは下のレベルかもしません --
     例えば，
     セクションレベルノードは，章レベルのノードに続くことが多くあります．
     `Next' と`Previous'は，_同じ_階層レベルのノードを参照します．(`Top'
     ノードはこの規則の例外です．`Top'ノードはそのレベルでの唯一のノードなの
     で，`Next'は，以下にある最初のノードを参照し，それは通常，章や章レベルの
     ノードです．)

Infoを使用して，セクション2.1と2.2に行くため，2章の内部にメニューが必要
です．(*Note
Menus::.)以下のように，セクション2.1をはじめる前に，メニュー
を書きます．

         @menu
         * Sect. 2.1::    Description of this section.
         * Sect. 2.2::
         @end menu

  セクション2.1に対して，以下のように書いてください．

         @node     Sect. 2.1, Sect. 2.2, Chapter 2, Chapter 2
         @comment  node-name, next,      previous,  up

Info書式では，ノードの`Next'と`Previous'ポインタは通常，同じレベルの他の
ノードへ導きます -- 章から章や，セクションからセクションのようになりま
す(ここまで見てきたように，`Previous'ポインタが上を指すこともあります)．
`Up'ポインタは通常，上のレベルのノードへ導きます(`Top'ノードに近い方向で
す)．`Menu'は下のレベルのノードへ導きます(`leaves'に近い方向です)．(相互
参照は，あらゆるレベルのノードを指し示します．*Note Cross
References::を参 照してください．)

  通常，`@node'コマンドと章の構造化コマンドは，索引コマンドと一緒に
順番に使用されます．(`@node'行に，指し示すものを覚えておくためのコ
メント行を続けてもかまいません．)

  このマニュアルの"Ending a Texinfo File"と呼ばれる章の最初は以下のよう
になっています．これには，`@node'行，それに続くコメント行，
`@chapter'行，そして索引行があります．

     @node    Ending a File, Structuring, Beginning a File, Top
     @comment node-name,     next,        previous,         up
     @chapter Ending a Texinfo File
     @cindex Ending a Texinfo file
     @cindex Texinfo file ending
     @cindex File ending


File: texinfo-ja.info,  Node: node,  Next: makeinfo Pointer Creation,  Prev: Node Menu Illustration,  Up: Nodes

`@node'コマンド
===============

  "ノード"とは，`@node'コマンドで始まり，次の`@node'コマン
ドまで続くテキストの塊です．ノードの定義は章やセクションとは異なります．
章にセクションを含めてもかまいませんし，セクションにサブセクションを含め
てもかまいません．しかし，ノードにサブノードを含めることは不可能です．ノー
ドのテキストは，ファイルの次の`@node'コマンドまで続くだけです．ノー
ドは通常，章の構造化コマンドを１つだけ含み，それは`@node'行に続けま
す．一方，印刷物ではノードは相互参照としてのみ使用されるので，章やセクショ
ンに複数のノードを含めてもかまいません．実際，章は通常，それぞれのセクショ
ン，サブセクション，そしてサブサブセクションとなる複数のノードを含んでい
ます．

  ノードを作成するため，`@node'コマンドを行の最初に書き，カンマで分
離した４つの引数を同じ行の残りに続けてください．最初の引数は必要です．そ
れはノードの名前です．次の引数は，順番で，`Next'，`Previous'，そして`Up'
ポインタの名前で，Texinfoドキュメントが階層的に組織化されている場合，省
略可能です(*note makeinfo Pointer Creation::)．

好みにより，それぞれの名前の前にスペースを挿入してもかまいません．スペー
スは無視されます．ノードの名前と`Next'，`Previous'，そして`Up'ポインタの
名前を同じ行に書く必要があります．そうしない場合，書式化は失敗します．
(Infoのノードの詳細は，*note info: (info-ja)Top.)

  通常，章の構造化コマンド行を`@node'の直後に書き，例えば，それは
`@section'や`@subsection'です．(*Note Structuring Command Types::.)

     *注意してください:*GNU Emacs Texinfoモードの更新コマンドは，
     `@node'行が章の構造化コマンドに続いているTexinfoファイルでのみ動作
     します．*Note Updating Requirements::.

  TeXでは，相互参照で使用する名前を識別するために`@node'行を使用
します．このため，`@node'行を印刷のための書式化を行いたいTexinfo
ファイルに，たとえInfoで書式化するつもりがなくても書く必要があります．
(相互参照は，この文章の終りにあるようなもので，`@xref'とそれに関連
するコマンドで作成されます．*Note Cross
References::を参照してください．)

* Menu:

* Node Names::                  How to choose node and pointer names.
* Writing a Node::              How to write an `@node' line.
* Node Line Tips::              Keep names short.
* Node Line Requirements::      Keep names unique, without @-commands.
* First Node::                  How to write a `Top' node.
* makeinfo top command::        How to use the `@top' command.


File: texinfo-ja.info,  Node: Node Names,  Next: Writing a Node,  Up: node

ノードとポインタの名前の選択
----------------------------

ノード名はノードの識別子です．ポインタで他のノードに行くことが可能で，そ
れはこれらのノード名から成り立ちます．

通常，ノードの`Up'ポインタは，そのノードを記述しているメニューがあるノー
ドの名前を含みます．ノードの`Next'ポインタは，メニューでそのノードの次の
ノード名を含み，`Previous'ポインタは，メニューでそのノードの前のノード名
を含みます．ノードの`Previous'ノードが`Up'ノードと同じとき，両方のノード
は同じノード名を示します．

通常，Texinfoファイルの最初のノードは`Top'ノードで，その`Up'と`Previous'
ポインタは`dir'ファイルを指し示し，それはInfo全てのメインメニューを
含んでいます．

`Top'ノード自身は，マニュアルのメインまたはマスターメニューを含みます．
また，`Top'ノードに簡単なマニュアルの記述を含めると役に立ちます．Texinfo
ファイルの最初のノードの書き方の詳細は，*Note First Node::.

明示的に全てのポインタを指定したときでも，任意の順番でTexinfoソースファ
イルにノードを書くことができるということを意味するわけではありません！
TeXは，ノードポインタにかかわらずファイルを順番に処理するので，印刷物
に現したい順番にノードを書く必要があります．


File: texinfo-ja.info,  Node: Writing a Node,  Next: Node Line Tips,  Prev: Node Names,  Up: node

`@node'行の書き方
-----------------

  `@node'行の最も簡単な書き方は，`@node'を行の最初に書き，その
後にノード名を以下のように書く方法です．

     @node NODE-NAME

  GNU
Emacsを使用している場合，ポインタ名を挿入するために，Texinfoモードで
ノードの更新コマンドが提供されています．また，ポインタをTexinfoファイル
の外に置き，`makeinfo'でノードポインタを作成するInfoファイルに挿入
することも可能です．(*Note Texinfo Mode::.  また*Note makeinfo Pointer
Creation::を参照してください．)

代わりに，`Next'，`Previous'，そして`Up'ポインタを独自に挿入することも可
能です．こうする場合，Texinfoモードでキーボードコマンドの`C-c C-c n'
を使用すると便利だと思います．このコマンドは，`@node'と，適切な順
番でポインタ名をリストアップしたコメント行を挿入します．コメント行は，引
数がどのポインタに対するものかを，追跡記録するのに役立ちます．このコメン
ト行は，Texinfoに精通していない場合，特に便利です．

`Next'，`Previous'，そして`Up'ポインタがある，完全に書かれたノード行のテ
ンプレートは以下のようになります．

     @node NODE-NAME, NEXT, PREVIOUS, UP

  希望があれば，初稿では`@node'行を完全に無視することが可能で，その
後で`texinfo-insert-node-lines'コマンドを`@node'行を作成する
ために使用してください．しかし，この方法はお勧めしません．その部分を書く
と同時にそれ自身のノードに名前を付ける方が良く，そうすることで相互参照を
作成しやすくなります．相互参照が多数あることは，良いInfoファイルの特徴と
して特に重要です．

  `@node'行を挿入した後，すぐに@-コマンドを章やセクションに対し書き，
名前を挿入するべきです．次に(これが肝心！)，いくつかの索引項目を書いてく
ださい．通常，少なくとも２つ書き，索引でノードを参照する方法として，４つ
または５つあることもよくあります．これで，人々がノードをより容易に見つけ
られるようになります．


File: texinfo-ja.info,  Node: Node Line Tips,  Next: Node Line Requirements,  Prev: Writing a Node,  Up: node

`@node'行の助言
---------------

  ここに３つの提案があります．

   * 有益だが短いノード名を選んでみてください．

     Infoファイルでは，ファイル名，ノード名，そしてポインタ名は全て１行に挿入
     され，それはウィンドウの右端まで行くかもしれません．(これは，Infoの問題
     ではありませんが，醜いです．)

   *
     名前の始まりが他とは違うノード名を選んでみてください．これで，Infoの自動
     的な名前補完が使用しやすくなります．

   * 慣習的に，ノード名は，セクションや章のタイトルで --
     最初と重要な単語が 大文字になるように --
     大文字になります．他は違います．


File: texinfo-ja.info,  Node: Node Line Requirements,  Next: First Node,  Prev: Node Line Tips,  Up: node

`@node'行の必要事項
-------------------

  `@node'行でいくつかある必要事項は以下のようなものです．

   *
     全てのノード名は，単一のInfoファイルで唯一のものとする必要があります．

     重複するとInfo移動コマンドで混乱します．例えば，概要で全ての章を終える場
     合，それぞれの概要のノードを異なる名前にする必要があるという意味です．そ
     れぞれを１つの"概要"とすることはできません．しかし，章，セクション，そ
     してそれに類するもののタイトルは重複してもかまいません．このため，これら
     のセクションに対するノード名が全て異なっている限り，本のそれぞれの章を
     "概要"というセクションで終えることができます．

   * ポインタ名は，ノード名にする必要があります．

     ポインタが示すノードは，そのポインタを含むノードの前でも後でもかまいませ
     ん．

   * 一般に，ノード名で使用される@-コマンドでInfoが混乱するので，それは
     避けるべきです．これには，`@'と`{'のような，`@'を用い
     たエスケープされた句読点文字も含まれます．これが役に立つときは滅多にない
     ので，Texinfoはノード名での@-コマンド使用に対するサポートを制限して
     います．*Note Pointer Validation::を参照してください．

     このため，`@chapter'と呼ばれるセクションの始めは，以下のようになり
     ます．

          @node  chapter, unnumbered & appendix, makeinfo top, Structuring
          @comment  node-name,  next,  previous,  up
          @section @code{@@chapter}
          @findex chapter

   * `(foo)bar'のようなノード名は，InfoリーダーがInfoファイル`foo'
     にあるノード`bar'だと解釈するので，ノード名でカッコを使用することは
     できません．

   *
     残念ながら，ピリオド，カンマ，コロン，またはアポストロフィをノード名に使
     用することはできません．これらでTeXやInfoフォーマッタが混乱します．

     例えば，以下のようなセクションタイトルにします．

          @code{@@unnumberedsec}, @code{@@appendixsec}, @code{@@heading}

     対応するノード名は以下のようになります．

          unnumberedsec appendixsec heading

   * 大文字小文字の区別は重要です．


File: texinfo-ja.info,  Node: First Node,  Next: makeinfo top command,  Prev: Node Line Requirements,  Up: node

最初のノード
------------

  Texinfoファイルの最初のノードは，インクルードファイルは例外として
(*note Include Files::)，"トップ"ノードです．トップノードには，ドキュ
メントの短い概要，コピーの許可，そしてマスターメニューを含めるべきです．
Topノードの内容と例の詳細は，*Note The Top Node::.

  Topノードで使用されているノードポインタの記述は以下のようになります．

   * トップノードは(`top'または`Top'と命名する必要があり)，`Up'ノー
     ドとして他のファイルのノード名を持つべきで，それはこのファイルへ導くメ
     ニューがあります．カッコでファイルを指定してください．

     通常，すべてのInfoファイルは，同じInfoディレクトリツリーにインストールさ
     れます．この状況では，Topノードの親として`(dir)'を使用してください．
     これは`(dir)top'を短くしたもので，`dir'のTopノードを指定し，そ
     れにはInoシステム全体のメインメニューが含まれています．

   *
     一方，ユーザに対し動作が紛らわしいので，トップノードの`Previous'ノードを
     `(dir)'で定義しないでください．トップノードにいて，そこから戻るため
     に<DEL>を押した場合，`dir'ファイルの他の項目の真ん中に戻るので
     すが，それは読みたいものではないはずです．

   * Topノードの`Next'ノードは，ドキュメントの最初の章にすべきです．


  Infoファイルの`info'ディレクトリへのインストールの詳細は， *Note
Installing an Info File::.

具体的には，明示的なポインタを示す例は以下のようになります(texinfoモード
のコマンドで自動的に管理することが可能です)．

または，ポインタを完全に無くし，ツールに暗黙的に定義させることも可能です．
これは推奨されます．このため以下のようにします．

     @node Top


File: texinfo-ja.info,  Node: makeinfo top command,  Prev: First Node,  Up: node

`@top'セクションコマンド
------------------------

  特別なセクションコマンド`@top'は，`@node Top'行とともに使用
すべきです．`@top'セクションコマンドは，それがファイルの`Top'ノー
ドだという印を付けるよう`makeinfo'に伝えます．それは，ノードポイン
タを自動的に挿入するために`makeinfo'が必要とする情報を提供します．
`@top'コマンドを行の最初に書き，直後に`@node Top'行を続けて
ください．`@top'コマンドと同じ行の残りの部分にタイトルを書いてくだ
さい．

  Infoでは，`@top'セクションコマンドは，タイトルが単独行に現れるよう
にし，他のセクションコマンドと同様にアスタリスクを下に挿入します．

  TeXと`texinfo-format-buffer'では，`@top'セクションコマンド
は`@unnumbered'とほとんど同義語です．これらのフォーマッタは，
`@top'コマンドを要求せず，特別なことは何もしません．これらのフォー
マッタを使用するとき，`@chapter'や`@unnumbered'を `@node
Top'行の後に使用することも可能です．また，ポインタとメニュー
を作成更新するため，Texinfo更新コマンドを使用する時に`@chapter'や
`@unnumbered'を使用することも可能です．

  このため，具体的には，Topノードは以下のようにして開始します．

     @node Top
     @top Your Manual Title


File: texinfo-ja.info,  Node: makeinfo Pointer Creation,  Next: anchor,  Prev: node,  Up: Nodes

`makeinfo'でポインタを作成する
==============================

  `makeinfo'プログラムは，階層的に組織化されているファイルに対し，自
動的にノードポインタを定義する機能があります．

この機能を利用するとき，`Next'，`Previous'，そして`Up'ポインタを，ノード
名の後に書く必要がありません．しかし，`@chapter'や`@section'
のようなセクションコマンドを，それぞれの切り詰めた`@node'行の直後
の行に書く必要があります(例外は，コメント行が間に入ることです)．

  さらに，`Top'`@node'行に，ファイルの`Top'ノードに印を付ける
`@top'で始まる行を続ける必要があります．*Note `@top': makeinfo top.

最後に，(`Top'ノード以外の)それぞれのノード名を，ノードの階層レベルの上
に，１つかそれ以上の階層レベルとなるメニューに書く必要があります．

  この`makeinfo'のノードポインタ挿入の機能は，手動やTexinfoモードのコ
マンドでメニューやポインタを更新する必要から開放します．(*Note Updating
Nodes and Menus::.)

ほとんどの状況で，この機能の利点を利用し，冗長にノードポインタを指定した
くはないでしょう．しかし，Texinfoドキュメントは，階層的に組織化されてい
ることや実際にセクションコマンドが完全に含まれていることを要求していませ
ん．例えば，印刷を目的としていないドキュメントの場合です．これらの状況で
は，明示的にポインタを指定する必要があります．


File: texinfo-ja.info,  Node: anchor,  Prev: makeinfo Pointer Creation,  Up: Nodes

`@anchor':相互参照のターゲット任意に定義する
============================================

  "anchor"は，相互参照が参照可能な，まるでノードのようなドキュメント内
の位置です．`@anchor'コマンドでアンカーを作成し，普通のカッコで分
離された引数としてラベルを与えます．例えば，以下のようになります．

     This marks the @anchor{x-spot}spot.
     ...
     @xref{x-spot,,the spot}.

以下を生成します．

     This marks the spot.
     ...
     See [the spot], page 1.

  御覧のように，`@anchor'コマンド自身は出力を生成しません．この例は
アンカー`x-spot'だけを，単語`スポット'の直前に定義します．その後で，後述
の`@xref'や，その他の相互参照を使用して参照することが可能になりま
す．相互参照の詳細は，*Note Cross References::.

  `@anchor'コマンドを参照する位置の直前に置くのが最善です．そうする
ことで，読者の目はアンカーにジャンプしたとき正しいテキストに導かれます．
`@anchor'コマンドを単独行に置くことでソースの可読性が改善される場
合は，そうすることもできます．`@anchor'後のスペースは常に無視され ます．

アンカー名とノード名は衝突してはいけません．アンカーとノードは同じように
扱われることもあります．例えば，スタンドアローンInfoの`goto-node'コ
マンドは，アンカー名やノード名を引数としてとります． (*Note goto-node:
(info-stnd-ja)goto-node.)


File: texinfo-ja.info,  Node: Menus,  Next: Cross References,  Prev: Nodes,  Up: Top

メニュー
********

  "メニュー"は，従属的なノードへのポインタを含みます．(1) (*note
Menus-Footnote-1::)Infoでは，メニューをそのよ
うなノードへ行くために使用します．メニューは印刷されたマニュアルで効果が
なく，それらには現れません．

慣習で，メニューを使用する読者がそれ以降のテキストを見ない可能性があるの
で，メニューはノードの終りに置かれます．さらに，メニューがあるノードは多
くのテキストを含むべきではありません．多くのテキストとメニューがある場合
は，テキストのほとんどを -- 数行以外全て -- 新しいサブノードに移動して
ください．そうしない場合，数行しか表示できない端末を使用している読者は，
メニューとそれに関連するテキストが見えません．実際問題として，メニューは
ノードの最初の20行以内に配置すべきです．

* Menu:

* Menu Location::               Put a menu in a short node.
* Writing a Menu::              What is a menu?
* Menu Parts::                  A menu entry has three parts.
* Less Cluttered Menu Entry::   Two part menu entry.
* Menu Example::                Two and three part menu entries.
* Other Info Files::            How to refer to a different Info file.


File: texinfo-ja.info,  Node: Menus-Footnotes,  Up: Menus

  (1) メニュー
では，階層構造にかかわらずあらゆるノードへ行くことができます．異なるInfo
ファイルのノードへ行くことすら可能です．しかし，GNU Emacs Texinfoモード
の更新コマンドは，従属的なノードのメニューしか作成しません．慣習で，相互
参照は他のノードへの参照のために使用します．


File: texinfo-ja.info,  Node: Menu Location,  Next: Writing a Menu,  Prev: Menus,  Up: Menus

短いノードが必要なメニュー
==========================

メニューの前の短いテキストは，印刷されたマニュアルで不様に見えるかもしれ
ません．これを避けるため，メニューをそのノードの最初の方に書き，メニュー
を`@node'行で続け，その後で`@heading'行を`@ifinfo'と `@end
ifinfo'の間に書くことが可能です．こうすることで，
`@node'行のメニューとタイトルはInfoファイルでしか現れず，印刷され
たドキュメントには現れません．

  例えば，前の２つの段落は，Infoのみのメニュー`@node'行と見出しが続き，
以下のように見えます．

     @menu
     * Menu Location::             Put a menu in a short node.
     * Writing a Menu::            What is a menu?
     * Menu Parts::                A menu entry has three parts.
     * Less Cluttered Menu Entry:: Two part menu entry.
     * Menu Example::              Two and three part entries.
     * Other Info Files::          How to refer to a different
                                     Info file.
     @end menu
     
     @node Menu Location, Writing a Menu, , Menus
     @ifinfo
     @heading Menus Need Short Nodes
     @end ifinfo

このドキュメントのTexinfoファイルは，１ダース以上のこの手続きの例を含んで
います．１つはこの章の最初にあります．もう１つはこの章の最初にあります．


File: texinfo-ja.info,  Node: Writing a Menu,  Next: Menu Parts,  Prev: Menu Location,  Up: Menus

メニューを書く
==============

  メニューは，単独行の`@menu'コマンドと，それに続く項目行やメニュー
コメント行と，その後の単独行の`@end menu'コマンドから成り立ちます．

  メニューは，以下のようになります．

     @menu
     Larger Units of Text
     
     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                       several files at once.
     @end menu

  メニューでは，`* 'で始まる全ての行は"メニュー項目"です．(ア
スタリスクの後のスペースに注意してください．)`* 'で始まらない行
もメニューに現すこともできます．そのような行はメニュー項目ではなく，Info
ファイルに現れるメニューのコメント行になります．上記の例では， `Larger
Units of Text'はメニューのコメント行です．`* 'で始 まる２行はメニュー
項目です．メニューのスペース文字はそのまま維持されます．これで，メニュー
を望み通りに書式化できます．


File: texinfo-ja.info,  Node: Menu Parts,  Next: Less Cluttered Menu Entry,  Prev: Writing a Menu,  Up: Menus

メニューの部分
==============

  メニュー項目は，３つの部分があり，２番目のみ必要です．

  1. メニュー項目名(オプション)．

  2. ノード名(必須)．

  3. 項目の記述(オプション)．

  メニュー項目のテンプレートは以下のようになります．

     * MENU-ENTRY-NAME: NODE-NAME.   DESCRIPTION

メニュー項目名に，１つのコロンを続け，ノード名にタブ，カンマ，ピリオド，
または改行を続けてください．

  Infoでは，ユーザはノードを`m'(`Info-menu')コマンドで選択します．
メニュー項目名は，ユーザが`m'コマンドの後で入力するものです．

メニュー項目の３番目の部分は記述的な句または文です．メニュー項目名とノー
ド名は短い場合が多くなります．記述は，読者に何について書かれているノード
かを説明します．役立つ記述は，繰り返しではなくノード名への補完になります．
追加の記述は，２行以上に分けることができます．そうする場合，著作者は最初
(と他の全て)と同列にするより，２行目を字下げするほうを好みます．それはお
好みでお願いします．


File: texinfo-ja.info,  Node: Less Cluttered Menu Entry,  Next: Menu Example,  Prev: Menu Parts,  Up: Menus

バラバラでないメニュー項目
==========================

メニュー項目名とノード名が同じとき，行の最初でアスタリスクとスペースの直
後に名前を書き，名前に２つのコロンを続けることが可能です．

  例えば，以下のように書きます．

     * Name::                                    DESCRIPTION

以下の代わりです．

     * Name: Name.                               DESCRIPTION

メニューが見た目バラバラに散らばるので，可能な場合はノード名をメニュー項
目名として使用すべきです．


File: texinfo-ja.info,  Node: Menu Example,  Next: Other Info Files,  Prev: Less Cluttered Menu Entry,  Up: Menus

メニューの例
============

  Texinfoでは，メニューは以下のようになります．

     @menu
     * menu entry name: Node name.   A short description.
     * Node name::                   This form is preferred.
     @end menu

これは，以下を生成します．

     * menu:
     
     * menu entry name: Node name.   A short description.
     * Node name::                   This form is preferred.

  Texinfoファイルで見られる例は以下のようになります．

     @menu
     Larger Units of Text
     
     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                       several files at once.
     @end menu

これは，以下を生成します．

     * menu:
     Larger Units of Text
     
     * Files::                       All about handling files.
     * Multiples: Buffers.           Multiple buffers; editing
                                       several files at once.

  この例ではメニューに２つの項目があります．`Files'はメニュー項目とそ
の名前で参照されるノード名です．`Multiples'はメニュー項目名です．そ
れは，`Buffers'という名前のノードで参照します．`Larger Units of
Text'はコメントです．それはメニューには現れますが項目ではありません．

  `Files'や`Buffers'でファイル名が指定されていないので，それらは
同じInfoファイルでのノード名にする必要があります．(*note Referring to
Other Info Files: Other Info Files.)．


File: texinfo-ja.info,  Node: Other Info Files,  Prev: Menu Example,  Up: Menus

他のInfoファイルへの参照
========================

ノード名の直前のカッコにファイル名を書くことで，Infoの読者が他のInfoファ
イルのノードへ行くことを可能にするメニュー項目を作成することが可能です．
この場合，３つの部分のメニュー項目の書式を使用するべきで，それで読者はファ
イル名を入力することを省略できます．

  書式は，以下のようになります．

     @menu
     * FIRST-ENTRY-NAME:(FILENAME)NODENAME.     DESCRIPTION
     * SECOND-ENTRY-NAME:(FILENAME)SECOND-NODE. DESCRIPTION
     @end menu

  例えば，`Emacs Manual'で直接`Outlining'と`Rebinding'ノー
ドを参照するため，メニューを以下のように書きます．

     @menu
     * Outlining: (emacs)Outline Mode. The major mode for
                                       editing outlines.
     * Rebinding: (emacs)Rebinding.    How to redefine the
                                       meaning of a key.
     @end menu

ノード名をリストアップせずファイル名だけにする場合，Infoは`Top'ノードを
参照しているものと推測します．

  Infoのメインメニューを含む`dir'ファイルには，ファイル名のみを列挙し
たメニュー項目があります．これで，それぞれのInfoドキュメントの`Top'ノー
ドへ直接行くことができます(*note Installing an Info File::)．

  例えば，以下のようになります．

     * Info: (info).         Documentation browsing system.
     * Emacs: (emacs).       The extensible, self-documenting
                             text editor.

(Infoシステムのための`dir'のトップレベルディレクトリは，Texinfoファ
イルではなくInfoファイルですが，メニュー項目はどちらの形式のファイルでも
同じように見えます．)

  GNU Emacs
Texinfoモードでのメニュー更新コマンドは，現在のバッファのノー
ドでのみ動作するので，他のファイルを参照するメニューを作成するために使用
することは不可能です．そのようなメニューは手で書く必要があります．


File: texinfo-ja.info,  Node: Cross References,  Next: Marking Text,  Prev: Menus,  Up: Top

相互参照
********

  "相互参照"は，同じまたは異なるTexinfoファイルの他の部分へ読者を導く
ために使用します．Texinfoでは，ノードとアンカーが相互参照が参照する場所
です．

* Menu:

* References::                  What cross references are for.
* Cross Reference Commands::    A summary of the different commands.
* Cross Reference Parts::       A cross reference has several parts.
* xref::                        Begin a reference with `See' ...
* Top Node Naming::             How to refer to the beginning of another file.
* ref::                         A reference for the last part of a sentence.
* pxref::                       How to write a parenthetical cross reference.
* inforef::                     How to refer to an Info-only file.
* uref::                        How to refer to a uniform resource locator.


File: texinfo-ja.info,  Node: References,  Next: Cross Reference Commands,  Prev: Cross References,  Up: Cross References

参照されるもの
==============

いつもではありませんが，ほとんどの印刷されたドキュメントは順番に読むよう
に設計されています．人々は，必要なとき提出されるべき情報を見つけるために，
前後にページをめくるのが嫌になります．

しかしドキュメントには，現在の文脈に対しては詳しすぎたり主要でなかったり
する情報もあります．そのような情報へのアクセスを提供するため相互参照を使
用してください．また，オンラインヘルプシステムやリファレンスマニュアルは．
小説とは異なります．そのようなドキュメントを最初から最後まで順番に読む人
はほとんどいません．代わりに，人々は必要なところを拾い読みします．このた
め，そのようなものでは，読者が読まなかった可能性のある他の情報を見つける
とき役に立つ相互参照を多く含めるべきです．

印刷されたマニュアルでは，完全に他のマニュアルでない限り，相互参照は結果
としてページ参照となり，他のマニュアルの場合は相互参照はマニュアルの名前
になります．

  Infoでは，相互参照は結果としてInfoの`f'コマンドに続いて使用可能な項
目となります．(*note Some advanced Info commands: (info)Help-Adv.)

  様々な相互参照コマンドは，ノード(やアンカー *note `@anchor':
anchor.)を相互参照の位置を定義するために使用しま
す．これはInfoの環境の話で，そこでの相互参照は指定した場所に移動します．
TeXもノードを相互参照の位置を定義するために使用しますが，動作は明白で
はありません．TeXがDVIファイルを生成するとき，それは，それぞれのノー
ドのページを記録し参照を作成する際にページ番号を使用します．このため，印
刷されるだけのマニュアルを書くだけでオンラインで使用しない場合でさえ，相
互参照する場所に名前をつけるために`@node'行を書く必要があります．


File: texinfo-ja.info,  Node: Cross Reference Commands,  Next: Cross Reference Parts,  Prev: References,  Up: Cross References

様々な相互参照コマンド
======================

  ４つの様々な相互参照のコマンドがあります．

`@xref'
     印刷されたマニュアルでの`See ...'(1) (*note Cross Reference
     Commands-Footnote-1::)や，Infoでの相互参 照の`*Note NAME:
     NODE.'を告げる文を開始するために使用さ れます．

`@ref'
     文中や主に文の最後で使用します．Infoでは`@xref'と同じです．印刷さ
     れたマニュアルでは参照だけを生成し，前に`See'を生成しません．

`@pxref'
     Infoファイルや印刷された本に適した参照を生成するためカッコ内で使用します．
     印刷されたマニュアルでは小文字の`see'で始まります．(`p'は
     `parenthesis'です．)

`@inforef'
     Infoファイルでの参照を作成するために使用し，印刷されたマニュアルにはあり
     ません．

(`@cite'コマンドは，Infoと関係の無い本やマニュアルへの参照を作成す
るために使用され，それゆえ，指し示すノードはありません．*Note `@cite':
cite.)


File: texinfo-ja.info,  Node: Cross Reference Commands-Footnotes,  Up: Cross Reference Commands

  (1) 訳注:txi-??.texにより
変更可能です，以下の`see'や`See'も変更されます．しかし，基本的に前置に使
用されるため，日本語ではtexinfo.texも変更が必要です．


File: texinfo-ja.info,  Node: Cross Reference Parts,  Next: xref,  Prev: Cross Reference Commands,  Up: Cross References

相互参照の部分
==============

相互参照のコマンドは１つの引数のみを要求し，それは参照するノード名です．
しかし，相互参照コマンドは４つの追加の引数を含むことができます．これらの
引数を使用することで，Infoに対する相互参照名，トピックの記述や印刷物での
セクションのタイトル，異なるInfoファイルの名前，そして異なる印刷されたマ
ニュアルの名前を提供することが可能になります．

  簡単な相互参照の例は以下のようになります．

     @xref{Node name}.

これは，以下を生成します．

     *Note Node name::.

そして，以下を生成します．

     See Section NNN [Node name], page PPP.

  完全な５つの部分を持つ相互参照は以下のようになります．

     @xref{Node name, Cross Reference Name, Particular Topic,
     info-file-name, A Printed Manual}, for details.

これは，以下を生成します．

     *Note Cross Reference Name: (info-file-name)Node name,
     for details.

Infoではこうなります．

     See section "Particular Topic" in A Printed Manual, for details.

印刷された本ではこうなります．

  相互参照に対する５つの利用可能な引数は，以下の通りです．

  1.
     ノードやアンカー名です(必須)．これは，相互参照がたどっていく場所です．印
     刷されたドキュメントでは，ノードの場所は同じドキュメント内を参照するため
     だけのページ参照を提供します．

  2.
     相互参照名がノード名と異なっている場合のInfo参照に対する相互参照名です．
     この引数を含める場合，それは相互参照の最初の部分になります．通常省略され
     ます．

  3.
     トピックの記述やセクション名です．これはよくセクションのタイトルになりま
     す．これは印刷されたマニュアルでの参照名として使用されます．省略された場
     合，ノード名が使用されます．

  4.
     参照先が現在のファイルと異なる場合，参照先があるInfoファイル名です．Info
     リーダは自動的に追加するので，ファイル名の`.info'接尾子は不要です．

  5. 異なるTexinfoファイルで印刷されたマニュアル名です．

  完全な５つの引数を持つ相互参照のテンプレートは，以下のようになります．

     @xref{NODE-NAME, CROSS-REFERENCE-NAME, TITLE-OR-TOPIC,
     INFO-FILE-NAME, PRINTED-MANUAL-TITLE}.

１つ，２つ，３つ，４つ，そして５つの引数を持つ相互参照は，`@xref'の記述
に続けて，別々に記述されます．

  相互参照では，`@node'行と正確に同じ方法で，同じように大文字小文字
を使用して，ノード名を書いてください．そうしない場合，フォーマッタは参照
を見つけることができません．

  段落で相互参照を書くこともできますが，InfoとTeXが，それぞれの様々なコ
マンドの出力をどのようにして書式化するのかに注意してください．それは，
`@xref'を文の最初に書く．`@pxref'をカッコ内でのみ書くなどで す．


File: texinfo-ja.info,  Node: xref,  Next: Top Node Naming,  Prev: Cross Reference Parts,  Up: Cross References

`@xref'
=======

  `@xref'コマンドは文の最初での相互参照を生成します．Info書式化コマ
ンドはそれをInfo相互参照に変換し，Infoの`f'で他のノードへ直接行くこ
とが可能です．TeX植字コマンドは，それをページ参照や他の本やマニュアル
への参照に変換します．

* Menu:

* Reference Syntax::            What a reference looks like and requires.
* One Argument::                `@xref' with one argument.
* Two Arguments::               `@xref' with two arguments.
* Three Arguments::             `@xref' with three arguments.
* Four and Five Arguments::     `@xref' with four and five arguments.


File: texinfo-ja.info,  Node: Reference Syntax,  Next: One Argument,  Prev: xref,  Up: xref

参照のように見えるものと必要条件
--------------------------------

  よくあるInfo相互参照は，以下のようになります．

     *Note NODE-NAME::.

または，以下のようになります．

     *Note CROSS-REFERENCE-NAME: NODE-NAME.

TeXでは，相互参照は以下のようになります．

     See Section SECTION-NUMBER [NODE-NAME], page PAGE.

または，以下のようになります．

     See Section SECTION-NUMBER [TITLE-OR-TOPIC], page PAGE.

  `@xref'コマンドは，Infoファイルや印刷物でピリオドやカンマを相互参
照の終りに生成しません．ピリオドやカンマは自分で書く必要があります．
(1) (*note Reference Syntax-Footnote-1::)そうしない場合，参照の
終りを認識しません．(`@pxref'コマンドは異なる動作をします． *Note
`@pxref': pxref.)

     *注意してください:*ピリオドやカンマを，`@xref'に続ける
     *必要があります*．相互参照の終了で要求されます．このピリオドやカ
     ンマは，Infoファイルと印刷されたマニュアルの両方の出力に現れます．


  `@xref'はInfoをノード名で参照する必要があります．`@node'をノー
ドの定義に使用してください(*note Writing a Node::)．

  `@xref'はカッコ内に，カンマで分けられたいくつかの引数が続きます．
これらのカンマの前後の空白は無視されます．

相互参照はノード名のみ必要です．しかし，それは最大４つまで追加引数を含む
ことができます．これらの変数はそれぞれ，幾分異なるように見える相互参照を
生成します．

     *注意してください:*カンマは相互参照で引数を分離します．フォーマッ
     タがそれらをセパレータと間違えないように，タイトルや他の部分にそれらを含
     めるのを避けてください．


File: texinfo-ja.info,  Node: Reference Syntax-Footnotes,  Up: Reference Syntax

  (1) 訳注:日本語では句読点はカンマやピリオドではありません．この翻
訳では，全角のカンマとピリオドを使用しています．


File: texinfo-ja.info,  Node: One Argument,  Next: Two Arguments,  Prev: Reference Syntax,  Up: xref

１つの引数を用いた`@xref'
-------------------------

  `@xref'の最も簡単な形式は，同じInfoファイルの他のノード名を１つの引
数として持つものです．Infoフォーマッタは，Infoリーダが参照へジャンプでき
る出力を生成します．TeXはページとセクション番号を指定する出力を生成し
ます．

例えば，以下のようにします．

     @xref{Tropical Storms}.

これは，以下を生成します．

     *Note Tropical Storms::.

そして，以下を生成します．

     See Section 3.1 [Tropical Storms], page 24.

(前の例では，閉じカッコにピリオドが続くことに注意してください．)

  相互参照の後に，以下のように文節を書くことができます．

     @xref{Tropical Storms}, for more info.

それは，以下を生成します．

     *Note Tropical Storms::, for more info.

そして，以下を生成します．

     See Section 3.1 [Tropical Storms], page 24, for more info.

(前の例では，閉じカッコはカンマと文節が続き，それにはピリオドが続くこと
に注意してください．)


File: texinfo-ja.info,  Node: Two Arguments,  Next: Three Arguments,  Prev: One Argument,  Up: xref

２つの引数を用いた`@xref'
-------------------------

２つの引数を用いた場合，２番目はInfo相互参照の名前として使用され，一方，最
初のものは相互参照が示すノード名のままです．

テンプレートは以下のようになります．

     @xref{NODE-NAME, CROSS-REFERENCE-NAME}.

例えば，以下のようにします．

     @xref{Electrical Effects, Lightning}.

以下を生成します．

     *Note Lightning: Electrical Effects.

そして，以下を生成します．

     See Section 5.2 [Electrical Effects], page 57.

(前の例では，閉じカッコはピリオドが続き，ノード名が印刷され，相互参照は印
刷されないことに注意してください．)

  相互参照の後に，以下のように文節を続けることができます．

     @xref{Electrical Effects, Lightning}, for more info.

以下を生成します．
     *Note Lightning: Electrical Effects, for more info.

そして，以下を生成します．

     See Section 5.2 [Electrical Effects], page 57, for more info.

(前の例では，閉じカッコはカンマと文節が続き，それにはピリオドが続くことに
注意してください．)


File: texinfo-ja.info,  Node: Three Arguments,  Next: Four and Five Arguments,  Prev: Two Arguments,  Up: xref

３つの引数を用いた
------------------

３番目の引数は，TeX出力のノード名を置換します．３番目の引数は，印刷物で
のセクション名にするか，セクションで述べられているトピックを述べるべきで
す．参照を印刷したとき読みやすいように，頭文字を大文字にしたいことも多い
でしょう．構文や意味としてノード名が適切でないときは，３番目の引数を使用
してください．

相互参照のタイトルやトピックや，その他のあらゆるセクションで，カンマの配
置を避けることを覚えておいてください．フォーマッタは，カンマに従い引数の
相互参照を分けます．タイトルやセクションのカンマは，それを２つの引数に分
けます．参照では，タイトルをカンマ無しで"Clouds, Mist, and Fog"のよう
に書く必要があります．

  また，相互参照を終了するために，カンマやピリオドを`@xref'の閉じカッ
コの後に書くことを覚えておいてください．以下の例では，文節が終端のカンマ
に付きます．

テンプレートは以下のようになります．

     @xref{NODE-NAME, CROSS-REFERENCE-NAME, TITLE-OR-TOPIC}.

例えば，以下のようにします．

     @xref{Electrical Effects, Lightning, Thunder and Lightning},
     for details.

以下を生成します．

     *Note Lightning: Electrical Effects, for details.

そして，以下を生成します．

     See Section 5.2 [Thunder and Lightning], page 57, for details.

３番目の引数が与えられていて，２番目が空の場合，３番目の引数が両方に与えら
れます．(２つのカンマが並んで，２番目の引数が空だということを示している方
法に注意してください．)

     @xref{Electrical Effects, , Thunder and Lightning},
     for details.

以下を生成します．

     *Note Thunder and Lightning: Electrical Effects, for details.

そして，以下を生成します．

     See Section 5.2 [Thunder and Lightning], page 57, for details.

実際問題として，ノード名とセクションタイトルが同じ場合は，相互参照を最初
の引数で書き，ノード名とタイトルが異なる場合は，１番目と３番目の引数で書く
ことが最善です．

  `The GNU Awk User's Guide'でいくつかの例は以下のようになっています．

     @xref{Sample Program}.
     @xref{Glossary}.
     @xref{Case-sensitivity, ,Case-sensitivity in Matching}.
     @xref{Close Output, , Closing Output Files and Pipes},
        for more information.
     @xref{Regexp, , Regular Expressions as Patterns}.


File: texinfo-ja.info,  Node: Four and Five Arguments,  Prev: Three Arguments,  Up: xref

４つと５つの引数を用いた`@xref'
-------------------------------

相互参照では，4番目の引数はリファレンスが現れるファイルと異なるInfoファ
イルのアンカー名を指定し，5番目の引数は印刷されたマニュアルでのそのタイ
トルを指定します．

  カンマやピリオドを，相互参照を終了する`@xref'の閉じカッコに続ける
必要があることを覚えておいてください．以下の例では，終端のカンマに文節が
続きます．

テンプレートは以下のようになります．

     @xref{NODE-NAME, CROSS-REFERENCE-NAME, TITLE-OR-TOPIC,
     INFO-FILE-NAME, PRINTED-MANUAL-TITLE}.

以下が例です．

     @xref{Electrical Effects, Lightning, Thunder and Lightning,
     weather, An Introduction to Meteorology}, for details.

以下を生成します．

     *Note Lightning: (weather)Electrical Effects, for details.

Infoファイルの名前はカッコで囲まれ，前にノード名があります．

印刷されたマニュアルでは，参照は以下のようになります．

     See section "Thunder and Lightning" in An Introduction to
     Meteorology, for details.

印刷されたマニュアルのタイトルは，イタリック体で植字されます．他のマニュ
アルを参照するときは，相互参照が参照するページをTeXは知ることができな
いので，ページ番号はありません．

  長いバージョンの`@xref'を使用するとき，２番目に引数を省略することも
よくあります．この場合，トピックを記述する３番目に引数はInfoでの相互参照
名として使用されます．

テンプレートは以下のようになります．

     @xref{NODE-NAME, , TITLE-OR-TOPIC, INFO-FILE-NAME,
     PRINTED-MANUAL-TITLE}, for details.

それは，以下を生成します．

     *Note TITLE-OR-TOPIC: (INFO-FILE-NAME)NODE-NAME, for details.

そして，以下を生成します．

     See section TITLE-OR-TOPIC in PRINTED-MANUAL-TITLE, for details.

例えば，以下のようにします．

     @xref{Electrical Effects, , Thunder and Lightning,
     weather, An Introduction to Meteorology}, for details.

以下を生成します．

     *Note Thunder and Lightning: (weather)Electrical Effects,
     for details.

そして，以下を生成します．

     See section "Thunder and Lightning" in An Introduction to
     Meteorology, for details.

滅多にありませんが，単一の印刷されたマニュアルにある他のInfoファイルへ参
照したいときもあります -- それは，複数のTexinfoファイルが同じTeXの実
行に組み込まれるにもかかわらず，別々のInfoファイルを作成するときです．こ
の場合，4番目の引数のみを指定し，5番目はその必要がありません．


File: texinfo-ja.info,  Node: Top Node Naming,  Next: ref,  Prev: xref,  Up: Cross References

`Top'ノードに名前を付ける
=========================

相互参照では，常にノードを名付ける必要があります．これは，マニュアル全体
を参照するために，`@xref'コマンドの最初の引数として書き込むことで
`Top'ノードを識別する必要があるということを意味します．(これは，メニュー
項目を書く方法と異なります．*Note Referring to Other Info Files: Other
Info Filesを参照してください．)同時に，印刷された相互参照で有意義なセク
ショントピックやタイトルを(単語`Top'の代わりに)提供するために，
`@xref'コマンドの３番目の引数として適切な項目を書く必要があります．

このため，`The GNU Make Manual'への相互参照を作成するために，以下の
ように書いてください．

     @xref{Top, , Overview, make, The GNU Make Manual}.

それは，以下を生成します．

     *Note Overview: (make)Top.

そして，以下を生成します

     See section "Overview" in The GNU Make Manual.

この例では，`Top'が最初のノード名で，`Overview'がマニュアルの
最初のセクション名です．


File: texinfo-ja.info,  Node: ref,  Next: pxref,  Prev: Top Node Naming,  Up: Cross References

`@ref'
======

  `@ref'は印刷物で`See'を生成せず，参照のみを生成する以外，
`@xref'とほとんど同じです．これは，文の終りの部分にするとき役に立
ちます．

例えば，以下のようにします．

     For more information, see @ref{Hurricanes}.

以下を生成します．

     For more information, see *Note Hurricanes::.

そして，以下を生成します．

     For more information, see Section 8.2 [Hurricanes], page 123.

  `@ref'コマンドは，著者が表現する方法として，印刷されたマニュアルに
適しているが，Info書式では悪く見えるものを導き出すときもあります．使用者
が印刷物とInfo書式の両方で使用することを心に留めておいてください．

例えば，以下のようにします．

     Sea surges are described in @ref{Hurricanes}.

以下を生成します．

     Sea surges are described in Section 6.7 [Hurricanes], page 72.

以上は印刷されたマニュアルで，Infoでは以下のようになります．

     Sea surges are described in *Note Hurricanes::.

     *注意:*ピリオド，カンマ，または正しいカッコを，`@ref'コマン
     ドの後に２つ以上の引数とともに書く_必要があります_．そうしない場合，
     Infoは相互参照の項目を見つけることができず，相互参照を追う試みは失敗しま
     す．一般的な規則として，ピリオドやカンマを，全ての`@ref'コマンドの
     後に書くべきです(1) (*note
     ref-Footnote-1::)．これは，印刷されたマニュアルでもInfo出力
     でも最善に見えます．


File: texinfo-ja.info,  Node: ref-Footnotes,  Up: ref

  (1) 訳注:日本語の場合はカッコ悪くなるので，このマ
ニュアルではそうしていません


File: texinfo-ja.info,  Node: pxref,  Next: inforef,  Prev: ref,  Up: Cross References

`@pxref'
========

  丸カッコの参照コマンド`@pxref'は，`@xref'とほとんど同じです
が，丸カッコの中で_のみ_使用し，コマンドの閉じカッコの後にカンマや
ピリオドを入力_しません_．コマンドは２つの点で`@xref'と異なり ます．

  1.
     TeXは印刷されたマニュアルに対し，大文字の`See'ではなく小文字の`see'を
     用いて参照を植字します．

  2.
     Info書式化コマンドでは，自動的に閉じコロンやピリオドで参照を終りにします．


書式化の１つの形式は自動的に閉じる句読点を挿入し，もう一つはそうしないの
で，`@pxref'は他の文の一部として丸カッコ内で_のみ_使用すべき
です．また，`@xref'で行うような，参照後に句読点を挿入すべきではあ
りません．

  `@pxref'は，印刷物とInfoファイルの両方で出力が正しく見え，丸カッコ
が正しく動作するように設計されています．印刷されたマニュアルでは，閉じる
カンマやピリオドは丸カッコ内の相互参照の後に続きません．そのような句読点
は間違いです．しかしInfoファイルでは，適切な閉じる句読点をInfoが終りとし
て認識できるように，相互参照に続ける必要があります．`@pxref'で，出
力の１つの形式に終端を置きそれ以外では置かないため，複雑な方法を使用する
ことから免除されます．

１つの引数を用いた丸カッコ相互参照は以下のようになります．

     ... storms cause flooding (@pxref{Hurricanes}) ...

それは，以下を生成します．

     ... storms cause flooding (*Note Hurricanes::) ...

そして，以下を生成します．

     ... storms cause flooding (see Section 6.7 [Hurricanes], page 72)
     ...

２つの引数を用いた丸カッコ相互参照は，以下のようなテンプレートになります．

     ... (@pxref{NODE-NAME, CROSS-REFERENCE-NAME}) ...

それは，以下を生成します．

     ... (*Note CROSS-REFERENCE-NAME: NODE-NAME.) ...

そして，以下を生成します．

     ... (see Section NNN [NODE-NAME], page PPP) ...

  `@pxref'は`@xref'のように，最大５つの引数を使用することが可能
です(*note `@xref': xref.)．

     *注意してください:*`@pxref'は，丸カッコの参照としてのみ使用
     してください．`@pxref'を文の文節として使用しようとしないでください．
     それは，Infoファイル，印刷物，またはその両方で悪く見えます．

     また，丸カッコ相互参照は文の終りでも最善のようです．文中に書くこともでき
     ますが，その場所はテキストの流れを分断します．


File: texinfo-ja.info,  Node: inforef,  Next: uref,  Prev: pxref,  Up: Cross References

`@inforef'
==========

  `@inforef'は印刷されたマニュアルには無い，Infoファイルへの相互参照
に対して使用されます．印刷されたマニュアルでも，`@inforef'はInfo
ファイルでユーザが見えるような参照を生成します．

  このコマンドは，以下の順番で２つまたは３つの引数をとります．

  1. ノード名．

  2. 相互参照名(オプション)．

  3. Infoファイル名．

`@xref'のように引数はカンマで分けられます．また，`@xref'のよ
うに`}'の後でカンマやピリオドで参照を終端する必要もあります．

テンプレートは以下のようになります．

     @inforef{NODE-NAME, CROSS-REFERENCE-NAME, INFO-FILE-NAME},

以下のようにします．

     @inforef{Expert, Advanced Info commands, info},
     for more information.

以下を生成します．

     *Note Advanced Info commands: (info)Expert,
     for more information.

そして，以下を生成します．

     See Info file `info', node `Expert', for more information.

同様に，以下のようにします．

     @inforef{Expert, , info}, for more information.

以下を生成します．

     *Note (info)Expert::, for more information.

そして，以下を生成します．

     See Info file `info', node `Expert', for more information.

  `@inforef'の逆は`@cite'で，それはInfo形式がない印刷物を参照
するために使用します．*Note `@cite': cite.


File: texinfo-ja.info,  Node: uref,  Prev: inforef,  Up: Cross References

`@uref{URL[, TEXT][, REPLACEMENT]}'
===================================

  `@uref'は，ユニフォームリソースロケータ(url)への参照を生成します．
それは，１つの必須の引数urlと表示されるテキストを制御する２つの追加の引数
をとります．HTML出力では，`@uref'はたどることが可能なリンクを生成
します．

２番目の引数が指定されている場合，それは表示するテキストです(デフォルトは
url自身です)．InfoとDVI出力ではurlも出力され，HTML出力ではそうなりません．

一方，３番目の引数が指定されている場合もテキストは表示されますが，urlは全
ての書式で出力_されません_．これは，テキストがmanページのように既に
十分参考にされているとき役に立ちます．３番目の引数が与えられた場合，２番目
の引数は無視されます．

簡単な１つの引数の形式では，urlはターゲットとリンクのテキストの両方になり
ます．

     The official GNU ftp site is @uref{ftp://ftp.gnu.org/gnu}.

以下を生成します．
     The official GNU ftp site is `ftp://ftp.gnu.org/gnu'.

  ２つの引数の形式の例です．
     The official @uref{ftp://ftp.gnu.org/gnu, GNU ftp site}
     holds programs and texts.

以下を生成します．
     The official GNU ftp site (ftp://ftp.gnu.org/gnu)
     holds programs and texts.

そして，Info出力はこのようになります．
     The official GNU ftp site (ftp://ftp.gnu.org/gnu)
     holds programs and texts.

HTML出力はこのようになります．
     The official <a href="ftp://ftp.gnu.org/gnu">GNU ftp site</a>
     holds programs and texts.

  ３つの引数の形式の例です．
     The @uref{/man.cgi/1/ls,,ls(1)} program ...

以下を生成します．
     The ls(1) program ...

しかしHTMLでは，以下のようになります．
     The <a href="/man.cgi/1/ls">ls(1)</a> program ...

  人々がたどることが可能なリンクを作成せず，単にurlを示すため，
`@url'を使用してください(*note `@url': url.)．

  urlの明確な書式を表示することを好む人もいます．

     <URL:http://HOST/PATH>

好みにより，この形式を入力ファイルで使用することも可能です．テキストから
urlの検出を試みるあらゆるソフトウェアでは，便利にするために，
`<URL:'無しで検出する必要があるので，我々は余分な`<URL:'と
`>'を用い，出力をバラバラにすることは必要ないと思います．


File: texinfo-ja.info,  Node: Marking Text,  Next: Quotations and Examples,  Prev: Cross References,  Up: Top

単語と句の印付け
****************

Texinfoでは，様々な方法で単語や句に印を付けることが可能です．Texinfoフォー
マッタは，テキストの強調の方法を決定するためにこの情報を使用します．例え
ば，単語や句が，定義している事象，メタ構文の変数，またはプログラムで定義
されているシンボルであっても指定可能です．また，いくつかの異なる方法でテ
キストを強調することも可能です．

* Menu:

* Indicating::                  How to indicate definitions, files, etc.
* Emphasis::                    How to emphasize text.


File: texinfo-ja.info,  Node: Indicating,  Next: Emphasis,  Prev: Marking Text,  Up: Marking Text

定義，コマンド等を示す
======================

Texinfoには，テキストの一部が言及しているものの種類を示すコマンドがあり
ます．例えば，メタ構文の変数は`@var'で，コードは`@code'で印
を付けられます．テキストの一部は，そのオブジェクトの種類を伝えるコマンド
でラベルが付くので，Texinfoフォーマッタでそのようなテキストへの準備を変
更することは簡単です．(Texinfoは_植字的な_書式化言語というよりはむ
しろ，_意図的な_書式化言語です．)

例えば，印刷されたマニュアルでは，コードは通常タイプライターのフォントで
図案化されます．`@code'はTeXに，このテキストをこのフォントで植
字するよう伝えます．しかし，TeXのコードの強調を他のフォントを使用する
よう変更することは簡単で，この変更はキーストロークの例を強調する方法に影
響しません．直接的な植字コマンドがファイルの本体で使用されていて，それを
変更したい場合，コードを変更して，他が変更されていないことを確かめるため，
全てのそれぞれの事象を調べる必要があります．

* Menu:

* Useful Highlighting::         Highlighting provides useful information.
* code::                        Indicating program code.
* kbd::                         Showing keyboard input.
* key::                         Specifying keys.
* samp::                        A literal sequence of characters.
* verb::                        A verbatim sequence of characters.
* var::                         Indicating metasyntactic variables.
* env::                         Indicating environment variables.
* file::                        Indicating file names.
* command::                     Indicating command names.
* option::                      Indicating option names.
* dfn::                         Specifying definitions.
* cite::                        Referring to books not in the  Info system.
* acronym::                     Indicating acronyms.
* url::                         Indicating a World Wide Web reference.
* email::                       Indicating an electronic mail address.


File: texinfo-ja.info,  Node: Useful Highlighting,  Next: code,  Prev: Indicating,  Up: Indicating

役に立つ強調コマンド
--------------------

強調コマンドは，関数やファイル名のリストのような，ファイルからの便利な情
報を抽出するために使用することが可能です．例えば，Emacs Lisp(またはキー
ボードマクロ)でのプログラムを書くために，指定されたコマンドで印が付いて
いる単語と句が含まれているそれぞれの段落の後に，索引項目を挿入することも
可能です．まだ項目を作成していない場合，関数の索引を構築するためこれを行
うことが可能でしょう．

  コマンドは様々な目的を満たします．

`@code{SAMPLE-CODE}'
     プログラムの一部のリテラル例となるテキストを示します．

`@kbd{KEYBOARD-CHARACTERS}'
     キーボード入力を示します．

`@key{KEY-NAME}'
     キーボードのキーに対する慣習的な名前を示します．

`@samp{TEXT}'
     文字列のリテラル例となるテキストを示します．

`@var{METASYNTACTIC-VARIABLE}'
     メタ構文変数を示します．

`@env{ENVIRONMENT-VARIABLE}'
     環境変数を示します．

`@file{FILE-NAME}'
     ファイル名を示します．

`@command{COMMAND-NAME}'
     コマンド名を示します．

`@option{OPTION}'
     コマンドラインオプションを示します．

`@dfn{TERM}'
     用語使用の紹介や定義を示します．

`@cite{REFERENCE}'
     本の名前を示します．

`@acronym{ACRONYM}'
     頭文字を組み合わせた言葉を示します．

`@url{UNIFORM-RESOURCE-LOCATOR}'
     ワールドワイドウェブ(WWW)のためのユニフォームリソースロケータ(URL)を示し
     ます．

`@email{EMAIL-ADDRESS[, DISPLAYED-TEXT]}'
     電子メールアドレスを示します．


File: texinfo-ja.info,  Node: code,  Next: kbd,  Prev: Useful Highlighting,  Up: Indicating

`@code'{SAMPLE-CODE}
--------------------

  プログラムの一部と，全体が構文的なトークンからなるテキストを示すため，
`@code'コマンドを使用してください．カッコでテキストを囲ってくださ い．

  このため，`@code'をプログラム内部の式，プログラムで使用している変
数や関数の名前，またはプログラム言語のキーワードに対して使用すべきです．

  Texinfoのようなプログラム言語に似ている言語のコマンド名に対して
`@code'を使用してください．例えば，`@code'と`@samp'は，
Texinfoソースファイルで，それぞれ`@code{@@code}'と
`@code{@@samp}'と書くことで生成されます．

  文の最初に現れるとき，`@code'コマンドの中で単語の大文字小文字を変
えるのは正しくありません．ほとんどのコンピュータ言語は大文字小文字の違い
を識別します．例えばCでは，`Printf'は`printf'の識別子と異なり，
それはおそらくスペルミスです．大文字小文字の区別をしない言語でも，異なる
方法で綴られた識別子を見ると人間の読者は混乱します．１つの綴りを選び，そ
れを常に使用してください．全てが小文字で書かれたコマンド名で文を開始した
くない場合，文の配置替えをするべきです．

  印刷されたマニュアルでは，`@code'でTeXは引数をタイプライターフェ
イスのフォントで植字します．Infoファイルでは．Info書式化コマンドはシング
ルクォーテーションマークでテキストの周りを囲みます．

  例えば，以下のようにします．

     The function returns @code{nil}.

印刷されたマニュアルで，これは以下を生成します．

     The function returns `nil'.

  `@code'を使用しないほうが好ましい状況は，以下のものです．

   * `ls'のようなシェルコマンド名(`@command'を使用してください)．

   * `-c'のようなシェルオプション単独のとき(`@option'を使用してくだ
     さい)．

   * また，シェルコマンド全体は，`@code'より`@samp'を使用して書い
     た方が良く見えます．この場合，規則はより喜ばしい書式を選択するためです．

   * `TEXINPUTS'のような環境変数(`@env'を使用してください)．

   * 構文トークンより短い文字列．例えば，Emacs Lisp関数の`goto-char'の名
     前の一部の`goto-ch'に関して書く場合，`@samp'を使用すべきです．

   *
     一般的に，トークンで使用されている文字に関して書く場合です．例えば，関数
     名で使用可能な文字や印刷可能なシンボルを説明しているとき，`@code'
     を使用しないでください．(`@samp'を使用してください．)また，入力が
     プログラム言語のような言語で書かれていない場合，プログラムの入力と考えら
     れるテキストに印を付けるために`@code'を使用すべきではありません．
     例えば，GNU Emacsのキーストロークコマンドに対して`@code'を使用すべ
     きではありませんが(代わりに`@kbd'を使用してください)，キーストロー
     クコマンドが呼び出すEmacs Lispの関数名に対し`@code'を使用してもか
     まいません．


  `@command'，`@option'，そして`@env'は比較的最近導入さ
れたので，`@code'や`@samp'をコマンド名，オプション，そして環
境変数に使用することも可能です．新しいコマンドでより正確に印付けを表現で
きますが，より古いコマンドの使用でも実害は無く，もちろん長期存続のマニュ
アルはそうしています．


File: texinfo-ja.info,  Node: kbd,  Next: key,  Prev: code,  Up: Indicating

`@kbd'{KEYBOARD-CHARACTERS}
---------------------------

  ユーザが入力する文字に対し`@kbd'コマンドを使用してください．例えば，
文字`M-a'を記述するため，以下のように書いてください．

     @kbd{M-a}

文字`M-x shell'を記述するため，以下のように書いてください．

     @kbd{M-x shell}

  `@kbd'コマンドはInfoでは`@code'と同じ効果がありますが，印刷
されたマニュアルではデフォルトで異なるフォント(通常のタイプライターの代
わりに傾いたタイプライター)を生成し，そのため，ユーザはこれらのコンピュー
タの出力と，入力として仮定される文字とを区別可能です．

  `@kbd'の使用法がマニュアル間で異なるので，`@kbdinputstyle'コ
マンドでフォント切替えの制御が可能です．このコマンドはInfo出力で効果があ
りません．このコマンドを行の最初で，引数として一単語で以下の１つを書いて
ください．
`code'
     常に`@kbd'に対し`@code'と同じフォントを使用します．

`example'
     `@example'とそれに似た環境のみで，`@kbd'に対し異なるフォント
     を使用します．

`distinct'
     (デフォルトで)常に`@kbd'に対し異なるフォントを使用します．

  `@kbd'コマンドのカッコの中に他の@-コマンドを埋め込むことが可能で
す．例えばここで，より冗長に記述すると，"`r'を押し，<RET>を押
してください"となるコマンドを記述した例があります．

     @kbd{r @key{RET}}

これは`r <RET>'を生成します．

  また，入力した文字を書き出すために`@kbd'コマンドを使用することも可
能です．例えば，以下のようにします．

     To give the @code{logout} command,
     type the characters @kbd{l o g o u t @key{RET}}.

これは以下を生成します．

     To give the `logout' command, type the characters `l o g o u t
     <RET>'.

(また，この例は明確にするためスペースを加えることが可能だということも示
しています．実際にスペース文字を入力文字の１つとして述べたい場合，そのた
めに`@key{SPC}'を書いてください．


File: texinfo-ja.info,  Node: key,  Next: samp,  Prev: kbd,  Up: Indicating

`@key'{KEY-NAME}
----------------

  `@key'コマンドをキーボード上のキーの慣習名に対し以下のように使用し
てください．

     @key{RET}

  入力された文字の並びが１つ以上の名前で記述されたキーを含むとき，
`@key'コマンドを，`@kbd'コマンドの引数内部で使用可能です．

  例えば，入力する`C-x <ESC>'を生成するために，以下のようにします．

     @kbd{C-x @key{ESC}}

  推奨されるキーの名前のリストは以下のものがあります．

    SPC
          スペース

    RET
          リターン

    LFD
          Linefeed(しかし，最近のほとんどのキーボードはLinefeedキーが無いので，この
          文字`C-j'を呼ぶ方がいいでしょう)．

    TAB
          タブ

    BS
          バックスペース

    ESC
          エスケープ

    DEL
          デリート

    SHIFT
          シフト

    CTRL
          コントロール

    META
          メタ

  修飾キー名の`meta'や`ctrl'のような単語を扱う細別手法もあります．
`Meta-a'のような，修飾キーが使用されている文字を記述するとき，
`@kbd'コマンドを単独で使用してください．`@key'コマンドを使用
しないでください．しかし，修飾キーを単独で記述するときは`@key'コマ
ンドを使用してください．例えば，`Meta-a'を生成するため
`@kbd{Meta-a}'と書き，<META>を生成するため
`@key{META}'と書いてください．


File: texinfo-ja.info,  Node: samp,  Next: verb,  Prev: key,  Up: Indicating

`@samp'{TEXT}
-------------

ファイル，文字列，パターンなどの内部の文字の並びの例や`sample'のリテラル
となるテキストを示すため，`@samp'コマンドを使用してください．テキ
ストをカッコで囲んでください．Infoファイルと印刷されたマニュアルの両方で，
シングル引用符の中にで引数が現れます．さらに，等幅フォントで印刷されます．

     To match @samp{foo} at the end of the line,
     use the regexp @samp{foo$}.

これは以下を生成します．

     To match `foo' at the end of the line, use the regexp `foo$'.

  単一の文字を記述するときはいつも，`@kbd'や`@key'がより適して
いない限り`@samp'を使用すべきです．また，Cの記述全体やシェルコマン
ド全体に対し`@samp'を使用することも可能です．この場合，
`@samp'は`@code'より良く見えます．基本的に，`@samp'は
`@code'，`@kbd'，または`@key'でカバーされていないあら
ゆるものに対する入れものです．

指定した文字列の一部の場合のみ，句読点をカッコ内に含めてください．句読点
が文字列の周りにある英語のテキストの一部の場合，カッコの外に句読点を書い
てください．例えば以下の文章では，カンマとピリオドはカッコの外側に置きま
す．

     In English, the vowels are @samp{a}, @samp{e},
     @samp{i}, @samp{o}, @samp{u}, and sometimes
     @samp{y}.

これは以下を生成します．

     In English, the vowels are `a', `e', `i', `o', `u',  and sometimes
     `y'.


File: texinfo-ja.info,  Node: verb,  Next: var,  Prev: samp,  Up: Indicating

`@verb'{<char>TEXT<char>}
-------------------------

  文字の並びをそのまま出力するために，`@verb'コマンドを使用してくだ
さい．

  LaTeXの`\verb'コマンドのように，逐語的なテキストは，ユニークな分
離文字を使用して引用符で囲むことが可能です．囲まれている逐語的なテキスト
はにはカッコのなかの分離文字も含まれます．テキストは固定幅フォントで出力
されます．

     How many @verb{|@|}-escapes does one need to print this
     @verb{.@a @b @c.} string or @verb{+@'e?`!`{}\+} this?

以下を生成します．

     How many @-escapes does one need to print this
     @a @b @c string or these @'e?`{}!`\ this?

  これは，引数が通常のTexinfoのテキストになる`@samp'(前のセクション
を参照してください)と比較して，文字`@{}'は特別です．
`@verb'を用いた場合，選択した分離文字以外，特別な例外はありません．


File: texinfo-ja.info,  Node: var,  Next: env,  Prev: verb,  Up: Indicating

`@var'{METASYNTACTIC-VARIABLE}
------------------------------

  メタ構文変数を示すため，`@var'コマンドを使用してください．"メ
タ構文変数"は，テキストの一部と同類のものを意味するものです．例えば，メ
タ構文変数を関数に渡される引数を記述するため関数のドキュメントで使用すべ
きです．

  プログラム言語で，特定の変数の名前に対し`@var'を使用しないでくださ
い．これらはプログラムの特別な名前なので，それに対しては`@code'が
正しいものです(*note code::)．例えば，Emacs Lisp変数
`texinfo-tex-command'はメタ構文変数ではありません．それは，
`@code'を使用することで正確に書式化されます．

  環境変数に対しても`@var'を使用しないでください．それに対しては
`@env'が正しいものです(次のセクションを見てください)．

  Infoでの`@var'の効果は，引数の文字を全て大文字に変更します．印刷さ
れたマニュアルとHTML出力では引数は傾いて印刷されます．

  例えば，以下のようにします．

     To delete file @var{filename},
     type @samp{rm @var{filename}}.

以下を生成します．

     To delete file FILENAME, type `rm FILENAME'.

(`@var'は`@code'，`@samp'，`@file'などの間に現す
ことができることに注意してください．)

メタ構文変数は，スペース以外全て小文字で書き，読みやすくするためハイフン
を使用してください．このため，Texinfoマニュアルの初め方を表現するTexinfo
ソースは以下のようになります．

     \input texinfo
     @@setfilename @var{info-file-name}
     @@settitle @var{name-of-manual}

これは以下を生成します．

     \input texinfo
     @setfilename INFO-FILE-NAME
     @settitle NAME-OF-MANUAL

ドキュメント形式によっては，メタ構文変数は山カッコで表示するものもあり，
以下がその例です．

     ..., type rm <filename>

しかし，それはTexinfoが使用する形式ではありません．(もちろん，そうしたい
場合，`texinfo.tex'ソースを編集して，Info書式化コマンドを
`<...>'書式で出力させることもできます．)


File: texinfo-ja.info,  Node: env,  Next: file,  Prev: var,  Up: Indicating

`@env'{ENVIRONMENT-VARIABLE}
----------------------------

GNUを含め，多くのオペレーティングシステムで使用される環境変数を示すため，
`@env'コマンドを使用してください．メタ構文変数に使用しないでくださ
い．代わりに`@var'を使用してください(前のセクションを参照してくだ
さい)．

  `@env'の効果は`@code'と同じです．例えば，以下のようにします．

     The @env{PATH} environment variable ...

以下を生成します．

     The `PATH' environment variable ...


File: texinfo-ja.info,  Node: file,  Next: command,  Prev: env,  Up: Indicating

`@file'{FILE-NAME}
------------------

ファイル，バッファ，またはディレクトリ名や，Infoでのノード名となるテキス
トを示すため，`@file'コマンドを使用してください．また，ファイル名
の接尾子にも使用可能です．プログラム言語のシンボルに対し`@file'を
使用しないでください．`@code'を使用してください．

  現在，`@file'の効果は`@samp'と同じです．例えば以下のようにし ます．

     The @file{.el} files are in
     the @file{/usr/local/emacs/lisp} directory.

以下を生成します．

     The `.el' files are in the `/usr/local/emacs/lisp' directory.


File: texinfo-ja.info,  Node: command,  Next: option,  Prev: file,  Up: Indicating

`@command'{COMMAND-NAME}
------------------------

  `ls'や`cc'のようなコマンド名を示すため，`@command'
を使用してください．

  `@command'の効果は`@code'と同じです．例えば，以下のようにし ます．

     The command @command{ls} lists directory contents.

以下を生成します．

     The command `ls' lists directory contents.

  `Emacs'や`Bison'のような新しい英単語にしたい場合，`@command'を使用
せず，通常のテキストのフォントでプログラム名を書くべきです．

  `ls -l'のようなシェルコマンドの呼び出し全体を書くとき，自分で判断し
て`@samp'または`@code'のどちらかを使用すべきです．


File: texinfo-ja.info,  Node: option,  Next: dfn,  Prev: command,  Up: Indicating

`@option'{OPTION-NAME}
----------------------

  コマンドラインオプションを示すため，`@option'コマンドを使用してく
ださい．例えば， `-l'や，`--version'や， `--output=FILENAME'です．

  `@option'の効果は`@samp'と同じです．例えば以下のようにします．

     The option @option{-l} produces a long listing.

以下を生成します．

     The option `-l' produces a long listing.

  表では，オプションを`@code'の中に書くと，より喜ばしい効果を生成し
ます．


File: texinfo-ja.info,  Node: dfn,  Next: cite,  Prev: option,  Up: Indicating

`@dfn'{TERM}
------------

  技術用語の使用の紹介や定義を識別するため，`@dfn'コマンドを使用して
ください．もう一度使用する用語や読者が知っておくべき用語の紹介を意図した
引用部分でのみ，このコマンドを使用してください．最初に用語について述べる
ちょっとした記述は`@dfn'に値しません．コマンドは印刷されたマニュア
ルでイタリック体を生成し，Infoファイルでは2重引用符を生成します．例えば
以下のようにします．

     Getting rid of a file is called @dfn{deleting} it.

以下を生成します．

     Getting rid of a file is called "deleting" it.

一般的な規則として，用語の発生の定義を含む文は用語の定義にすべきです．文
はその定義を明示的にする必要はありませんが，定義情報を含めるべきです --
それで意味がはっきりします．


File: texinfo-ja.info,  Node: cite,  Next: acronym,  Prev: dfn,  Up: Indicating

`@cite'{REFERENCE}
------------------

  Infoファイルの仲間にはない本の名前に対し`@cite'コマンドを使用して
ください．コマンドは印刷されたマニュアルでイタリック体を生成し，Infoファ
イルでは引用符を生成します．

本がTexinfoで書かれている場合，読者はInfoでそのような参照を簡単に追うこ
とが可能なので，相互参照を使用してください．*Note `@xref': xref.


File: texinfo-ja.info,  Node: acronym,  Next: url,  Prev: cite,  Up: Indicating

`@acronym'{ACRONYM}
-------------------

  `NASA'のように全て大文字で書かれている省略に対し，
`@acronym'を使用してください．省略は`@acronym{NASA}'のよう
にカッコ内に１つの引数で与えられます．形式の問題や特定の省略のため，
`@acronym{F.B.I.}'のようにピリオドを使用した方が良いかもしれませ ん．

  TeXとHTMLでは，引数は傾いた小さなフォントサイズで印刷されます．Infoや
プレーンテキスト出力では，このコマンドは何も変更しません．


File: texinfo-ja.info,  Node: url,  Next: email,  Prev: acronym,  Up: Indicating

`@url'{UNIFORM-RESOURCE-LOCATOR}
--------------------------------

ワールドワイドウェブ(WWW)のユニフォームリソースロケータ(URL)を示すため，
`@url'コマンドを使用してください．これは，`@file'，
`@var'等に似ていて，純粋にマークアップのためのものです．それはHTML
形式でたどることが可能なリンクを生成しません(そのためには`@uref'
を使用してください．*note `@uref': uref.)．実際には存在しないURL
に対して役に立ちます．例えば，以下のようにします．

     For example, the url might be @url{http://example.org/path}.

それは，以下を生成します．

     For example, the url might be <http://example.org/path>.


File: texinfo-ja.info,  Node: email,  Prev: url,  Up: Indicating

`@email'{EMAIL-ADDRESS[, DISPLAYED-TEXT]}
-----------------------------------------

  電子メールアドレスを示すため`@email'コマンドを使用してください．そ
れは引数として１つの必須のアドレスと，１つの追加引数で表示するテキストをと
ります(デフォルトではアドレス自身になります)．

  InfoとTeXでは，アドレスは山カッコで表示され，存在する場合は表示テキス
トが前に付きます．HTML出力では，`@email'は通常メール作成ウィンドウ
を生成する`mailto'リンクを生成します．例えば，以下のようにします．

     Send bug reports to @email{bug-texinfo@@gnu.org},
     suggestions to the @email{bug-texinfo@@gnu.org, same place}.

以下を生成します．
     Send bug reports to <bug-texinfo@gnu.org>,
     suggestions to the same place <bug-texinfo@gnu.org>.


File: texinfo-ja.info,  Node: Emphasis,  Prev: Indicating,  Up: Marking Text

テキストの強調
==============

通常Texinfoは，テキストで単語が属するカテゴリに従って印付けされた単語に
対しフォントを変更します．例えば`@code'コマンドです．ほとんどの状
況で単語に印を付ける方法が最善です．しかし，カテゴリを示さずにテキストを
強調したいときもあります．Texinfoにはこのための２つのコマンドがあります．
またTexinfoには，TeXがテキストを植字するときのフォントを指定するコマ
ンドもいくつかあります．これらのコマンドはInfoでは効果が無く，その中の１
つ`@r'コマンドだけ，通常使用されます．

* Menu:

* emph & strong::               How to emphasize text in Texinfo.
* Smallcaps::                   How to use the small caps font.
* Fonts::                       Various font commands for printed output.


File: texinfo-ja.info,  Node: emph & strong,  Next: Smallcaps,  Up: Emphasis

`@emph'{TEXT}と`@strong'{TEXT}
------------------------------

  `@emph'と`@strong'コマンドは，強調のためのものです．
`@strong'がより強調します．印刷物で，`@emph'は_italics_
を生成し，`@strong'は*bold*を生成します．

  例えば，以下のようにします．

     @quotation
     @strong{Caution:} @samp{rm * .[^.]*} removes @emph{all}
     files in the directory.
     @end quotation

以下を生成します．

          *Caution*: `rm * .[^.]*' removes _all_
          files in the directory.

  `@strong'コマンドは，前の例での単語`Caution'のような，効果が印刷要
素となるマーク以外では，滅多に使用されません．

  Info出力では，`@emph'はアンダースコア(`_')でテキストを囲み，
`@strong'はテキストの周りにアスタリスクを書きます．

     *注意:*`@strong'を単語`Note'で使用しないでください．
     Infoは相互参照との組み合わせと勘違いします．代わりに，*Please
     note*や*Caution*のような句を使用してください．


File: texinfo-ja.info,  Node: Smallcaps,  Next: Fonts,  Prev: emph & strong,  Up: Emphasis

`@sc'{TEXT}:小さな大文字フォント
--------------------------------

  テキストを，印刷物とHTMLでA SMALL CAPS FONTに設定し，Infoファイルで
大文字に設定するため，`@sc'コマンドを使用してください．(可能な場合)
小さい大文字にしたいテキストを以下のように小文字でカッコの間に書いてくだ
さい．

     The @sc{acm} and @sc{ieee} are technical societies.

これは以下を生成します．

     The ACM and IEEE are technical societies.

  TeXは，文字が`ページからはみ出る'ことを避けるように，小さい大文字フォ
ントで植字します．これは，小さい大文字のテキストを全て大文字にするより読
みやすくします．しかし通常は，どこでも大文字小文字を混ぜて使用する方が良
いでしょう．Info書式化コマンドは，全ての小さい大文字のテキストを大文字に
設定します．HTMLでは，テキストは大文字で小さいフォントで表現されます．

  `@sc'コマンドのカッコ内のテキストが大文字の場合，TeXはフルサイ
ズの大文字で植字します．今までそうしている場合，`@sc'で全て大文字
のテキストに印を付けるのは無駄なので，`makeinfo'がそのような使用
法に警告する場合は，省略してフルサイズの大文字を使用してください．

  また，ATO(`abort to orbit'を意味するNASA単語)のような専門用語
に対し小さな大文字フォントを使用することも可能です．

  Lispプログラムで使用される単語CDRのような専門用語で小さな大文字フォ
ントを使用することには微妙な点があります．この状況では，単語がリスト(リ
ストのCDR)の２番目のものとそれに続く要素を参照するときは小さな大文
字フォントを使用すべきですが，単語が同じ綴りのLisp関数を参照するときは
`@code'を使用すべきです．


File: texinfo-ja.info,  Node: Fonts,  Prev: Smallcaps,  Up: Emphasis

Infoではなく印刷時のフォント
----------------------------

Texinfoには，Infoでは効果が無く印刷されたマニュアルでフォントの変更を指
定する，４つのフォントコマンドを提供しています．`@i'はitalicフォ
ント(TeXのバージョンによっては傾いたフォントが使用される)を要求し，
`@b'はboldフェイスを要求し，`@t'は`@code'で使用さ
れるタイプライター形式のフォントfixed-widthを要求し，そして，
`@r'はテキストの印刷での通常フォントのromanフォントを要求しま
す．すべての４つのコマンドは，それに続くカッコに囲まれた引数に適用します．

  `@r'コマンドのみがよく使用されます．例としてのプログラムで，コード
コメントを等幅フォントからローマンフォントに変更するため，`@r'コマ
ンドを使用することが可能です．これは，印刷された出力で見ためが良くなりま
す．

  例えば，以下のようにします．

     @lisp
     (+ 2 2)    ; @r{Add two plus two.}
     @end lisp

以下を生成します．

     (+ 2 2)    ; Add two plus two.

可能な場合，他の３つのフォントコマンドの使用を避けるべきです．その１つを
使用する必要がある場合，Texinfo言語ではおそらくギャップが生じます．


File: texinfo-ja.info,  Node: Quotations and Examples,  Next: Lists and Tables,  Prev: Marking Text,  Up: Top

引用と例
********

引用と例は，テキストの塊が区切られた１つ以上の段落全体から成り立つテキス
トとなっていて，取り扱いが異なります．通常字下げされます．

Texinfoでは，引用や例は，常に行の最初に単独で@-コマンドを書くことから始
まり，行の最初に単独行で`@end'コマンドを書くことで終ります．例えば，
例を`@example'を行の最初に単独行で書くことで始め，行の始めに単独行
で`@end example'を書くことで終えます．

* Menu:

* Block Enclosing Commands::    Different constructs for different purposes.
* quotation::                   Writing a quotation.
* example::                     Writing an example in a fixed-width font.
* verbatim::                    Writing a verbatim example.
* verbatiminclude::             Including a file verbatim.
* lisp::                        Illustrating Lisp code.
* small::                       Forms for `@smallbook'.
* display::                     Writing an example in the current font.
* format::                      Writing an example without narrowed margins.
* exdent::                      Undo indentation on a line.
* flushleft & flushright::      Pushing text flush left or flush right.
* noindent::                    Preventing paragraph indentation.
* cartouche::                   Drawing rounded rectangles around examples.


File: texinfo-ja.info,  Node: Block Enclosing Commands,  Next: quotation,  Up: Quotations and Examples

ブロックで囲むコマンド
======================

  以下のものは次のセクションで更に説明しますが，引用と例のコマンドです．

`@quotation'
     引用されたテキストを示します．テキストは補充され，字下げされ，そしてデフォ
     ルトでローマンフォントで印刷されます．

`@example'
     コードとコマンドのようなものを例示します．テキストは等幅フォントで印刷さ
     れ，字下げされますが，補充されません．

`@verbatim'
     逐語的に出力されるテキストの一部に印をつけます．次の`@end
     verbatim'まで，置換される文字は無く，すべてのコマンドは無視されます．テ
     キストは固定幅フォントで出力され，字下げも補充もされません．余分なスペー
     スと空の行は重要で，タブは展開されます．

`@smallexample'
     TeXでこのコマンドがより小さいフォントでテキストを植字する以外，
     `@example' と同じです．

`@lisp'
     `@example'に似ていますが，特にLispコードの例示に対するものです．テ
     キストは等幅フォントで印刷され字下げされますが，補充されません．

`@smalllisp'
     `@example'に対する`@smallexample'のような`@lisp'に対す るものです．

`@display'
     例示のテキストを表示します．テキストは字下げされますが補充されず，フォン
     トの選択もされません(そのため，デフォルトでフォントはローマンです)．

`@smalldisplay'
     `@example'に対する`@smallexample'のような`@display'に
     対するものです．

`@format'
     `@display'(テキストは補充されずフォントの選択もありません)に似てい
     ますが，字下げされません．

`@smallformat'
     `@example'に対する`@smallexample'のような`@format'に対
     するものです．

  `@exdent'コマンドは，行の字下げを元に戻すため，上記の構成の中で使
用されます．

  `@flushleft'と`@flushright'コマンドは，補充されないテキスト
の左右のマージンを整えるために使用されます．

  `@noindent'は，それに続くテキストを新しい段落のように字下げするの
を妨げるため，上の構成の１つの後で使用してもかまいません．

  上の構成物の１つの中で角丸の四角を描いて例や引用を強調するため，
`@cartouche'コマンドを使用することが可能です．*Note Drawing Cartouches
Around Examples: cartouche.


File: texinfo-ja.info,  Node: quotation,  Next: example,  Prev: Block Enclosing Commands,  Up: Quotations and Examples

`@quotation'
============

  引用のテキストを，以下の場合以外は普通に処理します．

   *
     マージンがページの中心に近く，そのため引用全体を字下げできない場合．

   * 段落の最初の行が他の行以上に字下げできない場合．

   * 印刷物で，段落間の間隔が減らされている場合．

     これは`@quotation'コマンドと`@end quotation'コマンドの間に書
     かれているテキストの例です．`@quotation'コマンドは，他の(実際また
     は架空の)印刷された本から抜粋されたテキストを示すために，最もよく使用さ
     れます．

  `@quotation'コマンドは単独行のテキストとして書いてください．この行
は出力に現れません．引用の終りを，行の最初に`@end quotation'のみを
含む行で印を付けてください．`@end quotation'行は出力に現れません．
こうして，以下のようになります．

     @quotation
     This is
     a foo.
     @end quotation

以下を生成します．

     This is a foo.


File: texinfo-ja.info,  Node: example,  Next: verbatim,  Prev: quotation,  Up: Quotations and Examples

`@example':例のテキスト
=======================

  `@example'コマンドは，コンピュータの入力や出力のような実行している
テキスト以外の例を示すために使用されます．

     これは，`@example'コマンドと
     `@end example'コマンドの間に書かれている
     テキストの例です．
     字下げされますが補充されません．
     
     印刷されたマニュアルでは，テキストは等幅フォントで植字され，
     余分な空白と空白行は意味があります．Infoファイルでは，
     それぞれの行を５個のスペースで字下げされ，
     似たような結果が得られます．

  `@end example'コマンドを行の最初に単独行に書いて，印を付けてくださ
い．

  例えば，以下のようにします．

     @example
     mv foo bar
     @end example

以下を生成します．

     mv foo bar

  `@example'と`@end example'を含む行は出力に現れません．出力の
見ためが良くなるように，`@example'の前に空白行を置き，もう１つの空
白行を`@end example'の後に置くべきです．始めの`@example'と終 りの`@end
example'の中の空白行は出力に現れることに注意してください．

     *注意:*(逐語的な環境以外の)例の行や問題となりうるTexinfoのあらゆ
     る場所でタブを使用しないでください！TexinfoのTeXの実装ではタブを１つの
     スペースとして扱い，表示されているようにはなりません．(必要な場合，Emacs
     でタブをその領域を占める複数のスペースに変換するため`M-x untabify'
     を使用することが可能です．)

  例は，論理的に言うと段落の"真中にある"ものと，例の後に字下げされずに続
けられるテキストとなります．`@noindent'コマンドはテキストの部分が
新しい段落のように字下げされるのを妨げます． (*Note noindent::.)

  (`@code'コマンドは文の中に埋め込まれるコードの例に使用されますが，
前後のテキストを区切りません．*Note `@code': code.)


File: texinfo-ja.info,  Node: verbatim,  Next: verbatiminclude,  Prev: example,  Up: Quotations and Examples

`@verbatim':リテラルテキスト
============================

コンピュータの入力や出力のような，特殊な文字や解釈して欲しくないコマンド
を含む可能性のあるテキストを出力するために，`@verbatim'の環境を使
用してください(`@example'はそのテキストを通常のTexinfoコマンドとし
て解釈します)．これは，自動的に生成される出力をTexinfoマニュアルに含める
ときに特に役に立ちます．例は以下のようになります．見ることになる出力は，
`@verbatim'の前の行と`@end verbatim'の後の行も含めて，入力と
全く同じになります．


@c This is an example of text written in a @verbatim
@c block.  No character substitutions are made.  All commands
@c are ignored, until `<at>end verbatim'.
@c 
これは，@verbatimブロックの例です．
文字の置換はありません．`<at>end verbatim'まで，
すべてのコマンドは無視されます．

@c In the printed manual, the text is typeset in a
@c fixed-width font, and not indented or filled.  All
@c spaces and blank lines are significant, including tabs.
@c 
印刷されたマニュアルでは，テキストは固定幅フォントで植字され，
字下げも補充もされません．
すべてのスペースと空白行は，タブも含めて重要です．

  `@verbatim'コマンドを行の始めに単独行で書いてください．この行は出
力に現れません．verbatimブロックの終りを`@end verbatim'コマンドで
印を付け，これも行の始めから単独行にしてください．`@end verbatim'
も出力には現れません．

  例えば以下のようにします．

@verbatim
{
<tab>@command with strange characters: @'e
expand<tab>me
}
@end verbatim

以下を生成します．


{
	@command with strange characters: @'e 
expand	me
}

  `@verbatim'と`@end verbatim'を含んでいる行は出力を生成しない
ので，通常は`@verbatim'の前の空白行と，`@end verbatim'の後に
も空白行を書くべきです．最初の`@verbatim'と終りの`@end
verbatim'の間の空白行は出力に現れます．


File: texinfo-ja.info,  Node: verbatiminclude,  Next: lisp,  Prev: verbatim,  Up: Quotations and Examples

`@verbatiminclude' FILE:ファイルをそのまま含める
================================================

  `@verbatiminclude'コマンドでファイルの内容を正確にドキュメントに含
めることが可能です．

     @verbatiminclude FILENAME

  FILENAMEの内容は，verbatimで囲まれたように出力されます (*note
`@verbatim': verbatim.)．一般的に，ファイルはそのまま正確
に出力され，すべての特殊文字と空白はそのままになります．


File: texinfo-ja.info,  Node: lisp,  Next: small,  Prev: verbatiminclude,  Up: Quotations and Examples

`@lisp':Lispの例の印付け
========================

  `@lisp'コマンドはLispコードに対し使用します．それは
`@example'コマンドの類語です．

     これは，`@lisp'コマンドと
     `@end lisp'コマンドの間に書かれたテキストの例です．

  例の性質に関する情報を保護するため，`@example'の代わりに
`@lisp'を使用してください．例えば，TexinfoファイルにLispコードのみ
を評価しそれが全てである関数を書く場合，これは役に立ちます．Lispライブラ
リのようにTexinfoファイルを使用すること可能です．(1) (*note
lisp-Footnote-1::)

  `@lisp'の終りは，単独行の`@end lisp'で印を付けてください．


File: texinfo-ja.info,  Node: lisp-Footnotes,  Up: lisp

  (1)  C，Fortran
や他の言語に対し，類似の流儀で動作するようTexinfoを拡張することは簡単で
す．


File: texinfo-ja.info,  Node: small,  Next: display,  Prev: lisp,  Up: Quotations and Examples

`@small...'ブロックコマンド
===========================

  正規の`@example'と`@lisp'コマンドに加えて，Texinfoは
"small"という例のような形式のコマンドがあります．これらは，
`@smalldisplay'，`@smallexample'，`@smallformat'，そし
て`@smalllisp'です．

  TeXでは，`@small...'コマンドは，小さい例のコマンドより小さ
いフォントでテキストを植字します．したがって，長い行を含んでいる例の多く
は，短くする必要が無いように，ページに適したものになります．

  Infoでは，`@small...'コマンドは，"small"が無いコマンドと同じ です．

  `@small...'ブロックは，対応する`@end small...'で印を
付けてください．例えば`@smallexample'は`@end smallexample'と
組になります．

     これは，`@smallexample'と`@end smallexample'の間に書かれたテ
     キストの例です．Infoでは，このテキストは通常サイズで現れます．しかし
     7x9.25インチのマニュアルでは，このテキストは小さいフォントで現れます．

  `@small...'コマンドで，狭いページに適したものになるよう手動で
例を編集することなく，マニュアルの準備がより簡単になります．

  一般的な規則として，(例えば)`@example'または`@smallexample'
の１つのみを章の中で一貫して使用すると，印刷されたドキュメントはより良く
見えます．たまにだけ，２つの書式を混ぜるべきです．

  `@smallbook'コマンドの詳細は，*Note Printing "Small" Books: smallbook.


File: texinfo-ja.info,  Node: display,  Next: format,  Prev: small,  Up: Quotations and Examples

`@display'と`@smalldisplay'
===========================

  `@display'コマンドは，例のようなものを開始します．印刷されたマニュ
アルで`@display'は等幅フォントを選択しない以外は，`@example'
コマンドに似ています．実際，フォントを全く指定しないので，テキストは
`@display'コマンドを用いていないところに現れるものと同じフォントで
現れます．

     これは，`@display'コマンドと`@end display'コマンドの間に書かれ
     たテキストの例です．`@display'コマンドは，テキストを字下げしますが，
     補充しません．

  Texinfoは`@smalldisplay'コマンドも提供していて，それは
`@display'に似ていますが，`@smallbook'書式でより小さいフォン
トを使用します．*Note small::.


File: texinfo-ja.info,  Node: format,  Next: exdent,  Prev: display,  Up: Quotations and Examples

`@format'と`@smallformat'
=========================

  `@format'コマンドは，印刷されたマニュアルで`@format'が等幅フォ
ントを選択せず，マージンを狭くしないこと以外は，`@example'に似てい
ます．

これは`@format'コマンドと`@end format'コマンドの間に書かれてい
るテキストの例です．
この例で分かるように，
`@format'コマンドは，テキストを補充しません．

  Texinfoは`@smallformat'も提供していて，それは，`@format'に似
ていますが，`@smallbook'書式でより小さいフォントを使用します． *Note
small::.


File: texinfo-ja.info,  Node: exdent,  Next: flushleft & flushright,  Prev: format,  Up: Quotations and Examples

`@exdent': 行の字下げの取り消し
===============================

  `@exdent'コマンドは行が持つ字下げを削除します．このコマンドは行の
最初に書き，同じ行にあるコマンドに続くテキストのみに適用されます．テキス
トの周りにカッコを使用しないでください．印刷されたマニュアルでは，
`@exdent'行のテキストはローマンフォントで印刷されます．

  `@exdent'は通常例の内部で使用されます．このため，以下のようになり
ます．

     @example
     この行は，@@exampleコマンドに続いています．
     @exdent この行は字下げされません．
     この行は字下げされていない行に続いています．
     @@end exampleは次の行にあります．
     @end example

以下を生成します．

     この行は，@exampleコマンドに続いています．
この行は字下げされません．
     この行は字下げされていない行に続いています．
     @end exampleは次の行にあります．

  実際は，`@exdent'コマンドは滅多に使用されません．通常幅に変えるた
め，通常は例を終りにしたり，ページをかえたりして，テキストを字下げしない
ようにします．


File: texinfo-ja.info,  Node: flushleft & flushright,  Next: noindent,  Prev: exdent,  Up: Quotations and Examples

`@flushleft'と`@flushright'
===========================

  `@flushleft'と`@flushright'コマンドは，ページの左右のマージ
ンで行の終りを整えますが，テキストを補充しません．コマンドはカッコを使用
せず，単独行に書かれます．`@flushleft'と`@flushright'コマン
ドは，単独行の`@end flushleft'と`@end flushright'コマンドで
終りになります．

  例えば，以下のようにします．

     @flushleft
     このテキストは
     左揃えで書かれています．
     @end flushleft

以下を生成します．

     このテキストは
     左揃えで書かれています．

  `@flushright'は，手紙の返信先住所でよく使用される字下げの形式を生
成します．例えば，以下のようにします．

     @flushright
     これは，右揃えで書かれてたテキストの例です．
     @code{@flushright}コマンドは
     全ての行を右揃えにしますが，
     左端はバラバラのままです．
     @end flushright

以下を生成します．

                           これは，右揃えで書かれてたテキストの例です．
                                                `@flushright'コマンドは
                                           全ての行を右揃えにしますが，
                                             左端はバラバラのままです．


File: texinfo-ja.info,  Node: noindent,  Next: cartouche,  Prev: flushleft & flushright,  Up: Quotations and Examples

`@noindent': 字下げを行なわない
===============================

例やその他の包含物は，段落を部分に切り分けます．通常，フォーマッタは例に
続くテキストを新しい段落として字下げします．しかし，`@noindent'を
行の最初に単独行に書き，それに続くテキストの前に書くことで，これを妨げる
ことが可能です．

  例えば，以下のようにします．

     @example
     これは例です．
     @end example
     
     @noindent
     この行は，字下げされません．御覧のように，行の最初は
     その後も続けて全体が左寄せになっています．
     (この全体の例は，@code{@@display}と
     @code{@@end display}の間にあります．)

以下を生成します．

          これは例です．
     
     
     この行は，字下げされません．御覧のように，行の最初は
     その後も続けて全体が左寄せになっています．
     (この全体の例は，`@display'と`@end
     display'の間にあります．)

  Info出力で空白行の数を正確に調整するため，`@noindent'を含む行は，
空白行を生成せず，`@end example'行もそうしないことを覚えておいてく
ださい．

このマニュアルのTexinfoソースファイルでは，`以下を生成します'と書いてあ
るそれぞれの行の前に，`@noindent'を含む行があります．

  `@noindent'コマンドの後にカッコを書かないでください．
`@noindent'は段落の外で使用されるので，それは不要です (*note Command
Syntax::)．


File: texinfo-ja.info,  Node: cartouche,  Prev: noindent,  Up: Quotations and Examples

`@cartouche':例の周りに枠を描く
===============================

  印刷されたマニュアルで，`@cartouche'コマンドは，その内容の周りに角
丸の箱を描きます．例や引用をより強調するために使用することが可能です．例
えば，例の１つの形式が強調のため枠で囲まれているマニュアルを書くことが可
能です．

  `@cartouche'は印刷されたマニュアルのみで効果があります．他の出力で
は効果がありません．

  例えば，以下のようにします．

     @example
     @cartouche
     % pwd
     /usr/local/share/emacs
     @end cartouche
     @end example

２行の例は，印刷されたマニュアルで，角丸の箱で囲まれます．


File: texinfo-ja.info,  Node: Lists and Tables,  Next: Indices,  Prev: Quotations and Examples,  Up: Top

リストと表
**********

Texinfoにはリストと表を作成する方法がいくつかあります．リストは黒丸また
は番号が付きます．２列の表は，最初の列の項目が強調されます．複数列の表も
サポートされています．

* Menu:

* Introducing Lists::           Texinfo formats lists for you.
* itemize::                     How to construct a simple list.
* enumerate::                   How to construct a numbered list.
* Two-column Tables::           How to construct a two-column table.
* Multi-column Tables::         How to construct generalized tables.


File: texinfo-ja.info,  Node: Introducing Lists,  Next: itemize,  Prev: Lists and Tables,  Up: Lists and Tables

リストの導入
============

Texinfoは，リストや表のテキストの字下げと，列挙されたリストの番号付けを
自動的に行います．この最後の機能は，リストを編集する場合に番号を付け直す
必要が無いので便利です．

  番号付のリストと表は，行の最初を適切な@-コマンドで開始し，単独行の対応
する`@end'コマンドで終了します．表と項目に分けられたリストのコマン
ドも，開始の@-コマンドと同じ行に書式化情報を書くことを要求します．

  例えば，`@enumerate'コマンドで列挙リストを開始し，`@end
enumerate'コマンドでリストを終了してください．項目分けリストを
`@itemize'コマンドで開始し，`@bullet'のような書式化コマンド
を同じ行に続け，`@end itemize'コマンドでリストを終了してください．

  リストのそれぞれの要素は，`@item'や`@itemx'コマンドに前置し ます．


異なる種類の表とリストの項目分けされたリストは以下のようになります．

   * 黒点有りと無しの項目分けされたリスト．

   * 番号や文字を使用した列挙リスト．

   * 強調のある２列の表．


同じ項目で列挙されたリストは以下のようになります．

  1. 黒点有りと無しの項目分けされたリスト．

  2. 番号や文字を使用した列挙リスト．

  3. 強調のある２列の表．


そして，同じ項目と@-コマンドの２列の表は以下のようになります．

`@itemize'
     黒点有りと無しの項目分けされたリスト．

`@enumerate'
     番号や文字を使用した列挙リスト．

`@table'
`@ftable'
`@vtable'
     強調のある２列の表．


File: texinfo-ja.info,  Node: itemize,  Next: enumerate,  Prev: Introducing Lists,  Up: Lists and Tables

`@itemize': 項目分けされたリストの作成
======================================

  `@itemize'コマンドは，印が必要なそれぞれの段落の最初に左のマージン
に黒丸や他の印を使用した，字下げされた段落の並びを生成します．

  行の最初に`@itemize'を書き，項目分けされたリストを開始します．コマ
ンドに続く同じ行に，文字やマークを生成するTexinfoコマンドを続けてくださ
い．通常，`@itemize'の後に`@bullet'を書きますが，
`@minus'や結果としてInfoファイルで１文字を生成するあらゆるコマンド
や文字を使用することが可能です．全く印をを付けたくない場合は`@w'
を使用してください．(`@itemize'コマンド後に`@bullet'のような
コマンドを書く場合，`{}'を省略できます．)マークコマンドを指定しな
い場合はデフォルトは`@bullet'です．

  `@itemize'の後に，`@end itemize'の行まで．字下げされた段落自
身のテキストを書いてください．

  マージンに要求される印に対して，それぞれの段落の前に`@item'のみの
行を書いてください．`@item'にテキストを続けても構いません．

  通常，`@item'の前に空白行を書くべきです．これはInfoファイルにも空
白行を書きます．(TeXは，どちらの場合でも適切な空白を行間に挿入します．)
項目が非常に短いとき以外は，これらの空白行でリストの見ためが良くなります．

  `@itemize'の使用に続き，それが生成する出力の例は以下のようになりま
す．`@bullet'はInfoでは`*'，TeXでは丸い点を生成します．

     @itemize @bullet
     @item
     fooに対するいくつかのテキスト．
     
     @item
     barに対する
     いくつかのテキスト．
     @end itemize

これは，以下を生成します．

        * fooに対するいくつかのテキスト

        * barに対する いくつかのテキスト．

項目分けされたリストには，他の項目分けされたリストを埋め込んでもかまいま
せん．黒点で印を付けたリストの中にダッシュで印を付けたリストを埋め込んだ
ものは以下のようになります．

     @itemize @bullet
     @item
     最初の項目．
     
     @itemize @minus
     @item
     内部の項目．
     
     @item
     ２番目の内部の項目．
     @end itemize
     
     @item
     ２番目の外部項目．
     @end itemize

これは，以下を生成します．

        * 最初の項目．

             - 内部の項目．

             - ２番目の内部の項目．

        * ２番目の外部項目．


File: texinfo-ja.info,  Node: enumerate,  Next: Two-column Tables,  Prev: itemize,  Up: Lists and Tables

`@enumerate': 数字や文字が付いたリストの作成
============================================

  `@enumerate'は，アイテムのラベルが黒丸の代わりに，連続した整数や文
字となる以外，`@itemize'に似ています(*note `@itemize': itemize.)．

  `@enumerate'コマンドを行の最初に書いてください．コマンドは引数を要
求しませんが，オプションとして数字または文字を受け入れます．引数を用いな
いと，`@enumerate'は数字`1'でリストを開始します．`3'のよ
うな数字の引数を用いると，コマンドはその番号からリストを開始します．
`a'または`A'のような大文字または小文字を用いると，コマンドはそ
の文字でリストを開始します．

項目分けされたリストと同じ方法で，列挙されたリストのテキストを書いてくだ
さい．列挙したいそれぞれの段落を始める前に，単独行に`@item'を置い
てください．`@item'で始まる行に他のテキストは一切書かないでくださ い．

リストの項目の間に空白行を書くべきです．一般にInfoファイルが読みやすくな
ります．

  引数の無い`@enumerate'の例は以下のようになります．

     @enumerate
     @item
     根本的な原因．
     
     @item
     直接の原因．
     @end enumerate

これは以下を生成します．

  1. 根本的な原因．

  2. 直接の原因．


  `3'を引数とした例は以下のようになります．

     @enumerate 3
     @item
     元となる原因．
     
     @item
     逆の原因．
     
     @item
     永続する原因．
     @end enumerate

これは以下を生成します．

  3. 元となる原因．

  4. 逆の原因．

  5. 永続する原因．


  選択肢に関する短い概要は以下のようになります．概要は，`a'の引数で
`@enumerate'を使用して組み立てられています．

  a. `@enumerate'

     引数を用いないと，番号付リストを生成し，それは数字１で始まります．

  b. `@enumerate POSITIVE-INTEGER'

     (正の)数字の引数を用いると，その数字で番号付のリストを開始します．他の文
     章で中断されたリストを続けるために，これを使用することが可能です．

  c. `@enumerate UPPER-CASE-LETTER'

     大文字の引数を用いると，それぞれの項目がその大文字で始まる文字で印が付い
     たリストを開始します．

  d. `@enumerate LOWER-CASE-LETTER'

     小文字の引数を用いると，それぞれの項目がその小文字で始まる文字で印が付い
     たリストを開始します．

  アウトラインのように，番号付のリストを入れ子にすることも可能です．


File: texinfo-ja.info,  Node: Two-column Tables,  Next: Multi-column Tables,  Prev: enumerate,  Up: Lists and Tables

２列の表の作成
==============

  `@table'は，`@itemize'(*note `@itemize': itemize.)に
似ていますが．それぞれの項目に対して名前や見出し行を指定できます．
`@table'コマンドは，２列の表を生成するために使用され，特に，用語集，
説明的な表示，そしてコマンドラインオプションの概要に役に立ちます．

* Menu:

* table::                       How to construct a two-column table.
* ftable vtable::               Automatic indexing for two-column tables.
* itemx::                       How to put more entries in the first column.


File: texinfo-ja.info,  Node: table,  Next: ftable vtable,  Prev: Two-column Tables,  Up: Two-column Tables

`@table'コマンドの使用
----------------------

  ２列の表を生成するために`@table'コマンドを使用してください．

  `@table'コマンドを行の最初に書き，同じ行に`@code'，
`@samp'，`@var'や，`@kbd'(*note Indicating::)のような
Texinfoの"表示"コマンドを引数として続けてください．これらのコマンドは
通常カッコで引数が続きますが，`@item'は引数を供給するので，この場
合は引数無しでコマンド名を使用します．このコマンドは，それぞれの項目の最
初の列になるテキストに適用され，強調方法を決定します．例えば，
`@code'は最初の列のテキストを`@code'コマンドで強調します．
(我々はコマンドラインオプションの`@table'に対し`@code'を勧め ます．)

  `@table'の引数として，`@asis'コマンドの使用を選択してもかま
いません．`@asis'は何もしないコマンドです．`@table'の後にこ
のコマンドを使用した場合，TeXとInfoの書式化コマンドは，最初の列の項目
を強調せず("そのまま")出力します．

  (`@table'コマンドは，ここでリストアップした以外のコマンドを用いて
作業してもかまいません．しかし，通常はカッコ内に引数をとるコマンドのみが
使用可能です．)

  それぞれの表の項目を，行の最初の`@item'コマンドで開始してください．
最初の列のテキストを`@item'コマンドと同じ行に書いてください．２番目
の列のテキストを`@item'行に続く行と，それ以降の行に書いてください．
(２番目の列の項目が空の場合，何も入力する必要はありません．)サポートする
テキストは好きな行数を書いてもかまいませんし，複数の段落にしてもかまいま
せん．しかし，`@item'と同じ行のテキストのみ，脚注も含めて，最初の
列に配置されます．

  通常，`@item'行の前に空白行を書くべきです．これはInfoファイルで空
白を書きます．項目が非常に短いとき以外は，空白行は見ためが良くなります．

  例えば，以下の表は最初の列を`@samp'で強調しています．

     @table @samp
     @item foo
     これは@samp{foo}に対する
     テキストです．
     @item bar
     @samp{bar}に対するテキストです．
     @end table

これは，以下を生成します．

`foo'
     これは`foo'に対する テキストです．

`bar'
     @samp{bar}に対するテキストです．

  ２行以上の名前の項目を１つの塊のテキストでリストアップしたい場合，
`@itemx'コマンドを使用してください．(*Note `@itemx': itemx.)


File: texinfo-ja.info,  Node: ftable vtable,  Next: itemx,  Prev: table,  Up: Two-column Tables

`@ftable'と`@vtable'
--------------------

  `@ftable'と`@vtable'コマンドは，`@ftable'が自動的に表
の最初の列のそれぞれの項目を関数の索引に入れ，`@vtable'が自動的に
表の最初の列のそれぞれの項目を変数の索引に入れる以外，`@table'コマ
ンドと同じです．これは，索引作成の仕事を単純にします．`@item'コマ
ンドと同じ行の項目のみ索引になり，それらはその行の表示と全く同じ形式で索
引になります．索引の詳細は，*Note Indices::.

  `@ftable'や`@vtable'を使用している２列の表は，行の最初に@-コ
マンドを書くことで開始し，同じ行に引数として`@table'コマンドに対す
るものと全く同じものを，`@code'コマンドのようなTexinfoコマンドで続
けてください．そして，単独行で`@end ftable'や`@end vtable'コ
マンドを使用して終りにしてください．

  前のセクションの`@table'の例を参照してください．


File: texinfo-ja.info,  Node: itemx,  Prev: ftable vtable,  Up: Two-column Tables

`@itemx'
--------

同じ項目で，最初の列の項目が２つ以上あり，それぞれを単独行に現したい場合，
`@itemx'コマンドを表の中で使用してください．`@itemx'を最初の
項目以外の全てに使用してください．`@itemx'は常に`@item'コマ
ンドに続けるべきです．`@itemx'コマンドは，最初の列のテキストの上に
余分な空白を生成しない以外は，`@item'と全く同じように動作します．

  例えば，以下のようにします．

     @table @code
     @item upcase
     @itemx downcase
     この２つの関数は，引数として文字や文字列を受け入れ，対応した大文字(小文字)
     の文字や文字列を返します．
     @end table

これは以下を生成します．

`upcase'
`downcase'
     この２つの関数は，引数として文字や文字列を受け入れ，対応した大文字(小文字)
     の文字や文字列を返します．

(この例は，２列の表に複数行をサポートしているテキストを表現していることに
注意してください．)


File: texinfo-ja.info,  Node: Multi-column Tables,  Prev: Two-column Tables,  Up: Lists and Tables

複数列の表
==========

  `@multitable'で，それぞれの列が希望の幅を持つ，あらゆる数の列を持
つ表を構築することが可能となります．

  単独の`@multitable'行で列の幅を定義し，`@tab'コマンドで分け
られた列で，`@item'コマンドに続けて，実際の表のそれぞれの行を書き
ます．最終的に，`@end multitable'で表を終了します．詳細は以下のセ
クションにあります．

* Menu:

* Multitable Column Widths::    Defining multitable column widths.
* Multitable Rows::             Defining multitable rows, with examples.


File: texinfo-ja.info,  Node: Multitable Column Widths,  Next: Multitable Rows,  Up: Multi-column Tables

複数列の表の幅
--------------

複数行の表の列の幅を２つの方法で定義することが可能です．行の長さを小数と
する方法，または行のプロトタイプを使用する方法です．２つの方法を混ぜたも
のはサポートしていません．どちらの場合でも，`@multitable'コマンド
と同じ行で幅は完全に定義されます．

  1. 行の長さ全体の小数として列の幅を指定するため，`@columnfractions'と
     (１より小さい)10進数を`@multitable'コマンドの後に以下のように書いて
     ください．

          @multitable @columnfractions .33 .33 .33

     小数部は上記がそうでないように，和が正確に1.0になる必要はありません．こ
     れで，行全体を満たす必要の無い表を生成することができます．好みで0を前置
     することが可能です．

  2. 行のプロトタイプを指定するため，それぞれの列で最も長い項目を，
     `@multitable'コマンドの後にカッコで囲んで書いてください．例えば，
     以下のようにします．

          @multitable {some text for column one} {for column two}

     最初の列は，`some text for column
     one'で植字される幅を持ち，２列目は`for column two'の幅を持ちます．

     プロトタイプ項目が表に現れる必要はありません．

     この例で単純なテキストを使用しましたが，プロトタイプ項目にTexinfoコマン
     ドを含めることが可能です．`@code'のようなマークアップコマンドは，
     特に役に立つ可能性が高いです．



File: texinfo-ja.info,  Node: Multitable Rows,  Prev: Multitable Column Widths,  Up: Multi-column Tables

複数列の表の行
--------------

  列の幅を定義する`@multitable'(前のセクション参照)の後で，
`@item'で複数列の表の本体にそれぞれの行を開始し，列項目を
`@tab'で分けます．改行は表の本体で特別扱いされず，必要な場所でソー
スファイルの入力行を改行してもかまいません．

  複数列の表の完全な例は以下のようになります(`The GNU Emacs Manual'か
らのテキストで，*note Splitting Windows: (emacs)Split Window.)．

     @multitable @columnfractions .15 .45 .4
     @item Key @tab Command @tab Description
     @item C-x 2
     @tab @code{split-window-vertically}
     @tab Split the selected window into two windows,
     with one above the other.
     @item C-x 3
     @tab @code{split-window-horizontally}
     @tab Split the selected window into two windows
     positioned side by side.
     @item C-Mouse-2
     @tab
     @tab In the mode line or scroll bar of a window,
     split that window.
     @end multitable

以下を生成します．

Key         Command                          Description
C-x 2       `split-window-vertically'        Split the selected window
                                             into two windows, with one
                                             above the other.
C-x 3       `split-window-horizontally'      Split the selected window
                                             into two windows positioned
                                             side by side.
C-Mouse-2                                    In the mode line or scroll
                                             bar of a window, split that
                                             window.


File: texinfo-ja.info,  Node: Indices,  Next: Insertions,  Prev: Lists and Tables,  Up: Top

索引
****

Texinfoを使用すると，項目を手動で並べ替えしたりページ順に揃える必要も無
く索引を生成できます．索引では，項目はアルファベット順(1) (*note
Indices-Footnote-1::)に，それぞれの項目の記述を見つけ
る方法の情報と共にリストアップされます．印刷されたマニュアルでは，この情
報にはページ番号が含まれます．Infoファイルでは，この情報は参照された最初
のノードへ導くメニュー項目となります．

Texinfoは，前もって定義されている索引の種類も提供しています．関数の索引，
変数の索引，概念の索引などです．索引を統合したり，典型的な目的以外のため
に使用することができます．好みで独自の索引も定義可能です．

* Menu:

* Index Entries::               Choose different words for index entries.
* Predefined Indices::          Use different indices for different kinds
                                  of entry.
* Indexing Commands::           How to make an index entry.
* Combining Indices::           How to combine indices.
* New Indices::                 How to define your own indices.


File: texinfo-ja.info,  Node: Indices-Footnotes,  Up: Indices

  (1) 訳注:あ いうえお順には，現在対応していません．


File: texinfo-ja.info,  Node: Index Entries,  Next: Predefined Indices,  Prev: Indices,  Up: Indices

索引項目の作成
==============

索引項目を作成するとき，人々が何かを探す際に異なる方法で行なえるように考
えることは良いことです．何かを探すとき，人が変われば単語も_変わりま
す_．役に立つ索引には，人々が使用する可能性のある，全ての異なる単語で索
引にされた項目があります．例えば，ある読者は単語"Index"は一般的な概念
なので，索引の２文字の名前は"Indices, two-letter names"にあって当然だ
と考えるかもしれません．しかし，もう一人の読者は，２文字の名前の特定の概
念を覚えていて，"Two letter names for indices"としてリストアップされて
いる項目を探すかもしれません．良い索引は，両方の項目を持ち，それは両方の
読者を助けるでしょう．

植字のように，索引の構築は高度に熟練した専門的な芸術品で，自分で構築する
必要が無ければ正当に評価できない繊細なものです．

本の終りに索引を印刷する，またはInfoファイルで索引メニューを作成する方法
の情報は，*Note Printing Indices & Menus::.


File: texinfo-ja.info,  Node: Predefined Indices,  Next: Indexing Commands,  Prev: Index Entries,  Up: Indices

前もって定義されている索引
==========================

  Texinfoは6つの前もって定義されている索引を提供しています．

   * "概念の索引"は記述してある概念をリストアップします．

   *
     "関数の索引"は(ライブラリのエントリポイントのような)関数をリストアッ
     プします．

   *
     "変数の索引"は(ライブラリのグローバル変数のような)変数をリストアップ
     します．

   * "キーストロークの索引"はキーボードコマンドをリストアップします．

   * "プログラムの索引"はプログラム名をリストアップします．

   *
     "データ型の索引"は(ヘッダファイルの構造体の定義のような)データ型をリ
     ストアップします．

全てのマニュアルがこれらの全てを必要とするわけではなく，ほとんどのマニュ
アルはその２，３を使用します．このマニュアルには２つの索引があります．概
念の索引と，@-コマンドの索引(実際には関数索引ですが，章見出しでコマンド
索引と呼ばれています)です．２つ以上の索引を，`@synindex'や
`@syncodeindex'コマンドを使用して，１つに統合することが可能です． *Note
Combining Indices::.


File: texinfo-ja.info,  Node: Indexing Commands,  Next: Combining Indices,  Prev: Predefined Indices,  Up: Indices

索引の項目の定義
================

索引を作成するデータは，Texinfoソースファイル中に散らばってる多くの個別
の索引コマンドからきます．それぞれのコマンドは，１つの項目を特定の索引に
加わるよう伝えます．書式化後，索引は現在のページ番号や参照するノード名を
与えます．

索引項目は，行の最初に索引コマンドを書き，残りの行に項目と続けることから
成り立ちます．

  例えば，このセクションは，概念索引のため５つの項目が続いています．

     @cindex Defining indexing entries
     @cindex Index entries
     @cindex Entries for an index
     @cindex Specifying index entries
     @cindex Creating index entries

  それぞれの前もって定義された索引は，それ自身の索引コマンドがあります
-- それは，概念索引に対する`@cindex'，関数索引に対する`@findex'
などです．

概念の索引項目は，テキストから成り立ちます．索引を書く最も良い方法は，簡
潔且つ明確な項目を選択することです．こうすることが可能な場合，項目が大文
字化されておらず，文の内部に現れるものを書く方が，索引は見栄えが良くなり
ます．(常に大文字で書かれる固有名前や頭字語を大文字化してください．)これ
は，我々がほとんどのGNUマニュアルの索引で使用する慣習している事実です．

簡潔且つ明確な項目を作成する方法を知らない場合，より長い明確なものを作成
してください -- 簡潔で紛らわしいものを作成しないでください．項目の多く
が数単語の場合，異なる慣習(それぞれの項目の最初の単語を大文字にする)を使
用した方が索引は良く見えます．しかし，CやLispの関数名やシェルコマンドの
ような大文字小文字を識別する名前を大文字化してはいけません．それはスペル
エラーとなります．

  どちらを慣習として使用した場合でも，それを慣習として使用してください！

概念の索引以外の索引の項目は，プログラム言語やプログラム名のシンボル名で
す．これらの名前は通常大文字小文字を識別するので，それらが要求する大文字
または小文字を使用してください．

デフォルトで，概念の索引の項目は小さなローマンフォントで印刷され，他の索
引の項目は`@code'フォントで印刷されます．項目の一部の印刷方法を，
ファイル名に対する`@file'や，強調に対する`@emph'のような (*note Marking
Text::)，通常のTexinfoコマンドで変更してもかまいません．

  前もって定義されている６つの索引コマンドは以下のものがあります．

`@cindex CONCEPT'
     CONCEPTに対して概念の索引の項目を作成します．

`@findex FUNCTION'
     FUNCTIONに対して関数の索引の項目を作成します．

`@vindex VARIABLE'
     VARIABLEに対して変数の索引の項目を作成します．

`@kindex KEYSTROKE'
     KEYSTROKEに対してキー索引の項目を作成します．

`@pindex PROGRAM'
     PROGRAMに対してプログラムの索引の項目を作成します．

`@tindex DATA TYPE'
     DATA TYPEに対してデータ型の索引の項目を作成します．

     *注意:*索引項目にコロンを使用しないでください．Infoでは，コロンは
     ノード名と項目名を分離するので，項目自身のコロンでInfoは混乱します．メ
     ニュー項目の構造の詳細は，*Note The Parts of a Menu: Menu Parts.

それらの標準的な目的のために，前もって定義されている索引を実際に使用する
ことを要求されているわけではありません．例えば，Cプリプロセッサマクロの
索引を望む場合を考えます．それらに対し`@findex'コマンドを書くこと
で，それらを実際の関数に属する関数索引に書くことが可能です．そして，番号
付けされていない章として"関数の索引"を印刷するとき，タイトルに`関数と
マクロの索引'を与えることで読者に対しも全く矛盾しません．または，マクロ
を`@tindex'コマンドでデータ型に書き，それに適した索引タイトルを与
えると読者は理解できるでしょう．(*Note Printing Indices & Menus::.)


File: texinfo-ja.info,  Node: Combining Indices,  Next: New Indices,  Prev: Indexing Commands,  Up: Indices

索引の統合
==========

索引の１つがおかしいくらい小さいなどの理由から，関数と概念のように２つに
分離されている索引を統合したいこともあります．

  `@cindex'コマンドを`@findex'コマンドの代わりに書くことで関数
を概念ど索引に書き，`関数の索引'と印刷するのではなく`関数と概念の索引'
というタイトルで概念索引を印刷することで，一貫したマニュアルを生成するこ
とは可能でしょう．しかし，これは強力な手続きではありません．それはドキュ
メントが，分離されている関数の索引を持つように設計されていない他のドキュ
メントに挿入される場合のみ動作します．そのようなドキュメントにドキュメン
トを挿入した場合，ドキュメントの関数と他から持って来たものは一緒になりま
せん．また，関数名は概念の索引の右側に表示するため，`@code'のカッ
コの間にそれらの１つを個別に囲む必要もあります．

* Menu:

* syncodeindex::                How to merge two indices, using `@code'
                                  font for the merged-from index.
* synindex::                    How to merge two indices, using the
                                  default font of the merged-to index.


File: texinfo-ja.info,  Node: syncodeindex,  Next: synindex,  Up: Combining Indices

`@syncodeindex'
---------------

  関数と概念を１つの索引に統合したいとき，関数を`@findex'で索引にし，
概念を`@cindex'で索引にし，そして関数の索引の項目を概念索引にリダ
イレクトするため`@syncodeindex'コマンドを使用すべきです．

  `@syncodeindex'コマンドは２つの引数をとります．それらはリダイレク
ト元の索引名と，リダイレクト先の索引名です．テンプレートは以下のようにな
ります．

     @syncodeindex FROM TO

  この目的のため，索引には２文字の名前が与えられています．

`cp'
     概念の索引

`fn'
     関数の索引

`vr'
     変数の索引

`ky'
     キーの索引

`pg'
     プログラムの索引

`tp'
     データ型の索引

  `@syncodeindex'コマンドを，Texinfoファイルの最初にend-of-header行
の前または直後に書いてください．例えば，関数の索引を概念の索引に統合する
ため以下のように書いてください．

     @syncodeindex fn cp

これで，関数の索引にとして指定されている全ての項目は，代わりに概念索引に
統合されます．

変数の索引と関数の索引の両方を概念の索引に統合するため以下のように書きま
す．

     @syncodeindex vr cp
     @syncodeindex fn cp

  `@syncodeindex'コマンドは`from'索引(リダイレクトされる索引)からの
全ての項目を`@code'フォントにし，それは，項目がリダイレクト先の索
引で使用してデフォルトフォントが何であろうと優先します．このように，関数
名を関数索引から概念索引にリダイレクトする場合，全ての関数名は期待したよ
うに`@code'フォントで印刷されます．


File: texinfo-ja.info,  Node: synindex,  Prev: syncodeindex,  Up: Combining Indices

`@synindex'
-----------

  `from'索引項目を`@code'フォントに置き換えない以外，
`@synindex'コマンドは`@syncodeindex'コマンドとほとんど同じで
す．その代わりにローマンフォントに置き換えます．このため，概念の索引を関
数の索引に統合するとき`@synindex'を使用します．

本の終りに索引を印刷したり，Infoファイルに索引メニューを作成する詳細は，
*Note Printing Indices & Menus::.


File: texinfo-ja.info,  Node: New Indices,  Prev: Combining Indices,  Up: Indices

新しい索引の定義
================

  前もって定義されている索引に加えて，`@defindex'と
`@defcodeindex'コマンドを，新しい索引を定義するために使用してもか
まいません．これらのコマンドは，索引項目の印に使用する新しい索引を作成す
る@-コマンドを作成します．`@defindex'コマンドは以下のように使用し ます．

     @defindex NAME

  索引の名前は`au'のような２文字の単語にするべきです．例えば，以下のよ
うにします．

     @defindex au

  これは`au'索引と呼ばれる新しい索引を定義します．同時に，新しい索引
作成コマンド`@auindex'を作成し，索引項目の印付けに使用することが可
能になります．新しい索引コマンドを，前もって定義されている索引コマンドと
全く同じように使用してください．

  例えば，セクション見出しに概念索引項目と２つの`au'索引項目が続いた
例は以下のようになります．

     @section Cognitive Semantics
     @cindex kinesthetic image schemas
     @auindex Johnson, Mark
     @auindex Lakoff, George

(明らかに，`au'はここで"著者"の省略として提供されています．)
Texinfoは`index'を使用した索引の名前を連結して，新しい索引コマンド
を構成します．このため，`au'索引の定義は自動的に`@auindex'コ
マンドの作成を行います．

  前もって定義されている索引で使用したように，`@printindex'コマンド
を索引を印刷するために使用してください．例えば以下のようにします．

     @node Author Index, Subject Index, , Top
     @unnumbered Author Index
     
     @printindex au

  印刷物でローマンフォントの代わりに`@code'フォントで項目を印刷する
以外，`@defcodeindex'は`@defindex'コマンドに似ています．この
ように，それは`@cindex'コマンドより`@findex'コマンドに似てい ます．

  新しい索引をTexinfoファイルのend-of-headerの内部か直後に，あらゆる
`@synindex'や`@syncodeindex'コマンド(*note Texinfo File
Header::)の前で使用すべきです．


File: texinfo-ja.info,  Node: Insertions,  Next: Breaks,  Prev: Indices,  Up: Top

特別なものの挿入
****************

Texinfoは，カッコのようなTexinfoで特別な意味を持つ文字を挿入するためと，
入力可能な単純な文字に対応しない他の画像要素に対するコマンドもいくつかあ
ります．

* Menu:

* Braces Atsigns::              How to insert braces, `@'.
* Inserting Space::             How to insert the right amount of space
                                  within a sentence.
* Inserting Accents::           How to insert accents and special characters.
* Dots Bullets::                How to insert dots and bullets.
* TeX and copyright::           How to insert the TeX logo
                                  and the copyright symbol.
* pounds::                      How to insert the pounds currency symbol.
* minus::                       How to insert a minus sign.
* math::                        How to format a mathematical expression.
* Glyphs::                      How to indicate results of evaluation,
                                  expansion of macros, errors, etc.
* Footnotes::                   How to include footnotes.
* Images::                      How to include graphics.


File: texinfo-ja.info,  Node: Braces Atsigns,  Next: Inserting Space,  Prev: Insertions,  Up: Insertions

@とカッコの挿入
===============

  `@'と弓カッコはTexinfoで特別な文字です．これらの文字がテキストに現
れるように挿入するため，Texinfoが誤解することを避けるため，`@'をこ
れらの文字の前に書く必要があります．

  これらのコマンドの後にカッコを書かないでください．それらは不要です．

* Menu:

* Inserting An Atsign::         How to insert `@'.
* Inserting Braces::            How to insert `{' and `}'.


File: texinfo-ja.info,  Node: Inserting An Atsign,  Next: Inserting Braces,  Prev: Braces Atsigns,  Up: Braces Atsigns

`@'を@@で挿入する
-----------------

  `@@'は，印刷物やInfoで単一の`@'を意味します．

  `@@'コマンドの後にカッコを書かないでください．


File: texinfo-ja.info,  Node: Inserting Braces,  Prev: Inserting An Atsign,  Up: Braces Atsigns

`{'と`}'を@{と@}で挿入する
--------------------------

  `@{'は印刷物やInfoで単一の`{'を意味します．

  `@}'は印刷物やInfoで単一の`{'を意味します

  `@{'や`@}'コマンドの後にカッコを書かないでください．


File: texinfo-ja.info,  Node: Inserting Space,  Next: Inserting Accents,  Prev: Braces Atsigns,  Up: Insertions

空白の挿入
==========

以下のセクションでは，文の中や後の様々な種類の空白を制御するコマンドを記
述します．

* Menu:

* Not Ending a Sentence::       Sometimes a . doesn't end a sentence.
* Ending a Sentence::           Sometimes it does.
* Multiple Spaces::             Inserting multiple spaces.
* dmn::                         How to format a dimension.


File: texinfo-ja.info,  Node: Not Ending a Sentence,  Next: Ending a Sentence,  Up: Inserting Space

文を終了しない
--------------

ピリオドや，感嘆符や疑問符が文の中か終りにあるかに依存して，植字されたピ
リオドの後に，少しまたは多くの空白が挿入されます．ピリオドが文を終るとき
と省略で使用されるときとを常に決定できるわけではないので，特別なコマンド
が必要な状況もあります．通常，Texinfoはピリオドの扱い方を推測できるので，
特別なコマンドは必要ありません．タイプライターを使用するときのようにピリ
オドを入力し，それは２つの空白をピリオド，疑問符，または感嘆符の後に文の
終りとして書くことを意味しています．

余分な空白を続けるべきではないピリオド，疑問符，感嘆符，またはコロンの後
に`@:'コマンドを使用してください．例えば，文の終りではない省略の
終りのピリオドの後に`@:'を使用してください．

  例えば，以下のようにします．

     The s.o.p.@: has three parts ...
     The s.o.p. has three parts ...

以下を生成します．

     The s.o.p. has three parts ...
     The s.o.p. has three parts ...

(ついでながら，`s.o.p.'は"Standard Operating Procedure"の略を意味
します．)

  `@:'はInfo出力で効果はありません．`@:'の後にカッコを置かない
でください．


File: texinfo-ja.info,  Node: Ending a Sentence,  Next: Multiple Spaces,  Prev: Not Ending a Sentence,  Up: Inserting Space

文を終える
----------

  単一の大文字で終る文の終りのピリオドの代わりに`@.'，感嘆符の代わ
りに`@!'，そして疑問符の代わりに`@?'を使用してください．
そうしない場合，TeXは文字を省略だと考え，正しい文の終りの空白を挿入し
ません．例は以下のようになります．

     Give it to M.I.B. and to M.E.W@.  Also, give it to R.J.C@.
     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.

以下を生成します．

     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.
     Give it to M.I.B. and to M.E.W.  Also, give it to R.J.C.

  Infoファイル出力では，`@.'は単なる`.'と同じです．
`@!'と`@?'も同様です．

  Texinfoの`@:'と`@.'のマージンは，Emacsの文の移動コマンド (*note
Sentences: (emacs)Sentences.)でうまく動作します．

  これらのコマンドの後にカッコを書かないでください．


File: texinfo-ja.info,  Node: Multiple Spaces,  Next: dmn,  Prev: Ending a Sentence,  Up: Inserting Space

複数のスペース
--------------

  通常TeXは，複数の空白文字(スペース，タブと，改行)を単一のスペースに縮
めます．一方Info出力では，改行をスペースにする以外，入力した通りの空白を
維持します．これは，Texinfoドキュメントの文の終りの２つのスペースを置く
ことが重要だという理由のためです．

例を目的としたり(プログラムが入力として複数の空白を扱うこと)，見出しやリ
ストの単純な見栄えのため，複数の連続した空白を実際に挿入したいこともあり
ます．Texinfoは３つのコマンドをサポートします．`@SPACE'，
`@TAB'，そして`@NL'で，それらは全て出力に単一の
スペースを挿入します．(ここでは，`@SPACE'は空白に続く
`@'文字，すなわち`@ 'を現し，`TAB'と`NL'はタブ文字と
文の終り，すなわち，`@'が行の最後の文字のときを現します．)

  例えば，以下のようにします．
     Spacey@ @ @ @
     example.

以下を生成します．

     Spacey    example.

  可能性のあるもう一つの`@SPACE'の利用法は， `@multitable'(*note
Multi-column Tables::)に包括されました．

  これらのコマンドにカッコを続けないでください．

  改行されないスペースを生成するために，*Note non-breakable space:
wを参照 してください．


File: texinfo-ja.info,  Node: dmn,  Prev: Multiple Spaces,  Up: Inserting Space

`@dmn'{DIMENSION}: 寸法単位の書式化
-----------------------------------

  寸法単位に対し，数字と省略の間に小さな空白または空白を全く置かないで，
`12pt'や`8.5in'を書きたいときもあります．こうする
ため，`@dmn'コマンドを使用することが可能です．このコマンドの見ため
は，TeXは適切な植字のためちょうどぴったりの空白を挿入します．Infoファ
イルでは空白が要求されないので，Info書式化コマンドでは空白を全く挿入しま
せん．

  `@dmn'コマンドを使用するため，数字を書き，間に空白を置かずそれに
`@dmn'続けてカッコ内に寸法単位を続けてください．例えば以下のように
します．

     A4 paper is 8.27@dmn{in} wide.

以下を生成します．

     A4 paper is 8.27in wide.

  全ての人がこの形式を使用するわけではありません．Texinfoファイルでは
`8.27@dmn{in}'より`8.27 in.@:'や`8.27 inches'
を好む人もいます．しかしこれらの場合，フォーマッタは数字と寸法単位の間に
改行を挿入するかもしれないので，`@w'(*note w::)を使用してください．
また，文中の省略の後にピリオドを書く場合，TeXが余分の空白を挿入するの
を避けるため，ここで見たように，ピリオドの後に`@:'を書いてください．
*Note Not Ending a Sentence::.


File: texinfo-ja.info,  Node: Inserting Accents,  Next: Dots Bullets,  Prev: Inserting Space,  Up: Insertions

アクセントの挿入
================

フローティングアクセントを挿入するためにTexinfoが提供しているコマンドの
表は以下のようになります．アルファベットでない名前のコマンドは引数の周り
にカッコをとりません(それは次の文字をとります)．(例外:`@,'は引数の
周りにカッコを_とります_．)これは，言語によってはアクセントがある文
字が普通のものもあるので，ソースを入力や査読で可能な限り便利にするためで
す．

コマンド          出力     意味するもの
@"o               o"       ウムラートアクセント
@'o               o'       アキュートアクセント
@,{c}             c,       セディラアクセント
@=o               o=       マクロン/オーバーバーアクセント
@^o               o^       サーカムフレックスアクセント
@`o               o`       グレーブアクセント
@~o               o~       チルダアクセント
@dotaccent{o}     o.       オーバードットアクセント
@H{o}             o''      ロングハンガリアンアクセント
@ringaccent{o}    o*       リングアクセント
@tieaccent{oo}    oo[      ティーアフターアクセント
@u{o}             o(       ブレーブアクセント
@ubaraccent{o}    o_       アンダーバーアクセント
@udotaccent{o}    .o       アンダードットアクセント
@v{o}             o<       ハケックやチェックアクセント

以下の表では，英語以外の言語で共通に使用される他の文字を挿入するTexinfo
コマンドをリストアップします．

@exclamdown{}       !       さかさまの !
@questiondown{}     ?       さかさまの ?
@aa{},@AA{}         aa,AA   丸を持つ a，A
@ae{},@AE{}         ae,AE   くっついた ae，AE
@dotless{i}         i       ドットの無い i
@dotless{j}         j       ドットの無い j
@l{},@L{}           /l,/L   押え付けられた L，l
@o{},@O{}           /o,/O   スラッシュ付の O，o
@oe{},@OE{}         &#156;,&#140;くっついた oe，OE
@ss{}               ss      エスツェットや尖った S


File: texinfo-ja.info,  Node: Dots Bullets,  Next: TeX and copyright,  Prev: Inserting Accents,  Up: Insertions

省略と黒点の挿入
================

  "省略"(ドットの行)はピリオドの列として植字されないので，特別なコマン
ドがTexinfoの省略で使用されます．`@bullet'コマンドも特別です．それ
ぞれのコマンドは，カッコの組`{}'が続き，コマンド名とカッコの間に
は空白を用いません．(続けて他のテキストを使用できるので，これらのコマン
ドにはカッコを使用する必要があります．カッコが無い場合，フォーマッタは混
乱するでしょう．詳細は，*Note @-Command Syntax: Command Syntax.)

* Menu:

* dots::                        How to insert dots ...
* bullet::                      How to insert a bullet.


File: texinfo-ja.info,  Node: dots,  Next: bullet,  Up: Dots Bullets

`@dots'{} (...)と`@enddots'{} (....)
------------------------------------

  続けて３つの点となり適切な空白がある`...'のような省略を生成するため，
`@dots{}'コマンドを使用してください．入力ファイルに単純に３つの
ピリオドを書かないでください．それはInfo出力では動作しますが，印刷された
マニュアルではピリオドの間に間違った量の空白を生成します．

  同様に，`@enddots{}'コマンドは文の終りの省略(４つの点)を生成しま
す....


File: texinfo-ja.info,  Node: bullet,  Prev: dots,  Up: Dots Bullets

`@bullet'{} (*)
---------------

  大きな黒点やそれに近いものを生成するために`@bullet{}'を使用して
ください．Infoではアスタリスクが使用されます．

  これは黒点です:*

  `@itemize'で`@bullet'を使用するときは，`@itemize'が供
給するので，カッコを入力する必要はありません．(*Note `@itemize':
itemize.)


File: texinfo-ja.info,  Node: TeX and copyright,  Next: pounds,  Prev: Dots Bullets,  Up: Insertions

TeXと著作権シンボルの挿入
=========================

  ロゴ`TeX'は特別な形での植字で，@-コマンドが必要です．著作権シンボル
`(C)'も特別です．それぞれのコマンドはカッコの組`{}'が続
き，コマンド名とカッコの間に空白は使用しません．

* Menu:

* tex::                         How to insert the TeX logo.
* copyright symbol::            How to use `@copyright'{}.


File: texinfo-ja.info,  Node: tex,  Next: copyright symbol,  Up: TeX and copyright

`@TeX'{} (TeX)
--------------

  `TeX'を生成するため`@TeX{}'コマンドを使用してください．印刷さ
れたマニュアルでは，これは３つの通常の文字と異なる特別なロゴとなります．
Infoではそれは`TeX'のように見えます．`@TeX{}'コマンドは
`T'と`X'が大文字となっている，Texinfoコマンドの中ではユニーク
なものです．


File: texinfo-ja.info,  Node: copyright symbol,  Prev: tex,  Up: TeX and copyright

`@copyright'{} ((C))
--------------------

  `(C)'を生成するために`@copyright{}'コマンドを使用してく
ださい．印刷されたマニュアルでは，これは丸の中の`c'になり，Infoでは
これは`(C)'になります．


File: texinfo-ja.info,  Node: pounds,  Next: minus,  Prev: TeX and copyright,  Up: Insertions

`@pounds'{} (#): ポンド英貨
===========================

  `#'を生成するために`@pounds{}'コマンドを使用してください．
印刷されたマニュアルでは，これは通貨ポンド銀貨のシンボルとなります．Info
では`#'になります．他の通貨シンボルは残念ながら利用不可能です．


File: texinfo-ja.info,  Node: minus,  Next: math,  Prev: pounds,  Up: Insertions

`@minus'{} (-): 負の記号の挿入
==============================

  負記号を生成するために`@minus{}'コマンドを使用してください．等幅
フォントで，これは単一のハイフンですが，プロポーショナルフォントではシン
ボルは負記号の慣習的な長さになります--ハイフンより少し長く，em-dashより
短くなります．

     `-'は`@minus{}'で生成された負記号で，
     
     `-'は文字`-'で生成したハイフンで，
     
     `---'はテキストのem-dashです．

Infoで使用される等幅フォントでは，`@minus{}'はハイフンと同じです．

  幅の違いは，使用する等幅フォントで作成されないので，`@code'や
`@example'で`@minus{}'を使用すべきではありません．

  項目分けされたリストのそれぞれの項目をはじめる印を指定するために
`@minus'を使用するとき，カッコを入力する必要はありません (*note
`@itemize': itemize.)．


File: texinfo-ja.info,  Node: math,  Next: Glyphs,  Prev: minus,  Up: Insertions

`@math': 数式の挿入
===================

  短い数式を`@math'コマンドで書くことができます．カッコの間に以下の
ように数式を書いてください．

     @math{(a + b)(a + b) = a^2 + 2ab + b^2}

これはInfoでは以下を生成します．

     (a + b)(a + b) = a^2 + 2ab + b^2

  このように，`@math'コマンドはInfo出力で効果がありません．

  `@math'は`@tex'を暗黙に指定します．これは(上記の例のように)
上付文字と下付文字を書くことを可能にするだけでなく，あらゆるプレーンの
TeXの数学的なコントロールシーケンスを使用することも可能にします．これ
らのコマンドに対し`@'の代わりに`\'を使用するのは従来通りです．
以下のようにします．

     @math{\sin 2\pi \equiv \cos 3\pi}

InfoとHTMLでは以下のような入力になります．
     \sin 2\pi \equiv \cos 3\pi

  `\'は`@math'内部のエスケープ文字なので，文字通りのバックスラッ
シュを得るために`@\'を使用することが可能です(`\\'はTeXでは
動作しますが，Infoでは文字通り`\\'になるでしょう)．`\'は通常，
文字通り`\'を生成するので，`@\'は`@math'の外部では定義 されていません．

  等式を表示するために，現在はTeXを直接使用する必要があります (*note
Raw Formatter Commands::)．


File: texinfo-ja.info,  Node: Glyphs,  Next: Footnotes,  Prev: math,  Up: Insertions

例のためのglyph
===============

  Texinfoでは，コードは`@example'と`@end example'や `@lisp'と`@end
lisp'で区切られた例として表示されることがよく
あります．そのような例では，`=>'や`==>'を使用
して，評価の結果や展開を示すことが可能です．同様に，印刷物，エラーメッセー
ジ，等式，そしてポイントの位置を示すglyphを挿入するコマンドがあります．

glyph挿入コマンドは，例の内部で使用する必要はありませんが，ほとんどのも
のはそうなっています．全てのglyph挿入コマンドには左右のカッコの組が続き
ます．

* Menu:

* Glyphs Summary::
* result::                      How to show the result of expression.
* expansion::                   How to indicate an expansion.
* Print Glyph::                 How to indicate printed output.
* Error Glyph::                 How to indicate an error message.
* Equivalence::                 How to indicate equivalence.
* Point Glyph::                 How to indicate the location of point.


File: texinfo-ja.info,  Node: Glyphs Summary,  Next: result,  Up: Glyphs

glyphの概要
-----------

  個別のglyphコマンドには以下のものがあります．

=>
     `@result{}'は，式の結果を示します．

==>
     `@expansion{}'はマクロ展開の結果を表示します．

-|
     `@print{}'は印刷物の出力を示します．

error-->
     `@error{}'は次のテキストがエラーメッセージだということを示します．

==
     `@equiv{}'は，２つのフォームが正確に等しいことを示します．

-!-
     `@point{}'はポイントの場所を表示します．

* Menu:

* result::
* expansion::
* Print Glyph::
* Error Glyph::
* Equivalence::
* Point Glyph::


File: texinfo-ja.info,  Node: result,  Next: expansion,  Prev: Glyphs Summary,  Up: Glyphs

`@result{}' (=>): 評価結果を示す
--------------------------------

  式の評価の結果を示すため`@result{}'を使用してください．

  `@result{}'コマンドはInfoでは`=>'として，印刷物では
茎が二重の矢印として表示されます．

  このため，以下のようにします．

     (cdr '(1 2 3))
          => (2 3)

"`(cdr '(1 2 3))'を評価すると`(2 3)になる'"と読めるでしょう．


File: texinfo-ja.info,  Node: expansion,  Next: Print Glyph,  Prev: result,  Up: Glyphs

`@expansion{}' (==>): 展開を示す
--------------------------------

  式がマクロ呼び出しのとき，新しい式に展開します．`@expansion{}'コ
マンドで展開の結果を示すことができます．

  `@expansion{}'コマンドはInfoでは`==>'として，印刷
物では平らな長い矢印として表示されます．

  例えば，以下のようにします．

     @lisp
     (third '(a b c))
          @expansion{} (car (cdr (cdr '(a b c))))
          @result{} c
     @end lisp

以下を生成します．

     (third '(a b c))
          ==> (car (cdr (cdr '(a b c))))
          => c

以下のように読めるでしょう．

     `(third '(a b c))'は`(car (cdr (cdr '(a b c))))'の展開で，式の
     評価結果は`c'です．

この状況では，`@expansion{}'と`@result{}'コマンドが５個
の空白で字下げされている場合，例の見ためが良くなることもよくあります．


File: texinfo-ja.info,  Node: Print Glyph,  Next: Error Glyph,  Prev: expansion,  Up: Glyphs

`@print{}' (-|): 出力を示す
---------------------------

  式が実行中の出力を表示するときもあります．`@print{}'コマンドで印
刷物ということを示すことができます．

  `@print{}'コマンドはInfoでは`-|'とそれに似たものとし
て，印刷物では，水平のダッシュが垂直のバーにぶつかったものとして表示され
ます．

  以下の例では，印刷されたテキストは`-|'で示され，式の値は最後
の行に続いています．

     (progn (print 'foo) (print 'bar))
          -| foo
          -| bar
          => bar

Texinfoソースファイルで，この例は以下のように書きます．

     @lisp
     (progn (print 'foo) (print 'bar))
          @print{} foo
          @print{} bar
          @result{} bar
     @end lisp


File: texinfo-ja.info,  Node: Error Glyph,  Next: Equivalence,  Prev: Print Glyph,  Up: Glyphs

`@error{}' (error-->): エラーメッセージを示す
---------------------------------------------

  コードの一部は，評価したときエラーとなる可能性があります．
`@error{}'コマンドでエラーメッセージを示すことが可能です．

  `@error{}'コマンドはInfoでは`error-->'として，印刷物では四
角の中の`error'という単語として表示されます．

  このため以下のようにします．

     @lisp
     (+ 23 'x)
     @error{} Wrong type argument: integer-or-marker-p, x
     @end lisp

以下を生成します．

     (+ 23 'x)
     error--> Wrong type argument: integer-or-marker-p, x

これは，式を評価したとき，以下のエラーメッセージが出力されることを示しま
す．

     Wrong type argument: integer-or-marker-p, x

  `error-->'自身はエラーメッセージの一部ではありません．


File: texinfo-ja.info,  Node: Equivalence,  Next: Point Glyph,  Prev: Error Glyph,  Up: Glyphs

`@equiv{}' (==): 等価を示す
---------------------------

  ２つの式が同一の結果を生成することもあります．`@equiv{}'コマンド
で，２つのフォームが正確に同一だということを示すことが可能です．

  `@equiv{}'コマンドはInfoでは`=='として，印刷物では３つ
の平行な水平な線として表示されます．

  このため以下のようにします．

     @lisp
     (make-sparse-keymap) @equiv{} (list 'keymap)
     @end lisp

以下を生成します．

     (make-sparse-keymap) == (list 'keymap)

これは，`(make-sparse-keymap)'の評価が`(list 'keymap)'の評価結
果と同一なものを生成することを示します．


File: texinfo-ja.info,  Node: Point Glyph,  Prev: Equivalence,  Up: Glyphs

`@point{}' (-!-): バッファのポイントを示す
------------------------------------------

Emacsバッファのテキストの例を見せる必要があることもあります．そのような
例では，バッファ名を含む２行のダッシュの間に問題のバッファ全体の内容を含
める慣習があります．

  バッファのテキストでポイントの場所を表示するため，`@point{}'コマ
ンドを使用することが可能です．(ポイントのシンボルは，もちろんバッファの
テキストの一部ではありません．それは，ポイントがある２文字の_間の_
場所を示します．)

  `@point{}'コマンドは，Infoでは`-!-'として，印刷物では
小さな５つの先端がある星として表示されます．

  以下の例は，単語`changed'を挿入するためのLispコマンドを評価した，前
後の`foo'バッファの内容を表示しています．

     ---------- Buffer: foo ----------
     This is the -!-contents of foo.
     ---------- Buffer: foo ----------

     (insert "changed ")
          => nil
     ---------- Buffer: foo ----------
     This is the changed -!-contents of foo.
     ---------- Buffer: foo ----------

  Texinfoソースファイルでは，例は以下のように書かれています．

     @example
     ---------- Buffer: foo ----------
     This is the @point{}contents of foo.
     ---------- Buffer: foo ----------
     
     (insert "changed ")
          @result{} nil
     ---------- Buffer: foo ----------
     This is the changed @point{}contents of foo.
     ---------- Buffer: foo ----------
     @end example


File: texinfo-ja.info,  Node: Footnotes,  Next: Images,  Prev: Glyphs,  Up: Insertions

脚注
====

  "脚注"は，主要なテキストの紹介や説明を参照するためのものです． (1)
(*note Footnotes-Footnote-1::)

* Menu:

* Footnote Commands::           How to write a footnote in Texinfo.
* Footnote Styles::             Controlling how footnotes appear in Info.


File: texinfo-ja.info,  Node: Footnotes-Footnotes,  Up: Footnotes

  (1) 脚注は主要なテキストを補完する，または詳細に述べるべきですが，
読者が主要なテキストを理解するために脚注を読む必要があるべきではありませ
ん．脚注の徹底的な論議については，シカゴ大学出版によって出版された `The
Chicago Manual of Style'を参照してください．


File: texinfo-ja.info,  Node: Footnote Commands,  Next: Footnote Styles,  Up: Footnotes

脚注コマンド
------------

  Texinfoでは脚注は`@footnote'で作成されます．このコマンドは直後に左
カッコが続き，その後に脚注のテキストが続き，そして終端の右カッコが続きま
す．脚注はどのような長さでも可能ですが(必要ならページに跨ります)，通常は
短いです．以下はテンプレートです．

     通常のテキスト@footnote{脚注のテキスト}

  このように，`@footnote'は脚注が付くテキストの直後に，余分な空白無
しにすべきです．そうしない場合，脚注の印は行を開始するでしょう．

  例えば，この節は見本の脚注(1) (*note Footnote
Commands-Footnote-1::)が続きます．
Texinfoソースファイルでは，以下のようになります．

     ...見本の脚注@footnote{これは見本の脚注です．}が続きます．Texinfo
     ソース...

御覧のように，ソースファイルには２つの句読点文字がお互いに隣り合っていま
す．この状況では`.};'が連続しています．これは一般的なので(最初のも
のは脚注の終りで，二番目のものは脚注がある文章に属しています)，奇妙に見
えても気にしないでください．

印刷されたマニュアルや本では，脚注の参照マークは小さい上付き数字です．脚
注のテキストは，ページの底に水平方向の線の下に現れます．

  Infoでは，脚注の参照マークは脚注番号が間にある１組のカッコで，`(1)'
のようになります．参照マークは，脚注のテキストへの相互参照のリンクが続き
ます．

HTML出力では，脚注参照は小さな上付き数字で，脚注テキストへのハイパーテキ
ストリンクとなります．

  ところで，`@table'に対する`@item'コマンドの引数の脚注は，(通
常)`@item'コマンドと同じ行にする必要があります．*Note Two-column
Tables::.


File: texinfo-ja.info,  Node: Footnote Commands-Footnotes,  Up: Footnote Commands

  (1) これは見本の脚注です．


File: texinfo-ja.info,  Node: Footnote Styles,  Prev: Footnote Commands,  Up: Footnotes

脚注スタイル
------------

  Infoは２つの脚注スタイルがあり，脚注のテキストがある場所を決定します．

   *
     `End'ノードスタイルでは，１つのノードに対する全ての脚注は，そのノードの
     最後に置かれます．脚注は，ノードの残りと，その中で単語`Footnotes'が
     付いたダッシュの行で分けられます．それぞれの脚注は`(N)'の参照
     マークで開始します．

     ノードの終りのスタイルの，１つの脚注の例は以下のようになります．

           --------- Footnotes ---------
          
          (1)  Here is a sample footnote.

   *
     `Separate'ノードスタイルでは，１つのノードに対する全ての脚注は，自動的に
     構築された単独のノードに配置されます．この形式では"footnote
     reference"
     は，ノード本体にそれそれの`(N)'参照マークが続きます．脚注参照
     は実際には脚注ノードに到達する相互参照です．

     脚注のノード名は，脚注が含まれるノード名に`-Footnotes'を付けて
     構築されます．(従って，`Footnotes'に対する脚注のノードは
     `Footnotes-Footnotes'です！)脚注ノードは，その親ノードに戻るた
     めの，`Up'ノードポインタがあります．

     このマニュアルの最初の脚注が，分かれたノードスタイルで，Infoの書式化後ど
     のように見えるかを以下のように示します．

          File: texinfo.info  Node: Overview-Footnotes, Up: Overview
          
          (1) "Texinfo"の最初の音節は，"hex"ではなく，``speck''のように発音されま
          す．...

Texinfoファイルは，どちらかの脚注スタイルでInfoファイルに書式化されます．

  `@footnotestyle'コマンドを，Infoファイルの脚注スタイルを指定するた
めに使用してください．このコマンドは行の最初に書き，終りのノードスタイル
に対する`end'，または，分割ノードスタイルに対する`separate'を
引数として続けてください．

  例えば，以下のようにします．

     @footnotestyle end

または，以下のようにします．
     @footnotestyle separate

  `@footnotestyle'コマンドは，Texinfoファイルの最初に，end-of-header
行の前か直後に書いてください．(`@footnotestyle'コマンドが
start-of-headerとend-of-header行の間に含まれる場合，領域の書式化コマンド
は脚注を指定したように書式化します．)

脚注スタイルを指定しない場合，書式化コマンドはデフォルトスタイルを使用し
ます．現在`texinfo-format-buffer'と`texinfo-format-region'は
`separate'スタイルを使用し，`makeinfo'は`end'スタイルを使用します．

  この章は２つの脚注を含んでいます．


File: texinfo-ja.info,  Node: Images,  Prev: Footnotes,  Up: Insertions

画像の挿入
==========

  `@image'コマンドで，外部ファイルで与えられた画像を挿入できます．

     @image{FILENAME, [WIDTH], [HEIGHT], [ALTTEXT], [EXTENSION]}

  FILENAME引数は必須で，異なるプロセッサは異なる書式をサポートするの
で，拡張子付けてはいけません．
   * TeXは`FILENAME.eps'ファイル(Encapsulated PostScript
     format)を読み込みます．

   * PDFTeXは`FILENAME.pdf'ファイル(アドビのPortable Document
     Format)を読み込み．

   * `makeinfo'はInfo出力に対し`FILENAME.txt'を(多かれ少な
     かれ`@example'のように)そのまま使用します．

   * `makeinfo'は，提供されている場合，オプションの5番目の引数を拡張
     子として使用します．例えば以下のようにします．

          @image{foo,,,,xpm}

     これで`makeinfo --html'のとき`foo.xpm'を試します．

     追加の5番目の引数を提供していない場合，`makeinfo ---html'は最初に
     `FILENAME.png'を試みます．存在しない場合は，
     `FILENAME.jpg'を試みます．どちらも存在しない場合は警告を出し
     ます．(ソフトウェア特許のためGIFフォーマットはサポートできません．)

  追加のWIDTHとHEIGHT引数は，画像のサイズを指定します(Info出力
では無視されます)．どちらも指定されない場合，画像はそのままの大きさで提
供されます(ファイルで与えられたもの)．一方のみが指定された場合，もう一方
はそれに比例して大きさを調整します．両方指定された場合，両方が重視され，
このため縦横比が変更され，元画像が歪む可能性があります．

  WIDTHはHEIGHTは有効なTeXの寸法単位を使用して指定できます．
すなわち以下を使用します．

pt
     ポイント(72.27pt = 1in)

pc
     パイカ(1pc = 12pt)

bp
     ビッグポイント(72bp = 1in)

in
     インチ

cm
     センチメートル(2.54cm = 1in)

mm
     ミリメートル(10mm = 1cm)

dd
     dido^tポイント(1157dd = 1238pt)

cc
     cicero (1cc = 12dd)

sp
     scaledポイント(65536sp = 1pt)

  例えば，以下は`ridt.eps'ファイルを高さ１インチで幅をそれに比例した大
きさに変更します．

     @image{ridt,,1in}

  `@image'がTeXで動作するように，ファイル`epsf.tex'をTeX
が見つけられるところに配置する必要があります．(標準の場所は
`TEXMF/tex/generic/dvips/epsf.tex'で，そこではTEXMFが
TeXのディレクトリツリーのルートになります．)このファイルはTexinfo配布
物に含まれていて，`ftp://tug.org/tex/epsf.tex'や他の場所でも利用可
能です．

  `@image'は図を表示する行で使用することが可能です．このため，表示し
ようとした場合，前のテキストに出力が入り込まないように，コマンドの前で残
りの空白行を確認してください．

  HTMLを生成しているとき，`makeinfo'はオプションの4番目の引数が提
供されている場合，それをインライン画像に対し"alt属性"を
`@image'に設定します．提供されていない場合，`makeinfo'は表
示されている画像の完全な名前を使用します．


File: texinfo-ja.info,  Node: Breaks,  Next: Definition Commands,  Prev: Insertions,  Up: Top

改行，改ページの作成と阻止
**************************

  通常Texinfoファイルは，TeXとInfo書式化コマンドの１つの，両方で処理さ
れます．行，段落，ページの分割は，出力のどれかで`間違った'場所で発生する
こともあります．印刷されたマニュアルとInfoファイルの両方でテキストが正し
く見えるように確認する必要があります．

例えば印刷されたマニュアルでは，ページの分割は例の途中で不恰好に発生する
かもしれません．これを避けるため，テキストを２ページに分割することから守
るグループコマンドを使用してテキストを保つことができます．反対に，通常発
生しない場所で改ページを強制したい場合もあります．幸い，これらの問題は滅
多にありません．そうするときは，改行や改ページ，改行や改ページ防止，また
はページ作成コマンドを使用してください．

* Menu:

* Break Commands::              Cause and prevent splits.
* Line Breaks::                 How to force a single line to use two lines.
* - and hyphenation::           How to tell TeX about hyphenation points.
* w::                           How to prevent unwanted line breaks.
* sp::                          How to insert blank lines.
* page::                        How to force the start of a new page.
* group::                       How to prevent unwanted page breaks.
* need::                        Another way to prevent unwanted page breaks.


File: texinfo-ja.info,  Node: Break Commands,  Next: Line Breaks,  Prev: Breaks,  Up: Breaks

改行，改ページコマンド
======================

  改行，改ページコマンドは，行や段落の分割や作成を許可します．

`@*'
     強制改行します．

`@sp N'
     N個の空白行を省略します．

`@-'
     任意のハイフンを挿入します．

`@hyphenation{HY-PHEN-A-TED WORDS}'
     HY-PHEN-A-TED WORDSのハイフネーションポイントを定義します．

  改行を避けるコマンドは，テキスト全て一緒に１行に保ちます．

`@w{TEXT}'
     TEXTを改行やハイブネーションで２行に跨ることを避けます．

  Infoはページが無いので，ページコマンドは印刷物のみで適用されます．

`@page'
     印刷されたマニュアルで新しいページを開始します．

`@group'
     印刷された1ページに現れるよう，テキストを一緒に保ちます．

`@need MILS'
     当該ページに十分余白が無い場合，新しい印刷ページを開始します．


File: texinfo-ja.info,  Node: Line Breaks,  Next: - and hyphenation,  Prev: Break Commands,  Up: Breaks

`@*': 改行の生成
================

  `@*'コマンドは，印刷されたマニュアルとInfoの両方で，強制的に改行し
ます．

  例えば，以下のようにします．

     この行は@* 2箇所で@*分割されます．

以下を生成します．

     この行は
      2箇所で
     分割されています．

(最初の`@*'コマンドの後のスペースは，次の行にそのまま運ばれること
に注意してください．)

  `@*'コマンドは，ファイルの著作権ページでよく使用されます．

     これは，Texinfoドキュメントのエディション2.0@*
     それは...

この状況では，`@*'コマンドは，TeXが醜い方法でページ全体に行を引
き延ばすことを阻止します．

     *注意してください:*`@*'コマンドの後にカッコを書かないでくだ
     さい．それらは不要です．

     `@*'コマンドを含む段落の終りに`@refill'コマンドを書かないで
     ください．それは改行の発生後に段落を補充し，改行の効果を否定します．



File: texinfo-ja.info,  Node: - and hyphenation,  Next: w,  Prev: Line Breaks,  Up: Breaks

`@-'と`@hyphenation': TeXのハイフネーションを助ける
===================================================

  TeXのハイフネーションアルゴリズムは一般にかなり良いのですが，時々役に
立つハイフネーションポイントに失敗します．(滅多に無いことですが，間違っ
たハイフネーションを挿入します．)そのため，通常の語彙のドキュメントや良
く調整された印刷エディションのため，TeX出力を助けたいと思うかもしれま
せん．Texinfoはこのための２つのコマンドをサポートします．

`@-'
     任意のハイフン，すなわちTeXでハイフネーション可能な(が必須ではない)場
     所を挿入します．これはTeXがハイフネーションを失敗したため，overfull
     hbox(*note Overfull hboxes::)を警告されたとき特に便利です．TeXは
     `@-'を含む単語にハイフネーションポイント自身を挿入しません．

`@hyphenation{HY-PHEN-A-TED WORDS}'
     TeXにHY-PHEN-A-TED WORDSのハイフネーション方法を伝えます．御覧
     のように，`-'をそれぞれのハイフネーションポイントに置きます．例えば
     以下のようにします．
          @hyphenation{man-u-script man-u-scripts}

     TeXは，正しく一致した単語のときのみ指定されたハイフネーションポイント
     を使用するので，必要な変形を全て与えてください．

Info出力はハイフネーションしないので，これらのコマンドはそこでは意味があ
りません．


File: texinfo-ja.info,  Node: w,  Next: sp,  Prev: - and hyphenation,  Up: Breaks

`@w'{TEXT}: 改行を妨げる
========================

  `@w{TEXT}'はTEXTを出力し，TEXT内部での改行を妨 げます．

  `@w'コマンドを，長い名前や文節を行の終り付近でTeXが生成する自動
的にハイフネーションを避けるために使用することが可能です．例えば，以下の
ようにします．

     GNUソフトウェアを@w{@samp{ftp.gnu.org}}からコピーすることが可能で
     す．

以下を生成します．

     GNUソフトウェアを`ftp.gnu.org'からコピーすることが可能です．

  改行されないスペースを生成するために`@w'を使用することも可能です．

     フォーマッタはこの@w{ }スペースで改行しません．


File: texinfo-ja.info,  Node: sp,  Next: page,  Prev: w,  Up: Breaks

`@sp' N: 空白行の挿入
=====================

  `@sp N'のみを含むもので始まる行は，印刷されたマニュアルと
Infoファイルの両方で，N個の空白行の空間を生成します．`@sp'は
段落の分割も強制します．例えば，以下のようにします．

     @sp 2

２行の空白行を生成します．

  `@sp'コマンドはタイトルページで最もよく使用されます．


File: texinfo-ja.info,  Node: page,  Next: group,  Prev: sp,  Up: Breaks

`@page': 新しいページの開始
===========================

  `@page'のみを含む行は印刷されたマニュアルで，新しいページを開始し
ます．このコマンドは，Infoファイルではページが無いので効果がありません．
`@page'コマンドは，著作権ページを開始するため，Texinfoファイルの
`@titlepage'セクションでよく使用されます．


File: texinfo-ja.info,  Node: group,  Next: need,  Prev: page,  Up: Breaks

`@group': 改ページを妨げる
==========================

  `@group'コマンドは(単独行で)，`@example'やそれに類似した縦方
向に分割不可能なグループを開始するものの内部で使用され，それは印刷物では，
1ページに全体が現れます．グループは`@end group'のみを含む行で終了
します．この２つの行はそれ自身出力に現れず，Info出力では効果がありません．

  `@group'には様々な文脈で概念的な意味はありますが，現在の実装では，
`@example'とその変種の`@display'，`@format'，
`@flushleft'，そして`@flushright'のみで確実に動作します． *Note
Quotations and Examples::.  (これら全てのコマンドが共通に持つものは，
入力のそれぞれの行が出力を生成することです．)他の内容では，
`@group'は異常な縦の空白を生成するはずです．

  この書式の必要条件は，以下のように書くべきだということです．

     @example
     @group
     ...
     @end group
     @end example

このように，`@group'と`@end group'コマンドを用いて， `@example'と`@end
example'コマンドの中に書きます．

  `@group'コマンドは例を1ページにまとめるため，最もよく使用されます．
このTexinfoマニュアルには，100以上の例として，`@group'と `@end
group'で囲まれたテキストが含まれています．

グループの終了を忘れた場合，TeXを実行したとき，奇妙で不可解なエラーメッ
セージを得るかもしれません．これは，TeXがTexinfoファイルの残りを1ペー
ジを書こうとして，大量のテキストを処理するまでエラーメッセージの生成を開
始しないためです．TeXで理解できないエラーメッセージを得る場合， `@end
group'が無いところを探すことは，良い経験則です．


File: texinfo-ja.info,  Node: need,  Prev: group,  Up: Breaks

`@need MILS': 改ページを妨げる
==============================

  `@need N'のみを含む行は，現在のページの残りがNミル(千
分の1インチ)以下の場合，印刷されたマニュアルで新しいページを開始します．
引数Nの周りにカッコを使用しないでください．`@need'コマンドは，
Infoはページが無いので，Infoでは効果はありません．

  この段落は，ページの残りが800ミル(10分の8インチ)以下の場合，TeXに新し
いページを開始するよう伝える，`@need'コマンドで処理されます．以下
のようにします．

     @need 800
     この段落は，...

  `@need'コマンドは孤立行(印刷ページの底の単一行)を避けるのに役立ち
ます．


File: texinfo-ja.info,  Node: Definition Commands,  Next: Conditionals,  Prev: Breaks,  Up: Top

定義コマンド
************

  `@deffn'コマンドと他の"定義コマンド"で，関数，変数，マクロ，コ
マンド，ユーザーオプション，スペシャルフォーム，そしてその他の一様な書式
での人工物のようなものを記述可能になります．

  Infoファイルでは，定義は構成要素のカテゴリ -- `関数'，`変数'，またはあ
らゆるもの -- を定義の最初の行の始めに現し，構成要素の名前と引数が続き
ます．印刷されたマニュアルでは，コマンドはTeXに構成要素の名前とその引
数を左端のマージンに印刷させ，カテゴリを次に右端のマージンに印刷させます．
両方の出力形式で，定義の本体は字下げされます．また，構成要素の名前は適切
な索引に入ります．`@deffn'は関数の索引に名前が入り，`@defvr'
は変数の索引に入る等のようになります．

マニュアルは，与えられた名前に対し１つ以上の定義は不要で含めるべきではあ
りません．概要を含む付録は，定義コマンドより`@table'を使用すべきで す．

* Menu:

* Def Cmd Template::            How to structure a description using a
                                  definition command.
* Optional Arguments::          How to handle optional and repeated arguments.
* deffnx::                      How to group two or more `first' lines.
* Def Cmds in Detail::          All the definition commands.
* Def Cmd Conventions::         Conventions for writing definitions.
* Sample Function Definition::


File: texinfo-ja.info,  Node: Def Cmd Template,  Next: Optional Arguments,  Prev: Definition Commands,  Up: Definition Commands

定義のテンプレート
==================

  `@deffn'コマンドは，関数に似ている構成要素の定義に使用されます．
`@deffn'コマンドで定義を書くために，`@deffn'コマンドを行の最
初に書き，同じ行に構成要素のカテゴリ，構成要素自身の名前と，(存在する場
合は)引数を続けてください．そして，続く行に定義の本体を書いてください．
(本体に例を埋め込むこともできます．)終りに，単独行に書かれた`@end
deffn'コマンドで定義を終えてください．(他の定義コマンドも同じ書式が続き
ます．)

  定義のテンプレートは以下のようになります．

     @deffn CATEGORY NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end deffn

例えば，以下のようにします．

     @deffn Command forward-word count
     このコマンドは，ポイントを@var{count}語前に(または，@var{count}が
     負の場合は後ろに)移動します．...
     @end deffn

以下を生成します．

      - Command: forward-word count
          このコマンドは，ポイントをCOUNT語前に(または，COUNTが負の場
          合は後ろに)移動します．...

  タイトルのようなカテゴリ名は大文字にしてください．`Interactive
Command'
といった文節のようにカテゴリ名に空白が含まれている場合，周りにカッコを書
いてください．例えば以下のようにします．

     @deffn {Interactive Command} isearch-forward
     ...
     @end deffn

そうしない場合，２番目の単語は構成要素の名前と誤解されます．

  定義コマンドには，それ以外に一般的なものもあります．例えば，
`@deffn'コマンドは関数やそれに似たもの -- 引数を取る構成要素 --
に対する一般的な定義コマンドです．このコマンドを使用するときは，構成要素
が属するカテゴリを指定すべきです．`@deffn'コマンドには，３つの既に
定義されている専門的な変種の，`@defun'，`@defmac'，そして
`@defspec'を処理し，それらはカテゴリを指定します．それぞれ"関数"，
"マクロ"，そして"スペシャルフォーム"です．(Lispではスペシャルフォー
ムは関数に似た構成要素です．) `@defvr'コマンドも，変数の特定の種類
を記述するため専門分野に相違のあるものとして，前もって定義されたものがあ
ります．

  `@defun'のような専門的に定義されているものに対するテンプレートは，
カテゴリを指定する必要が無い以外，一般の定義のテンプレートに似ています．

     @defun NAME ARGUMENTS...
     BODY-OF-DEFINITION
     @end defun

このため以下のようにします．

     @defun buffer-end flag
     この関数は@var{flag}が1より小さい場合@code{(point-min)}を返し，そ
     れ以外では@code{(point-max)}を返します．...
     @end defun

以下を生成します．

      - 機能: buffer-end flag
          この関数はFLAGが1より小さい場合`(point-min)'を返し，それ以外
          では`(point-max)'を返します．...

定義の内部に`@example'の使用を含んでいる関数定義の詳細な例は， *Note
Sample Function Definition: Sample Function Definition.

  それ以外の特別なコマンドは，`@defun'のように動作します．

  実装が困難なため，`@deffn'内部とそれ以外のすべての定義コマンドの内
部にあるマクロは展開されないことに注意してください．


File: texinfo-ja.info,  Node: Optional Arguments,  Next: deffnx,  Prev: Def Cmd Template,  Up: Definition Commands

オプションと繰り返しの引数
==========================

オプションや繰り返しの引数を取る構成要素もあり，それは角カッコと丸カッコ
を使用する特有なglyphで指定されているかもしれません．例えば，スペシャ
ルフォームは，引数リストを簡単な関数より複雑な方法で分けられた引数に区切
ることもよくあります．

  角カッコで囲まれた引数はオプションです．このため[OPTIONAL-ARG]のよ
うな文節は，OPTIONAL-ARGがオプションだということを意味します．丸カッ
コに続く引数はオプションで，１度以上繰り返すこともできます．
このため，REPEATED-ARGS...は0以上の引数を意味します．いくつか
の引数がLispのリスト構造の追加のレベルにまとめられるとき，カッコが使用さ
れます．

  想像上のスペシャルフォームの例の`@defspec'の行は以下のようになります．

      - 特殊型: foobar (VAR [FROM TO [INC]]) BODY...

この例では，引数FROMとTOがオプションですが，両方とも有るか両
方とも無いことが必要です．それらが有る場合，INCも同様にオプション
で指定してかまいません．これらの引数はBODYと分けるため，リストに引
数VARでまとめられ，それは形式の残りの全ての要素を含みます．

  Texinfoソースファイルでは，この`@defspec'行は以下のように書かれま
す(この例のように２行以上には分割されません)．

     @defspec foobar (@var{var} [@var{from} @var{to}
          [@var{inc}]]) @var{body}@dots{}

関数はコマンドと変数の索引で`foobar'の下にリストアップされます．


File: texinfo-ja.info,  Node: deffnx,  Next: Def Cmds in Detail,  Prev: Optional Arguments,  Up: Definition Commands

２つ以上の`最初の'行
====================

  定義に対し２つ以上の`最初の'またはヘッダ行を作成するため，最初の
`@deffn'行に`@deffnx'で始まる行を続けてください．
`@deffnx'コマンドは，その行と前の行の間に余分な縦方向の空白を生成
しない以外，`@deffn'と同じように動作します．

  例えば以下のようにします．

     @deffn {Interactive Command} isearch-forward
     @deffnx {Interactive Command} isearch-backward
     この２つの検索コマンドは似ていて...
     @end deffn

以下を生成します．

 - Interactive Command: isearch-forward
 - Interactive Command: isearch-backward
     この２つの検索コマンドは似ていて...

  それぞれの定義コマンドには`x'が付きます．`@defunx'，
`@defvrx'，`@deftypefunx'などです．

  `x'の形式は`@itemx'と全く同じです．*Note `@itemx': itemxを
参照してください．


File: texinfo-ja.info,  Node: Def Cmds in Detail,  Next: Def Cmd Conventions,  Prev: deffnx,  Up: Definition Commands

コマンドの定義
==============

Texinfoは１ダース以上の定義コマンドを提供していて，それらの全てをこのセ
クションで記述します．

  定義コマンドは自動的に構成要素の名前を適切な索引に入れます．例えば，
`@deffn'，`@defun'，そして`@defmac'は関数の索引に関数
名を入れます．`@defvr'と`@defvar'は変数の索引に変数名を入れ ます．

以下のほとんどの例はLispの例ですが，コマンドは他のプログラミング言語でも
使用可能です．

* Menu:

* Functions Commands::          Commands for functions and similar entities.
* Variables Commands::          Commands for variables and similar entities.
* Typed Functions::             Commands for functions in typed languages.
* Typed Variables::             Commands for variables in typed languages.
* Abstract Objects::            Commands for object-oriented programming.
* Data Types::                  The definition command for data types.


File: texinfo-ja.info,  Node: Functions Commands,  Next: Variables Commands,  Prev: Def Cmds in Detail,  Up: Def Cmds in Detail

関数とそれに類似した構成要素
----------------------------

このセクションは関数やそれに類似した構成要素の記述のためのコマンドを記述
します．

`@deffn CATEGORY NAME ARGUMENTS...'
     `@deffn'コマンドは，関数，対話式コマンド，そして引数を取る類似の構
     成要素のための一般的な定義コマンドです．定義されている構成要素のカテゴリ
     を記述する用語を選択する必要があります．例えば，"関数"は，構成要素が関
     数の場合使用されます．`@deffn'コマンドは，行の最初に，同じ行に記述
     する構成要素のカテゴリ，この特定の構成要素の名前，そして，存在する場合そ
     の引数を続けます．単独行の`@end deffn'で定義を終了してください．

     例えば，定義を以下のようにします．

          @deffn Command forward-char nchars
          ポイントを@var{nchars}文字前に移動します．
          @end deffn

     これは，１つの引数NCHARSを持つ`forward-char'という名前の"コマ
     ンド"の，どちらかというと簡潔な定義を表示します．

     `@deffn'は，NCHARSのような引数名を`@var'が使用されてい
     るかのようにイタリックまたは大文字で印刷し，それは，これらの名前がメタ構
     文変数と考えるためです --
     それは実際の引数の値を意味します．記述のテキ
     ストで引数の値を述べるため，明示的に`@var'で引数名を書いてください．
     上記の例では，このように`@var{nchars}'を使用しています．

     `@deffn'のテンプレートは以下のとおりです．

          @deffn CATEGORY NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end deffn

`@defun NAME ARGUMENTS...'
     `@defun'コマンドは関数に対する定義コマンドです．`@defun'は，
     `@deffn Function ...'と同じです．

     例えば，以下のようにします．

          @defun set symbol new-value
          シンボル@var{symbol}の値を@var{new-value}に変更します．
          @end defun

     これは，引数がSYMBOLとNEW-VALUEの関数`set'の，どちらか
     というと簡潔な定義を表示します．`@defun'行の引数名は，`@var'
     で囲まれているかのように自動的にイタリックまたは大文字で現れます．単独行
     の`@end defun'で定義を終了してください．

     テンプレートは以下のとおりです．

          @defun FUNCTION-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defun

     `@defun'は関数索引に項目を生成します．

`@defmac NAME ARGUMENTS...'
     `@defmac'コマンドはマクロの定義コマンドです．`@defmac'は `@deffn
     Macro ...'と同じで，`@defun'のように動作します．

`@defspec NAME ARGUMENTS...'
     `@defspec'コマンドは，スペシャルフォームの定義コマンドです．(Lisp
     では，スペシャルフォームは関数によく似た構成要素です．*note
     Special Forms: (elisp)Special Forms.．)`@defspec'は `@deffn
     {Special Form} ...'と同じで，`@defun'のように 動作します．


File: texinfo-ja.info,  Node: Variables Commands,  Next: Typed Functions,  Prev: Functions Commands,  Up: Def Cmds in Detail

変数とそれに類似した構成要素
----------------------------

  変数とそれに類似した構成要素を定義するためのコマンドは以下のものです．

`@defvr CATEGORY NAME'
     `@defvr'コマンドは変数のようなものの一般的な定義コマンドです --
     構成要素は値を記録します．定義された構成要素のカテゴリを記述するための，
     用語を選択する必要があります．例えば，"変数"は構成要素が変数の場合使用
     されます．`@defvr'コマンドを行の最初に書き，同じ行に構成要素のカテ
     ゴリと構成要素の名前を続けてください．

     タイトルのようにカテゴリ名を大文字にしてください．カテゴリ名が"User
     Option"のようにスペースを含む場合，カッコで囲んでください．そうしない場
     合，２番目の単語は構成要素の名前だと誤解されます．例えば，以下のようにし
     ます．

          @defvr {User Option} fill-column
          このバッファローカル変数は，
          補充された行の最大幅を指定します．
          ...
          @end defvr

     単独行の`@end defvr'で定義を終了してください．

     テンプレートは以下の通りです．

          @defvr CATEGORY NAME
          BODY-OF-DEFINITION
          @end defvr

     `@defvr'はNAMEに対し，変数索引の項目を作成します．

`@defvar NAME'
     `@defvar'コマンドは，変数の定義コマンドです．`@defvar'は `@defvr
     Variable ...'と同じです．

     例えば，以下のようにします．

          @defvar kill-ring
          ...
          @end defvar

     テンプレートは以下の通りです．

          @defvar NAME
          BODY-OF-DEFINITION
          @end defvar

     `@defvar'は，NAMEに対し変数索引の項目を作成します．

`@defopt NAME'
     `@defopt'コマンドは，"ユーザオプション"，すなはち，ユーザが好
     みで変更する変数に対する定義コマンドです．Emacsは多くのそのようなものが
     あります(*note Variables: (emacs)Variables.)． `@defopt'は`@defvr
     {User Option} ...'と同じで， `@defvar'のように動作します．


File: texinfo-ja.info,  Node: Typed Functions,  Next: Typed Variables,  Prev: Variables Commands,  Up: Def Cmds in Detail

型のある言語の関数
------------------

  `@deftypefn'コマンドとその変形は，CやC++のような変数の型と関数を宣
言する必要がある言語の関数を記述するためのものです．

`@deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS...'
     `@deftypefn'コマンドは，関数と，引数を取るものや型のある類似の構成
     要素の定義コマンドです．`@deftypefn'は行の最初に書き，同じ行に記述
     される構成要素のカテゴリ，戻り値の型，この特定の構成要素の名前と，存在す
     る場合引数が続きます．

     例えば，以下のようにします．

          @deftypefn {Library Function} int foobar
             (int @var{foo}, float @var{bar})
          ...
          @end deftypefn

     ("..."の前のテキストは，２行で表示され，Texinfoファイルでは実際に
     は単一行です．)Infoでは以下を生成します．

          -- Library Function: int foobar (int FOO, float BAR)
          ...

     これは，`foobar'が"ライブラリ関数"で，それは`int'を返し，引
     数はFOO(`int')とBAR(`float')だということを意味しま す．

     `@deftypefn'で書いた引数名は，暗黙で`@var'にはなりません --
     `@deftypefn'の引数の実際の名前は，データ型名とキーワードで通常はバ
     ラバラなので，Texinfoは助けなしに見つけることができません．代わりに，
     `@var'を引数名の周りに明示的に書く必要があります．上の例では，引数
     名は`foo'と`bar'です．

     `@deftypefn'のテンプレートは以下の通りです．

          @deftypefn CATEGORY DATA-TYPE NAME ARGUMENTS ...
          BODY-OF-DESCRIPTION
          @end deftypefn

     CATEGORYやDATA TYPEが1単語以上の場合，単一の引数にするためカッ
     コで囲む必要があることに注意してください．

     Adaのようなパッケージ言語のプロシージャを記述する場合，前の段落で記述さ
     れている慣習と幾分反対の方法として，`@deftypefn'の使用を手法として
     考えるかもしれません．

     例えば以下のようにします．

          @deftypefn stacks private push
                  (@var{s}:in out stack;
                  @var{n}:in integer)
          ...
          @end deftypefn

     (`@deftypefn'の引数は，３行に分割されていますが，実際のTexinfoファ
     イルでは単一行になります．)

     この例では，プロシージャは`プロシージャ'と分類するのではなくパッケージ
     `stacks'に属するものとして分類され，そのデータ型は`private'と
     して記述されます．(プロシージャの名前は`push'で，その引数はS
     とNです．)

     `@deftypefn'はNAMEに対し関数索引に項目を作成します．

`@deftypefun DATA-TYPE NAME ARGUMENTS...'
     `@deftypefun'コマンドは，型のある言語の関数のための特別な定義コマ
     ンドです．そのコマンドは`@deftypefn Function ...'と同じです．

     このため以下のようにします．

          @deftypefun int foobar (int @var{foo}, float @var{bar})
          ...
          @end deftypefun

     Infoでは以下を生成します．

          -- Function: int foobar (int FOO, float BAR)
          ...

     テンプレートは以下の通りです．

          @deftypefun TYPE NAME ARGUMENTS...
          BODY-OF-DESCRIPTION
          @end deftypefun

     `@deftypefun'はNAMEに対し関数索引に項目を作成します．


File: texinfo-ja.info,  Node: Typed Variables,  Next: Abstract Objects,  Prev: Typed Functions,  Up: Def Cmds in Detail

型のある言語の変数
------------------

  型のある言語の変数は，型のある言語の関数に似た方法で処理されます．
*Note Typed Functions::.  一般的な定義コマンド`@deftypevr'は
`@deftypefn'に対応し，特別な定義コマンド`@deftypevar'は
`@deftypefun'に対応します．

`@deftypevr CATEGORY DATA-TYPE NAME'
     `@deftypevr'コマンドは，型のある言語の変数のようなもののための一般
     的な定義コマンドです--値を記録する構成要素です．定義される構成要素のカ
     テゴリを記述するための用語を選択する必要があります．例えば，"変数"は構
     成要素が変数の場合使用します．

     `@deftypevr'コマンドは，行の最初に書かれ，同じ行に記述される構成要
     素のカテゴリ，データの型，そして特定の構成要素の名前が続きます．

     例えば，以下のようにします．

          @deftypevr {Global Flag} int enable
          ...
          @end deftypevr

     Infoでは以下を生成します．

          -- Global Flag: int enable
          ...

     テンプレートは以下の通りです．

          @deftypevr CATEGORY DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevr

     `@deftypevr'は，NAMEに対し変数索引に項目を作成します．

`@deftypevar DATA-TYPE NAME'
     `@deftypevar'コマンドは，型のある言語の変数のための特別な定義コマ
     ンドです．`@deftypevar'は`@deftypevr Variable ...'と同じ です．

     例えば，以下のようにします．

          @deftypevar int fubar
          ...
          @end deftypevar

     Infoでは以下を生成します．

          -- Variable: int fubar
          ...

     テンプレートは以下の通りです．

          @deftypevar DATA-TYPE NAME
          BODY-OF-DESCRIPTION
          @end deftypevar

     `@deftypevar'は，NAMEに対し，変数索引の項目を作成します．


File: texinfo-ja.info,  Node: Abstract Objects,  Next: Data Types,  Prev: Typed Variables,  Up: Def Cmds in Detail

オブジェクト指向プログラミング
------------------------------

オブジェクト指向プログラミングで使用するような，抽象的なオブジェクトに関
する記述を書式化するためのコマンドには以下のものがあります．クラスは抽象
的なオブジェクトの定義された型です．クラスのインスタンスはクラスの型を持
つ特定のオブジェクトです．インスタンス変数はクラスに属するがそれぞれのイ
ンスタンスが独自の値を持つ変数です．

定義では，クラス名はクラスに対するプログラミングシステムで本当に定義され
た名前の場合，`@code'をその周りに書くべきです．そうしない場合，通
常のテキストフォントで印刷されます．

`@defcv CATEGORY CLASS NAME'
     `@defcv'コマンドは，オブジェクト指向プログラミングで，クラスに関連
     する変数に対する一般的な定義コマンドです．`@defcv'コマンドは３つの
     引数をとります．定義している事柄のカテゴリ名，属するクラス，そしてその名
     前です．このようにします．

          @defcv {Class Option} Window border-pattern
          ...
          @end defcv

     これは，`Window'クラスの`border-pattern'クラスオプションの定義
     の最初の行の書き方を説明しています．

     テンプレートは以下の通りです．
          @defcv CATEGORY CLASS NAME
          ...
          @end defcv

     `@defcv'は変数索引に項目を作成します．

`@defivar CLASS NAME'
     `@defivar'コマンドは，オブジェクト指向プログラミングのインスタンス
     変数に対する定義コマンドです．`@defivar'は`@defcv {Instance
     Variable} ...'と同じです．

     テンプレートは以下の通りです．
          @defivar CLASS INSTANCE-VARIABLE-NAME
          BODY-OF-DEFINITION
          @end defivar

     `@defivar'は変数索引に項目を作成します．

`@deftypeivar CLASS DATA-TYPE NAME'
     `@deftypeivar'コマンドは，オブジェクト指向プログラミングの型を付け
     られたインスタンス変数に対する定義コマンドです．それは，`@defivar'
     に，インスタンス変数の型を指定するためのDATA-TYPEパラメータが付い
     たものに似ています．`@deftypeivar'は変数索引に項目を作成します．

`@defop CATEGORY CLASS NAME ARGUMENTS...'
     `@defop'コマンドは，オブジェクト指向プログラミングのメソッドに似た
     構成要素に対する定義コマンドです．これらの構成要素は関数のように引数を取
     りますが，オブジェクトの特定のクラスに関連付けされています．

     例えば，メソッドとしてクラスに関連付けされている"ラッパー"と呼ばれる
     概念を持つシステムもありますが，それは関数というよりマクロのように動作し
     ます．`@defop Wrapper'をこれらの１つとしての記述に使用することが可
     能です．

     メソッドと"オペレーション"を分けた方が便利なときもあります．オペレー
     ションをメソッドの詳述と考えることができます．このため，ウィンドウシステ
     ムは全てのウィンドウクラスが`expose'と言う名前のメソッドを持つこと
     を指定できます．我々は，このウィンドウシステムが一般的なウィンドウ上に
     `expose'オペレーションを定義していると言っているのです．特に，オペ
     レーションは名前を持ち，引数のパターンも指定されています．全てのオペレー
     ションを実装したメソッドは，オペレーションで使用されるアプリケーションが
     実装したメソッドを知ることなくそれを行うので．同じ引数を受け入れるように
     する必要があります．

     メソッドよりオペレーションを説明した方がより意味があることもよくあります．
     例えば，ウィンドウアプリケーション開発者は，`expose'オペレーション
     を知っている必要がありますが，与えられたウィンドウのクラスが，このオペレー
     ションを実装した独自のメソッドを持つかどうかを考慮する必要はありません．
     このオペレーションを記述するため以下のように書きます．

          @defop Operation windows expose

     `@defop'コマンドは，行の最初に書かれ，同じ行にオペレーションのカテ
     ゴリの全体的な名前，オペレーションクラスの名前，オペレーションの名前，そ
     して，存在する場合その引数を続けます．

     テンプレートは以下の通りです．
          @defop CATEGORY CLASS NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defop

     `@defop'は``expose' on `windows''のような項目を，関数索
     引に作成します．

`@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
     `@deftypeop'コマンドは，オブジェクト指向プログラミングの型付のオペ
     レーションに対する定義コマンドです．それは`@defop'に，メソッドの戻
     り値を指定するDATA-TYPEパラメータを加えたものに似ています．
     `@deftypeop'は関数索引に項目を作成します．

`@defmethod CLASS NAME ARGUMENTS...'
     `@defmethod'コマンドは，オブジェクト指向プログラミングのメソッドに
     対する定義コマンドです．メソッドは特定のオブジェクトのクラスとそのサブク
     ラスのためのオペレーションを実装する関数のようなものです．

     `@defmethod'は`@defop Method ...'と同じです．コマンドは
     行の最初に書かれ，メソッドのクラス名，メソッド名，そして存在する場合はそ
     の引数が続きます．

     例えば，以下のようにします．
          @defmethod `bar-class' bar-method argument
          ...
          @end defmethod

     これは，クラス`bar-class'の`bar-method'と呼ばれるメソッドに対
     する定義を説明しています．メソッドは引数を取ります．

     テンプレートは以下の通りです．

          @defmethod CLASS METHOD-NAME ARGUMENTS...
          BODY-OF-DEFINITION
          @end defmethod

     `@defmethod'は，関数索引に``bar-method' on `bar-class''
     のような項目を作成します．

`@deftypemethod CLASS DATA-TYPE NAME ARGUMENTS...'
     `@deftypemethod'コマンドは，C++やJavaのようなオブジェクト指向の型
     のある言語のメソッドのに対する定義コマンドです．それは，
     `@defmethod'コマンドにメソッドの戻り値を指定するための
     DATA-TYPEパラメータを追加したものに似ています．


File: texinfo-ja.info,  Node: Data Types,  Prev: Abstract Objects,  Up: Def Cmds in Detail

データの型
----------

  データの型に対するコマンドには以下のものがあります．

`@deftp CATEGORY NAME ATTRIBUTES...'
     `@deftp'コマンドは，データの型に対する一般的な定義コマンドです．そ
     のコマンドは行の最初に書かれ，同じ行にカテゴリ，型の名前(`int'や
     `float'のようなもの)，そして型のオブジェクトの属性名が続きます．こ
     のため，このコマンドを`int'や`float'を記述するために使用するこ
     とが可能で，その場合，カテゴリとして`data type'を使用することも可能
     でしょう．(データの型は，実行可能なオペレーションを決定する目的に対する，
     特定のオブジェクトのカテゴリです．)

     例えばLispでは，"pair"は特定のデータの型に名前を付け，その型のオブジェ
     クトはCARとCDRと呼ばれる２つのスロットを持ちます．`pair'
     の定義の最初の行を書く方法は以下のようになります．

          @deftp {Data type} pair car cdr
          ...
          @end deftp

     テンプレートは以下の通りです．

          @deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...
          BODY-OF-DEFINITION
          @end deftp

     `@deftp'はデータの型の索引に項目を作成します．


File: texinfo-ja.info,  Node: Def Cmd Conventions,  Next: Sample Function Definition,  Prev: Def Cmds in Detail,  Up: Definition Commands

定義を書くための慣習
====================

  `@deffn'，`@defun'やその他の定義コマンドの１つを使用し定義を
書くとき，`forward-word'関数に対するCOUNT引数のように，意味を
示す引数の使用に注意してください．また，INTEGERのように引数名が型
名を含んでいる場合，引数が実際にその型であるよう注意してください．


File: texinfo-ja.info,  Node: Sample Function Definition,  Prev: Def Cmd Conventions,  Up: Definition Commands

関数定義の見本
==============

  関数定義は，`@defun'と`@end defun'を使用します．関数名は
`@defun'コマンドの直後に続き，同じ行にパラメータリストが続きます．

  *Note Calling Functions: (elisp)Calling Functionsの
定義には以下のものがあります．

      - 機能: apply function &rest arguments
          `apply'はARGUMENTSでFUNCTIONを呼び出し，`funcall'
          に似ていますが，１点が異なります．ARGUMENTSの終りは，
          FUNCTION
          に与えられる単一の引数ではなく引数のリストです．我々は，
          このリストが他の引数に"加えられる"とも言っています．

          `apply'はFUNCTION呼び出しの結果を返します．`funcall'のよ
          うに，FUNCTIONはLisp関数やプリミティブ関数である必要があります．ス
          ペシャルフォームとマクロは，`apply'では意味がありません．

               (setq f 'list)
                    => list
               (apply f 'x 'y 'z)
               error--> Wrong type argument: listp, z
               (apply '+ 1 2 '(3 4))
                    => 10
               (apply '+ '(1 2 3 4))
                    => 10
               
               (apply 'append '((a b c) nil (x y z) nil))
                    => (a b c x y z)

          `apply'を使用した興味深い例は，`mapcar'の記述で見付かります．


  Texinfoソースファイルでは，この例は以下のようになります．

     @defun apply function &rest arguments
     @code{apply}は@var{arguments}で@var{function}を呼び出し，
     @code{funcall}に似ていますが，1点異なります．@var{arguments}の終り
     は，@var{function}に与えられた単一の引数ではなく引数のリストです．我々
     は，このリストが他の引数に@dfn{加えられる}とも言っています．
     
     @code{apply}は@var{function}呼び出しの結果を返します．
     @code{funcall}のように，@var{function}はLisp関数やプリミティブ関数
     である必要があります．スペシャルフォームとマクロは，@code{apply}では
     意味がありません．
     
     @example
     (setq f 'list)
          @result{} list
     (apply f 'x 'y 'z)
     @error{} Wrong type argument: listp, z
     (apply '+ 1 2 '(3 4))
          @result{} 10
     (apply '+ '(1 2 3 4))
          @result{} 10
     
     (apply 'append '((a b c) nil (x y z) nil))
          @result{} (a b c x y z)
     @end example
     
     @code{apply}を使用した興味深い例は，@code{mapcar}の記述で見付かり
     ます．
     @end defun

このマニュアルでは，この関数は`apply'の下のコマンドと変数索引にリス
トアップされています．

通常の変数とユーザーオプションは，変数が引数を取らない以外，関数に対する
ものに似た書式を使用し記述されます．


File: texinfo-ja.info,  Node: Conditionals,  Next: Internationalization,  Prev: Definition Commands,  Up: Top

目に見えるテキストの条件
************************

異なる出力書式に対し，異なるテキストを使用するのが良いこともあります．例
えば，印刷されたマニュアルとInfo出力に対し異なるテキストを指定する，
"条件コマンド"を使用することができます．

  条件コマンドは入れ子状にしてはいけません．

  条件コマンドは，以下のカテゴリから成り立ちます．

   * HTML，Info，またはTeXのためのコマンド．

   * HTML，Info，またはTeXではないもののためのコマンド．

   * 生のTeXやHTMLコマンド．

   *
     全ての書式に対しテキストを代入し，フラグが設定されているかクリアされてい
     るか試すもの．

* Menu:

* Conditional Commands::        Specifying text for HTML, Info, or TeX.
* Conditional Not Commands::    Specifying text for not HTML, Info, or TeX.
* Raw Formatter Commands::      Using raw TeX or HTML commands.
* set clear value::             Designating which text to format (for
                                  all output formats); and how to set a
                                  flag to a string that you can insert.


File: texinfo-ja.info,  Node: Conditional Commands,  Next: Conditional Not Commands,  Up: Conditionals

条件コマンド
============

Texinfoには，特定の出力書式に対してテキストを含める条件を利用可能にする
ために，それぞれの出力書式に対して，対になるコマンドがあります．

  `@ifinfo'は，印刷されたマニュアルに植字されるとき，TeXで無視さ
れるテキストの部分を開始します．テキストのその部分は，Infoファイル(歴史
的な互換性のため)とプレーンテキストの出力だけに現れます．`@ifinfo'
コマンドは単独行に書くべきです．単独行の`@end ifinfo'を含む行で，
Infoのみのテキストを終えるべきです．

  `@iftex'と`@end iftex'コマンドは，`@ifinfo'と `@end
ifinfo'コマンドに類似しています．それらは，テキストが印刷さ
れたマニュアルに現れ，Infoファイルに現れないように指定します．
`@ifhtml'と`@end ifhtml'も同様で，テキストがHTML出力だけに現
すように指定します．そして，`@ifplaintext'と`@end
ifplaintext'も同様で，テキストがプレーンテキストの出力だけに現れるように
指定します．

  例えば，以下のようにします．

     @iftex
     このテキストは，印刷されたマニュアルだけに現れます．
     @end iftex
     @ifinfo
     しかし，このテキストはInfo(またはプレーンテキスト)だけに現れます．
     @end ifinfo
     @ifhtml
     また，このテキストはHTMLだけに現れます．
     @end ifhtml
     @ifplaintext
     但し，このテキストはプレーンテキストだけに現れます．
     @end ifplaintext

上記の例は，以下の行を生成します．
しかし，このテキストはInfo(またはプレーンテキスト)だけに現れます．

読んでいるマニュアルのバージョンに依存して，入力行の１つのみ見えることに
注意してください．


File: texinfo-ja.info,  Node: Conditional Not Commands,  Next: Raw Formatter Commands,  Prev: Conditional Commands,  Up: Conditionals

条件の否定コマンド
==================

  `@ifnot...'コマンドで与えられたもの以外の，あらゆる出力書式に
含まれるテキストを指定できます．
     @ifnothtml ... @end ifnothtml
     @ifnotinfo ... @end ifnotinfo
     @ifnotplaintext ... @end ifnotplaintext
     @ifnottex ... @end ifnottex

(`@ifnot...'コマンドと`@end'コマンドは，実際のソースファ
イルでは単独行で現します．)

  出力ファイルが与えられた書式のために作成されて_いない_場合，その領
域は含まれます．それ以外の場合，無視されます．

  (歴史的な互換性のため)一つの例外があります．`@ifnotinfo'テキストは，
Infoだけでなく，Infoとプレーンテキストの出力の両方で削除されます．テキス
トがInfoだけに現れてプレーンテキストに現れないように指定するため，以下の
ように`@ifnotplaintext'を指定してください．

     This will be in Info, but not plain text.

  これらのコマンドで限定された領域は，`@tex'で使用したような生のフォー
マッタソースではなく，`@iftex'で使用したような通常のTexinfoソース
にします(*note Raw Formatter Commands::)．


File: texinfo-ja.info,  Node: Raw Formatter Commands,  Next: set clear value,  Prev: Conditional Not Commands,  Up: Conditionals

生の書式化コマンド
==================

  `@iftex'と`@end iftex'で線引きされた領域の内部に，生のTeX
コマンドを埋め込むことが可能です．TeXが見るファイルの一部になるだけな
ので，Infoではこれらのコマンドは無視されます．TeXで使用されている
`\'を`@'に置換する必要がある以外，通常のTeXファイルで書い
ていたようなTeXコマンドを書くことが可能です．例えば，Texinfoファイル
の`@titlepage'セクションで，著作権ページを書式化するためのTeXコ
マンド`@vskip'を使用することが可能です．(`@titlepage'コマン
ドは，`@iftex'コマンドの使用と同じように，その領域を自動的にInfoに
無視させます．)

  しかし，プレーンTeXの多くの機能は，Texinfoが優先されるので動作しませ
ん．

  `@tex'と`@end tex'コマンドで領域を線引きすることで，プレーン
TeXを完全に入力し，TeXコマンドで`\'を使用することが可能です．
(`@tex'コマンドでも，`@iftex'コマンドのようにInfoは領域を無
視します．)唯一の例外は，`@end tex'を正確に認識できるよう，
`@'文字がまだコマンドを導入することです．

  例えばここに，プレーンTeXで書かれた数式があります．

     @tex
     $$ \chi^2 = \sum_{i=1}^N
               \left (y_i - (a + b x_i)
               \over \sigma_i\right)^2 $$
     @end tex

この例の出力は，印刷されたマニュアルにのみ現れます．Infoでこれを読んでい
る場合，印刷されたマニュアルに現れる等式は見ることはないでしょう．

  同様に，HTML出力のみに含まれる領域を線引きするため，`@ifhtml ... @end
ifhtml'を使用し，生のHTMLの領域のため`@html ...  @end
html'を使用することができます(再び，例外的に`@'はまだエスケー
プ文字なので，`@end'は認識されます．)


File: texinfo-ja.info,  Node: set clear value,  Prev: Raw Formatter Commands,  Up: Conditionals

`@set'，`@clear'，そして`@value'
================================

  `@set'，`@clear'，`@ifset'，そして`@ifclear'コマ
ンドを用いて，直接Texinfo書式化コマンドにTexinfoファイルの一部を書式化さ
せたり無視させたりすることが可能です．

  短い説明は以下のとおりです．

`@set FLAG [VALUE]'
     変数FLAGを設定し，追加のVALUEが指定されている場合はそれに設
     定します．

`@clear FLAG'
     以前に定義されていたかどうかによらず，変数FLAGを未定義にします．

`@ifset FLAG'
     FLAGが設定されている場合，次の`@end ifset'コマンドまでのテキ
     ストを書式化します．FLAGがクリアされている場合，次の`@end
     ifset'コマンドまでのテキストは無視されます．

`@ifclear FLAG'
     FLAGが設定されている場合，次の`@end ifclear'コマンドまでのテ
     キストは無視されます．FLAGがクリアされている場合，次の`@end
     ifclear'コマンドまでのテキストを書式化します．

* Menu:

* set value::                   Expand a flag variable to a string.
* ifset ifclear::               Format a region if a flag is set.
* value Example::               An easy way to update edition information.


File: texinfo-ja.info,  Node: set value,  Next: ifset ifclear,  Up: set clear value

`@set'と`@value'
----------------

  フラグに対する値を指定するために`@set'コマンドを使用し，それは後に
`@value'コマンドで展開されます．

  "フラグ"は識別子です．一般的に，フラグ名には文字と数字のみを使用し，
`-'や`_'は使用しないことが最善です -- それらが動作する文脈も
ありますが，TeXの制限のため全てが動作するわけではありません．

値は入力行の残りの文字による文字列で，あらゆるものを含めることが可能です．

  `@set'コマンドは以下のように書きます．

     @set foo これは文字列です．

これは，フラグ`foo'の値を"これは文字列です"に設定します．

  そのとき，Texinfoフォーマッタは`@value{FLAG}'コマンドを
FLAGに設定された文字列に置換します．このため`foo'が上記のよう
に設定されている場合，Texinfoフォーマッタは以下のように変換します．

     @value{foo}
上記を以下に変換
     これは文字列です

  `@value'コマンドを段落の中に書くことも可能です．しかし，
`@set'コマンドは単独行に書く必要があります．

  `@set'コマンドを以下のように書く場合を考えます．

     @set foo

文字列を指定していないので，`foo'の値は空の文字列になります．

  `@clear FLAG'で前に設定されたフラグをクリアする場合，それに
続く`@value{flag}'コマンドはエラーを報告します．

  例えば，以下のように`foo'を設定した場合を考えます．

     @set how-much very, very, very

そのとき，フォーマッタは以下のように変換します．

     It is a @value{how-much} wet day.
上記を以下変換
     It is a very, very, very wet day.

  以下のように書いた場合を考えます．

     @clear how-much

そのとき，フォーマッタは以下のように変換します．

     It is a @value{how-much} wet day.
上記を以下に変換
     It is a {No value for "how-much"} wet day.


File: texinfo-ja.info,  Node: ifset ifclear,  Next: value Example,  Prev: set value,  Up: set clear value

`@ifset'と`@ifclear'
--------------------

  FLAGが設定されているとき，Texinfo書式化コマンドは，それ以降の `@ifset
FLAG'と`@end ifset'コマンドの組の間にあるテキ
ストを書式化します．FLAGがクリアされているとき，Texinfo書式化コマ
ンドはテキストを書式化_しません_．`@ifclear'は同様に処理しま す．

  条件によって書式化されるテキストは，`@ifset FLAG'と `@end
ifset'コマンドの間に，以下のように書いてください．

     @ifset FLAG
     CONDITIONAL-TEXT
     @end ifset

例えば，`large'と`small'モデルに対するマニュアルのような，２つの形態があ
る１つのドキュメントを作成することが可能です．

     潅木を傷つけずに掘り出すために，
     この機械を使用することが可能です．
     
     @set large
     
     @ifset large
     それは，十分大きく育った木も掘り出すことも可能です．
     @end ifset
     
     すぐに植え直すことを忘れないでください...

例では，書式化コマンドは，`large'フラグが設定されているので， `@ifset
large'と`@end ifset'の間のテキストを書式化します．

  FLAGがクリアされているとき，Texinfo書式化コマンドは`@ifset
FLAG'と`@end ifset'の間のテキストを書式化_しません_．テ
キストは無視され，印刷された出力にもInfo出力にも現れません．

  例えば前の例で，`@set large'コマンドの後(で，条件テキストの前)に
`@clear large'コマンドを書いてフラグをクリアする場合，Texinfo書式
化コマンドは，`@ifset large'と`@end ifset'コマンドの間のテキ
ストを無視します．書式化された出力では，"潅木を傷つけずに掘り出すために，
この機械を使用することが可能です．すぐに植え直すことを忘れないでください
..."という行のみ見えるでしょう．

  `@clear FLAG'コマンドでフラグがクリアされている場合，書式化
コマンドは`@ifclear'と`@end ifclear'コマンドの組の間のテキス
トを書式化します．しかし`@set FLAG'でフラグが設定されている
場合，書式化コマンドは`@ifclear'と`@end ifclear'コマンドの間
のテキストを書式化_しません_．というよりはむしろ，それらのテキスト
を無視します．`@ifclear'コマンドは以下のようにします．

     @ifclear FLAG


File: texinfo-ja.info,  Node: value Example,  Prev: ifset ifclear,  Up: set clear value

`@value'の例
------------

  `@value'コマンドを，マニュアル更新時に変更する必要がある部分の数を
最小限にするために使用することが可能です．Automakeの配布物を用いた同じ原
理の例とその完全なテキストは，*Note GNU Sample Texts::.

  *Note Overview: (make)Top)からの適用例は以下のよう になります．

  1. フラグを設定します．

          @set EDITION 0.35 Beta
          @set VERSION 3.63 Beta
          @set UPDATED 14 August 1992
          @set UPDATE-MONTH August 1992

  2. `@copying'セクション(*note copying::)に対するテキストを書きます．

          @copying
          This is Edition @value{EDITION},
          last updated @value{UPDATED},
          of @cite{The GNU Make Manual},
          for @code{make}, version @value{VERSION}.
          
          Copyright ...
          
          Permission is granted ...
          @end copying

  3.
     印刷されたマニュアルの読者に対し，タイトルページのためのテキストを書きま
     す．

          @titlepage
          @title GNU Make
          @subtitle A Program for Directing Recompilation
          @subtitle Edition @value{EDITION}, ...
          @subtitle @value{UPDATE-MONTH}
          @page
          @insertcopying
          ...
          @end titlepage

     (印刷されたカバーでは，月と年をリストアップした日付でも，月と年だけでな
     くその日をリストアップした日付でなくても曖昧ではないでしょう．)

  4. Infoファイルの読者に対し，Topノードに対するテキストを書きます．

          @ifnottex
          @node Top
          @top Make
          
          @insertcopying
          ...
          @end ifnottex

     マニュアルを書式化後，`@value'の構成物は展開されるので，出力物には
     以下のようなテキストが含まれています．

          This is Edition 0.35 Beta, last updated 14 August 1992,
          of `The GNU Make Manual', for `make', Version 3.63 Beta.

マニュアルを更新したとき，フラグの値のみを変更してください．３つのセクショ
ンを編集する必要はありません．


File: texinfo-ja.info,  Node: Internationalization,  Next: Defining New Texinfo Commands,  Prev: Conditionals,  Up: Top

国際化
******

Texinfoは，英語以外の言語で書くためのサポートもありますが，この領域は，
まだ重要な仕事を必要とします．

  Texinfoがサポートする，さまざまなアクセントと特別な文字のリストは，
*Note Inserting Accents::を参照してください．

* Menu:

* documentlanguage::            Declaring the current language.
* documentencoding::            Declaring the input encoding.


File: texinfo-ja.info,  Node: documentlanguage,  Next: documentencoding,  Up: Internationalization

`@documentlanguage CC': ドキュメントの言語の設定
================================================

  `@documentlanguage'コマンドは，現在のドキュメント言語を宣言します．
単独行に，２文字のISO-639言語コードを続けてください(リストは以下に含まれ
ています)．複数言語のドキュメントがある場合，目的は，それぞれの言語に変
更を宣言するため，何回もこのコマンドを使用することで可能となります．コマ
ンドが全く使用されていない場合，デフォルトは英語の`en'です．

  現在，このコマンドはInfoとHTML出力では無視されます．TeXに対して，それ
はファイル`txi-CC.tex'を読み込ませます(存在する場合)．そのよ
うなファイルは，適切にTeX出力で使用されている`Chapter'，`See'等のよう
な様々な英単語を再定義します．

  このコマンドが，TeXの現在のハイフネーションパターン思考を(TeXプリ
ミティブの`\language'で)変更すると良いのですが，これは残念ながら，
現在は実装されていません．

  ISO-639からの有効な言語コードは以下のようになります．

`aa'  Afar                 `ab' Abkhazian            `af' Afrikaans
`am'  Amharic              `ar' Arabic               `as' Assamese
`ay'  Aymara               `az' Azerbaijani          `ba' Bashkir
`be'  Byelorussian         `bg' Bulgarian            `bh' Bihari
`bi'  Bislama              `bn' Bengali; Bangla      `bo' Tibetan
`br'  Breton               `ca' Catalan              `co' Corsican
`cs'  Czech                `cy' Welsh                `da' Danish
`de'  German               `dz' Bhutani              `el' Greek
`en'  English              `eo' Esperanto            `es' Spanish
`et'  Estonian             `eu' Basque               `fa' Persian
`fi'  Finnish              `fj' Fiji                 `fo' Faroese
`fr'  French               `fy' Frisian              `ga' Irish
`gd'  Scots Gaelic         `gl' Galician             `gn' Guarani
`gu'  Gujarati             `ha' Hausa                `he' Hebrew
`hi'  Hindi                `hr' Croatian             `hu' Hungarian
`hy'  Armenian             `ia' Interlingua          `id' Indonesian
`ie'  Interlingue          `ik' Inupiak              `is' Icelandic
`it'  Italian              `iu' Inuktitut            `ja' Japanese
`jw'  Javanese             `ka' Georgian             `kk' Kazakh
`kl'  Greenlandic          `km' Cambodian            `kn' Kannada
`ks'  Kashmiri             `ko' Korean               `ku' Kurdish
`ky'  Kirghiz              `la' Latin                `ln' Lingala
`lt'  Lithuanian           `lo' Laothian             `lv' Latvian, Lettish
`mg'  Malagasy             `mi' Maori                `mk' Macedonian
`ml'  Malayalam            `mn' Mongolian            `mo' Moldavian
`mr'  Marathi              `ms' Malay                `mt' Maltese
`my'  Burmese              `na' Nauru                `ne' Nepali
`nl'  Dutch                `no' Norwegian            `oc' Occitan
`om'  (Afan) Oromo         `or' Oriya                `pa' Punjabi
`pl'  Polish               `ps' Pashto, Pushto       `pt' Portuguese
`qu'  Quechua              `rm' Rhaeto-Romance       `rn' Kirundi
`ro'  Romanian             `ru' Russian              `rw' Kinyarwanda
`sa'  Sanskrit             `sd' Sindhi               `sg' Sangro
`sh'  Serbo-Croatian       `si' Sinhalese            `sk' Slovak
`sl'  Slovenian            `sm' Samoan               `sn' Shona
`so'  Somali               `sq' Albanian             `sr' Serbian
`ss'  Siswati              `st' Sesotho              `su' Sundanese
`sv'  Swedish              `sw' Swahili              `ta' Tamil
`te'  Telugu               `tg' Tajik                `th' Thai
`ti'  Tigrinya             `tk' Turkmen              `tl' Tagalog
`tn'  Setswana             `to' Tonga                `tr' Turkish
`ts'  Tsonga               `tt' Tatar                `tw' Twi
`ug'  Uighur               `uk' Ukrainian            `ur' Urdu
`uz'  Uzbek                `vi' Vietnamese           `vo' Volapuk
`wo'  Wolof                `xh' Xhosa                `yi' Yiddish
`yo'  Yoruba               `za' Zhuang               `zh' Chinese
`zu'  Zulu                                                


File: texinfo-ja.info,  Node: documentencoding,  Prev: documentlanguage,  Up: Internationalization

`@documentencoding ENC': 入力エンコードの設定
=============================================

  `@documentencoding'コマンドは，入力ドキュメントのエンコードを宣言
します．単独行に，`ISO-8859-1'のような有効なエンコード指定を続けて
書いてください．

  現在，これは`makeinfo'のHTML出力のみで使用されています．ドキュメ
ントエンコードENCが指定されている場合，出力の`<head>'に含まれ
ている`<meta>'タグで使用されます．

     <meta http-equiv="Content-Type" content="text/html;
           charset=ENC">


File: texinfo-ja.info,  Node: Defining New Texinfo Commands,  Next: Hardcopy,  Prev: Internationalization,  Up: Top

新しいTexinfoコマンドの定義
***************************

  Texinfoは，新しいコマンドを定義する様々なコマンドを提供します．

   * Texinfo"マクロ"では，テキストと/または既存のコマンド(他のマクロを含
     む)の列として，新しいTexinfoコマンドの定義が可能です．マクロは，あらゆる
     数の"パラメータ" -- マクロの使用と同時に提供するテキスト -- を取る
     ことが可能です．

     さらに，これらのマクロは`@defmac'コマンドと関係が無く，それは，マ
     ニュアルのサブジェクトでドキュメント化されるマクロです(*note Def
     Cmd Template::)．

   * `@alias'は，既存のコマンドに対する新しい名前を定義する便利な方法で
     す．

   * `@definfoenclose'で，Infoファイルのカスタマイズされた出力で新しい
     コマンドの定義が可能です．


* Menu:

* Defining Macros::             Defining and undefining new commands.
* Invoking Macros::             Using a macro, once you've defined it.
* Macro Details::               Beyond basic macro usage.
* alias::                       Command aliases.
* definfoenclose::              Customized highlighting.


File: texinfo-ja.info,  Node: Defining Macros,  Next: Invoking Macros,  Up: Defining New Texinfo Commands

マクロの定義
============

  マクロを定義するため，以下のようにTexinfoの`@macro'コマンドを使用
します．

     @macro MACRONAME{PARAM1, PARAM2, ...}
     TEXT ... \PARAM1\ ...
     @end macro

  "パラメータ"のPARAM1，PARAM2，...は，後でマクロをド
キュメントで使用するとき(次のセクションで記述します)に供給される引数に対
応します．

  マクロがTeXで動作するため，MACRONAMEは完全に文字から成り立って
いる必要があります．数字，ハイフン，アンダースコア，または他の特別な文字
を含めてはいけません．

  マクロがパラメータを必要としない場合，空のリスト(`@macro foo
{}')，またはカッコ無し(`@macro foo')で定義することが可能です．

  定義やマクロの"本体"は，前に定義されたマクロを含め，ほとんどの
Texinfoコマンドを含めることが可能です．まだ定義されていないマクロの呼び
出しはできません．このため，相互に繰り返されるTexinfoマクロを持つことは
不可能です．また，他のマクロを定義するマクロ定義は，`@macro'の設計
の制限のため，TeXでは動作しません．

  マクロの本体では，上記の例では`\PARAM1\'のようにバックスラッ
シュで囲まれているパラメータ名のインスタンスは，マクロ呼び出しでの対応す
る引数で置換されます．パラメータ名は，０回を含め何度でも本体で使用可能で
す．

  マクロ式での単一の`\'を得るため，`\\'を使用してください．ほか
のあらゆる本体での`\'の使用は警告されます．

  `@macro'行の後と`@end macro'行の前の改行は無視されるので，マ
クロ本体に含まれません．全ての他の空白は通常のTexinfoの規則に従って扱わ
れます．

マクロを再帰的に使用可能にするため，すなわち，引数としてそれ自身を呼び出
すため，以下のように`@rmacro'で定義する必要があります．

     @rmacro rmac {arg}
     a\arg\b
     @end rmacro
     ...
     @rmac{1@rmac{text}2}

  これは，出力`a1atextb2b'を生成します．`@rmacro'の代わりに
`@macro'を用いた場合，エラーメッセージが表示されるでしょう．

  `@unmacro FOO'を用いて，マクロFOOを未定義にすることが
可能です．既に未定義にされたマクロを未定義にすることはエラーではありませ
ん．例えば以下のようにします．

     @unmacro foo


File: texinfo-ja.info,  Node: Invoking Macros,  Next: Macro Details,  Prev: Defining Macros,  Up: Defining New Texinfo Commands

マクロの呼び出し
================

マクロの定義後(前のセクションを参照してください)，以下のようにドキュメン
トで使用("呼び出し")可能です．

     @MACRONAME {ARG1, ARG2, ...}

そして，結果はその場所にMACRONAME本体を入力したかのようになります．
例えば以下のようにします．

     @macro foo {p, q}
     Together: \p\ & \q\.
     @end macro
     @foo{a, b}

以下を生成します．

     Together: a & b.

このため，引数とパラメータはカンマで分けられ，カッコで範囲を制限します．
カンマの後(前は違います)のあらゆる空白は無視されます．マクロが引数を取ら
ない場合でもカッコは呼び出しで(定義では違います)要求され，他の全ての
Texinfoコマンドとの一貫性を保ちます．

     @macro argless {}
     ここに引数はありません．
     @end macro
     @argless{}

以下を生成します．

     ここに引数はありません．

カンマ，カッコ，またはバックスラッシュを引数に挿入するため，以下のように
バックスラッシュを前置します．

     @MACNAME {\\\{\}\,}

それは，引数`\{},'をMACNAMEに渡します(ほとんど確実にエラー
を生成します)．しかし，カッコ内のカンマはバックスラッシュでエスケープさ
れていても．TeXで問題になるでしょう．

マクロが単一の引数を取るように定義されていて，カッコ無しで呼び出された場
合，マクロ名の後の行の残り全体は引数として供給されます．例えば，以下のよ
うになります．

     @macro bar {p}
     Twice: \p\ & \p\.
     @end macro
     @bar aah

以下を生成します．

     Twice: aah & aah.

マクロが単一の引数を取るように定義されていて，カッコ付で呼び出された場合，
カンマにかかわらずカッコ付のテキストは引数として渡されます．例えば以下の
ようになります．

     @macro bar {p}
     Twice: \p\ & \p\.
     @end macro
     @bar{a,b}

以下を生成します．

     Twice: a,b & a,b.


File: texinfo-ja.info,  Node: Macro Details,  Next: alias,  Prev: Invoking Macros,  Up: Defining New Texinfo Commands

マクロの詳細
============

  TeXと`makeinfo'の実装には避けることのできない相違があるので，
Texinfoマクロは以下の制限があります．

   * マクロは少なくとも１つのTeXグループに展開されます．これは，
     `@set'とその他の類似のコマンドはマクロで効果がないことを意味します．

   *
     条件文のような単独行となるコマンドを含むマクロは，行の中間で呼び出すこと
     は不可能です．

   *
     マクロ引数内のカンマは，バックスラッシュでエスケープされている場合でも，
     常に動作するわけではありません．

   *
     TeXの実装では，自然な方法でマクロを定義するマクロを構築できません．こ
     うするためには，条件文と生のTeXを使用します．例えば以下のようにします．

          @ifnottex
          @macro ctor {name, arg}
          @macro \name\
          something involving \arg\ somehow
          @end macro
          @end macro
          @end ifnottex
          @tex
          \gdef\ctor#1{\ctorx#1,}
          \gdef\ctorx#1,#2,{\def#1{something involving #2 somehow}}
          @end tex

   * マクロ定義の中でコメントを避けることは最善です．


マニュアルの印刷バージョンを生成しているとき，マクロ機能でエラーが生じる
場合，`texi2dvi'を`-e'オプションを用いて呼び出し，
`makeinfo'でマクロの展開を試みてください．*Note Format with
texi2dvi::を参照してください．


File: texinfo-ja.info,  Node: alias,  Next: definfoenclose,  Prev: Macro Details,  Up: Defining New Texinfo Commands

`@alias NEW=EXISTING'
=====================

  `@alias'コマンドは，新しいコマンドを既存のものと同じように定義しま
す．これは追加のマークアップ名の定義に便利で，このため出力結果が同じであっ
ても，入力の意味論的な情報を維持します．

  `@alias'コマンドを単独行に書き，新しいコマンド名，等号，そして既存
のコマンド名を続けてください．等号の周りの空白は無視されます．このため以
下のようにします．
     @alias NEW = EXISTING

例えば，ドキュメントが本と他のメディア(例えば動画)の両方への引用を含んで
いる場合，通常の`@cite{}'と同じことを行いますが，同じような余分
な意味論的情報をもたらすマクロ`@moviecite{}'を定義したい可能性が
あります．このため以下のようにします．

     @alias moviecite = cite

気まぐれな引数の解析のため，マクロは常に同じ結果となるわけではありません．
また，別名はマクロより定義が簡単です．そのため，コマンドは重複しません．
(また，専門語ファイルで大量に使用されました！)

  別名は，直接的や間接的に，再帰的してはいけません．


File: texinfo-ja.info,  Node: definfoenclose,  Prev: alias,  Up: Defining New Texinfo Commands

`definfoenclose': 強調のカスタマイズ
====================================

  `@definfoenclose'コマンドは，Infoに対しては使用しTeXに対しては
使用しない強調コマンドの定義として使用してもかまいません．
`@definfoenclose'で定義されたコマンドは，前後のテキストの文字列内
の，そのコマンドで囲んだテキストに印を付けます．Info出力に似た制御を行な
うためこれを使用することも可能です．

  おそらく，Infoに対し`@definfoenclose'でコマンドを定義する場合，
`texinfo.tex'，`texinfo.cnf'，またはドキュメントの
`@iftex'の中でTeXに対し対応するコマンドを作成することになるでしょ う．

  `@definfoenclose'コマンドを１行で書き，カンマで区切られた３つの引
数を続けてください．`@definfoenclose'の最初の引数は(`@'がな い)
@-コマンド名です．２番目の引数はInfoを開始するデリミタ文字列です．
そして，３番目の引数はInfoを終了するデリミタ文字列です．デリミタ文字列は
スペースを含めてもかまいません．開始と終了のデリミタは必須ではありません．
開始デリミタが不要で，終了デリミタが欲しい場合，コマンド名で同じ行に２つ
のカンマを続ける必要があります．そうしない場合，Info書式化コマンドは，当
然，終了デリミタ文字列を開始デリミタ文字列だと誤って解釈します．

  (`@emph'，`@strong'，`@t'，または`@i'のように)前
もって定義されているマクロ名で`@definfoenclose'する場合，囲まれた
定義は組込み定義に優先されます．

囲みコマンドはカッコ内の１つの引数を取り，以下のように定義されます．これ
は，新しいマークアップコマンドを意図しています(*note Marking Text::)．

  例えば，以下のように書くことが可能です．

     @definfoenclose phoo,//,\\

`@phoo'の引数の前に`//'，後ろに`\\'を挿入するInfo書式化コマンドと
して`@phoo'を定義するために，Texinfoファイルの最初の方に書きます．
そして，Infoで強調された`//bar\\'が必要な場所ならどこでも，
`@phoo{bar}'を書くことが可能です．

  また，TeX書式化で以下のように書くことも可能でしょう．

     @iftex
     @global@let@phoo=@i
     @end iftex

`@phoo'をTeXに`@phoo'の引数をイタリック対で植字させるコマ
ンドとして`@phoo'を定義します．

  それぞれの定義は独自のフォーマッタに適用さます．１つはTeXに対し，もう1
つは`texinfo-format-buffer'や`texinfo-format-region'に対するも
のです．`@definfoenclose'コマンドは`@ifinfo'の中に書く必要は
ありませんが，生のTeXコマンドは`@iftex'の中に書く必要があります．

  もう１つの例です．以下のように書きます．

     @definfoenclose headword, , :

`@headword'の引数の前には何も挿入せず，後にコロンを挿入するInfo書
式化コマンドとして`@headword'を定義するために，ファイルの最初の方
に書いてください．

  `@definfoenclose'定義は，直接的または間接的に，再帰的してはいけま
せん．


File: texinfo-ja.info,  Node: Hardcopy,  Next: Creating and Installing Info Files,  Prev: Defining New Texinfo Commands,  Up: Top

書式化とハードコピーの出力
**************************

Texinfoファイルから印刷されたマニュアルを作成するため，３つの主なシェル
コマンドがあります．１つは，Texinfoファイルを印刷されるファイルに変換す
るもので，２つ目は索引をソートするもので，３つ目は書式化されたドキュメン
トを印刷するものです．シェルコマンドを使用するとき，オペレーティングシス
テムのシェルで直接実行したり，GNU Emacs内部のシェルで実行したりすること
が可能です．

  GNU
Emacsを使用している場合，シェルコマンドの代わりにTexinfoモードで提供
されているコマンドを使用することが可能です．ファイルを書式化したり，索引
をソートしたり，結果を印刷したりする３つのコマンドの加え，Texinfoモード
は，出力バッファを更新したり，印刷のキューを表示したり，印刷キューからジョ
ブを削除したりするコマンドに対するキーバインドを提案します．

* Menu:

* Use TeX::                     Use TeX to format for hardcopy.
* Format with tex/texindex::    How to format with explicit shell commands.
* Format with texi2dvi::        A simpler way to format.
* Print with lpr::              How to print.
* Within Emacs::                How to format and print from an Emacs shell.
* Texinfo Mode Printing::       How to format and print in Texinfo mode.
* Compile-Command::             How to print using Emacs's compile command.
* Requirements Summary::        TeX formatting requirements summary.
* Preparing for TeX::           What to do before you use TeX.
* Overfull hboxes::             What are and what to do with overfull hboxes.
* smallbook::                   How to print small format books and manuals.
* A4 Paper::                    How to print on A4 or A5 paper.
* pagesizes::                   How to print with customized page sizes.
* Cropmarks and Magnification::  How to print marks to indicate the size
                                of pages and how to print scaled up output.
* PDF Output::                  Portable Document Format output.


File: texinfo-ja.info,  Node: Use TeX,  Next: Format with tex/texindex,  Up: Hardcopy

TeXの使用
=========

  TeXと呼ばれる植字プログラムは，Texinfoファイルの書式化に使用します．
TeXは非常に強力な植字プログラムで，正しく使用すると，非常に良い仕事を
します．(TeXの入手方法の詳細は，*Note How to Obtain TeX: Obtaining TeX.)

  スタンドアローンの`makeinfo'プログラムとEmacsの関数の
`texinfo-format-region'と`texinfo-format-buffer'コマンドは，
TeXのように，Texinfoファイルの@-コマンドを全く同じように読み込みます
が，Infoファイルの作成とは異なる処理を行います(*note Creating an Info
File::)．


File: texinfo-ja.info,  Node: Format with tex/texindex,  Next: Format with texi2dvi,  Prev: Use TeX,  Up: Hardcopy

`tex'と`texindex'での書式化
===========================

  Texinfoファイルを，シェルコマンド`tex'にTexinfoファイル名を続けて書
式化します．例えば，以下のようにします．

     tex foo.texi

TeXは，索引や相互参照等の情報を含むいくつかの追加ファイルと，
"DVIファイル"を生成します．DVIファイル("DeVice Independent"ファ
イル)は，事実上あらゆるデバイスに出力可能です(以下のセクションを参照して
ください)．

  `tex'書式化コマンド自身は索引をソートしません．それは，ソートされて
いない索引データの出力を書き出します．(`texi2dvi'コマンドは，自動的
に索引を生成します．*note Format with `texi2dvi': Format with
texi2dvi..)`tex'コマンド実行後，印刷する索引を生成するため，
最初に索引をソートする必要があります．`texindex'コマンドは索引をソー
トします．(ソースファイル`texindex.c'は，他の場所から得られることも
ありますが，標準的なTexinfo配布物の一部となっています．)

  `tex'書式化コマンドは，標準的な慣習に従う名前でソートされていない索
引ファイルを出力します．`.tex'(または類似のもので，*note tex
invocation: (web2c)tex
invocation.)が付いている主な入力ファイルの名前の拡張子は
削除され，索引名の２文字が続きます．例えば，入力ファイル
`foo.texinfo'に対する生の索引出力ファイルは，`foo.cp'，
`foo.vr'，`foo.fn'，`foo.tp'，`foo.pg'，そして
`foo.ky'です．それらは，正確に`texindex'に与える引数です．

  全てのソートされていない索引ファイル名を明示的に指定する代わりに，
`??'をシェルワイルドカードとして使い，以下の形式でコマンドに与える
ことも可能です．

     texindex foo.??

このコマンドは，`texindex'を全てのソートされていない索引ファイルで
実行し，それには，`@defindex'や`@defcodeindex'を使用して独自
に定義したものも含まれます．(たとえ，`foo.el'のように，索引ファイル
ではない２文字の拡張子を持つ似た名前のファイルがある場合でも，
`texindex foo.??'を実行してもかまいません．`texindex'コマンド
は，そのようなファイルを無視したことを報告します．)

  それぞれ指定したファイルに対し，`texindex'は入力ファイルに`s'
を付けた名前を持つソートされた索引ファイルを生成します．
`@printindex'コマンドは，その名前でファイルを探します (*note Printing
Indices & Menus::)．`texindex'は生の索引出力ファイ ルを変更しません．

  索引のソート後，`tex'書式化コマンドをTexinfoファイルで再実行する必
要があります．これはDVIファイルを再生成し，このとき索引項目は更新されま
す．

  最終的に，相互参照で正しいページ番号を得るために，`tex'をもう一度実
行する必要があります．

  要約すると，これは5ステップの処理です．

  1. Texinfoファイルで`tex'を実行してください．これは(相互参照が定義され
     ておらず，索引のない)DVIファイルと，(２文字の拡張子を持つ)生の索引ファイ
     ルを生成します．

  2. 生の索引ファイルで`texindex'を実行してください．これで，適切にソー
     トされた(３文字の拡張子の)索引ファイルを生成します．

  3. `tex'を再びTexinfoファイルで実行してください．これでDVIファイルを生
     成し，索引と定義された相互参照はこのとき再生成しますが，相互参照のページ
     番号は一般に正しくないので最後に再生成します．

  4. `texindex'で再び索引をソートしてください．

  5.
     `tex'を最後に１度実行してください．このとき相互参照に対し，正しいペー
     ジ番号を書き出します．

  別の方法として，１ステップで処理します．`texi2dvi'(*note Format with
texi2dvi::)を実行してください．

  `tex'の実行後，毎回`texindex'を実行する必要はありません．実行
しない場合は，次の実行時に，`tex'書式化コマンドはソートされているか
どうかにかかわらず，たまたま存在する前回の`texindex'の使用から得ら
れる索引ファイルを使用します．これは，通常デバッグ中は問題ありません．

完全でないと分かっているドキュメントを印刷したり，ドキュメントの１つの章
だけ印刷したい場合もあります．その場合，通常のTeXが作成した追加ファイ
ルと，相互参照が十分でないときTeXが与える警告は厄介になります．
`@novalidate'コマンドでこれを避けることができ，それは
`@setfilename'コマンド(*note `@setfilename': setfilename.)
の_前で_与える必要があります．このため，ファイルの最初はおそらく以
下のようになります．

     \input texinfo
     @novalidate
     @setfilename myfile.info
     ...

`@novalidate'も，`--no-validate'オプション(*note Pointer
Validation::)を与えたように`makeinfo'で有効に停止します．


File: texinfo-ja.info,  Node: Format with texi2dvi,  Next: Print with lpr,  Prev: Format with tex/texindex,  Up: Hardcopy

`texi2dvi'での書式化
====================

  `texi2dvi'コマンドは，自動的に`tex'と`texindex'の両方を，
ソートされた索引や相互参照が解決されているDVIファイルを生成するのに必要
な回数実行します．それは，前のセクションで記述された，
`tex'--`texindex'--`tex'--`tex'の順番で単純化され ています．

  入力ファイル`foo.texi'で`texi2dvi'を実行するため，以下のように
してください(`prompt$ 'はシェルプロンプトです)．

     prompt$ texi2dvi foo.texi

  この例で示したように，`texi2dvi'の入力ファイル名は(`.texi'，
`.texinfo'等の)拡張子を含める必要があります．MS-DOSやおそらく他の環
境では，オペレーティングシステムがシェルで`texi2dvi'スクリプトを呼
び出すことを期待する代わりに，`sh texi2dvi foo.texi'を実行する必要
があるかもしれません．

  おそらく，`texi2dvi'の最も役に立つオプションは，
`--texinfo=CMD'です．これは，TeXを実行する前の一時的な入力
ファイルのコピーで，`@setfilename'の行の後にCMDを単独行で挿
入します．こうすることで，`@smallbook' (*note smallbook::)，
`@afourpaper' (*note A4 Paper::)や，`@pagesizes' (*note
pagesizes::)のように，異なる印刷書式を，実際にドキュメントソース
を変更することなく指定することが可能になります．(`texinfo.cnf'で，
サイト全体に対しこうすることもできます．*note Preparing for TeX:
Preparing for TeX..)

  他のオプションのリストは，`texi2dvi --help'を実行してください．


File: texinfo-ja.info,  Node: Print with lpr,  Next: Within Emacs,  Prev: Format with texi2dvi,  Up: Hardcopy

`lpr -d'を使用したシェル印刷
============================

DVIファイルを印刷する正確なコマンドは，システムインストールの状態に依存
します．一般的なものは２つあり，それらは`dvips foo.dvi -o'と `lpr -d
foo.dvi'です．

  例えば，以下のコマンドで，(おそらく)`Bison Manual'の索引のソート，
書式化，そして印刷には十分でしょう．

     tex bison.texinfo
     texindex bison.??
     tex bison.texinfo
     lpr -d bison.dvi

(シェルコマンドはサイトにより異なる可能性があることを覚えておいてくださ
い．しかし，これらは通常使用されているバージョンです．)

  `texi2dvi'シェルスクリプトを以下のように使用します(前のセクションを
参照してください)．

     texi2dvi bison.texinfo
     lpr -d bison.dvi
     # or perhaps dvips bison.dvi -o

  `lpr'はUnixシステムの標準的なプログラムですが，通常
MS-DOS/MS-Windowsにはありません．ネットワークパッケージに`lpr'とい
う名のプログラムが付属していることもありますが，これらは通常，ネットワー
ク上のプリントサーバにファイルを送ることに機能が制限されていて，一般に，
`-d'オプションはサポートされていません．不幸にも，これらのシステム
のいずれかで十分な仕事をしたい場合，DVIファイルを印刷する代わりの方法が
あります．

   * Unixライクの`lpr'プログラムや，そのクローンを見つけてインストールし
     てください．そうする場合，DVIファイルを上記のようなスクリプトで印刷でき
     ます．

   *
     DVIファイルをDVIファイルのネットワークプリンタのキューに送ってください．
     ネットワークプリンタは，DVIファイルを印刷する特別なキューを持つものもあ
     ります．キューにファイルを送るため，ネットワークソフトウェアを設定するこ
     とが可能なはずです．場合によっては，ネットワークソフトウェア付属の
     `lpr'のバージョンには，特別のキューにファイルを送るための以下のよう
     な特別なオプションがあります．

          lpr -Qdvi -hprint.server.domain bison.dvi

   *
     DVIファイルをPostscriptやPCLファイルに変換し，ローカルプリンタに送ってく
     ださい．これらのツールの記述の詳細は，*Note dvips invocation:
     (dvips)dvips invocation.
     そして，`dvilj'のmanページを参照してください．DVIファイル
     をローカルプリンタが直接理解できる書式に変換してから，通常は`PRN'で
     ある適切なポートそれを送ってください．


File: texinfo-ja.info,  Node: Within Emacs,  Next: Texinfo Mode Printing,  Prev: Print with lpr,  Up: Hardcopy

Emacsシェルからの実行
=====================

  書式化と印刷のコマンドをGNU
Emacs内部のシェルから与えることができます．
Emacs内部のシェルを作成するため，`M-x shell'を入力してください．この
シェルでドキュメントの書式化と印刷が可能です．詳細は，*Note Format and
Print Hardcopy: Hardcopy.

  `tex'を実行しているシェルバッファへ(から)切替えて，他を編集すること
が可能です．遅いマシンで長いドキュメントを書式化する場合，これは大変便利
です．

  `texi2dvi'をEmacsシェルから実行することも可能です．例えば，Emacsの
内部シェルから，`Using and Porting GNU CC'を書式化し印刷する，
`texi2dvi'の使用法は以下のようになります．

     texi2dvi gcc.texinfo
     lpr -d gcc.dvi

  Texinfoモードでの書式化と印刷に関する詳細は，*Note Texinfo Mode
Printing::.


File: texinfo-ja.info,  Node: Texinfo Mode Printing,  Next: Compile-Command,  Prev: Within Emacs,  Up: Hardcopy

Texinfoモードでの書式化と印刷
=============================

  Texinfoモードは，TeXの書式化と印刷のための前もって定義されたキーコマ
ンドをいくつか提供しています．これらには，索引のソート，プリンタキューを
見ること，書式化ジョブの停止，そしてオペレーションが発生させているバッファ
の表示の更新のコマンドが含まれます．

`C-c C-t C-b'
`M-x texinfo-tex-buffer'
     現在のバッファで`texi2dvi'を実行します．

`C-c C-t C-r'
`M-x texinfo-tex-region'
     現在の領域でTeXを実行します．

`C-c C-t C-i'
`M-x texinfo-texindex'
     `texinfo-tex-region'で書式化されたTexinfoファイルの索引をソートしま
     す．

`C-c C-t C-p'
`M-x texinfo-tex-print'
     `texinfo-tex-region'や`texinfo-tex-buffer'で作成されたDVIファ
     イルを印刷します．

`C-c C-t C-q'
`M-x tex-show-print-queue'
     プリントキューを表示します．

`C-c C-t C-d'
`M-x texinfo-delete-from-print-queue'
     プリントキューからジョブを削除します．前もって`C-c C-t C-q'コマンド
     (`texinfo-show-tex-print-queue')で調べたジョブ番号の入力を促されま
     す．

`C-c C-t C-k'
`M-x tex-kill-job'
     現在実行している，`texinfo-tex-region'や`texinfo-tex-buffer'で
     開始されたTeXジョブや，Texinfoシェルバッファで実行している他のあらゆ
     るプロセスを停止します．

`C-c C-t C-x'
`M-x texinfo-quit-job'
     <x>を送られて，エラーで停止した書式化のジョブを終了します．こうする
     とき，TeXは行ったことの記録を`.log'ファイルに保存します．

`C-c C-t C-l'
`M-x tex-recenter-output-buffer'
     TeXの印刷と書式化コマンドを実行しているシェルバッファを，最新出力を表
     示させるため再表示します．

このため，バッファを書式化するコマンドの通常の順序は，以下のようになりま
す(右はコメントです)．

     C-c C-t C-b             バッファで`texi2dvi'を実行．
     C-c C-t C-p             DVIファイルを印刷．
     C-c C-t C-q             プリンタキューの表示．

  TexinfoモードのTeX書式化コマンドは，`*tex-shell*'と呼ばれるEmacs
のサブシェルを開始します．`texinfo-tex-command'，
`texinfo-texindex-command'，そして`tex-dvi-print-command'コマ
ンドは，全てこのシェルで実行されます．

  コマンドオペレーションを`*tex-shell*'バッファで見ることが可能で，他
のシェルバッファで行うように，`*tex-shell*'バッファに/から切替えて
使用することが可能です．

書式化と印刷コマンドは，いくつかの変数の値に依存します．デフォルト値は以
下のとおりです．

          Variable                              Default value
     
     texinfo-texi2dvi-command                  "texi2dvi"
     texinfo-tex-command                       "tex"
     texinfo-texindex-command                  "texindex"
     texinfo-delete-from-print-queue-command   "lprm"
     texinfo-tex-trailer                       "@bye"
     tex-start-of-header                       "%**start"
     tex-end-of-header                         "%**end"
     tex-dvi-print-command                     "lpr -d"
     tex-show-queue-command                    "lpq"

  これらの変数の値を，`M-x edit-options'コマンド(*note Editing Variable
Values: (emacs)Edit Options.)の使用や， `M-x
set-variable'コマンド(*note Examining and Setting Variables:
(emacs)Examining.)の使用や，`.emacs'初期化ファ イル(*note Init File:
(emacs)Init File.)を使用して変更す ることが可能です．

  バージョン20から始まるGNU Emacsは，"カスタマイズ"と呼ばれる，ユーザ
フレンドリーなインターフェースを提供していて，それはユーザ定義可能な変数
の値を変えるためのものです．詳細は，*Note Easy Customization Interface:
(emacs)Easy Customization.  Texinfo変数は， `M-x
customize'コマンドで呼び出すと，`Development/Docs/Texinfo'
グループで見つかります．


File: texinfo-ja.info,  Node: Compile-Command,  Next: Requirements Summary,  Prev: Texinfo Mode Printing,  Up: Hardcopy

ローカル変数リストの使用
========================

  TeX書式化コマンドをTexinfoファイルに適用するための更にもう１つの方法
は，Texinfoファイルの終りで"ローカル変数リスト"にそれらのコマンドを
書く方法です．`tex'や`texi2dvi'コマンドを
`compile-command'のコマンドとして指定し，`M-x compile'の入力で
Emacsに実行させることが可能です．これで`*compilation*'バッファと呼
ばれる特別なシェルを作成し，その中でEmacsはコンパイルコマンドを実行しま
す．例えば，`gdb.texinfo'ファイルの終りに，`@bye'の後で，以下
を書くことが可能です．

     Local Variables:
     compile-command: "texi2dvi gdb.texinfo"
     End:

この手法は，この方法でプログラムをコンパイルするプログラマが，最もよく使
用します．*Note Compilation: (emacs)Compilationを参照してく ださい．


File: texinfo-ja.info,  Node: Requirements Summary,  Next: Preparing for TeX,  Prev: Compile-Command,  Up: Hardcopy

TeX書式化の必要条件の要約
=========================

  TeXに入力される全てのTexinfoファイルは，`\input'コマンドで始まり，
`@setfilename'コマンドを含んでいる必要があります．

     \input texinfo
     @setfilename ARG-NOT-USED-BY-TEX

最初のコマンドは，TeXにTexinfoファイルの処理に必要なマクロをロードす
るよう指示し，２番目のコマンドは補助ファイルを開きます．

  全てのTexinfoファイルは，TeXの処理を終了し未完成のページを強制排出す
る行で終る必要があります．

     @bye

  厳密にいうと，これらの行が，全てのTexinfoファイルをTeXで成功裏に処理
するため必要な全てとなります．

  しかし通常は，最初に印刷されたマニュアルのタイトルを定義する
`@settitle'コマンド，`@setchapternewpage'コマンド，タイトル
ページ，著作権ページ，そして許可を含んでいます．`@bye'の他に，ファ
イルの終りは通常，索引と目次を含んでいます．(そして，もちろんほとんどの
マニュアルは本文も同様に含んでいます．)

  詳細は，以下を参照してください．
   * *Note `@settitle': settitle

   * *Note `@setchapternewpage': setchapternewpage

   * *Note Page Headings: Headings

   * *Note Titlepage & Copyright Page::

   * *Note Printing Indices & Menus::

   * *Note Contents::


File: texinfo-ja.info,  Node: Preparing for TeX,  Next: Overfull hboxes,  Prev: Requirements Summary,  Up: Hardcopy

TeXに対する準備
===============

  TeXは，最初の行の`\input texinfo'コマンドで，`texinfo.tex'
ファイルを探す場所を知る必要があります．`texinfo.tex'は，TeXに
@-コマンドの処理方法を伝えます．それは，全ての標準的なGNU配布物に含まれ
ています．

  通常インストーラは，`texinfo.tex'ファイルをGNU Texinfo，Emacs，また
はその他のGNUのソフトウェアがインストールされるときにTeXのマクロを含
めるデフォルトのディレクトリに書き込みます．この状況では，TeXはファイ
ルを見つけるので，特別なことをする必要はありません．こうならない場合は，
TeXを実行するとき，`texinfo.tex'をカレントディレクトリに配置する
ことが可能で，TeXはそこで見つけます．

  また，他の配布物で`epsf.tex'がまだインストールされていない場合，
`epsf.tex'をインストールすべきです．詳細は，`@image'コマンド
の記述の最後で説明しています(*note Images::)．

  `pdfcolor.tex'がまだインストールされておらず`pdftex'を使用
する場合も同様です．

  更に，追加ファイル`texinfo.cnf'を作成し，同様にインストールしてもか
まいません．このファイルは，`@setfilename'コマンド (*note
`@setfilename': setfilename.)が実行されたとき，TeXに読
み込まれます．ローカルサイトの慣習で，好みのあらゆるコマンドをそこに書く
ことが可能です．それらは，TeXがTexinfoドキュメントを処理しているとき
読み込まれます．例えば，`texinfo.cnf'が`@afourpaper'を含む場 合(*note
A4 Paper::)，全てのTexinfoドキュメントは，実際にそのページサイ
ズで処理されます．`texinfo.cnf'に何も書かない場合，それを作成する必
要はありません．

上記の場所のこれらのシステムファイルが十分でない場合，明示的にディレクト
リを指定することが可能です．`texinfo.tex'に対し，`\input'コマ
ンドの後に完全なファイルパスを書くことで可能となります．
`texinfo.tex'と`texinfo.cnf'(とその他のTeXが読み込むもの)の
両方を動作させるもう１つの方法は，`TEXINPUTS'環境変数を`.cshrc'
や`.profile'ファイルで設定することです．

  `.cshrc'または`.profile'のどちらを使用するかは，Bourneシェル互
換(`sh'，`bash'，`ksh'，...)，またはCシェル互換
(`csh'，`tcsh')のコマンドインタプリタのどちらを使用しているか
に依存します．後者は，`.cshrc'を初期化情報として読み込み，前者は
`.profile'を読み込みます．

  `.cshrc'ファイルで，以下の`csh'コマンド列を使用します．

     setenv TEXINPUTS .:/home/me/mylib:/usr/lib/tex/macros

  `.profile'ファイルで，以下の`sh'コマンド列を使用します．

     TEXINPUTS=.:/home/me/mylib:/usr/lib/tex/macros
     export TEXINPUTS

  MS-DOS/MS-Windowsでは，以下のようにします(1) (*note Preparing for
TeX-Footnote-1::)．

     set TEXINPUTS=.;d:/home/me/mylib;c:/usr/lib/tex/macros

DOS/Windowsユーザーは，`autoexec.bat'ファイルやWindowsレジストリに，
そのようなコマンドを慣習的に書いています．

これらの設定で，TeXは`\input'ファイルを，最初に`.'で示され
る現在のディレクトリで探し，それから仮にユーザーの`me/mylib'ディレ
クトリで探し，最後にシステムディレクトリ`/usr/lib/tex/macros'で探し
ます．

  最後に，TeXがTexinfoをより速くロードできるように，`.fmt'ファイル
のダンプを望むかもしれません(*note Memory dumps: (web2c)Memory dumps.)．
(`texinfo.tex'の更新は再ダンプを要求するので不利になります．)
`epsf.tex'がTeXで検索可能だという仮定で，以下のコマンドを実行す
ることで可能になります．

     initex texinfo @dump

  (`dump'はTeXプリミティブです．) そして，`texinfo.fmt'を
`.fmt'ファイルが見つかる場所に移動してください．一般にこれは，
TeXをインストールしたサブディレクトリ`web2c'にあります．


File: texinfo-ja.info,  Node: Preparing for TeX-Footnotes,  Up: Preparing for TeX

  (1) これらのシステムで，
ディレクトリセパレータは，`:'の代わりに`;'文字を使用することに
注意してください．


File: texinfo-ja.info,  Node: Overfull hboxes,  Next: smallbook,  Prev: Preparing for TeX,  Up: Hardcopy

Overfull "hboxes"
=================

TeXでは，右のマージンまで拡張しなければ行を植字できないときもあります．
これは，電子メールのネットワークアドレスや非常に長いタイトルのように，ハ
イフネーションできない長い単語だとTeXが解釈したとき生じます．これが生
じたとき，TeXは以下のようなエラーメッセージを出力します．

     Overfull @hbox (20.76302pt too wide)

(TeXでは，行は"水平ボックス"にあるので，"hbox"と言う言葉です．
`@hbox'はTeXプリミティブで，Texinfo言語では必要ありません．)

  TeXは，Texinfoソースファイルでの行番号と，違反している行のテキストを
表示し，それにはハイフネーションだと考えられる全ての位置に印があります．
植字エラーの詳細は，*Note Catching Errors with TeX Formatting:
Debugging with TeX.

  Texinfoファイルに"overfull hbox"がある場合，文章をoverfull hboxが生じ
ないように書き直すことも，そのままにすることも可能です．小さな右のマージ
ンへのはみ出しは余り問題とならず，目立たない可能性もあります．

  overfull boxesが多く，書き直しに抵抗がある場合，TeXで利用可能な印字空
間を大きく増加させることも可能で，そのため(運が良ければ)，以下のようにす
ることで多くの悪い行の分割が避けられるでしょう．

     @tex
     \global\emergencystretch = .9\hsize
     @end tex

(必要なだけ分数を調節すべきです．) この`\emergencystretch'に対する
大きな値では，通常は植字の出力品質がひどく低下するので，デフォルトではあ
りません．デフォルトは`.15\hsize'です．`\hsize'は，現在の行の
幅を含むTeXの寸法です．

  しかし，そうしない場合，存在するoverfull boxesに対し，TeXは大きく醜い
overfull hboxを含む黒い長方形を行の端に印刷します．ドラフトを修正する場
合，これで問題の場所に気づくでしょう．

そのような奇形物が，最終的な出力物に出現することを阻止するため，Texinfo
ファイルの最初に，`@titlepage'コマンドの前に，単独行で以下を書いて
ください．

     @finalout


File: texinfo-ja.info,  Node: smallbook,  Next: A4 Paper,  Prev: Overfull hboxes,  Up: Hardcopy

"小さな"本の印刷
================

デフォルトで，TeXは8.5x11インチの書式で印刷するためページに植字します．
しかし，以下のコマンドを単独行で，Texinfoファイルのタイトルページの前の
最初に挿入することで，製本に適した7x9.25インチの書式にするよう，TeXに
命令可能です．

     @smallbook

(多くの本はたいてい7x9.25インチなので，このコマンドは，
`@regularbooksize'コマンドと呼ぶ方が良いかもしれませんが，8.5x11イ
ンチの書式との対比で`@smallbook'コマンドと呼ばれるようになりました．)

  `@smallbook'コマンドをstart-of-headerとend-of-header行の間に書く場
合，TexinfoモードのTeXの領域書式化コマンド，`texinfo-tex-region'
は，"小さな"本のサイズに領域を書式化します(*note Start of Header::)．

  より小さなマニュアルを簡単に作成するコマンドの例の情報は，*Note
small::.

  ソースファイルを変更せず`@smallbook'書式を行う方法は，*Note Format
with texi2dvi::.  また，*Note Preparing for TeX: Preparing for TeXを参
照してください．


File: texinfo-ja.info,  Node: A4 Paper,  Next: pagesizes,  Prev: smallbook,  Up: Hardcopy

A4用紙への印刷
==============

ヨーロッパサイズのA4(またはA5)用紙に印刷するため，ドキュメントの書式化を
`@afourpaper' (または`@afivepaper')コマンドでTeX伝えるこ
とが可能です．Texinfoファイルの最初付近にタイトルページの前に，単独行で
コマンドを書いてください．例えば，このマニュアルのヘッダに書く方法は以下
のようになります．

     \input texinfo    @c -*-texinfo-*-
     @c %**start of header
     @setfilename texinfo
     @settitle Texinfo
     @afourpaper
     @c %**end of header

ソースファイルの変更を必要とすることなく，異なる用紙サイズで書式化を行う
方法は，*Note Format with texi2dvi::.  また，*Note Preparing for TeX:
Preparing for TeXを参照してください．

  コマンド`@afourlatex'の結果の書式化の方がいいかもしれませんし，ま
たそうでないかもしれません．A4用紙での幅広の書式のため，
`@afourwide'もあります．


File: texinfo-ja.info,  Node: pagesizes,  Next: Cropmarks and Magnification,  Prev: A4 Paper,  Up: Hardcopy

`@pagesizes' [WIDTH][, HEIGHT]: カスタムページサイズ
====================================================

  ページの主なテキストの領域の高さと(オプションで)幅を，`@pagesizes'
コマンドで明示的に指定できます．Texinfoの最初付近で，タイトルページの前
に単独行で書いてください．最初が高さで必要なら幅をカンマで区切って書きま
す．以下が例です．

     @pagesizes 200mm,150mm

そして以下も例です．
     @pagesizes 11.5in

これは，B5サイズの用紙への印刷に対し妥当です．強調しますが，このコマンド
は_テキストエリア_を指定するコマンドで，用紙サイズを指定しません
(250mmx177mmはB5で，14inx8.5inはleagalです)．

  ページのマージンを変更するような，より精密な変更に対しては，
`texinfo.tex'(または，`texinfo.cnf'*note Preparing for TeX: Preparing
for TeX.)で新しいコマンドを定義する必要があります．

  ソースファイルを変更せず`@pagesizes'を指定する方法は，*Note Format
with texi2dvi::.  また，*Note Preparing for TeX: Preparing for TeXを参
照してください．

  `@pagesizes'は`makeinfo'では無視されます．


File: texinfo-ja.info,  Node: Cropmarks and Magnification,  Next: PDF Output,  Prev: pagesizes,  Up: Hardcopy

断裁トンボと拡大
================

  `@cropmarks'コマンドで，TeXにページの角に断裁トンボを印刷させ
(てみ)ることが可能です．タイトルページの前で，Texinfoファイルの最初の方
に，`@iftex'と`@end iftex'行の間に，単独行で，
`@cropmarks'コマンドを以下のように書いてください．

     @iftex
     @cropmarks
     @end iftex

このコマンドは，主にプリンタが複数ページを1枚のフィルムシートに植字する
ためのものですが，`@smallbook'コマンドで，7x9.25インチに設定した本
の四隅に印を付けてみることも可能です．(通常の大きさの用紙に印刷するため
の通常の大きさの出力に対して，プリンタは断裁トンボを生成しません．)異な
る印刷機は異なる方法で動作するので，冒険心でこのコマンドを使用してみるべ
きです．`texinfo.tex'にコマンドを再定義する必要があるかもしれません．

  `\mag'というTeXコマンドで，通常より大きいまたは小さいページに
TeXに植字させ(てみ)ることができます．植字される全てのものは，相対的に
大きくまたは小さく大きさを調整されます．(`\mag'は"magnification(拡
大)"を意味します．)これは，Texinfoの@-コマンドでは_ありません_が，
バックスラッシュを前置した，普通のTeXコマンドです．このコマンドは，
`@tex'と`@end tex'の間に書く必要があります(*note Raw Formatter
Commands::)．

  以下の`='と数字が付いている`\mag'コマンドは，希望する倍率の
1000倍です．例えば通常サイズの1.2倍に印刷するため，タイトルページの前で，
Texinfoファイルの最初の方に以下のように書いてください．

     @tex
     \mag=1200
     @end tex

印刷技術によっては，印刷店に通常より大きなマスターを与えることで，より良
く見える通常サイズのコピーを印刷可能です．彼らはそれにより，効率的に解像
度をあげ，縮小します．

  システムによっては，標準でない`\mag'を使用したDVIファイルは，印刷で
きなかったり，特定の拡大率でしか印刷できなかったりします．試してみたくだ
さい．


File: texinfo-ja.info,  Node: PDF Output,  Prev: Cropmarks and Magnification,  Up: Hardcopy

PDF出力
=======

  普通の`tex'の代わりに，ファイルを処理する`pdftex'プログ
ラムを使用することで，TexinfoソースファイルからPDF出力ファイルを生成する
ことが可能となります．`tex foo.texi'の代わりに`pdftex
foo.texi'を実行するか，`texi2dvi'に`--pdf'オプションを与え てください．

  "PDF"は`Portable Document Format(移植可能な文書の書式)'を意味してい
ます．それは数年前に，ドキュメントの相互変換のために，PostScript言語をベー
スにして，アドビシステムズで開発されました．X window systemに対する PDF
reader (http://www.foolabs.com/xpdf/)は， definition of the file format
(http://partners.adobe.com/asn/developer/technotes/)でそのまま自由に利用することが可能です．PDFは，バイナリ
形式なので，他の出力形式のような`@ifpdf'や`@pdf'コマンドはあ りません．

名前に`portable'があるにもかかわらず，PDFファイルはTexinfoがサポートする
普通のASCII形式の(InfoやHTML)程，実際には移植性がありません(DVIと比較し
た移植性は，議論の余地があります)．それらは，かなり大きくなりつつあり，
TeXで(デフォルトで)非常によく使用されているビットマップフォントをサポー
トしていません．それにもかかわらず，PDFファイルは画面上のドキュメントを
できる限り忠実に実際の印刷物に対して維持するので，地位を保っています．

  TexinfoのPDFサポートはかなり基本的です．


File: texinfo-ja.info,  Node: Creating and Installing Info Files,  Next: Command List,  Prev: Hardcopy,  Up: Top

Infoファイルの作成とインストール
********************************

この章は，Infoファイルの作成とインストールの方法を述べます．ファイルの書
式自身の一般的な情報は，*Note Info Files::.

* Menu:

* Creating an Info File::
* Installing an Info File::


File: texinfo-ja.info,  Node: Creating an Info File,  Next: Installing an Info File,  Up: Creating and Installing Info Files

Infoファイルの作成
==================

  `makeinfo'は，TexinfoファイルをInfoファイル，HTMLファイル，またはプ
レーンテキストに変換するプログラムです．`texinfo-format-region'と，
`texinfo-format-buffer'は，TexinfoをInfoに変換するGNU Emacsの関数で す．

  InfoファイルをInfoシステムにインストールする情報は，*note Installing
an Info File::．

* Menu:

* makeinfo advantages::         `makeinfo' provides better error checking.
* Invoking makeinfo::           How to run `makeinfo' from a shell.
* makeinfo options::            Specify fill-column and other options.
* Pointer Validation::          How to check that pointers point somewhere.
* makeinfo in Emacs::           How to run `makeinfo' from Emacs.
* texinfo-format commands::     Two Info formatting commands written
                                  in Emacs Lisp are an alternative
                                  to `makeinfo'.
* Batch Formatting::            How to format for Info in Emacs Batch mode.
* Tag and Split Files::         How tagged and split files help Info
                                  to run better.
* makeinfo html::               Generating HTML output.


File: texinfo-ja.info,  Node: makeinfo advantages,  Next: Invoking makeinfo,  Up: Creating an Info File

`makeinfo'の利点
----------------

  `makeinfo'ユーティリティは，Emacs書式化コマンドより速くTexinfoソー
スファイルからInfoファイルを作成し，より良いエラーメッセージを提供してい
ます．我々はそれを勧めています．`makeinfo'はEmacsから独立したCプロ
グラムです．`makeinfo'を使用するためにEmacsを実行する必要はなく，そ
のことは，Emacsを実行するには余りに非力なマシンでも`makeinfo'が実行
可能だということを意味しています．`makeinfo'は，３つの内の１つの方
法で実行可能です．それらは，オペレーティングシステムのシェルから，Emacs
のシェルから，またはEmacsのTexinfoモードで`C-c C-m C-r'や`C-c C-m
C-b'コマンドを入力する方法です．

  `texinfo-format-region'と`texinfo-format-buffer'コマンドは，
`makeinfo'を実行不可能なとき役に立ちます．また，状況によって短い領
域やバッファを`makeinfo'より速く書式化します．


File: texinfo-ja.info,  Node: Invoking makeinfo,  Next: makeinfo options,  Prev: makeinfo advantages,  Up: Creating an Info File

シェルから`makeinfo'を実行する
------------------------------

  TexinfoファイルからInfoファイルを作成するため，`makeinfo'に続けて，
Texinfoファイルの名前を入力してください．このため，BisonのInfoファイルを
作成するためには，シェルで以下のように入力します．

     makeinfo bison.texinfo

  (`M-x shell'の入力で，Emacs内部でシェルを実行可能です．)

  オプションを指定したい場合もあります．例えば，使用している
`makeinfo'のバージョンを知りたい場合は以下を入力してください．

     makeinfo --version

  詳細は，*Note makeinfo options::.


File: texinfo-ja.info,  Node: makeinfo options,  Next: Pointer Validation,  Prev: Invoking makeinfo,  Up: Creating an Info File

`makeinfo'のオプション
----------------------

  `makeinfo'コマンドはいくつかのオプションをとります．最もよく使用さ
れるオプションは，列を補充する値を設定するためのものと，脚注スタイルを指
定するために使用するものです．それぞれのコマンド行のオプションは， `--'
を前に置いた単語，または，`-'を前に置いた文字です．長いオ
プション名は，唯一に決まる程長い場合は省略可能です．

  例えば以下のシェルコマンドで，それそれの段の文字列を68文字で補充する
`bison.texinfo'に対するInfoファイルを作成するために，以下のようなシェ
ルコマンドを使用することが可能でしょう．

     makeinfo --fill-column=68 bison.texinfo

  ２つ以上のオプションを，以下のように続けて書くことが可能です．

     makeinfo --no-split --fill-column=70 ...

これは，Infoファイルを，１つのおそらく大変長いファイルにまとめ，一段の文
字数を70文字に設定します．

  オプションは，以下のとおりです．

`-D VAR'
     変数VARを定義します．これは，Texinfoファイルでの`@set
     VAR'と同じです(*note set clear value::)．

`--commands-in-node-names'
     ノード名で`@'コマンドを許可します．おそらくTeXで実装できないの
     で推奨しません．また，`makeinfo'も非常に遅くなります．また，このオ
     プションは`--no-validate'が使用されているときも無視されます．詳細は，
     *Note Pointer Validation::.

`--docbook'
     InfoではなくDocBook出力を生成します．

`--error-limit=LIMIT'
`-e LIMIT'
     終了までに`makeinfo'が報告するエラーの数の最大値を設定します(続けて
     も意味が無いでしょう)．デフォルトは100です．

`--fill-column=WIDTH'
`-f WIDTH'
     １段の最大文字数を指定します．これは行の右端です．おそらくこの幅で補充す
     るでしょう．(補充とは，段を補充し，指定した数と同じまたはそれより短い長
     さにするため，行を切ったり繋げたりする処理です．行は単語で切られます．)
     デフォルト値は72です．`--html'では無視されます．

`--footnote-style=STYLE'
`-s STYLE'
     脚注の形式をSTYLEに設定します．ノードの終りの形式のための
     `end'，またはノードを分ける形式の`separate'のいずれかです．こ
     のオプションで設定した値は，Texinfoファイルで`@footnotestyle'コマ
     ンド(*note Footnotes::)で設定した値に優先します．脚注形式が
     `separate'のとき，`makeinfo'は現在のノードで見つかった脚注を含
     む新しいノードを作成します．脚注形式が`end'のとき，`makeinfo'
     は現在のノードの終りに脚注の参照を置きます．`--html'では無視されま
     す．

`--force'
`-F'
     通常，入力ファイルにエラーがある場合，出力ファイルは作成されません．この
     オプションを用いると，出力ファイルが提供されます．

`--help'
`-h'
     利用可能なオプションをリストアップした使用方法のメッセージを出力し，正し
     く終了します．

`--html'
     Infoではなく，HTML出力物を生成します．*Note makeinfo html::.
     デフォルト
     で，HTML出力はソースのノードごとに一つの出力ファイルに分割し，トップレベ
     ルのInfoファイルの名前を用いたサブディレクトリに分割した出力を書き込みま
     す．

`-I DIR'
     `@include'コマンドを使用してインクルードしているファイルを見つける
     ためのディレクトリ検索リストに，DIRを追加します．デフォルトで，
     `makeinfo'はカレントディレクトリのみを探します．DIRが与えられ
     ていない場合，カレントディレクトリ`.'が追加されます．DIRでは，
     通常のパスの分離文字(Unixの`:'，MS-DOS/MS-Windowsの`;')で分割
     されている複数のディレクトリのリストが可能だということに注意してください．

`--macro-expand=FILE'
`-E FILE'
     指名されたファイルに，全てのマクロを展開したTexinfoソースを出力します．
     通常，マクロの展開の結果は`makeinfo'内部で使用された後に削除されま
     す．このオプションは，`@macro'をサポートしていない古いバージョンの
     `texinfo.tex'を使用している場合，`texi2dvi'で使用されます．

`--no-headers'
     Info出力に対し，出力にメニューやノードの分離行を含めません．この結果は，
     (例えば)添付することなく電子メールで送付したり，(`INSTALL'ファイル
     のように)配布物に含めたりすることが可能な，単純なプレーンテキストファイ
     ルになります．

     HTML出力に対しても同様にメニューは削除されます．そして`--no-split'
     も指定している場合，それぞれのノードのトップへのナビゲーションリンクは含
     めません(これらはデフォルトの状況での分割された出力に含められることもあ
     りません)．*Note makeinfo html::.

     どちらの状況でも，デフォルトで標準出力に書き出します(`-o'で優先さ
     せることも可能です)．

`--no-split'
     `makeinfo'での分割ステージを抑制します．デフォルトで，大きな出力ファ
     イル(70kバイトより大きいサイズ)はより小さいサブファイルに分割されます．
     Info出力に対しそれぞれ約50kバイトになります．HTML出力に対し，それぞれの
     ファイルは１つのノードを含みます(*note makeinfo html::)．

`--no-pointer-validate'
`--no-validate'
     `makeinfo'のポインタの有効化のステージを抑制します．これは，
     `@novalidate'コマンドでも可能です(*note Use TeX: Use TeX.)．通
     常はTexinfoファイルが処理された後，相互参照が解決されていることを確かめ
     るなどのため，一貫性の調査が行われます．*Note Pointer Validation::.

`--no-warn'
     警告メッセージ(エラーメッセージ_ではない_)を抑制します．作成したファ
     イルにTexinfoの相互参照の例がある場合と，実際には存在しないノードの参照
     がある場合にこうしたいもしれません．

`--number-sections'
     印刷されたマニュアルでの，章，セクション，そして付録の番号を出力します．

`--no-number-footnotes'
     自動的な脚注への番号付けを抑制します．デフォルトで`makeinfo'は，単
     一ノード内のそれぞれの脚注に順番に番号付けを行い，それぞれのノードの開始
     時に現在の脚注番号を1にリセットします．

`--output=FILE'
`-o FILE'
     出力を，Texinfoソースで見つかる`@setfilename'コマンドで指定したファ
     イル名ではなく，FILEに指定します(*note setfilename::)．FILE
     が`-'の場合は出力は標準出力になり，`--no-split'が暗黙に指定さ
     れます．分割されれたHTML出力では，FILEはすべてのHTMLファイルが書き
     込まれるディレクトリの名前になります(*note makeinfo html::)．

`-P DIR'
     `@include'に対するディレクトリ検索リストの前にDIRを追加しま
     す．DIRが与えられない場合，カレントディレクトリ`.'が前に追加
     されます．詳細は`-I'を参照してください．

`--paragraph-indent=INDENT'
`-p INDENT'
     段落の字下げ形式をINDENTに設定します．このオプションで設定した値は，
     Texinfoファイルで`@paragraphindent'コマンドで設定した値に優先しま
     す(*note paragraphindent::)．INDENTの値は，以下のように解釈されま
     す．

    `asis'
          段落の開始で，あらゆる字下げを保存します．

    `0'または`none'
          既存の字下げを削除します．

    NUM
          それぞれの段落を，NUM個の空白で字下げします．

`--reference-limit=LIMIT'
`-r LIMIT'
     `makeinfo'が警告を報告せずに作成する，ノード参照数の値を設定します．
     ノードにこの数以上の参照がある場合，`makeinfo'は参照を作成しますが
     警告を報告します．デフォルトは1000です．

`-U VAR'
     VARを未定義にします．これは，Texinfoファイルでの`@clear
     VAR'と同じです(*note set clear value::)．

`--verbose'
     `makeinfo'に，行っていることのメッセージを表示させます．通常
     `makeinfo'は，エラーや警告がある場合のみメッセージを出力します．

`--version'
`-V'
     バージョンナンバーを出力し，正しく終了します．

`--xml'
     InfoではなくXML出力を生成します．


File: texinfo-ja.info,  Node: Pointer Validation,  Next: makeinfo in Emacs,  Prev: makeinfo options,  Up: Creating an Info File

ポインタの一貫性
----------------

  `--no-validate'オプションやソースファイルでの`@novalidate' コ
マンド(*note Use TeX: Use TeX.)でポインタの一貫性を抑制しない場合，
`makeinfo'は最終的なInfoファイルの一貫性を調べます．ほとんどこれは，
参照したノードが本当に存在していることを確かめることを意味します．調べる
ものの完全なリストは以下のようになります．

  1.
     `Next'，`Previous'，または`Up'ノードの参照が現在のファイルのノードへの参
     照で，`(dir)'のような外部での参照ではない場合，参照されるノードが存
     在する必要があります．

  2.
     全てのノードで，`Previous'ノードが`Up'ノードと異なる場合，`Previous'フィー
     ルドで指し示すノードには，このノードへ戻る`Next'フィールドが存在する必要
     があります．

  3.
     `Top'ノード以外の全てのノードには，`Up'ポインタが存在する必要があります．

  4. `Up'ポインタで参照されるノードは，`Up'で参照されるノードが`(FILE)'
     でない限り，現在のノードのメニュー項目にそれ自身の参照が存在する必要があ
     ります．

  5.
     ノードの`Next'の参照が`Up'の参照の`Next'の参照と同じでない場合，`Next'
     ポインタで参照されるノードには，現在のノードに戻る`Previous'ポインタが存
     在する必要があります．この規則で，次の章の最初のノードを指し示しているセ
     クションの最後のノードが可能になります．

  6.
     `Top'以外の全てのノードは，`Previous'や`Next'のリンクや，メニューや相互
     参照による，少なくとも１つの他のノードからの参照があるべきです．

  Texinfoドキュメントには，ノード定義で`@value'と
`@definfoenclose'のようなコマンドを使用したり，矛盾した相互参照に
対する一貫性のフェーズで失敗するものもあります．以下の例を考えます．

     @set nodename Node 1
     
     @node @value{nodename}, Node 2, Top, Top
     
     This is node 1.
     
     @node Node 2, , Node 1, Top
     
     This is node 2.

ここで，ノード"Node 1"はその単語と`@value'の両方で参照されます．

デフォルトでは，ノード名が出力ファイルに書かれるまでは完全に展開されない
ので，そのような場合`makeinfo'は失敗します．常に一貫してノード参照
するべきです．例えば上の例では，２番目の`@node'行にも `@value'
があるべきです．しかし，理由があって矛盾したノード名の参
照をする_必要があり_，`makeinfo'がファイルの有効化に失敗した場
合，`makeinfo'がドキュメントで見つかる全てのノード名を展開するよう
な負荷の高い作業を実行をするよう，`--commands-in-node-names'オプショ
ンを使用することが可能です．しかしこれは，プログラムがかなり遅くなります．
変換時間の2倍の増加が，Jargonファイルのような大きなファイルで測定されま
した．

  `@node'ディレクティブでの`@'-コマンドのサポートは，自由に使
える程には一般的に十分ではありません．例えば上の例では，ドキュメントのど
こかで`nodename'が再定義される場合，たとえ
`--commands-in-node-names'をオプションを呼び出していても
`makeinfo'は変換に失敗します．

  `--no-validate'が与えられた場合，`--commands-in-node-names'は
効果がありません．


File: texinfo-ja.info,  Node: makeinfo in Emacs,  Next: texinfo-format commands,  Prev: Pointer Validation,  Up: Creating an Info File

Emacsで`makeinfo'の実行
-----------------------

  `makeinfo-region'や`makeinfo-buffer'コマンドを使用することで， GNU
Emacs Texinfoモードで`makeinfo'を実行することが可能です．
Texinfoモードでは，コマンドはデフォルトで，`C-c C-m C-r'と`C-c C-m
C-b'に割り当てられています．

`C-c C-m C-r'
`M-x makeinfo-region'
     現在の領域をInfoに書式化します．

`C-c C-m C-b'
`M-x makeinfo-buffer'
     現在のバッファをInfoに書式化します．

  `makeinfo-region'や`makeinfo-buffer'を呼び出すとき，Emacsはファ
イル名のためプロンプトを出し，デフォルトとして訪問されたファイルの名前を
提示します．希望があれば，`makeinfo'処理を始める<RET>を押す前に，
ミニバッファのデフォルトファイル名を編集できます．

  Emacsの`makeinfo-region'と`makeinfo-buffer'コマンドは，一時的
なシェルバッファで`makeinfo'プログラムを実行します．`makeinfo'
がエラーを見つけた場合，Emacsはエラーメッセージを一時的なバッファに表示
します．

  `C-x `'(`next-error')の入力で，エラーメッセージを解析することが
可能です．これでEmacsは，`makeinfo'がエラーとしたTexinfoソースの行
にカーソルを移動します．`next-error'コマンドの使用の詳細は， *Note
Running `make' or Compilers Generally: (emacs)Compilation.

  さらに，`makeinfo'コマンドを実行しているシェルを殺したり，シェルバッ
ファに最新の出力を表示させたりすることも可能です．

`C-c C-m C-k'
`M-x makeinfo-kill-job'
     (`makeinfo-region'や`makeinfo-buffer'から)`makeinfo'を実
     行している，現在のジョブを殺します．

`C-c C-m C-l'
`M-x makeinfo-recenter-output-buffer'
     最新の出力を表示するため，`makeinfo'シェルバッファを再表示します．

(TeXジョブを殺したり再表示したりする類似のコマンドが，`C-c C-t
C-k'と`C-c C-t C-l'だと言うことに注意してください．*Note Texinfo Mode
Printing::.)

  `M-x edit-options'や`M-x set-variable'コマンドで
`makeinfo-options'変数を設定することや，`.emacs'初期化ファイル
で変数を設定することで，`makeinfo'に対するオプションを指定できます．

  例えば，以下のように`.emacs'ファイルに書きます．

     (setq makeinfo-options
           "--paragraph-indent=0 --no-split
            --fill-column=70 --verbose")

詳細は，
*Note Editing Variable Values: (emacs)Edit Options，
*Note Examining and Setting Variables: (emacs)Examining，
*Note Init File: (emacs)Init File，そして
*Note Options for `makeinfo': makeinfo optionsを参照してください．


File: texinfo-ja.info,  Node: texinfo-format commands,  Next: Batch Formatting,  Prev: makeinfo in Emacs,  Up: Creating an Info File

`texinfo-format...'コマンド
---------------------------

GNU EmacsのTexinfoモードで`texinfo-format-region'コマンドを使用して，
Texinfoファイルの一部または全体を書式化することが可能です．これは，現在
の領域を書式化し，`*Info Region*'と呼ばれる一時的なバッファに書式化
されたテキストを表示します．

  同様に，`texinfo-format-buffer'コマンドでバッファを書式化します．こ
のコマンドは新しいバッファを作成し，その中にInfoファイルを生成します．
`C-x C-s'と入力すると，Texinfoの最初の方の`@setfilename'行で指
定された名前でInfoファイルを保存します．

`C-c C-e C-r'
``texinfo-format-region''
     現在の領域をInfoに書式化します．

`C-c C-e C-b'
``texinfo-format-buffer''
     現在のバッファをInfoに書式化します．

  `texinfo-format-region'と`texinfo-format-buffer'コマンドは，い
くつかのエラー調査を提供し，その他の関数は，書式化のエラーを見つける上で
それ以上の助けとなるものを提供するはずです．これらの手続きは付録で記述さ
れています．*Note Catching Mistakes::を参照してください．しかし，
`makeinfo'プログラムはより速い場合が多く，より多くのエラー調査を提
供します(*note makeinfo in Emacs::)．


File: texinfo-ja.info,  Node: Batch Formatting,  Next: Tag and Split Files,  Prev: texinfo-format commands,  Up: Creating an Info File

書式化のバッチ処理
------------------

  `batch-texinfo-format'とEmacsバッチモードを使用して，Texinfoファイ
ルをInfoファイルに書式化することが可能です．Emacsの内部シェルを含む，あ
らゆるシェルからバッチモードでEmacsを実行することが可能です． (*Note
Command Line Switches and Arguments: (emacs)Command Switches.)

  以下は，カレントディレクトリの`.texinfo'で終る全てのファイルを書式
化するためのシェルコマンドです．

     emacs -batch -funcall batch-texinfo-format *.texinfo

Emacsは，コマンド行でリストアップされた全てのファイルを，たとえ書式化中
にエラーが発生しても処理します．

  `batch-texinfo-format'は，表示してあるようにEmacsのBatchモードだけ
で実行してください．それは対話的ではありません．成功するとバッチモードの
Emacsを強制終了します．

  `batch-texinfo-format'は，`makeinfo'がない場合と，一度に複数の
Texinfoファイルを書式化したい場合に便利です．バッチモードを使用するとき，
新しいEmacsプロセスを作成します．これは現在のEmacsとは無関係なので，そこ
で仕事を続けることが可能です．(`texinfo-format-region'や
`texinfo-format-buffer'を実行しているときは，コマンドが終了するまで
他のこと行なうためEmacsを使用することは不可能です．)


File: texinfo-ja.info,  Node: Tag and Split Files,  Next: makeinfo html,  Prev: Batch Formatting,  Up: Creating an Info File

タグファイルとスプリットファイル
--------------------------------

  Texinfoファイルが30,000バイト以上の場合，`texinfo-format-buffer'は
Infoファイルに対し自動的にタグ表を作成します．`makeinfo'は，常にタ
グ表を作成します．"タグ表"を用いることで，Infoは新しいノードへ他より
速く移動可能です．

  さらに，Texinfoファイルが70,000バイト以上の場合，
`texinfo-format-buffer'と`makeinfo'は，大きなInfoファイルをそ
れぞれ50,000バイト程度のより小さい"間接的な"サブファイルに分割します．
大きなファイル全体を保持する大きなバッファをEmacsが作成しなくてもよいよ
うに，大きなファイルは小さなファイルに分割されます．代わりにEmacsは，分
割された小さなファイルが必要とするだけのメモリを確保します．このようにし
て，EmacsはInfo実行中のメモリの無駄を避けます．(分割が実装される前は，
Infoファイルは常に短いままになっていて，"インクルードファイル"は小さ
なInfoファイルから単一の大きな印刷マニュアルを作成する方法として設計され
ていました．詳細は*Note Include Files::.  インクルードファイルは， `The
Emacs Lisp Reference Manual'のような，大変大きなドキュメントの
ためにまだ使用されて，そこでは，それぞれの章は別々のファイルになっていま
す．)

ファイルが分割されるとき，Info自身は，タグ表と分割されたファイルへの参照
を含む元ファイルの短縮バージョンを利用します．分割されたファイルは，
"間接的な"ファイルと呼ばれます．

  分割されたファイルは，`@setfilename'コマンドで指定したファイル名に，
`-1'，`-2'，`-3'などを追加して作成された名前
をになります．元ファイルの短縮バージョンは，`@setfilename'で指定さ
れた名前を持ち続けます．

  このドキュメントを書いている段階で，例えばInfoファイルはファイル
`test-texinfo'として保存され，そのファイルは以下のようになっていま す．

     Info file: test-texinfo,    -*-Text-*-
     produced by texinfo-format-buffer
     from file: new-texinfo-manual.texinfo
     
     ^_
     Indirect:
     test-texinfo-1: 102
     test-texinfo-2: 50422
     test-texinfo-3: 101300
     ^_^L
     Tag table:
     (Indirect)
     Node: overview^?104
     Node: info file^?1271
     Node: printed manual^?4853
     Node: conventions^?6855
     ...

(しかし，`test-texinfo'ファイルは，ここで見るよりはるかに多くのノー
ドがあります．)それぞれの分割された間接的なファイル`test-texinfo-1'，
`test-texinfo-2'，そして`test-texinfo-3'は，このファイルの
`Indirect:'以下の行でリストアップされます．タグ表は，`Tag
table:'以下の行でリストアップされます．

間接的なファイルのリストで，ファイル名に続く番号は前の間接的なファイルに
累積バイト数を記録し，ファイルリスト自身のバイト数，タグ表，またはそれぞ
れのファイルの許可テキストは記録しません．タグ表では，ノード名に続く数は
ノードの開始位置を(分割されていない)出力の最初からのバイトを記録します．

  Infoファイルを作成するため`texinfo-format-buffer'を使用している場合，
`Info-validate'コマンドを実行したくなるかもしれません．
(`makeinfo'コマンドはそれ自身良い仕事をするので，
`Info-validate'は不要です．)しかし，`M-x Info-validate'ノード
チェックコマンドを，間接ファイルでは使用することは不可能です．ファイルを
分割から避ける方法や，ノードの構造の有効化の方法の情報は，*Note Using
Info-validate::を参照してください．


File: texinfo-ja.info,  Node: makeinfo html,  Prev: Tag and Split Files,  Up: Creating an Info File

HTMLの生成
----------

  Info書式での出力を生成するだけでなく，`--html'オプションを使用して，
(例えば)ウェブサイトに配置するために，HTML書式で出力を生成することが可能
です．デフォルトで，HTML出力はノードのレベルで分割されています．

分割時に，HTML出力ファイルはサブディレクトリに書き出されます．サブディレ
クトリは，拡張子が削除された`@setfilename'の名前に一致して命名され
ます．例えば，`@setfilename emacs.info'に対するHTML出力は，
`emacs'という名前のサブディレクトリに書き出されます．何らかの理由で
ディレクトリが作成できない場合，`emacs.html'のようにディレクトリ名
に`.html'が追加されます(Infoファイルは，例えば`texinfo'のよう
に拡張子無しで命名されることもあるので，これは必要です)．
`NAME.html'ディレクトリも作成できない場合，`makeinfo'は
あきらめます．あらゆる状況で，ディレクトリのトップレベルの出力ファイルは，
常に`index.html'と命名されます．

  分割されない出力(`--no-split')は，`@setfilename'や
`--outfile'によって命名されます．ドキュメントを跨ったノード参照は，
分割されないHTMLではサポートされていません．

  `@ifhtml'コマンドで印が付いているされたTexinfo入力は，
`--html'オプションが供給されたときだけ出力物を生成します．
`@html'でマークアップされた入力は，そのまま出力に渡されます(HTMLで
特別重要な，入力の`<'，`>'と`&'文字の，通常のエスケープ文
字は抑制されます．)

  `--footnote-style'オプションは，HTML出力では現在は無視されます．脚
注は出力ファイルの終りにリンクされます．

  生成されたHTMLはほとんど標準的です(いわゆる，HTML 2.0,
RFC-1866)．例外と して，HTML
3.2の表が，`@multitable'コマンドで生成されますが，表を
サポートしていないブラウザでも分解可能なようにタグ付けされています．
`<html>'属性のHTML 4 `lang'属性も使用されます．ブラウザの互換
性の問題がある`makeinfo'でエラーが無かった実行結果の出力を，バグと
して報告してください．

ナビゲーションバーが，Info出力に似たものとしてノードの始まりに挿入されま
す．`--no-headers'オプションは，`--no-split'を使用している場合，
これを抑制します．分割された出力物のヘッダの`<link>'の要素は，Lynx
とHTML 1.0の機能で実装されているEmacs W3のようなブラウザで，info
のようなナビゲートをサポートしています．他のドキュメントに対する
`@xref'コマンドは，他のドキュメントがHTML 形式で利用可能であるとし
て生成され，同じHTMLドキュメントツリーの`../<info-document>/'にイン
ストールされます．


File: texinfo-ja.info,  Node: Installing an Info File,  Prev: Creating an Info File,  Up: Creating and Installing Info Files

Infoファイルのインストール
==========================

  Infoファイルは，通常`info'ディレクトリに置かれます．Infoファイルを，
スタンドアローンのInfoプログラムやEmacs組込みのInfoリーダーを使用して読
むことが可能です．(Infoの紹介は，*note info: (info-ja)Top.)

* Menu:

* Directory File::              The top level menu for all Info files.
* New Info File::               Listing a new Info file.
* Other Info Directories::      How to specify Info files that are
                                  located in other directories.
* Installing Dir Entries::      How to specify what menu entry to add
                                  to the Info directory.
* Invoking install-info::       `install-info' options.


File: texinfo-ja.info,  Node: Directory File,  Next: New Info File,  Up: Installing an Info File

ディレクトリファイル`dir'
-------------------------

  Infoを動作させるため，`info'ディレクトリには，Infoシステムのための
トップレベルディレクトリを提供するファイルを含める必要があります．慣習的
に，このファイルは`dir'と呼ばれます．(このファイルの場所は，Emacsで
Infoモードに入るため`C-h i'と入力し，`info'ディレクトリへのパス
名を見るため`C-x C-f'を入力すると分かります．)

  `dir'ファイルはそれ自身がInfoファイルです．それは，システム全ての
Infoファイルに対するトップレベルメニューを含んでいます．メニューは以下の
ようになってます．

     * Menu:
     * Info:    (info).     Documentation browsing system.
     * Emacs:   (emacs).    The extensible, self-documenting
                            text editor.
     * Texinfo: (texinfo).  With one source file, make
                            either a printed manual using
                            @TeX{} or an Info file.
     ...

  これらのメニューの項目のそれぞれが，丸カッコに名前があるInfoファイルの
`Top'ノードを示します．(Infoはノード名を指定されない場合，`Top'ノードへ
行くので，このメニュー項目は`Top'ノードを指定する必要はありません．
*Note Nodes in Other Info Files: Other Info Files.)

  このため，`Info'項目は`info'ファイルの`Top'ノードを示し，
`Emacs'項目は`emacs'ファイルの`Top'ノードを示します．

  それぞれのInfoファイルでは，`Top'ノードの`Up'ポインタは`dir'ファイ
ルへの参照です．例えば，Emacsマニュアルの`Top'ノードの行は，Infoファイル
では以下のようになっています．

     File: emacs  Node: Top, Up: (DIR), Next: Distrib

この状況では，`dir'ファイル名は大文字で書かれています -- それは，
大文字または小文字で書くことが可能です．これは一般に真ではなく，
`dir'の場合だけ特別です．


File: texinfo-ja.info,  Node: New Info File,  Next: Other Info Directories,  Prev: Directory File,  Up: Installing an Info File

新しいInfoファイルをリストアップする
------------------------------------

  新しいInfoファイルをシステムに加えるため，`info'ディレクトリの
`dir'ファイルのメニューを加える，メニュー項目を書く必要があります．
例えばGDBのドキュメントを加える場合，以下の新しい項目を書きます．

     * GDB: (gdb).           The source-level C debugger.

メニュー項目の最初の部分はメニュー項目名でコロンが続きます．２番目の部分
はInfoファイル名で，丸カッコの中にあり，ピリオドが続きます．３番目の部分
は記述です．

  Infoファイルの名前には，`.info'拡張子があることが多いです．そのため，
GDBのInfoファイルは`gdb'または`gdb.info'と呼んでもかまわないで
しょう．Infoリーダープログラムは，自動的に`.info'の有無の両方を試し
ます．(1) (*note New Info
File-Footnote-1::)バラバラになるのを避けるために，メニュー項目に明示的
に`.info'を書かない方が良いでしょう．例えばGDBメニュー項目は，ファ
イル名に`gdb.info'ではなく`gdb'だけを使用すべきです．


File: texinfo-ja.info,  Node: New Info File-Footnotes,  Up: New Info File

  (1) MS-DOS/MS-Windowsシステムでは，Infoは同様に，`.inf'
拡張子も試します．


File: texinfo-ja.info,  Node: Other Info Directories,  Next: Installing Dir Entries,  Prev: New Info File,  Up: Installing an Info File

他のディレクトリのInfoファイル
------------------------------

  Infoファイルが`info'ディレクトリに無い場合，その場所を指定する３つ
の方法があります．

  1. `dir'ファイルで，メニューの２番目の部分にパス名を書いてください．

  2. Emacsを使用している場合，そのディレクトリで，２番目の`dir'にファイ
     ル名をリストアップしてください．そして，個人やサイトの初期化ファイルで，
     `Info-directory-list'変数にそのディレクトリ名の指定を加えてください．

     この変数は，Emacsに`dir'ファイルを探す場所を伝えます(ファイルは
     `dir'と名付ける必要があります)．Emacsは，それぞれリストアップされた
     ディレクトリからの，`dir'と名付けられたファイルをマージします．
     (Emacsバージョン18では，`Info-directory'変数で１つのディレクトリ名
     のみ設定することが可能です．)

  3. Infoディレクトリ名を，`.profile'や`.cshrc'初期化ファイルで，
     `INFOPATH'環境変数で指定してください．(この環境変数を設定した人だけ，
     この方法で指定した場所のInfoファイルを見つけることができます．)

  例えば，`/home/bob/info'ディレクトリのテストファイルにたどり着くよ
うに，標準`dir'ファイルのメニューに，以下のように項目を加えることも
可能でしょう．

     * Test: (/home/bob/info/info-test).  Bob's own test file.

この状況では，`info-test'ファイルの絶対的なファイル名は，メニュー項
目の２番目の部分に書かれます．

  別の方法として，`.emacs'ファイルに以下のように書くことも可能でしょ
う．

     (require 'info)
     (setq Info-directory-list
       (cons (expand-file-name "/home/bob/info")
             Info-directory-list))

  これは，Emacsにシステムの`dir'ファイルを，`/home/bob/info'ディ
レクトリの`dir'ファイルとマージするよう伝えます．このためInfoは，
`/home/bob/info/dir'ファイルのメニュー項目のように，
`/home/bob/info/info-test'ファイルをリストアップします．Emacsは， `M-x
info'を最初に実行したときのみマージするので，既に`info'を
実行しているEmacsのセッションで`Info-directory-list'設定したい場合，
Emacsに`dir'ファイルを再構成させるため`(setq Info-dir-contents
nil)'する必要があります．

  最後に，`.cshrc'，`.profile'や，`autoexec.bat'のような，
シェルのスタートアップファイルで`INFOPATH'環境変数を設定することで
Infoに探す場所を伝えることが可能です．シェルコマンドインタプリタとして
`sh'や`bash'のようなBourne互換シェルを使用している場合，
`INFOPATH'環境変数を`.profile'初期化ファイルで設定します．しか
し，`csh'や`tcsh'を使用している場合，`.cshrc'初期化ファイ
ルで変数を設定します．MS-DOS/MS-Windowsシステムでは，`INFOPATH'を
`autoexec.bat'ファイルかレジストリで設定する必要があります．それぞ
れのシェルで構文は異なります．

   * `.cshrc'ファイルで，`INFOPATH'変数を以下のようにして設定します．

          setenv INFOPATH .:~/info:/usr/local/emacs/info

   * `.profile'ファイルに以下を書くことで，同じ効果を得ます．

          INFOPATH=.:$HOME/info:/usr/local/emacs/info
          export INFOPATH

   * `autoexec.bat'ファイルで，以下のコマンドを書きます．(1) (*note
     Other Info Directories-Footnote-1::)

          set INFOPATH=.;%HOME%/info;c:/usr/local/emacs/info

`.'は，通常カレントディレクトリを示します．Emacsは，`INFOPATH'
環境変数をEmacs自身の`Info-directory-list'変数の初期化に使用します．
スタンドアローンのInfoリーダーは，`INFOPATH'変数でリストアップされた
あらゆるディレクトリの`dir'という名のファイルを，`(dir)Top'と
呼ばれるノードに現れる単一のメニューにマージします．

  しかし，`INFOPATH'を設定しても，最後の文字がコロン (2) (*note Other
Info Directories-Footnote-2::)の
場合，これはデフォルトの(compiled-in)パスに置換されます．これは，全ての
標準の場所をリストアップすること無く，新しいディレクトリでデフォルトのパ
スを増やす方法となります．例えば以下のようにします(`sh'構文使用)．

     INFOPATH=/local/info:
     export INFOPATH

これで，`/local/info'が最初で，それから標準ディレクトリを探します．
最初や2重のコロンは，特別扱いしません．

  `Info-directory-list'や`INFOPATH'で利用する独自の`dir'ファ
イルを作成するとき，既存の`dir'ファイルをコピーから初め，`*
Menu:'以下のテキストを必要な項目で置換するのが最も簡単な方法です．その方
法では，Infoが必要とする句読点と特別なCTRL-_文字が残ります．


File: texinfo-ja.info,  Node: Other Info Directories-Footnotes,  Up: Other Info Directories

  (1) ディ
レクトリの区切りとして`;'を使用することと，他の環境変数の値の使用と
は構文が違うことに注意してください．

  (2) MS-DOS/MS-Windowsシステムは，代わりにセミコロンを使います．


File: texinfo-ja.info,  Node: Installing Dir Entries,  Next: Invoking install-info,  Prev: Other Info Directories,  Up: Installing an Info File

Infoディレクトリファイルのインストール
--------------------------------------

  Infoファイルをシステムにインストールするとき，プログラム
`install-info'をInfoディレクトリファイル`dir'の更新に使用する
ことが可能です．通常，パッケージのmakefileは，Infoファイルを適切なインス
トール先にコピーした直後に`install-info'を実行します．

  Infoファイルが`install-info'で動作するように，コマンド
`@dircategory'と`@direntry'...`@end direntry'を，
Texinfoソースファイルに含めます．Infoディレクトリファイルに加えるメニュー
項目を指定するため，`@direntry'を使用してください．このマニュアル
でこれらのコマンドを使用している例は以下のようになります．

     @dircategory Texinfo documentation system
     @direntry
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     @end direntry

  これでInfoファイルに生成されたものは，以下のようになります．

     INFO-DIR-SECTION Texinfo documentation system
     START-INFO-DIR-ENTRY
     * Texinfo: (texinfo).           The GNU documentation format.
     * install-info: (texinfo)Invoking install-info. ...
     ...
     END-INFO-DIR-ENTRY

`install-info'プログラムは，Infoファイルのこれらの行を見て，そして
なすべきことを知ることになります．

  常に`@direntry'と`@dircategory'コマンドを，Texinfo入力の最初
に，最初の`@node'コマンドの前で使用してください．入力ファイルの後
の方で使用する場合，`install-info'はそれらに注意を払いません．

  `@dircategory'をTexinfoソースファイルで1回以上使用する場合，それぞ
れの使用されたものは`current'カテゴリーを指定します．それに続く
`@direntry'コマンドはそのカテゴリーを追加します．

  推奨される`@dircategory'カテゴリーには以下のものがあります．

     GNU packages
     GNU programming tools
     GNU programming documentation
     GNU Emacs Lisp
     GNU libraries
     TeX
     Individual utilities

  考え方は，`Individual
utilities'のパッケージでインストールされる全てのプ
ログラムに対し`Invoking'ノードを含め，マニュアルの項目を全体として適切な
他のカテゴリーに含めます．


File: texinfo-ja.info,  Node: Invoking install-info,  Prev: Installing Dir Entries,  Up: Installing an Info File

install-infoの呼び出し
----------------------

  `install-info'は，InfoファイルからInfoシステムのトップレベルの
`dir'ファイルにメニュー項目を挿入します(`dir'ファイルの動作の
説明は，前のセクションを参照してください)．それは，ソフトウェアのインス
トールの一部として，またシステムのマニュアル全体に対し，`dir'ファイ
ルを構築するときよく実行されます．構文は以下のようになります．

     install-info [OPTION]... [INFO-FILE [DIR-FILE]]

  INFO-FILEやDIR-FILEを指定しない場合，(以下で述べる)それらを
定義するオプションが必要です．コンパイル時のデフォルトは無く，標準入力は
使用しません．`install-info'は，呼び出し毎に１つのInfoファイルのみ
読み込み，１つの`dir'にのみ書き込みます．

  DIR-FILE(が指定されていても)存在しない場合，`install-info'は
(項目の無い)DIR-FILEを可能な場合は作成します．

  入力ファイルが，`gzip'で圧縮されている場合(*note Invoking gzip:
(gzip)Invoking gzip.)，`install-info'は自動的に読み込みのために解凍し
ます．そして，DIR-FILEが圧縮されている場合も，`install-info'
は自動的に変更を書き込んだ後，圧縮された状態にします．DIR-FILE自身
が無い場合，`install-info'は`DIR-FILE.gz'を開こうとしま す．

  オプションです．

`--delete'
     DIR-FILEからINFO-FILEの項目を削除します．DIR-FILEの項
     目のファイル名はINFO-FILEにする必要があります(その中の，オプション
     の`.info'は例外です)．新しい項目は挿入しません．

`--dir-file=NAME'
`-d NAME'
     Infoディレクトリファイルのファイル名を指定します．これは，DIR-FILE
     引数を使用することと同じです．

`--entry=TEXT'
`-e TEXT'
     Infoディレクトリ項目としてTEXTを挿入します．TEXTは，Infoメ
     ニュー項目行にゼロ以上の空白で始まる行を追加した書式にすべきです．１つ以
     上の項目を指定する場合，全て追加されます．項目を指定しない場合，Infoファ
     イル自身の情報から決定します．

`--help'
`-h'
     基本的な使用方と，利用可能な全てのオプションをリストアップした使用方法メッ
     セージを表示し，正しく終了します．

`--info-file=FILE'
`-i FILE'
     ディレクトリにインストールするInfoファイルを指定します．INFO-FILE
     引数の使用と同じです．

`--info-dir=DIR'
`-D DIR'
     `dir'が位置するディレクトリを指定します．
     `--dir-file=DIR/dir'と同じです．

`--item=TEXT'
     `--entry=TEXT'と同じです．Infoディレクトリ項目は，実際にはメ
     ニュー項目です．

`--quiet'
     警告を抑制します．

`--remove'
`-r'
     `--delete'と同じです．

`--section=SEC'
`-s SEC'
     このファイルの項目を，ディレクトリのセクションSECに書きます．１つ以
     上のセクションを指定した場合，Infoファイル自身の情報から決定されます．

`--version'
`-V'
     バージョン情報を表示し，正しく終了します．


File: texinfo-ja.info,  Node: Command List,  Next: Tips,  Prev: Creating and Installing Info Files,  Up: Top

@-コマンドリスト
****************

  以下にTexinfoのアルファベット順の@-コマンドリストがあります．角カッコ
[ ]はオプションの引数を示します．省略`...'は，繰り
返しテキストを示します．


`@WHITESPACE'
     `@'に続くスペース，タブ，または改行は，通常の伸縮可能な単語を区切
     る空白を生成します．*Note Multiple Spaces::.

`@!'
     感嘆符を，文章の終りに実際に生成します(通常，文の終りの大文字の後です)．
     *Note Ending a Sentence::.

`@"'
`@''
     次の文字の上に，o"
     とo'のように，ウムラートや鋭いアクセントを生成しま す．*Note
     Inserting Accents::.

`@*'
     強制改行します．`@refill'コマンドで，`@*'を用いている段落を
     終了させないでください．*Note Line Breaks::.

`@,{C}'
     Cの下にc,のような，セディラアクセントを生成します． *Note
     Inserting Accents::.

`@-'
     任意のハイフネーションポイントを挿入します．*Note - and
     hyphenation::.

`@.'
     ピリオドを，文章の終りに実際に生成します(通常，文の終りの大文字の後です)．
     *Note Ending a Sentence::.

`@:'
     TeXに，直前のピリオド，疑問符，感嘆符，またはコロンで，文章が終らない
     よう指示します．TeXが文章の終りに行う，余分な空白を挿入することを妨げ
     ます．このコマンドはInfoファイル出力に効果はありません．*Note Not
     Ending a Sentence::.

`@='
     次の文字の上に長音記号(バー)アクセントを，o=の用に生成します．
     *Note Inserting Accents::.

`@?'
     疑問符を文の終りに実際に生成します(通常，文の終りの大文字の後です)．
     *Note Ending a Sentence::.

`@@'
     `@'という印を意味します．*Note Inserting @ and braces: Braces
     Atsigns.

`@\'
     `@math'内部のバックスラッシュ(`\')を意味します． *Note `math':
     math.

`@^'
`@`'
     曲折アクセント(ハット)や低アクセントを，それぞれ次の文字の上に，o^とe`
     のように生成します．*Note Inserting Accents::.

`@{'
     左カッコ`{'を意味します．*Note Inserting @ and braces: Braces
     Atsigns.

`@}'
     右カッコ`}'，
     を意味します．*Note Inserting @ and braces: Braces Atsigns.

`@~'
     チルダアクセントを，次の文字の上に，N~のように生成します． *Note
     Inserting Accents::.

`@AA{}'
`@aa{}'
     それぞれ大文字と小文字の，スカンジナビアのA-リング文字を生成します．
     AA，aaです．*Note Inserting Accents::.

`@acronym{ABBREV}'
     `NASA'のような，いわゆる，全て大文字で書かれている省略の頭文字としてタグ
     ABBREVを付けます．*Note `acronym': acronym.

`@AE{}'
`@ae{}'
     それぞれ，大文字と小文字のAEの連字を生成します．AE，aeです． *Note
     Inserting Accents::.

`@afivepaper'
     ページの寸法をA5用紙のサイズに変更します．*Note A4 Paper::.

`@afourlatex'
`@afourpaper'
`@afourwide'
     ページの寸法をA4用紙のサイズに変更します．*Note A4 Paper::.

`@alias NEW=EXISTING'
     既存のコマンド`@EXISTING'のエイリアスとして，新しいコマンド
     `@NEW'を作成します．*Note alias::.

`@anchor{NAME}'
     相互参照のターゲットとして使用するため，NAMEを現在の位置として定義
     します．*Note `@anchor': anchor.

`@appendix TITLE'
     付録を開始します．タイトルは印刷されたマニュアルの目次に現れます．Infoで
     は，タイトルはアスタリスクで下線が付きます．*Note The
     `@unnumbered' and `@appendix' Commands: unnumbered & appendix.

`@appendixsec TITLE'
`@appendixsection TITLE'
     付録内の付録セクションを開始します．セクションのタイトルは印刷されたマニュ
     アルの目次に現れます．Infoでは，タイトルは等号で下線が付きます．
     `@appendixsection'は`@appendixsec'コマンドの長い綴のものです．
     *Note Section Commands: unnumberedsec appendixsec heading.

`@appendixsubsec TITLE'
     付録内の付録サブセクションを開始します．タイトルは印刷されたマニュアルの
     目次に現れます．Infoでは，タイトルはハイフンで下線が付きます．
     *Note Subsection Commands: unnumberedsubsec appendixsubsec
     subheading.

`@appendixsubsubsec TITLE'
     付録サブセクション内の付録サブサブセクションを開始します．タイトルは印刷
     されたマニュアルの目次に現れます．Infoでは，タイトルはピリオドで下線が付
     きます．*Note The `subsub' Commands: subsubsection.

`@asis'
     表の最初の列を("他と比較して")強調無しで印刷するため，`@table'，
     `@ftable'と`@vtable'に続けて使用します．*Note Making a Two-column
     Table: Two-column Tables.

`@author AUTHOR'
     AUTHORを左揃えに下線を引き植字します． *Note The `@title' and
     `@author' Commands: title subtitle author.

`@b{TEXT}'
     TEXTをボールドフォントで印刷します．Infoでは効果がありません．
     *Note Fonts::.

`@bullet{}'
     大きな丸い点や，それに最も近いものを生成します．*Note `@bullet':
     bullet.

`@bye'
     ファイルの書式化を停止します．書式化は`@bye'コマンドに続くファイル
     の内容を見ません．*Note Ending a File::.

`@c COMMENT'
     Texinfoでコメントを開始します．行の残りはInfoファイルにも印刷されたマニュ
     アルにも現れません．`@comment'の同義語です．*Note Comments:
     Comments.

`@cartouche'
     角が丸いボックスを描き，例や引用を強調します．`@end cartouche'とペ
     アになります．Infoでは効果はありません．*Note Drawing Cartouches
     Around Examples: cartouche.

`@center LINE-OF-TEXT'
     コマンドに続くテキスト行を中央揃えにします．*Note `@center':
     titlefont center sp.

`@centerchap LINE-OF-TEXT'
     `@chapter'に似ていますが，章のタイトルを中央揃えにします． *Note
     `@chapter': chapter.

`@chapheading TITLE'
     テキストに章のような見出しを印刷しますが，印刷されたマニュアルの目次には
     現れません．Infoでは，タイトルはアスタリスクで下線が引かれます．
     *Note `@majorheading' and `@chapheading': majorheading &
     chapheading.

`@chapter TITLE'
     章を開始します．章のタイトルは印刷されたマニュアルの目次に現れます．Info
     では，タイトルはアスタリスクで下線が引かれます．*Note `@chapter':
     chapter.

`@cindex ENTRY'
     ENTRYを概念の索引に加えます．*Note Defining the Entries of an
     Index: Index Entries.

`@cite{REFERENCE}'
     Infoファイルの仲間に無い，本やその他の参照の名前を強調します．
     *Note `@cite': cite.

`@clear FLAG'
     Texinfo書式化コマンドが`@ifset FLAG'と`@end ifset'の組
     の間のテキストの書式化するのを妨げるためと，`@value{FLAG}'
     がFLAGが設定した値を展開するのを妨げるため，FLAGを解除します．
     *Note `@set' `@clear' `@value': set clear value.

`@code{SAMPLE-CODE}'
     式，プログラムの構文上の完全なトークン，またはプログラム名を強調します．
     *Note `@code': code.

`@command{COMMAND-NAME}'
     `ls'のような，コマンド名を示します．*Note `@command': command.

`@comment COMMENT'
     Texinfoでコメントを開始します．行の残りは，Infoファイルにも印刷されたマ
     ニュアルにも現れません．`@c'と同義語です．*Note Comments::.

`@contents'
     目次を印刷します．Infoでは効果が無く，代わりにメニューが使用されます．
     *Note Generating a Table of Contents: Contents.

`@copyright{}'
     著作権のシンボルを生成します．*Note `@copyright': copyright symbol.

`@defcodeindex INDEX-NAME'
     新しい索引と索引コマンドを定義します．`@code'フォントで項目を印刷
     します．*Note Defining New Indices: New Indices.

`@defcv CATEGORY CLASS NAME'
`@defcvx CATEGORY CLASS NAME'
     オブジェクト指向プログラムのクラスに結びつけられた変数の記述を書式化しま
     す．３つの引数があります．定義されたもののカテゴリ，属するクラス，そして
     その名前です．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnxを参照してください．

`@deffn CATEGORY NAME ARGUMENTS...'
`@deffnx CATEGORY NAME ARGUMENTS...'
     関数，対話的コマンド，または類似の引数とされる構成要素の記述を書式化しま
     す．`@deffn'は引数として，記述される構成要素のカテゴリ，この特定の
     構成要素の名前，そしてそのあらゆる引数を引数とします．*Note
     Definition Commands::.

`@defindex INDEX-NAME'
     新しい索引と索引コマンドを定義します．ローマンフォントで項目を印刷します．
     *Note Defining New Indices: New Indices.

`@definfoenclose NEWCMD, BEFORE, AFTER,'
     Infoのため，テキストの前後を文字列で囲みテキストに印を付ける，新しい@-
     コマンドNEWCMDを作成します．*Note definfoenclose::.

`@defivar CLASS INSTANCE-VARIABLE-NAME'
`@defivarx CLASS INSTANCE-VARIABLE-NAME'
     このコマンドは，オブジェクト指向プログラミングのインスタンス変数の記述を
     書式化します．このコマンドは，`@defcv {Instance Variable}
     ...'と同じです．*Note Definition Commands::.  また*Note Def Cmds
     in Detail: deffnxを参照してください．

`@defmac MACRONAME ARGUMENTS...'
`@defmacx MACRONAME ARGUMENTS...'
     マクロの記述を書式化します．このコマンドは`@deffn Macro ...'と
     同じです．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnxを参照してください．

`@defmethod CLASS METHOD-NAME ARGUMENTS...'
`@defmethodx CLASS METHOD-NAME ARGUMENTS...'
     オブジェクト指向プログラミングのメソッドの記述を書式化します．このコマン
     ドは`@defop Method ...'と同じです．メソッドのクラス名，メソッ
     ド名，そしてそのあらゆる引数を引数とします．*Note Definition
     Commands::.  また*Note Def Cmds in Detail:
     deffnxを参照してください．

`@defop CATEGORY CLASS NAME ARGUMENTS...'
`@defopx CATEGORY CLASS NAME ARGUMENTS...'
     オブジェクト指向プログラミングのオペレーションの記述を書式化します．
     `@defop'は，オペレーションのカテゴリーの全体名，オペレーションのク
     ラス名，オペレーション名，そしてあらゆる引数を引数とします． *Note
     Definition Commands::.  また*Note Abstract
     Objects::を参照してくださ い．

`@defopt OPTION-NAME'
`@defoptx OPTION-NAME'
     ユーザーオプションの記述を書式化します．このコマンドは`@defvr
     {User Option} ...'と同じです．*Note Definition Commands::.  また
     *Note Def Cmds in Detail: deffnxを参照してください．

`@defspec SPECIAL-FORM-NAME ARGUMENTS...'
`@defspecx SPECIAL-FORM-NAME ARGUMENTS...'
     スペシャルフォームの記述を書式化します．このコマンドは`@deffn
     {Special Form} ...'と同じです．*Note Definition Commands::.  また
     *Note Def Cmds in Detail: deffnxを参照してください．

`@deftp CATEGORY NAME-OF-TYPE ATTRIBUTES...'
`@deftpx CATEGORY NAME-OF-TYPE ATTRIBUTES...'
     データ型の記述を書式化します．`@deftp'は，カテゴリー，型名
     (`int'や`float'のような単語)，そしてその型のオブジェクトの属性
     名を引数とします．*Note Definition Commands::.  また*Note Data
     Types::を参 照してください．

`@deftypefn CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
`@deftypefnx CLASSIFICATION DATA-TYPE NAME ARGUMENTS...'
     関数やその類似の，引数をとることが可能で入力も可能な構成要素の記述を書式
     化します．`@deftypefn'は，記述されている構成要素の分類，型，構成要
     素の名前，そしてあらゆる引数を引数とします．*Note Definition
     Commands::.  また*Note Def Cmds in Detail:
     deffnxを参照してください．

`@deftypefun DATA-TYPE FUNCTION-NAME ARGUMENTS...'
`@deftypefunx DATA-TYPE FUNCTION-NAME ARGUMENTS...'
     入力された言語の関数の記述を書式化します．このコマンドは
     `@deftypefn Function ...'と同じです．*Note Definition Commands::.
     また*Note Def Cmds in Detail: deffnxを参照してください．

`@deftypeivar CLASS DATA-TYPE VARIABLE-NAME'
`@deftypeivarx CLASS DATA-TYPE VARIABLE-NAME'
     オブジェクト指向プログラミングの入力されたインスタンス変数を書式化します．
     *Note Definition Commands::.  また*Note Abstract
     Objects::を参照してくださ い．

`@deftypemethod CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
`@deftypemethodx CLASS DATA-TYPE METHOD-NAME ARGUMENTS...'
     オブジェクト指向プログラミングの入力されたメソッドの記述を書式化します．
     *Note Definition Commands::.  また*Note Def Cmds in Detail:
     deffnxを参照 してください．

`@deftypeop CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
`@deftypeopx CATEGORY CLASS DATA-TYPE NAME ARGUMENTS...'
     オブジェクト指向プログラミングの入力されたオペレーションの記述を書式化し
     ます．*Note Definition Commands::.  また*Note Abstract
     Objects::を参照して ください．

`@deftypevar DATA-TYPE VARIABLE-NAME'
`@deftypevarx DATA-TYPE VARIABLE-NAME'
     入力された言語の変数の記述を書式化します．このコマンドは
     `@deftypevr Variable ...'と同じです．*Note Definition Commands::.
     また*Note Def Cmds in Detail: deffnxを参照してください．

`@deftypevr CLASSIFICATION DATA-TYPE NAME'
`@deftypevrx CLASSIFICATION DATA-TYPE NAME'
     入力された言語の変数のようなもの -- 値を記録する構成要素 --
     の記述を書
     式化します．引数として，記述された構成要素の分類，型，そして構成要素の名
     前をとります．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnx を参照してください．

`@defun FUNCTION-NAME ARGUMENTS...'
`@defunx FUNCTION-NAME ARGUMENTS...'
     関数の記述を書式化します．このコマンドは`@deffn Function ...'
     と同じです．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnxを参照してください．

`@defvar VARIABLE-NAME'
`@defvarx VARIABLE-NAME'
     変数の記述を書式化します．このコマンドは`@defvr Variable ...'
     と同じです．*Note Definition Commands::.  また*Note Def Cmds in
     Detail: deffnxを参照してください．

`@defvr CATEGORY NAME'
`@defvrx CATEGORY NAME'
     あらゆる変数に類するものの記述を書式化します．`@defvr'は，構成要素
     のカテゴリと構成要素の名前を引数とします．*Note Definition
     Commands::.  また*Note Def Cmds in Detail:
     deffnxを参照してください．

`@detailmenu'
     マスターメニューでリストアップされている詳細なノードで生じる，
     `makeinfo'の混乱を避けます．*Note Master Menu Parts::.

`@dfn{TERM}'
     用語使用の紹介や定義を強調します．*Note `@dfn': dfn.

`@dircategory DIRPART'
     このファイルの項目へ行べきInfoディレクトリメニューを指定します．
     *Note Installing Dir Entries::.

`@direntry'
     このファイルのInfoディレクトリメニュー項目を開始します．`@end
     direntry'と組になります．*Note Installing Dir Entries::.

`@display'
     例のようなものを開始します．`@example'に似ていますが(テキストを字
     下げし，全体に広がらない)新しいフォントを選択しません．`@end
     display'と組になります．*Note `@display': display.

`@dmn{DIMENSION}'
     測定単位を12ptのように書式化します．TeXは，DIMENSIONの前
     にスペースを挿入します．Infoでは，効果はありません．*Note `@dmn':
     dmn.

`@documentdescription'
     HTML出力に含められるドキュメントを記述しているテキストを設定します．
     `@end documentdescription'と組になります． *Note
     `@documentdescription': documentdescription.

`@documentencoding ENC'
     入力エンコードをENCとして宣言します．*Note `@documentencoding':
     documentencoding.

`@documentlanguage CC'
     ドキュメント言語を２文字のISO-639の省略型CCと宣言します． *Note
     `@documentlanguage': documentlanguage.

`@dotaccent{C}'
     文字Cの上にo.のようにドットアクセントを生成します． *Note
     Inserting Accents::.

`@dots{}'
     省略を意味する`...'を挿入します．*Note `@dots': dots.

`@email{ADDRESS[, DISPLAYED-TEXT]}'
     電子メールアドレスを示します．*Note `@email': email.

`@emph{TEXT}'
     TEXTを強調します．テキストは印刷された出力で_イタリック_で表
     示され，Infoではアスタリスクが前後に付きます．*Note Emphasizing
     Text: Emphasis.

`@end ENVIRONMENT'
     ENVIRONMENTを`@end example'のように終了します． *Note @-commands:
     Formatting Commands.

`@env{ENVIRONMENT-VARIABLE}'
     `PATH'のような環境変数名を示します．*Note `@env': env.

`@enddots{}'
     文章の終りの省略を....のように生成します． *Note `@dots{}': dots.

`@enumerate [NUMBER-OR-LETTER]'
     `@item'を使用するそれぞれの項目に対し，番号付のリストを開始します．
     オプションでNUMBER-OR-LETTERを用いたリストを開始します． `@end
     enumerate'と組になります．*Note `@enumerate': enumerate.

`@equiv{}'
     glyphを用いて，`=='のように，２つ形式が正確に等しいことを読者
     に示します．*Note Equivalence::.

`@error{}'
     glyphを用いて，`error-->'のように，以下のテキストがエラーメッセージ
     だということを読者に示します．*Note Error Glyph::.

`@evenfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@evenheading [LEFT] @| [CENTER] @| [RIGHT]'
     偶数番号で(左側)ページのページフッタと見出しを指定します．*Note
     How to Make Your Own Headings: Custom Headings.

`@everyfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@everyheading [LEFT] @| [CENTER] @| [RIGHT]'
     すべてのページのページフッタと見出しを指定します．Infoには関係しません．
     *Note How to Make Your Own Headings: Custom Headings.

`@example'
     例を開始します．テキストを字下げし，補充せず，等幅フォントを選択します．
     `@end example'と組になります．*Note `@example': example.

`@exampleindent INDENT'
     例のような環境で，INDENT個のスペースで(おそらく0)字下げします．
     *Note Paragraph Indenting: exampleindent.

`@exclamdown{}'
     上下逆の感嘆符を生成します．*Note Inserting Accents::.

`@exdent LINE-OF-TEXT'
     行が持つあらゆる字下げを削除します．*Note Undoing the Indentation
     of a Line: exdent.

`@expansion{}'
     特別なglyph`==>'で，マクロ展開の結果を読者に示します． *Note ==>
     Indicating an Expansion: expansion.

`@file{FILENAME}'
     ファイル，バッファ，ノードやディレクトリの名前を強調します．*Note
     `@file': file.

`@finalout'
     TeXが，幅を越えた行に大きな黒い警告の長方形を印刷するのを妨げます．
     *Note Overfull hboxes::.

`@findex ENTRY'
     ENTRYを関数の索引に追加します．*Note Defining the Entries of an
     Index: Index Entries.

`@flushleft'
`@flushright'
     全ての行を左寄せにしますが右端はバラバラになります．フォントはそのままで
     す．`@end flushleft'と組にします．`@flushright'の同義語です．
     *Note `@flushleft' and `@flushright': flushleft & flushright.

`@footnote{TEXT-OF-FOOTNOTE}'
     脚注に挿入します．脚注のテキストは，TeXではページの底に印刷され，Info
     はノードの`終り'か`分割した'形式で書式化されます．*Note
     Footnotes::.

`@footnotestyle STYLE'
     Infoファイルの脚注形式を指定し，`end'は終りに置くノード形式で，
     `separate'は分割したノード形式です．*Note Footnotes::.

`@format'
     例のようなものを開始します．`@display'に似ていますが，マージンは狭
     くなりません．`@end format'と組にします．*Note `@example': example.

`@ftable FORMATTING-COMMAND'
     それぞれの項目に対し，`@item'を使用した２列の表を開始します．それぞ
     れの項目は，関数の索引の最初の列に自動的に挿入されます．`@end
     ftable'と組にします．索引に対する以外，`@table'と同じです． *Note
     `@ftable' and `@vtable': ftable vtable.

`@group'
     １つの印刷されたページに，一緒に現れる必要があるテキストを保ちます．
     `@end group'と組にします．Infoでは関係ありません．*Note `@group':
     group.

`@H{C}'
     Cの上に長いハンガリーのウムラートをo''のように生成します．

`@heading TITLE'
     テキストに番号付けされていないセクションのような見出しを印刷しますが，印
     刷された目次には印刷しません．Infoでは，タイトルは等号で下線が引かれます．
     *Note Section Commands: unnumberedsec appendixsec heading.

`@headings ON-OFF-SINGLE-DOUBLE'
     印刷に対し，ページ見出しを付けたり消したりし，片面または両面のページ見出
     しを指定したりします．*Note The `@headings' Command: headings on
     off.

`@html'
     完全にHTMLモードに入ります．`@end html'と組にします．*Note Raw
     Formatter Commands::.

`@hyphenation{HY-PHEN-A-TED WORDS}'
     ハイフネーションポイントを明示的に定義します．*Note `@-' and
     `@hyphenation': - and hyphenation.

`@i{TEXT}'
     TEXTをイタリックフォントで印刷します．Infoでは効果がありません．
     *Note Fonts::.

`@ifclear FLAG'
     FLAGがクリアされている場合，Texinfo書式化コマンドは`@ifclear
     FLAG'とそれに続く`@end ifclear'コマンドの間のテキストを書式
     化します．*Note `@set' `@clear' `@value': set clear value.

`@ifhtml'
`@ifinfo'
     印刷されたマニュアルに植字するとき，TeXが無視するテキストの展開を開始
     します．`@ifhtml'テキストはHTMLのみに現れます．`@ifinfo'出力
     はInfoと(歴史的な互換性のため)プレーンテキストの出力の両方に現れます．
     `@end ifhtml'と組になります．`@end ifinfo'も同様になります． *Note
     Conditionals::.

`@ifnothtml'
`@ifnotinfo'
`@ifnotplaintext'
`@ifnottex'
     １つの出力形式で無視され，他では無視されないテキストの展開を開始します．
     テキストは指定されていない書式でのみ現れます．`@ifnothtml'のテキス
     トはHTML出力では削除される等のようになります．例外は`@ifnotinfo'の
     テキストで，それはInfo出力と同様にプレーンテキストの出力からも削除されま
     す．それぞれ`@end ifnothtml'，`@end ifnotinfo'，`@end
     ifnotinfo'，`@end ifnotplaintext'，`@end ifnottex'と組になり
     ます．*Note Conditionals::.

`@ifplaintext'
     プレーンテキストの出力にのみ現れるテキストの展開を開始します．
     `@end ifplaintext'と組になります．*Note Conditionals::.

`@ifset FLAG'
     FLAGが設定されている場合，Texinfo書式化コマンドは`@ifset
     FLAG'とそれに続く`@end ifset'コマンドの間のテキストを書式化
     します．*Note `@set' `@clear' `@value': set clear value.

`@iftex'
     Infoファイルに現れないが，TeXのみで処理されるテキストの展開を開始しま
     す．`@end iftex'と組になります．*Note Conditionally Visible Text:
     Conditionals.

`@ignore'
     Infoファイルにも印刷物にも現れないテキストを展開します．`@end
     ignore'と組になります．*Note Comments and Ignored Text: Comments.

`@image{FILENAME, [WIDTH], [HEIGHT], [ALT], [EXT]}'
     外部のFILENAMEの画像を，与えられたWIDTHと/やHEIGHTの大
     きさで含め，HTMLではALTテキストを使用し，
     `FILENAME.EXT'を探します．*Note Images::.

`@include FILENAME'
     Infoファイルや印刷されたドキュメントに，ファイルFILENAMEの内容を取
     り込みます．*Note Include Files::.

`@inforef{NODE-NAME, [ENTRY-NAME], INFO-FILE-NAME}'
     印刷されたマニュアルには無い，Infoファイルへの相互参照を作成します．
     *Note Cross references using `@inforef': inforef.

`\input MACRO-DEFINITIONS-FILE'
     指定されたマクロ定義ファイルを使用します．このコマンドは，TeXが
     `texinfo'マクロ定義ファイルを使用するよう，Texinfoファイルの最初の
     行でのみ使用されます．定義ファイルを読むまでTeXは`@'を理解でき
     ないので，`\input'のバックスラッシュが`@'の代わりに使用されま
     す．*Note Texinfo File Header::.

`@item'
     `@itemize'と`@enumerate'に対し印が付けられた段落の最初を示し
     ます．`@table'，`@ftable'，そして`@vtable'に対し，最初
     の列の項目のテキストの最初を示します．*Note Lists and Tables::.

`@itemize  MARK-GENERATING-CHARACTER-OR-COMMAND'
     字下げされた段落の文章を作成し，それぞれの段落の最初に左のマージンの内部
     に印をを付けます．*Note `@itemize': itemize.

`@itemx'
     `@item'に似ていますが，項目のテキストの上に余分な縦方向の空白を生
     成しません．*Note `@itemx': itemx.

`@kbd{KEYBOARD-CHARACTERS}'
     ユーザが入力する文字のテキストを示します．*Note `@kbd': kbd.

`@kbdinputstyle STYLE'
     `@kbd'が`@code'と異なるフォントを使用するとき指定します． *Note
     `@kbd': kbd.

`@key{KEY-NAME}'
     キーボードのキーの名前を示します．*Note `@key': key.

`@kindex ENTRY'
     キーの索引にENTRYを加えます．*Note Defining the Entries of an
     Index: Index Entries.

`@L{}'
`@l{}'
     ポーランドの縮めたLの文字の，大文字と小文字を生成します．それぞれ/L，
     /lです

`@lisp'
     Lispコードの例を開始します．文字を字下げし，両端まで広げず，等幅フォント
     を選択します．`@end lisp'と組になります．*Note `@lisp': lisp.

`@lowersections'
     順番に，章をセクションに，セクションをサブセクションなどのように変更しま
     す．*Note `@raisesections' and `@lowersections': Raise/lower
     sections.

`@macro MACRONAME {PARAMS}'
     新しいTexinfoコマンド`@MACRONAME{PARAMS}'を定義しま
     す．`makeinfo'と`texi2dvi'のみでサポートされています． *Note
     Defining Macros::.

`@majorheading TITLE'
     テキストで章のような見出しを印刷しますが，印刷されたマニュアルの目次には
     印刷されません．`@chapheading'コマンドより大きな縦方向の空白を見出
     しの前に生成します．Infoでは，章の見出し行はアスタリスクで下線が引かれま
     す．*Note `@majorheading' and `@chapheading': majorheading &
     chapheading.

`@math{MATHEMATICAL-EXPRESSION}'
     数式を書式化します．*Note `@math': Inserting Mathematical
     Expressions: math.

`@menu'
     Infoでノードメニューの最初に印を付けます．印刷されたマニュアルでは効果が
     ありません．`@end menu'と組になります．*Note Menus::.

`@minus{}'
     負の符号`-'を生成します．*Note `@minus': minus.

`@multitable COLUMN-WIDTH-SPEC'
     複数列の表を開始します．`@end multitable'と組になります． *Note
     Multitable Column Widths::.

`@need N'
     現在のページの残りがNミル(千分の1インチ)より小さい場合，印刷された
     マニュアルで新しいページを開始します．*Note `@need': need.

`@node NAME, NEXT, PREVIOUS, UP'
     Infoで新しいノードの開始を定義し，TeXに対し参照の位置を供給します．
     *Note `@node': node.

`@noindent'
     テキストが新しい段落であるかのように字下げするのを妨げます． *Note
     `@noindent': noindent.

`@novalidate'
     ノード参照の有効化を抑制し，TeXの追加ファイルの作成を削除します．
     `@setfilename'の前で使用します．*Note Pointer Validation::.

`@O{}'
`@o{}'
     大文字と小文字のスラッシュの付いたOの文字を生成します．それぞれ，/O，
     /oです．

`@oddfooting [LEFT] @| [CENTER] @| [RIGHT]'
`@oddheading [LEFT] @| [CENTER] @| [RIGHT]'
     それぞれページのフッタと見出しを，それぞれ偶数番号の(右側の)ページに指定
     します．*Note How to Make Your Own Headings: Custom Headings.

`@OE{}'
`@oe{}'
     大文字と小文字のOEの抱き文字を生成します．それぞれ&#140;，&#156;です．
     *Note Inserting Accents::.

`@option{OPTION-NAME}'
     `-l'や`--help'のようなコマンドラインオプションを示します． *Note
     `@option': option.

`@page'
     印刷されたマニュアルで新しいページを開始します．Infoでは効果ありません．
     *Note `@page': page.

`@pagesizes [WIDTH][, HEIGHT]'
     ページ寸法を変更します．*Note pagesizes::.

`@paragraphindent INDENT'
     INDENT個のスペース(おそらく0)で，段落の字下げを行います．
     INDENTが`asis'の場合，ソースファイルの字下げを保持します． *Note
     Paragraph Indenting: paragraphindent.

`@pindex ENTRY'
     プログラムの索引にENTRYを加えます．*Note Defining the Entries of
     an Index: Index Entries.

`@point{}'
     バッファでのポイントの位置を，読者にglyph`-!-'で示します． *Note
     Indicating Point in a Buffer: Point Glyph.

`@pounds{}'
     ポンド通貨記号を生成します．*Note `@pounds{}': pounds.

`@print{}'
     読者にglyph，`-|'で印刷物を示します．*Note Print Glyph::.

`@printindex INDEX-NAME'
     アルファベット順の２列の索引を，印刷されたマニュアルで印刷したり，Infoで
     索引項目のアルファベット順のメニューを生成したりします．*Note
     Printing Indices & Menus::.

`@pxref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     小文字の`see'で始まる参照を印刷されたマニュアルに作成します．カッコ内の
     みで使用します．句読点を使用してコマンドを続けないでください．Info書式化
     コマンドは，必要な場合は自動的に終りの句読点を挿入します．最初の引数のみ
     必要です．*Note `@pxref': pxref.

`@questiondown{}'
     上下逆の疑問符を生成します．*Note Inserting Accents::.

`@quotation'
     実際のまたは想像上の成果物からの引用のテキストを表示するため，マージンを
     狭くします．コマンドは単独行で書いてください．`@end quotation'と組
     になります．*Note `@quotation': quotation.

`@r{TEXT}'
     TEXTをromanフォントで出力します．Infoでは効果がありません． *Note
     Fonts::.

`@raisesections'
     順番に，セクションを章に，サブセクションをセクション等のように，変更しま
     す．*Note `@raisesections' and `@lowersections': Raise/lower
     sections.

`@ref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     参照を作成します．印刷されたマニュアルでは`See'で始まりません．コマンド
     に句読点を続けてください．最初の引数のみ必要です．*Note `@ref':
     ref.

`@refill'
     Infoでは，他の処理が終った後の段落の補充と字下げが行われます．TeXでは
     効果がなく，常に補充されます．このコマンドは，全てのフォーマッターが自動
     的に補充するのでもはや不要です．*Note Refilling Paragraphs::.

`@result{}'
     式の結果を特別なglyph `=>'を用いて読者に示します． *Note
     `@result': result.

`@ringaccent{C}'
     リングアクセントを，o*のように次の文字の上に生成します． *Note
     Inserting Accents::.

`@samp{TEXT}'
     文字が並んでいる，リテラルの例となるテキストを強調します．宣言とシェルコ
     マンド全体に対し単一の文字を使用してください．*Note `@samp': samp.

`@sc{TEXT}'
     印刷物で，TEXTをTHE SMALL CAPS FONTに設定し，Infoファイルでは
     大文字にTEXTを設定します．*Note Smallcaps::.

`@section TITLE'
     章の中でセクションを開始します．印刷されたマニュアルでは，セクションタイ
     トルは番号が付き，目次に現れます．Infoでは，タイトルは等号で下線が引かれ
     ます．*Note `@section': section.

`@set FLAG [STRING]'
     FLAGをアクティブにし，Texinfo書式化コマンドは`@ifset FLAG'と`@end
     ifset'コマンドの組の間のテキストを書式化します．
     オプションで，FLAGの値をSTRINGに設定します．*Note `@set' `@clear'
     `@value': set clear value.

`@setchapternewpage ON-OFF-ODD'
     新しいページで章を開始する時，その場合は，偶数番号(右側)の新しいページを
     指定します．*Note `@setchapternewpage': setchapternewpage.

`@setcontentsaftertitlepage'
     `@contents'コマンドがない場合でも，目次を`@end titlepage'の
     後に書きます．*Note Contents::.

`@setfilename INFO-FILE-NAME'
     Infoファイルが使用する名前を提供します．このコマンドは出力を生成しません
     が，TeXの書式化でも必要です．*Note `@setfilename': setfilename.

`@setshortcontentsaftertitlepage'
     短い目次を`@end titlepage'コマンドの後に，そこに
     `@shortcontents'コマンドがない場合でも生成します．*Note Contents::.

`@settitle TITLE'
     印刷されたマニュアルのページヘッダにタイトルと，HTMLの`<head>'に対
     してデフォルトのドキュメントの記述を提供します．*Note `@settitle':
     settitle.

`@shortcontents'
     短い目次を印刷します．Infoには関係なく，それは目次ではなくメニューを使用
     するためです．`@summarycontents'の同義語です．*Note Generating a
     Table of Contents: Contents.

`@shorttitlepage TITLE'
     最小限のタイトルページを生成します． *Note `@titlepage': titlepage.

`@smallbook'
     TeXは，印刷されたマニュアルを8.5x11インチではなく7x9.25インチで生成し
     ます．*Note Printing Small Books: smallbook.  また，*Note
     small::も参 照してください．

`@smalldisplay'
     例のようなものを開始します．`@smallexample' (マージンを狭くし，補
     充しない)に似ていますが，等幅フォントを選択しません．`@end
     smalldisplay'と組になります．*Note small::.

`@smallexample'
     例を示すためテキストを字下げします．補充せず，等幅フォントを選択し，マー
     ジンを狭くします．印刷されたマニュアルでは，`@example'より小さいフォ
     ントを選択します．`@end smallexample'と組になります．*Note small::.

`@smallformat'
     例のようなものを開始します．`@smalldisplay'に似ていますが，マージ
     ンを狭くしません．`@end smallformat'と組になります．*Note small::.

`@smalllisp'
     Lispコードの例を開始します．`@smallexample'と同じです．`@end
     smalllisp'と組になります．*Note small::.

`@sp N'
     N個の空白行を省略します．*Note `@sp': sp.

`@ss{}'
     ドイツのエスツェット文字ssを生成します．*Note Inserting Accents::.

`@strong {TEXT}'
     印刷されたマニュアルで，植字を*ボールド*フォントで行ったり，Info
     でアスタリスクを周りに置くことでTEXTを強調します．*Note
     Emphasizing Text: emph & strong.

`@subheading TITLE'
     テキストに番号付けされていないセクションのような見出しを印刷しますが，印
     刷されたマニュアルの目次には印刷しません．Infoでは，タイトルはハイフンで
     下線が引かれます．*Note `@unnumberedsubsec' `@appendixsubsec'
     `@subheading': unnumberedsubsec appendixsubsec subheading.

`@subsection TITLE'
     セクション内でサブセクションを開始します．印刷されたマニュアルでは，サブ
     セクションタイトルは番号付けされ，目次に現れます．Infoでは，タイトルはハ
     イフンで下線が引かれます．*Note `@subsection': subsection.

`@subsubheading TITLE'
     テキストの番号付けされていないサブサブセクションのような見出しを印刷しま
     すが，印刷されたマニュアルの目次には印刷されません．Infoでは，タイトルは
     ピリオドで下線が引かれます．*Note The `subsub' Commands:
     subsubsection.

`@subsubsection TITLE'
     サブセクション内でサブサブセクションを開始します．印刷されたマニュアルで
     は，サブサブセクションのタイトルは番号付けされ，目次に現れます．Infoでは，
     タイトルはピリオドで下線が引かれます．*Note The `subsub' Commands:
     subsubsection.

`@subtitle TITLE'
     印刷されたマニュアルでは，ページの右寄せで通常のフォントサイズでサブタイ
     トルを設定します．Infoでは関係なく，それにはタイトルページが無いためです．
     *Note `@title' `@subtitle' and `@author' Commands: title subtitle
     author.

`@summarycontents'
     短い目次を印刷します．Infoでは関係なく，それは目次の代わりにメニューを使
     用するためです．`@shortcontents'の同義語です．*Note Generating a
     Table of Contents: Contents.

`@syncodeindex FROM-INDEX INTO-INDEX'
     最初の引数で指名された索引を，２番目の引数で指名された索引に統合し，最初
     の索引から`@code'フォントで項目を印刷します．*Note Combining
     Indices::.

`@synindex FROM-INDEX INTO-INDEX'
     最初の引数で指名された索引を２番目の引数で指名された索引に統合します．
     FROM-INDEX項目のフォントは変更しません．*Note Combining Indices::.

`@t{TEXT}'
     TEXTをタイプライターのような等幅フォントで印刷します．Infoには効果
     がありません．*Note Fonts::.

`@tab'
     列を複数列の表に分割します．*Note Multitable Rows::.

`@table FORMATTING-COMMAND'
     ２列の表を開始し，それぞれの項目に対し`@item'を使用します．それぞれ
     の最初の列の項目を`@item'と同じ行に書いてください．最初の列の項目
     は，FORMATTING-COMMANDの結果と同じフォントで印刷されます． `@end
     table'と組になります．*Note Making a Two-column Table: Two-column
     Tables.  また，*Note `@ftable' and `@vtable': ftable vtableと*Note
     `@itemx': itemxを参照してください．

`@TeX{}'
     ロゴTeXを挿入します．*Note Inserting TeX and (C): TeX and
     copyright.

`@tex'
     完全にTeXモードに入ります．`@end tex'と組にします．*Note Raw
     Formatter Commands::.

`@thischapter'
`@thischaptername'
`@thisfile'
`@thispage'
`@thistitle'
     見出しとフッタのみで利用可能です．現在の章の番号と名前を意味し(書式は，
     `Chapter 1:
     Title')，章の名前のみ，ファイル名，現在のページ番号とドキュ
     メントのタイトルに，それぞれ対応します．*Note How to Make Your Own
     Headings: Custom Headings.

`@tieaccent{CC}'
     タイアクセントを次の２文字CCの上に`oo['のように生成しま す．*Note
     Inserting Accents::.

`@tindex ENTRY'
     ENTRYをデータ型の索引に加えます．*Note Defining the Entries of an
     Index: Index Entries.

`@title TITLE'
     印刷されたマニュアルでは，タイトルを，右寄せで通常フォントより大きいもの
     で黒い罫線で下線を引き配置します．Infoには関係なく，それはタイトルページ
     が無いためです．*Note The `@title' `@subtitle' and `@author'
     Commands: title subtitle author.

`@titlefont{TEXT}'
     印刷されたマニュアルで，TEXTを通常フォントより大きなもので印刷しま
     す．Infoでは関係なく，それにはタイトルページが無いためです． *Note
     The `@titlefont' `@center' and `@sp' Commands: titlefont center sp.

`@titlepage'
     Texinfoのタイトルぺージの最初を示します．コマンドを単独行に書いてくださ
     い．Infoでは，`@titlepage'と`@end titlepage'の間には何も現れ
     ません．*Note `@titlepage': titlepage.

`@today{}'
     現在の日付を`1 Jan 1900'の形式で挿入します．*Note How to Make Your
     Own Headings: Custom Headings.

`@top TITLE'
     `makeinfo'で書式化するInfoファイルで，ファイルの最上位の
     `@node'を識別するもので，ファイルの最上位の`@node'は
     `@top'コマンドの直前の行に書く必要があります．`makeinfo'のノー
     ドポインタの挿入機能に対して使用されます．タイトルはアスタリスクで下線が
     引かれます．`@node'行と`@top'行は，通常はどちらも
     `@ifnottex'と`@end ifnottex' で囲むべきです．TeXと
     `texinfo-format-buffer'で，`@top'コマンドは
     `@unnumbered'と単なる同義語です．*Note Creating Pointers with
     `makeinfo': makeinfo Pointer Creation.

`@u{C}'
`@ubaraccent{C}'
`@udotaccent{C}'
     文字Cの上や下に，o(，o_，.oのように，ブ
     レーブ，下線，または下ドットのアクセントを生成します．*Note
     Inserting Accents::.

`@unnumbered TITLE'
     印刷されたマニュアルで，章番号のない章を開始します．タイトルは印刷された
     マニュアルの目次に現れます．Infoでは，タイトルはアスタリスクで下線が引か
     れます．*Note `@unnumbered' and `@appendix': unnumbered & appendix.

`@unnumberedsec TITLE'
     印刷されたマニュアルで，セクション番号がないセクションを開始します．タイ
     トルは，印刷されたマニュアルの目次に現れます．Infoでは，タイトルは等号で
     下線が引かれます．*Note Section Commands: unnumberedsec
     appendixsec heading.

`@unnumberedsubsec TITLE'
     印刷されたマニュアルで，章の中に番号が無いサブセクションを開始します．タ
     イトルは，印刷されたマニュアルの目次に現れます．Infoでは，タイトルはハイ
     フンで下線が引かれます．*Note `@unnumberedsubsec'
     `@appendixsubsec' `@subheading': unnumberedsubsec appendixsubsec
     subheading.

`@unnumberedsubsubsec TITLE'
     印刷されたマニュアルで，章の中に番号が無いサブサブセクションを開始します．
     タイトルは，印刷されたマニュアルの目次に現れます．Infoでは，タイトルはピ
     リオドで下線が引かれます．*Note The `subsub' Commands:
     subsubsection.

`@uref{URL[, DISPLAYED-TEXT][, REPLACEMENT}'
     相互参照を外部のワールドワイドウェブのユニフォームリソースロケータに定義
     します．*Note `@uref': uref.

`@url{URL}'
     ワールドワイドウェブのユニフォームリソースロケータとなるテキストを示しま
     す．*Note `@url': url.

`@v{C}'
     文字Cの上にo<のようにチェックアクセントを生成します． *Note
     Inserting Accents::.

`@value{FLAG}'
     FLAGを`@set FLAG'で設定された値で置換します．*Note `@set' `@clear'
     `@value': set clear value.

`@var{METASYNTACTIC-VARIABLE}'
     それはもう１つのテキストの一部を示すメタ構文の変数を強調します．
     *Note Indicating Metasyntactic Variables: var.

`@verb{DELIM LITERAL DELIM}'
     単一の文字DELIMで分離されているLITERALを，空白やTexinfoの特
     殊文字が含めて，正確にそのまま(固定幅フォントで)出力します． *Note
     `verb': verb.

`@verbatim'
     囲まれているテキストをそのまま(固定幅フォントで)出力します．`@end
     verbatim'と組になります．*Note `verbatim': verbatim.

`@verbatiminclude FILENAME'
     FILENAMEの内容をそのまま(固定幅フォントで)出力します． *Note
     `verbatiminclude': verbatiminclude.

`@vindex ENTRY'
     ENTRYを変数の索引に追加します．*Note Defining the Entries of an
     Index: Index Entries.

`@vskip AMOUNT'
     印刷されたマニュアルに，ページの残りのテキストをページの底まで押しやるよ
     うな空白を挿入します．`0pt plus 1filll'のような引数を使用して，著作
     権のページの書式化に使用します．(`filll'の綴に注意してください．)
     `@vskip'はInfoが無視する文だけで使用してもかまいません． *Note
     Copyright::.

`@vtable FORMATTING-COMMAND'
     ２列の表を開始し，それぞれの項目で`@item'を使用します．最初の列のそ
     れぞれの項目は，変数の索引に自動的に入ります．`@end vtable'と組に
     なります．索引化以外`@table'と同じです．*Note `@ftable' and
     `@vtable': ftable vtable.

`@w{TEXT}'
     TEXTが２行に分割されるのを妨げます．`@refill'コマンドととも
     にに`@w'を使用して，段落を終了しないでください．*Note `@w': w.

`@xref{NODE-NAME, [ENTRY], [TOPIC-OR-TITLE], [INFO-FILE], [MANUAL]}'
     印刷されたマニュアルで，`See'で始まる参照を生成します．コマンドに句読点
     を続けてください．最初の引数のみ必要です．*Note `@xref': xref.


File: texinfo-ja.info,  Node: Tips,  Next: Sample Texinfo Files,  Prev: Command List,  Up: Top

助言とヒント
************

  Texinfoドキュメントを書くための助言として以下をあげます．

   * 過去や未来ではなく，現在の時制で書いてください．

   * 積極的に書いてください！例えば，"それは推奨される..."より"我々は
     推奨する..."と書いてください．

   * 段の補充は70または72を使用してください．長い行は読みにくいです．

   * 著作権の注意と著作権の許可を含めてください．

索引，索引，索引！
..................

異なる方法で多くの索引項目を書いてください．読者は索引が好きです．それら
は役に立ち便利です．

テキストの本体に書くように索引項目を書くのが最も簡単ですが，項目を後で書
くのを好む人もいます．どちらの場合でも，現れる段落の前に項目を書いてくだ
さい．この方法では，索引項目はページを跨ぐ段落の最初のページを示します．

  我々が貴重だと分かったより多くのヒントには以下のものがあります．

   *
     それぞれの項目が，ドキュメントの異なる場所を参照するように，それぞれの索
     引項目を異なるように書いてください．

   *
     トピックが意味深く述べられているところにのみ，索引項目を書いてください．
     例えば，バグレポートの章に"デバッグ情報"の索引があっても役に立ちません．
     デバッグ情報を知りたい誰かは，きっとその章でそれを見つけられないでしょう．

   *
     全ての概念の索引の索引項目の最初の単語を，一貫して大文字化するか，一貫し
     て小文字を使用してください．簡潔な項目は小文字を要求します．長い項目は大
     文字を要求します．大文字小文字のどちらを使用する場合でも，一貫して使用し
     てください．２つの形式を混ぜると醜くなります．

   *
     国や省略名のように，大文字化または大文字の使用が適切な場合は，索引の単語
     に対し，常にそのようにしてください．CやLispのように大文字小文字の違いを
     識別する名前に対し，適切なものを常に使用してください．

   *
     セクションコマンドの直後にセクション全体を参照する索引コマンドを書き，段
     落の前に段落を参照する索引コマンドを書いてください．

     以下の例では，空白行が索引項目"Leaping"の後にあります．

          @section The Dog and the Fox
          @cindex Jumping, in general
          @cindex Leaping
          
          @cindex Dog, lazy, jumped over
          @cindex Lazy dog jumped over
          @cindex Fox, jumps over dog
          @cindex Quick fox jumps over dog
          The quick brown fox jumps over the lazy dog.

     (例で，同じ概念に対する項目を異なる方法で書いていることに注意してくださ
     い -- `Lazy dog'と`Dog, lazy' -- それで読者は，異なる方法で
     概念を見つけることが可能になります．)

空白行
......

   *
     セクションコマンドと最初に続く文や段落の間や，セクションコマンドに関連し
     た索引コマンドと最初に続く文や段落の間に，索引のチップに書かれているよう
     に空白行を挿入してください．そうしない場合，フォーマッタはタイトルと段落
     を一緒にまとめるかもしれません．

   * `@table'コマンドの前と`@end table'コマンドの後に，空白行を常
     に挿入してください．しかし，`@table'コマンドの後と`@end
     table'コマンドの前には，空白行を決して挿入しないでください．

     例えば，以下のようにします．

          Types of fox:
          
          @table @samp
          @item Quick
          Jump over lazy dogs.
          
          @item Brown
          Also jump over lazy dogs.
          @end table
          @noindent
          On the other hand, ...

     同じ方法で，`@itemize' ... `@end itemize'の前後と， `@enumerate'
     ... `@end enumerate'の前後に空白行を挿入し てください．

完全なフレーズ
..............

  完全なフレーズは何よりも読み易く...

   *
     完全な文として項目に分けられたリストを書いてください．または，少なくとも
     完全なフレーズにしてください．不完全な表現...厄介です...は以下の
     ようなものです．

   *
     複数の項目リストや表に対する前置きの文や文節は，完全な表現として書いてく
     ださい．"You can set:"と書かないでください．代わりに"You can set
     these
     variables:"と書いてください．前者の表現は切り離されているように感
     じます．

エディション，日付と，バージョン
................................

全てのマニュアルの３箇所に，エディションナンバー，バージョンナンバー，そ
して日付を，`@copying'のテキストに含めてください(Texinfoファイルを
読む人のためと，出力ファイルの法的な著作権のためです)．そして，
`@insertcopying'を`@titlepage'セクション(印刷されたマニュア
ルを読む人のため)とTopノード(オンラインの出力を読む人のため)で使用してく
ださい．

  こうするためには，`@set'と`@value'を使用するのが最も簡単です． *Note
`@value' Example: value Example, and *Note GNU Sample Texts::.

定義コマンド
............

  定義コマンドは，`@deffn'，`@defun'，`@defmac'とその同
類で，単一の書式で記述を書くことを可能にします．

   *
     定義コマンドで定義したそれぞれの構成要素に対し，定義コマンドを１つだけ書
     いてください．自動的に索引を作成する機能によって，読者を定義に導く索引項
     目を作成します．

   * `@table' ... `@end table'を関数の概要を含む付録に使用し，
     `@deffn'や他の定義コマンドを使用しないでください．

大文字化
........

   * "Texinfo"を大文字化してください．それは名前です．`x'や`i'を
     大文字で書かないでください．

   * "Info"を大文字化してください．それは名前です．

   * TeXは`@TeX{}'コマンドを使用して書いてください．大文字の
     `T'と`X'に注意してください．このコマンドは，TeXを書いた Donald
     Knuthに希望に従ってフォーマッタに植字させます．

スペース
........

  `@example' ... `@end example'と類似のコマンド内部以外で，
Texinfoファイルの書式化のためにスペースを使用しないでください．

  例えば，TeXは以下を補充します．

         @kbd{C-x v}
         @kbd{M-x vc-next-action}
            現在のバッファに対応する，
            バージョンで制御されたファイルで，
            次の論理オペレーションを実行する．

そのため以下のように見えます．

     `C-x v' `M-x vc-next-action'
     現在のバッファに対応する，バージョンで制御
     されたファイルで，次の論理オペレーションを実行する．

この場合，テキストは，表を作成する`@table'，`@item'，そして
`@itemx'で書式化するべきです．

@code，@samp，@var，そして`---'
...............................

   * コマンド名を含め，Lispシンボルの周りに`@code'を使用してください．
     例えば，以下のようにします．

          主な関数は@code{vc-next-action}で，...

   * `s'の様な文字を`@code'の直後に置くことを避けてください．その
     ような文字は醜くなります．

   * メタ変数の周りに`@var'を使用してください．それらの周りに，山カッコ
     を書かないでください．

   * 長いダッシュ`---'を示すため，続いている３つのハイフンを使用してくだ
     さい．TeXは，これらを長いダッシュとして植字し，Infoフォーマッタは，３
     つのハイフンを２つに削減します．

引用外部のピリオド
..................

  句読点が引用の部分でない場合は，ピリオドとその他の句読点を引用の_外
側_に置いてください．この実行は，合州国の出版の慣習に反しますが，読者は
引用の内容と文節全体との区別が可能となります．

  例えば，終りの引用符の外側にピリオドを文に続けて書くべきです．

     Evidently, `au' is an abbreviation for ``author''.

`au'は，`author.'(単語に続くピリオドと一緒)の省略として提供さ
れて_いません_．

新しい用語の紹介
................

   *
     新しい用語を知らない読者が，それを内容から理解できるように紹介してくださ
     い．または，用語の定義を書いてください．

     例えば，以下で用語"check in"，"register"，そして"delta"はすべて，
     初めて現われます．例文を理解できるように書き換えるべきです．

          The major function assists you in checking in a file to your
          version control system and registering successive sets of
          changes to it as deltas.

   *
     読者が既に意味を知っていることを期待すべきではなく，この文節から意味を学
     ぶことを期待していることを示すため，`@dfn'コマンドを紹介している単
     語の周りに使用してください．

@pxref
......

  設計された特別な文脈(つまりカッコの中)以外で，`@pxref'を絶対に使用
しないでください．カッコの内部で，閉じ弓カッコの直後に閉じカッコを使用し
ます．１つのフォーマッタは自動的に句読点を挿入し，もう１つはそうしません．
これは，印刷物とInfoファイルで出力は正しく見えますが，それはコマンドがカッ
コの中で使用されるときだけだということを意味します．

シェルからの呼び出し
....................

  Emacs，GCC，そして`gawk'のようなプログラムをシェルから呼び出すこと
が可能です．それぞれのプログラムのドキュメントには，このことを述べている
セクションを含むべきです．残念ながら，これらのセクションのノード名とタイ
トルが全く異なっている場合，ユーザがセクションを見つけるのは困難です．

  そのため，そのようなセクションは，`Invoking Emacs'のように，単語
`Invoking'で始まる文節で命名するという慣習があります．この方法で，ユーザ
はセクションを簡単に見つけることが可能になります．(1) (*note
Tips-Footnote-1::)

ANSI Cの構文
............

  C関数の呼び出しの慣習を記述するため`@example'を使用するとき，以下
のようにANSI C構文を使用してください．

     void dld_init (char *@var{path});

そしてそれに続く引数では，再び`@var'で強調されている同じ引数名で引
数の値を参照してください．

  以下のような，古いスタイルを避けてください．

     #include <dld.h>
     
     dld_init (path)
     char *path;

また，関数がヘッダファイルで宣言されていることを示すだけのため，宣言の上
に`#include'を書くことを避けるのが最善です．その方法では，関数宣言
の近くに`#include'があるという間違った印象を与えるかもしれません．
ヘッダファイルに宣言があることを明示的に宣言する，またはより良いものとし
て，関数を記述しているセクションの始めで，関数グループのために使用されて
いるヘッダファイルに名前をつけるかのどちらかにしてください．

悪い例
......

  避けるべき悪い書き方の例のいくつかは以下のようになります．

  この例で，" ... you must `@dfn'{check in} the new
version."と言っています．それは，より良くことが運びます．

     When you are done editing the file, you must perform a
     `@dfn'{check in}.

  以下の例では，"... makes a unified interface such as VC mode
possible."と言っています．

     SCCS, RCS and other version-control systems all perform similar
     functions in broadly similar ways (it is this resemblance which
     makes a unified control mode like this possible).

  そして，この例では，`it'が何を参照しているのか指定すべきです．

     If you are working with other people, it assists in coordinating
     everyone's changes so they do not step on each other.

終りに...
.........

   * `X'をギリシャの`chi'のように，名前`Bach'の最後の発音のようにTeX
     を発音してください．しかし，Texinfoは`speck'のように"teckinfo"と発音し
     てください．

   * `@bye'の後のTexinfoファイルの終りに，独自の注釈を書いてください．
     フォーマッタは`@bye'の後のテキストを処理しません．それは，テキスト
     が`@ignore' ... `@end ignore'の内側にあるのと同じです．


File: texinfo-ja.info,  Node: Tips-Footnotes,  Up: Tips

  (1) 訳注:日本語 ではどうするべきかは知りません．


File: texinfo-ja.info,  Node: Sample Texinfo Files,  Next: Include Files,  Prev: Tips,  Up: Top

Texinfoファイルの見本
*********************

  最初の例は，最初の章(*note Short
Sample::)からのもので，以下はその全体を
コメント無しにしています．二番目の例は，GNUのマニュアルで使用される完全
なテキストを含んでいます．

* Menu:

* Short Sample Texinfo File::
* GNU Sample Texts::


File: texinfo-ja.info,  Node: Short Sample Texinfo File,  Next: GNU Sample Texts,  Up: Sample Texinfo Files

短い例
======

コメントの無い完全なTexinfoファイルの短い見本は以下のようになります．最
初の章でコメント付きのこのファイルを見ることが可能です．*Note Short
Sample::.

  概略:`makeinfo'プログラムは，以下のようなTexinfoソースファイルを
InfoファイルやHTMLファイルに変換します．そして，TeXは印刷されたマニュ
アルに植字します．


     \input texinfo   @c -*-texinfo-*-
     @c %**start of header
     @setfilename sample.info
     @settitle Sample Manual 1.0
     @c %**end of header
     
     @copying
     This is a short example of a complete Texinfo file.
     
     Copyright (C) 2002 Free Software Foundation, Inc.
     @end copying
     
     @titlepage
     @title Sample Title
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage
     
     @c Output the table of the contents at the beginning.
     @contents
     
     @ifnottex
     @node Top
     @top Sample
     @insertcopying
     @end ifnottex
     
     @menu
     * First Chapter::    The first chapter is the
                            only chapter in this sample.
     * Index::            Complete index.
     @end menu
     
     
     @node First Chapter
     @chapter First Chapter
     
     @cindex chapter, first
     
     This is the first chapter.
     @cindex index entry, another
     
     Here is a numbered list.
     
     @enumerate
     @item
     This is the first item.
     
     @item
     This is the second item.
     @end enumerate
     
     
     @node Index
     @unnumbered Index
     
     @printindex cp
     
     @bye


File: texinfo-ja.info,  Node: GNU Sample Texts,  Prev: Short Sample Texinfo File,  Up: Sample Texinfo Files

GNUの見本のテキスト
===================

以下はGNUマニュアルで使用されるべき完全なテキストを用いたTexinfoドキュメ
ントの見本です．

法的なテキストと同様に，GNUシステムがマニュアルに影響を与える要素の数の
実際の例として提供しています．これら個別のすべての要素に慣れていなくても
心配しないでください．それらは要求されているわけではなく，完全な良いマニュ
アルではそれ無しで書かれているはずです．多くのマニュアルにはきっと(おそ
らく)利点となるので，それでも以下には含めています．

  Texinfoファイルの最小限の例は*Note Short Sample::.
最小限の例の完全な説 明は，*Note Beginning a File::.

  以下は例の注意事項です．

   * `$Id: texinfo-ja.texi,v 1.1 2002/06/24 11:02:43 futoshi Exp
     $'コメン トは，CVSのため(*note Overview: (cvs)Top.)，
     またはRCS(rcsintro(1)を参照してください)のバージョンコントロールシステム
     のためで，それは以下のような文字列に展開されます．
          $Id: texinfo-ja.texi,v 1.1 2002/06/24 11:02:43 futoshi Exp $
     (これはマニュアルだけでなく，バージョンコントロールを使用するすべてのソー
     スで役に立ちます．)

   * `@include'コマンドの`version.texi'は，Automakeで自動的に管理
     されます(*note Introduction: (automake)Top.)．それは，他
     で使用されている`VERSION'と`UPDATED'の値を設定します．配布物で
     Automakeを使用していない場合，これらやその同等の設定を真似することが可能
     です．

   * `@syncodeindex'コマンドでは，読者が読み易いように，可能な場合は推
     奨されている一つの索引のみの使用するように考えます．

   * `@dircategory'は，Infoディレクトリを構築するためのものです．推奨さ
     れる様々なカテゴリの名前がある，*Note Installing Dir Entries::.

   *
     `Invoking'ノードはGNUの標準で，該当するプログラムのコマンドラインの使用
     方法についての基本的な情報を見つけたいユーザの役に立ちます．*Note
     Manual Structure Details: (standards)Manual Structure Details.

   * マニュアルが数ページの長さでない限り，GNUのマニュアルにGNU Free
     Documentation
     Licenseの項目を含めることは最善です．もちろんこの見本はそ
     れより短いのですが，従来からそうしているためFDLを含めています．
     `fdl.texi'ファイルは，GNUのマシン(とTexinfoとその他のGNUの配布物で)
     利用可能です．

     FDLは，特定の条件の下でそれ自身を省略するために提供されていますが，その
     場合，ここで与えられてテキストを編集する必要があります．*Note GNU
     Free Documentation License::.

   *
     マニュアルに不変のセクションがある場合(もう一度，それ自身のライセンスを
     詳細に見てください)，それを含めるのを忘れないでください．

  見本のドキュメントは以下のようになります．

     \input texinfo    @c -*-texinfo-*-
     @comment $Id: texinfo-ja.texi,v 1.1 2002/06/24 11:02:43 futoshi Exp $
     @comment %**start of header
     @setfilename sample.info
     @include version.texi
     @settitle GNU Sample @value{VERSION}
     @syncodeindex pg cp
     @comment %**end of header
     @copying
     This manual is for GNU Sample
     (version @value{VERSION}, @value{UPDATED}),
     which is an example in the Texinfo documentation.
     
     Copyright @copyright{} 2002 Free Software Foundation, Inc.
     
     @quotation
     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.1 or
     any later version published by the Free Software Foundation; with no
     Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
     and with the Back-Cover Texts as in (a) below.  A copy of the
     license is included in the section entitled ``GNU Free Documentation
     License.''
     
     (a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
     this GNU Manual, like GNU software.  Copies published by the Free
     Software Foundation raise funds for GNU development.''
     @end quotation
     @end copying
     
     @dircategory Texinfo documentation system
     @direntry
     * sample: (sample)Invoking sample.
     @end direntry
     
     @titlepage
     @title GNU Sample
     @subtitle for version @value{VERSION}, @value{UPDATED}
     @author A.U. Thor (@email{bug-texinfo@@gnu.org})
     @page
     @vskip 0pt plus 1filll
     @insertcopying
     @end titlepage
     
     @contents
     
     @ifnottex
     @node Top
     @top GNU Sample
     
     @insertcopying
     @end ifnottex
     
     @menu
     * Invoking sample::
     * Copying This Manual::
     * Index::
     @end menu
     
     
     @node Invoking sample
     @chapter Invoking sample
     
     @pindex sample
     @cindex invoking @command{sample}
     
     This is a sample manual.  There is no sample program to
     invoke, but if there was, you could see its basic usage
     and command line options here.
     
     
     @node Copying This Manual
     @appendix Copying This Manual
     
     @menu
     * GNU Free Documentation License::  License for copying this manual.
     @end menu
     
     @include fdl.texi
     
     
     @node Index
     @unnumbered Index
     
     @printindex cp
     
     @bye


File: texinfo-ja.info,  Node: Include Files,  Next: Headings,  Prev: Sample Texinfo Files,  Up: Top

インクルードファイル
********************

  TeXやInfo書式化コマンドが，Texinfoファイルの`@include'コマンド
を見つけたとき，それはコマンドで名指しされたファイルの内容を処理し，作成
されているDVIやInfoファイルに組み入れます．インクルードファイルからの索
引項目は，出力ファイルの索引に組み入れられます．

インクルードファイルでは，便利な小さい部分の収集物として，単一な大きなド
キュメントを保持します．

* Menu:

* Using Include Files::         How to use the `@include' command.
* texinfo-multiple-files-update::  How to create and update nodes and
                                  menus when using included files.
* Include File Requirements::   What `texinfo-multiple-files-update' expects.
* Sample Include File::         A sample outer file with included files
                                  within it; and a sample included file.
* Include Files Evolution::     How use of the `@include' command
                                  has changed over time.


File: texinfo-ja.info,  Node: Using Include Files,  Next: texinfo-multiple-files-update,  Prev: Include Files,  Up: Include Files

インクルードファイルの使用方法
==============================

  他のファイルをTexinfoファイルにインクルードするため，`@include'コ
マンドを行の最初に書き，同じ行にインクルードするファイル名を続けてくださ
い．例えば以下のようにします．

     @include buffers.texi

インクルードファイルは，単に，全体をインクルードするのを期待する，または，
"外部の"Texinfoファイルにあるテキストの一部にすべきです。それは，
Texinfoファイルの標準的な始めと終りを含めるべきではありません．特に，イ
ンクルードファイルを，`\input texinfo'と述べている行から始めるべき
ではありません．そうする場合，その文節は出力ファイルにそのまま挿入されま
す．同様に，インクルードファイルを`@bye'コマンドで終えるべきではあ
りません．`@bye'以降は全く書式化されません．

  過去に，インクルードファイルの最初に`@setfilename'行を書くことが要
求されていましたが，もはやそうでははありません．今では，そのような行を書
くかどうかは重要ではありません．`@setfilename'行がインクルードファ
イルに存在する場合，それは無視されます．

  慣習的に，インクルードファイルは，`@chapter'行が続く`@node'
行で始めます．それぞれのインクルードファイルは１つの章です．これで，通常
のノードとメニューを作成更新する，ノードポインタとメニューをインクルード
ファイルに作成するコマンドの使用が容易になります．しかし，単純なEmacsの
ノードとメニューを作成更新するコマンドは，複数のTexnfoファイルでは動作し
ません．このためそれらのコマンドを，インクルードファイルで始まる
`@node'行の`Next'，`Previous'，そして`Up'ポインタを補充するために
使用することは不可能です．また，ファイル全体のマスターメニューを作成する
通常のコマンドも使用不可能です．メニューと`Next'，`Previous'，そして`Up'
ポインタを手で挿入するか，GNU Emacs Texinfoモードのコマンド，
`texinfo-multiple-files-update'を使用する必要があり，それは
`@include'ファイルに対し設計されています．


File: texinfo-ja.info,  Node: texinfo-multiple-files-update,  Next: Include File Requirements,  Prev: Using Include Files,  Up: Include Files

`texinfo-multiple-files-update'
===============================

  GNU Emacs Texinfoモードは，`texinfo-multiple-files-update'コマンド
を提供しています．このコマンドは，インクルードファイルの`Next'，
`Previous'，そして`Up'ポインタを，外部や全体的なTexinfoファイルに対する
ものと同様に作成更新し，それは外部ファイルのメインメニューを作成更新しま
す．オプションの引数での呼び出しに依存して，コマンドはインクルードファイ
ルやそれら全ての最初の`@node'行のポインタのみを更新します．

`M-x texinfo-multiple-files-update'
     引数無しでの呼び出し．

        -
          外部や全体的なTexnfoファイルでインクルードされる，それぞれのファイルの最
          初の`@node'行の，`Next'，`Previous'，そして`Up'ポインタの作成と更
          新．

        -
          外部や全体的なファイルの`Top'レベルのノードポインタの作成と更新．

        - 外部ファイルのメインメニューの作成と更新．

`C-u M-x texinfo-multiple-files-update'
     前置引数として`C-u'で呼び出し．

        -
          それぞれのインクルードファイルの，最初の`@node'行のポインタの作成
          と更新．

        - 外部ファイルの`Top'レベルノードポインタの作成と更新．

        -
          外部ファイルのマスターメニューの作成と挿入．マスターメニューは，全てのイ
          ンクルードファイルの全てのメニューから作成されます．

`C-u 8 M-x texinfo-multiple-files-update'
     `C-u 8'のような，数字の引数での呼び出し．

        -
          全てのインクルードファイルの，*全ての*，`Next'，`Previous'，そし
          て`Up'ポインタの作成と更新．

        - 全てのインクルードファイルの*全ての*メニューの作成と更新．

        -
          外部や全体的なファイルの`Top'レベルノードポインタの作成と更新．

        -
          外部ファイルのマスターメニューの作成．これは，１つのファイルでの引数を持
          つ`texinfo-master-menu'の呼び出しに似ています．

  対話的な使用での前置引数の使用時の注意:通常の前置引数`C-u'を用い
ると，`texinfo-multiple-files-update'コマンドはマスターメニューを挿
入します．`C-u 8'のような数字の前置引数を用いると，コマンドは
*全ての*ファイルの*全ての*ポインタとメニューを更新し，マス
ターメニューを更新します．


File: texinfo-ja.info,  Node: Include File Requirements,  Next: Sample Include File,  Prev: texinfo-multiple-files-update,  Up: Include Files

インクルードファイルの必要条件
==============================

  `texinfo-multiple-files-update'コマンドの使用を計画している場合，そ
の中でインクルードファイルをリストアップしている外部のTexinfoファイルは，
Texinfoファイルの最初と最後の部分と，インクルードファイルをリストアップ
している`@include'コマンド以外，何も含めるべきではありません．それ
には索引さえ含めるべきではなく，それはインクルードファイル自身にリストアッ
プすべきです．

さらに，それぞれのインクルードファイルは，正確に１つの最上位のノード(慣
習的に，`@chapter'またはそれと同等のもの)を含む必要があり，このノー
ドはインクルードファイルの最初のノードにする必要があります．さらに，それ
ぞれのインクルードファイルの中の，それぞれのこれらの最上位レベルのノード
は，ファイル構造で同じ階層レベルにする必要があります．通常，それぞれ
`@chapter'，`@appendix'，または`@unnumbered'にします．
このため，それぞれのインクルードファイルは，一つのかつ唯一の，章や同等の
レベルのノードを含みます．

  外部ファイルは_１つの_ノード，`Top'ノードのみを含みます．それは，単
一の`Top'ノードの他の，あらゆるノードを含むべきではありません．
`texinfo-multiple-files-update'コマンドは，それらを処理しません．


File: texinfo-ja.info,  Node: Sample Include File,  Next: Include Files Evolution,  Prev: Include File Requirements,  Up: Include Files

`@include'を用いたファイルの見本
================================

  メインまたはマスターメニューを挿入する
`texinfo-multiple-files-update'を実行する前の，その中に
`@include'ファイルを用いた外部のTexinfoファイルの完全な例は以下の
ようになります．

     \input texinfo @c -*-texinfo-*-
     @setfilename  include-example.info
     @settitle Include Example
     
     @setchapternewpage odd
     @titlepage
     @sp 12
     @center @titlefont{Include Example}
     @sp 2
     @center by Whom Ever
     
     @page
     @vskip 0pt plus 1filll
     Copyright @copyright{} 2002 Free Software Foundation, Inc.
     @end titlepage
     
     @ifinfo
     @node Top, First, , (dir)
     @top Master Menu
     @end ifinfo
     
     @include foo.texinfo
     @include bar.texinfo
     @include concept-index.texinfo
     
     @summarycontents
     @contents
     
     @bye

  `foo.texinfo'のようなインクルードファイルは，以下のようになります．

     @node First, Second, , Top
     @chapter First Chapter
     
     Contents of first chapter ...

  完全な内容の`concept-index.texinfo'は，このように簡単になります．

     @node Concept Index
     @unnumbered Concept Index
     
     @printindex cp

  `The GNU Emacs Lisp Reference Manual'の外部のTexinfoソースファイル
は，`elisp.texi'という名前です．外部ファイルは，417項目の外部ファイ
ルと，41の`@include'リストを含んでいます．


File: texinfo-ja.info,  Node: Include Files Evolution,  Prev: Sample Include File,  Up: Include Files

インクルードファイルの進化
==========================

Infoが最初に作成されたとき，それは１つのサブジェクトに多くの小さなInfoファ
イルを作成することが慣習的でした．それぞれのInfoファイルは，その独自の
Texinfoファイルから書式化されました．この慣習は，情報が欲しいとき，大き
なInfoファイル全体を保つためにEmacsが大きなバッファを作成する必要がない
ことを意味します．その代わり，探している特定の情報を含む小さなInfoファイ
ルに対して，Emacsはちょうど十分なメモリを確保していました．

１つのファイルから他への参照は，ノード名同様，ファイル名で参照されていま
した．(*Note Referring to Other Info Files: Other Info Files.  また，
*Note `@xref' with Four and Five Arguments: Four and Five
Argumentsを参照してください．)

インクルードファイルは主に，単一の大きな印刷されたマニュアルを，複数のよ
り小さなInfoファイルから作成する方法として設計されました．印刷されたマニュ
アルでは，全ての参照は同じドキュメントにあり，それでTeXは自動的に参照
ページ数を決定可能でした．Info書式化コマンドは，つながった索引を作成する
ためのみにインクルードファイルを使用していました．それぞれの個別の
Texinfoファイルは，個別のInfoに書式化する必要がありました．(それゆえ，そ
れぞれ独自の`@setfilename'行が必要でした．)

しかし，現在大きなファイルは自動的に分割されるので，それはもはや小さいま
まにする必要がありません．

  最近，複数のTexinfoファイルは，`The GNU Emacs Lisp Reference
Manual'のような大きなドキュメントのためと，複数の異なる人々がドキュメン
トの異なるセクションを同時に書くプロジェクトのための使用がほとんどです．

  さらにInfo書式化コマンドは，必要な場合より小さく分割される単一の大きな
Infoファイルを作成するため，`@include'コマンドで動作するように拡張
されています．これは，異なるTexinfoファイルを名指しせずにメニューや相互
参照を書くことが可能だということを意味します．


File: texinfo-ja.info,  Node: Headings,  Next: Catching Mistakes,  Prev: Include Files,  Up: Top

ページ見出し
************

ほとんどの印刷されたマニュアルには，タイトルと著作権のページ以外の全ての
ページの上側に見出しがあります．フッタを含むマニュアルもあります．(見出
しとフッタはInfoでは意味がなく，それにはページが付いていないためです．)

* Menu:

* Headings Introduced::         Conventions for using page headings.
* Heading Format::              Standard page heading formats.
* Heading Choice::              How to specify the type of page heading.
* Custom Headings::             How to create your own headings and footings.


File: texinfo-ja.info,  Node: Headings Introduced,  Next: Heading Format,  Prev: Headings,  Up: Headings

見出しの導入
============

Texinfoは，それぞれの紙の片側に印刷されるマニュアルと，紙の両面に印刷さ
れるマニュアルに対して，標準的なページ見出しの書式を提供しています．通常
はこれらの書式を使用しますが，希望があれば独自の書式を指定することも可能
です．

更に，章を新しいページで始めるか，前の章と同じページに続けるかを指定する
ことが可能です．そして，章を新しいページで始める場合，奇数番号のページか
ら始めるように指定することが可能です．

慣習的に，本は紙の両面に印刷されます．本を開いたときは，右側のページが奇
数番号で，章は右側のページから始まります -- 前にある左側のページは必要
があれば空白のままになります．しかし，報告書は片面に印刷され，前の章が終っ
た直後に改ページされて章を開始することが多くなっています．短い情報的な報
告書では，全く新しいページで章を開始すること滅多に無く，小量の空白をテキ
ストの前に置くことで分離されています．

  `@setchapternewpage'コマンドで，章を新しいページで始めるかどうかと，
標準的な見出しの書式の１つを使用するかどうかを制御します．Texinfoには，
独自の見出しとフッタの書式を生成するために使用可能な見出しとフッタのコマ
ンドがいくつかあります．

Texinfoでは，見出しとフッタはページの上側と下側の単一行です．複数行の見
出しとフッタを作成することは不可能です．それぞれのヘッダとフッタ行は３つ
の部分に分けられます．左側の部分，真中の部分，そして右側の部分です．あら
ゆる部分または行全体は，空白のままにしてもかまいません．ヘッダとフッタ行
の左の部分にあたるテキストは左寄せになります．真中の部分のテキストは中央
揃えされます．そして右の部分のテキストは右寄せになります．


File: texinfo-ja.info,  Node: Heading Format,  Next: Heading Choice,  Prev: Headings Introduced,  Up: Headings

標準的な見出しの書式
====================

Texinfoは２つの標準的な見出しの書式を提供していて，１つは紙のそれぞれの
ページの片面に印刷されたマニュアルに対するもので，もう１つは紙の両面に印
刷されたマニュアルに対するものです．

デフォルトではTexinfoファイルのフッタは指定されず，フッタは空白のままで
す．

片面印刷の標準的な書式は，左側の部分に章の名前を含み，真中の部分が空白で，
右側の部分がページ番号となっているヘッダから成り立ちます．

  片面ページは以下のようになります．

        _______________________
       |                       |
       | chapter   page number |
       |                       |
       | Start of text ...     |
       | ...                   |
       |                       |

両面印刷の標準的な書式はページ番号が偶数か奇数かに依存します．慣習では，
偶数番号のページは左側，奇数番号のページは右側になります．(TeXは，左
右の余白の幅を調整します．通常は，その幅で正しいのですが，両面印刷のとき
はページが正しく結びつけられているか調べた方が良いでしょう -- プリンタ
によっては，奇数ページの余白より右側の余白が大きくなる偶数ページで出力を
生成するものもあります．)

標準的な両面の書式では，左側(偶数番号)のページの左側の部分はページ番号を
含み，真中の部分は空白で，右側の部分は(`@settitle'コマンドで指定さ
れた)タイトルを含みます．右側(奇数番号)のページの左側の部分は章の名前を
含み，真中の部分は空白で，右側の部分はページ番号を含みます．

  両側に開いた本の２ページは，以下のようになります．

        _______________________     _______________________
       |                       |   |                       |
       | page number     title |   | chapter   page number |
       |                       |   |                       |
       | Start of text ...     |   | More  text ...        |
       | ...                   |   | ...                   |
       |                       |   |                       |

章の名前は，単語"Chapter"(1) (*note Heading
Format-Footnote-1::)，章の番号，そしてコロンが前置されます．これで，マニュアルの
現在の場所を記録し追跡することがより簡単になります．


File: texinfo-ja.info,  Node: Heading Format-Footnotes,  Up: Heading Format

  (1) 訳注:これは`txi-??.tex'で変更 可能です．


File: texinfo-ja.info,  Node: Heading Choice,  Next: Custom Headings,  Prev: Heading Format,  Up: Headings

見出しの形式の指定
==================

  TeXは，`@end titlepage'コマンドに至るまで，標準的なTexinfoファ
イルに対しページ見出しの生成を開始しません．このため，タイトルと著作権の
ページは番号が付きません．`@end titlepage'コマンドは，
`@titlepage'セクションの前にある`@setchapternewpage'コマンド
で指定された標準的な書式によって，TeXにページ見出しの生成を開始させま
す．

  可能性は４つあります．

`@setchapternewpage'コマンド無し
     章を新しいページで開始する片面見出しの書式をTeXに指定します．これは，
     `@setchapternewpage on'と同じです．

`@setchapternewpage on'
     章を新しいページで開始する片面見出しの書式を指定します．

`@setchapternewpage off'
     新しい章を，前の章のページの最後と同じページで，いくらか縦方向の空白を開
     けてTeXが開始します．また，TeXは片面ページで植字します．
     (`@headings double'コマンドでヘッダの書式を優先することが可能です．
     *Note The `@headings' Command: headings on offを参照してください．)

`@setchapternewpage odd'
     章を新しいページで開始する両面の書式を指定します．

Texinfoには`@setchapternewpage even'コマンドはありません．


File: texinfo-ja.info,  Node: Custom Headings,  Prev: Heading Choice,  Up: Headings

独自の見出しの作成方法
======================

Texinfoで提供される標準的な見出しを使用したり，独自のものを指定したりす
ることが可能です．デフォルトではTexinfoにはフッタが無いので，指定した場
合，主なテキストに対して利用可能なページサイズがわずかに減少します．

  Texinfoは見出しとフッタを指定する6つのコマンドを提供します．
   * `@everyheading'と`@everyfooting'は，偶数と奇数の番号のページ
     の両方に，同じページヘッダとフッタを生成します．

   * `@evenheading'と`@evenfooting'コマンドは，偶数番号(左側)のペー
     ジにヘッダとフッタを生成します．

   * `@oddheading'と`@oddfooting'コマンドは，奇数番号(右側)のペー
     ジにヘッダとフッタを生成します．

  Texinfoファイルの`@end titlepage'コマンド直後に，カスタムの見出し
指定を書いてください．前もって定義している見出しコマンドを，独自の指定を
定義する前に`@headings off'コマンドで中止する必要があります．

偶数と奇数の番号のページの両方の全てのヘッダに，章の名前を左側に，ページ
番号を真中に，日付を右側に置くようにTeXに伝える方法は以下のようになり
ます．

     @headings off
     @everyheading @thischapter @| @thispage @| @today{}

真中の部分と左の部分，そして右の部分と真中の部分を，部分同士の間に
`@|'を挿入して分離する必要があります．そうしない場合，指定コマンド
は，一つのテキストの終りの部分と次の始めの部分の位置を伝えることができま
せん．

  それぞれの部分には，テキストや@-コマンドを含めることが可能です．本体の
ページの，通常の段落にある部分のようにテキストは印刷されます．@-コマン
ドはページ番号，日付，章の名前，または何にでも，それ自身が置換されます．

  6つの見出しとフッタのコマンドには以下のものがあります．

`@everyheading LEFT @| CENTER @| RIGHT'
`@everyfooting LEFT @| CENTER @| RIGHT'
     `every'コマンドは，偶数と奇数の番号のページ両方の書式を指定します．これ
     らのコマンドは，それぞれの紙の片面に印刷されるドキュメントや，対称なヘッ
     ダとフッタにしたいドキュメントに対するものです．

`@evenheading LEFT @| CENTER @| RIGHT'
`@oddheading  LEFT @| CENTER @| RIGHT'
`@evenfooting LEFT @| CENTER @| RIGHT'
`@oddfooting  LEFT @| CENTER @| RIGHT'
     `even'と`odd'コマンドは，偶数番号のページと奇数番号のページの書式を指定
     します．これらのコマンドは，本と，それぞれの紙の両面に印刷されるマニュア
     ルに対するものです．

  章とセクションの名前とページ番号を供給するため，`@this...'シリー
ズの@-コマンドを使用してください．見出しフッタの，左揃え，中央揃え，右
揃えの中や，`@iftex'と`@end iftex'コマンドの間の部分以外の
Texinfoファイルで，`@this...'コマンドを使用することも可能です．

  `@this...'コマンドは以下のようになります．

`@thispage'
     現在のページ番号を展開します．

`@thischaptername'
     現在の章の名前を展開します．

`@thischapter'
     現在の章の番号と名前を，書式`Chapter 1: Title'に展開します．

`@thistitle'
     ドキュメントの名前を`@settitle'で指定されているものに展開します．

`@thisfile'
     `@include'ファイルに対してのみです．現在の`@include'ファイル
     の名前に展開します．現在のTexinfoソースファイルが`@include'ファイ
     ルではない場合，このコマンドには効果がありません．`@include'ファイ
     ルではない場合，このコマンドは現在のTexinfoソースファイルの名前を提供
     _しません_．( `@include'ファイルの詳細は，*Note Include Files::.)

`@today{}'コマンドも使用可能で，それは現在の日付を`1 Jan 1900'の
書式で展開します．

その他の@-コマンドとテキストは，ページの本体に書かれているかのようにヘッ
ダとフッタに印刷されます．それは，特にドラフトを書いているとき，テキスト
を組み入れることに役立ちます．

     @headings off
     @everyheading @emph{Draft!} @| @thispage @| @thischapter
     @everyfooting @| @| Version: 0.27: @today{}

  余りに長いタイトルへの注意:
それらは他のヘッダやフッタの部分に重なり，隠
してしまう可能性があります．


File: texinfo-ja.info,  Node: Catching Mistakes,  Next: Refilling Paragraphs,  Prev: Headings,  Up: Top

書式化の失敗
************

ドキュメントの内容のミス以外に，Texinfoで犯すミスは２種類あるはずです．
@-コマンドでミスを犯し，ノードと章の構造でミスを犯します．

Emacsには@-コマンドのミスを捕らえる２つのツールと，構造のミスを捕らえる
２つの方法があります．

  @-コマンドの問題を見つけるため，問題の有る領域でTeXや領域の書式化コ
マンドを実行することが可能です．これらのコマンドを，書いているときにそれ
ぞれの領域で本当に実行することが可能です．

  ノードと章の構造の問題を見つけるため，`C-c C-s'
(`texinfo-show-structure')に関連する`occur'コマンドを使用する
ことが可能で，そして，`M-x Info-validate'を使用することが可能です．

* Menu:

* makeinfo Preferred::          `makeinfo' finds errors.
* Debugging with Info::         How to catch errors with Info formatting.
* Debugging with TeX::          How to catch errors with TeX formatting.
* Using texinfo-show-structure::  How to use `texinfo-show-structure'.
* Using occur::                 How to list all lines containing a pattern.
* Running Info-Validate::       How to find badly referenced nodes.


File: texinfo-ja.info,  Node: makeinfo Preferred,  Next: Debugging with Info,  Prev: Catching Mistakes,  Up: Catching Mistakes

`makeinfo'が見つけるエラー
==========================

  `makeinfo'プログラムはエラーを捕らえそれらを報告する優れた仕事を行
います -- `texinfo-format-region'や`texinfo-format-buffer'よ
り遥かに優れています．さらに，自動的にノードポインタとメニューを作成更新
する様々な機能は，ヒューマンエラーの発生の多くを取り除きます．

ポインタとメニューを作成したり挿入したりする更新コマンドを，できる限り使
用してください．そして，`makeinfo'(または，Texinfoモードの表現の
`makeinfo-region'と`makeinfo-buffer')を，ファイルを書式化した
り他のエラーを調べるために使用してください．これは，Texinfoで仕事をする
ための最善の方法です．しかし，`makeinfo'を使用できない，または，問
題が大変難問な場合，この付録で記述されているツールを使用したいと思うかも
しれません．


File: texinfo-ja.info,  Node: Debugging with Info,  Next: Debugging with TeX,  Prev: makeinfo Preferred,  Up: Catching Mistakes

Infoの書式化でエラーを捕らえる
==============================

Texinfoファイルの一部を書いた後，領域の書式化が正確かどうかを見るために，
`texinfo-format-region'や`makeinfo-region'コマンドを使用するこ
とが可能です．

  しかしほとんどの場合，とある理由で`makeinfo-region'コマンドが使えな
いためにこのセクションを読んでいることでしょう．それゆえ，このセクション
の残りは，`texinfo-format-region'の使用を想定します．

  @-コマンドでミスを犯した場合，`texinfo-format-region'はエラー時ま
たはその後で処理を停止し，エラーメッセージを表示します．エラーが発生した
バッファを見るために，`*Info Region*'バッファに切替えてください．カー
ソルはエラーの位置の後にあります．また，エラーが発生した(または，より正
確にはそれが検出された)後，テキストは書式化されません．

  例えば偶然，`@end menu'の代わりに最後に`s'が付いたコマンド `@end
menus'でメニューを終了した場合，以下のようなエラーメッセージ
を得るでしょう．

     @end menus is not handled by texinfo

カーソルはバッファ内の，エラーが発生した場所やそこからそう遠くない場所で
止まります．バッファは以下のようになります．

     ---------- Buffer: *Info Region* ----------
     * Menu:
     
     * Using texinfo-show-structure::  How to use
                                       `texinfo-show-structure'
                                       to catch mistakes.
     * Running Info-Validate::         How to check for
                                       unreferenced nodes.
     @end menus
     -!-
     ---------- Buffer: *Info Region* ----------

  `texinfo-format-region'コマンドは，ちょっと変わったエラーメッセージ
を提供することもあります．例えば，書式化で相互参照の追跡で失敗したとしま
す．

     (@xref{Catching Mistakes, for more info.)

この場合，`texinfo-format-region'は，足りない閉じカッコを検出してい
ますが，メッセージは，`Unbalanced braces'ではなく`Unbalanced
parentheses'になります．これは，書式化コマンドが弓カッコの不一致を，それ
があたかもカッコであるかのように探すためです．

  `texinfo-format-region'はミスの検出に失敗するときもあります．例えば，
以下では，閉じカッコと閉じ弓カッコが置き換わっています．

     (@xref{Catching Mistakes), for more info.}

書式化では以下を生成します．
     (*Note for more info.: Catching Mistakes)

  このエラーを検出する唯一の方法は，以下のように参照を実現することです．

     (*Note Catching Mistakes::, for more info.)

  ついでに，Infoでこのノードを読んでいて，`f <RET>'
(`Info-follow-reference')を入力した場合，以下のエラーメッセージを生
成するでしょう．

     No such node: "Catching Mistakes) The only way ...

これは，Infoがエラーの例を，このノードの最初の相互参照として提供するため
で，Infoの`f'コマンドの直後に<RET>を入力した場合，Infoは参照ノー
ドに行こうと試みるでしょう．`f catch <TAB> <RET>'と入力した
場合，Infoは正確に書かれている例のノード名を認知し，`Catching Mistakes'
ノードへ連れて行くでしょう．(これを試みる場合，`l'(`Info-last')
を入力し，`Catching Mistakes'に戻ることができます．)


File: texinfo-ja.info,  Node: Debugging with TeX,  Next: Using texinfo-show-structure,  Prev: Debugging with Info,  Up: Catching Mistakes

TeX書式化でエラーを捕らえる
===========================

  TeXでファイルを書式化しているときにミスを捕らえることも可能です．

  通常，`texinfo-format-buffer'は，TeXより有意義なエラーメッセージ
を表示するときもあるので，同じファイルで`texinfo-format-buffer'(や，
それより良い`makeinfo-buffer')を実行後にこうしたいと思うことでしょ
う．(*Note Debugging with Info::, for more information.)

  例えば，TexinfoファイルでTeXを実行した時の一部を以下に示します．

     ---------- Buffer: texinfo.texi ----------
     name of the Texinfo file as an extension.  The
     @samp{??} are `wildcards' that cause the shell to
     substitute all the raw index files.  (@xref{sorting
     indices, for more information about sorting
     indices.)@refill
     ---------- Buffer: texinfo.texi ----------

相互参照に閉じカッコがありません．)TeXは停止した後，以下の出力を生成
します．

     ---------- Buffer: *tex-shell* ----------
     Runaway argument?
     {sorting indices, for more information about sorting
     indices.) @refill @ETC.
     ! Paragraph ended before @xref was complete.
     <to be read again>
                        @par
     l.27
     
     ?
     ---------- Buffer: *tex-shell* ----------

  この状況では，TeXは正確で理解可能なエラーメッセージを生成しました．

     Paragraph ended before @xref was complete.

`@par'は，Texinfoと関係が無いTeXの内部コマンドです．`l.27'
は，TeXが問題をTexinfoファイルの27行で検出したという意味です．
`?'は，この状況でTeXが使用するプロンプトです．

  残念ながらTeXは常に役に立つ訳ではなく，間違ったものを発見するために，
本当にシャーロック ホームズになる必要があります．

いずれにせよ，このような問題に遭遇した場合，３つのことを行うことが可能で
す．

  1. `?'プロンプトで<RET>を入力することで，実行を続けこのエラーを無
     視するようTeXに伝えることが可能です．

  2. `?'プロンプトで`r <RET>'を入力することで，実行を続け，最善
     の方法として全てのエラーを無視するようTeXに伝えることが可能です．

     これは最善のことが多いです．しかし，用心してください．その結果がファイル
     の残り全体となるように考え，１つのエラーが更なるエラーメッセージとして連
     続して生成される可能性が有ります．そのようなエラーメッセージの雪崩を生成
     している時にTeXを止めるため，`C-c'(または，Emacsの内部シェルで実
     行している場合は`C-c C-c')を入力してください．

  3. `?'プロンプトで`x <RET>'を入力することで，この実行を停止す
     るようTeXに伝えることが可能です．

  Emacs内部でTeXを実行している場合，シェルバッファとTeXが`?'プ
ロンプトを出している行を切替える必要があります．

  TeXは，問題があってもエラーメッセージを生成せずにファイルを書式化する
ときもあります．これは通常，コマンドが終っていないがTeXは処理を続けら
れる場合に生じます．例えば，`@end itemize'コマンドで項目分けリスト
を終了するのに失敗した場合，TeXは印刷出力可能なDVIファイルを書き出し
ます．TeXが与えるエラーメッセージは幾分不可思議な以下のようなコメント
だけです．

     (@end occurred inside a group at level 1)

しかし，DVIファイルを印刷した場合，項目分けリストに続くファイルのテキス
トが，項目分けリストの最後の項目の部分であるかのように全部字下げされてい
ることが分かります．エラーメッセージは，TeXがファイルで`@end'
コマンドを見つかることを期待していたが，必要とされる場所を特定できなかっ
たということです．

  エラーが見つけにくいと悪名高いもう１つのソースは，`@end group'コマ
ンドが無いことです．理解できないエラーで困惑している場合，最初に `@end
group'コマンドが無いものを探してください．

  Texinfoファイルにヘッダが足りない場合，TeXは実行の最初で停止し，以下
のような出力を表示します．`*'はTeXが入力を待っていることを示して
います．

     This is TeX, Version 3.14159 (Web2c 7.0)
     (test.texinfo [1])
     *

この状況では，アスタリスクの後で`\end <RET>'を単純に入力してくだ
さい．そして，Texinfoファイルのヘッダ行を書き，もう一度TeXコマンドを
実行してください．(バックスラッシュ`\'の使用に注意してください．
TeXは`@'の代わりに`\'を使用します．そしてこの状況では，
Texinfoではなく直接TeXで作業しているのです．)


File: texinfo-ja.info,  Node: Using texinfo-show-structure,  Next: Using occur,  Prev: Debugging with TeX,  Up: Catching Mistakes

`texinfo-show-structure'の使用
==============================

Texinfoファイルの，ノード，章，セクション，そしてサブセクションの記録追
跡は，常に簡単なわけではありません．これは，他人が書いたTexinfoファイル
を修正追加している場合は，特に真になります．

  GNU EmacsのTexinfoモードでは，`texinfo-show-structure'コマンドは，
構造を指定する@-コマンドで始まる全ての行をリストアップします．
`@chapter'，`@section'，`@appendix'等です．引数(対話的
な場合は，前置引数`C-u')を用いることで，コマンドは`@node'
行も表示します．`texinfo-show-structure'コマンドは，Texinfoモードで
`C-c C-s'に，デフォルトでバインドされています．

  行は，`*Occur*'と呼ばれるバッファに，階層レベルで字下げされて表示さ
れます．例えば以下は，このマニュアルでの`texinfo-show-structure'を
実行したものが生成したものの一部になります．

      Lines matching "^@\\(chapter \\|sect\\|subs\\|subh\\|
      unnum\\|major\\|chapheading \\|heading \\|appendix\\)"
      in buffer texinfo.texi.
      ...
      4177:@chapter Nodes
      4198:    @heading Two Paths
      4231:    @section Node and Menu Illustration
      4337:    @section The @code{@@node} Command
      4393:        @subheading Choosing Node and Pointer Names
      4417:        @subsection How to Write an @code{@@node} Line
      4469:        @subsection @code{@@node} Line Tips
      ...

  これは，`texinfo.txi'ファイルの4337，4393，そして4417行が，それぞれ
`@section'，`@subheading'，そして`@subsection'で始まっ
ていることを告げています．カーソルを`*Occur*'ウィンドウに移動した場
合，Texinfoファイルで対応する場所にジャンプするため，行の１つにカーソル
を置き，`C-c C-c'コマンド(`occur-mode-goto-occurrence')を使用す
ることで可能となります．`occur-mode-goto-occurrence'に関する詳細は，
*Note Using Occur: (emacs)Other Repeating Search.

  `*Occur*'ウィンドウの最初の行は，TEXINFO-HEADING-PATTERNで指
定された"正規表現"の記述です．この正規表現は，
`texinfo-show-structure'が探すパターンです．詳細は，*Note Using Regular
Expressions: (emacs)Regexps.

  `texinfo-show-structure'コマンドを呼び出すとき，Emacsはバッファ全体
の構造を表示します．バッファの一部のみ，例えば１つの章の構造を見たい場合，
領域をマークするため`C-x n n' (`narrow-to-region')コマンドを使
用してください．(*Note Narrowing: (emacs)Narrowing.)これ
は，上記の生成で使用された例の方法です．(再びバッファ全体を見るため，
`C-x n w' (`widen')を使用してください．)

  `C-u C-c C-s'と入力して，前置引数を用いて
`texinfo-show-structure'を呼び出す場合，`@chapter'，
`@section'のような@-サインコマンドで始まる行と同様に，
`@node'で始まる行をリストアップします．

  `*Occur*'ウィンドウのリストを見ることで，Texinfoファイルの構造を思
い出すことが可能です．そして，間違った名前のノードや飛ばしたセクションが
ある場合，ミスを修正することが可能です．


File: texinfo-ja.info,  Node: Using occur,  Next: Running Info-Validate,  Prev: Using texinfo-show-structure,  Up: Catching Mistakes

`occur'の使用
=============

  `texinfo-show-structure'コマンドが，余りに多い情報を生成するときも
あります．おそらく，Texinfoファイルの全体的な構造を思い出したいとき，
`texinfo-show-structure'が生成した詳細なリストに圧倒されます．この
状況では，`occur'コマンドを直接使用することが可能です．こうするため，
以下のように入力します．

     M-x occur

その後で，"regexp"の形式で入力を促されたとき，一致させたいパターンの
正規表現を入力してください．(*Note Regular Expressions:
(emacs)Regexps.)`occur'コマンドは，バッファの現在のカー
ソル位置からバッファの終りまで作用します．バッファ全体で`occur'を実
行したい場合，カーソルをバッファの最初に置いてください．

  例えば，行の中に`@chapter'を含む全ての行を見たい場合，
`@chapter'を入力してください．これは章のリストを生成します．それは，
行の真中に`@chapter'がある文も全てリストアップします．

  単語`@chapter'で始まるこれらの行のみを見たい場合，`occur'で入
力を促されたとき，`^@chapter'を入力してください．単語や文節で終る
全ての行を見たい場合，例えば`catching mistakes$'のように，`$'
で単語の終りを終えてください．これは，同じ章やセクションの一部や，その理
由から同じ`Up'ポインタを持っている全てのノードを見たいとき役に立つはずで
す．

  詳細は，*Note Using Occur: (emacs)Other Repeating Search.


File: texinfo-ja.info,  Node: Running Info-Validate,  Prev: Using occur,  Up: Catching Mistakes

悪いノード参照を見つける
========================

あらゆる`Next'，`Previous'，`Up'やその他のノードポインタがノードを指し示
すことに失敗しているかどうかを調査するため，`Info-validate'を使用す
ることが可能です．このコマンドは，全てのノードポインタが存在するノードを
指し示していることを調べます．`Info-validate'コマンドは，Texinfoファ
イルではなくInfoファイルでのみ動作します．

  `makeinfo'プログラムは自動的にポインタの有効の調査を行うので，
`makeinfo'を使用している場合，`Info-validate'を使用する必要は
ありません．`makeinfo'が実行不可能で，その代わりに
`texinfo-format-region'や`texinfo-format-buffer'を使用している
場合や，スクラッチからInfoファイルを書く場合のみ，`Info-validate'を
使用する必要があります．

* Menu:

* Using Info-validate::         How to run `Info-validate'.
* Unsplit::                     How to create an unsplit file.
* Tagifying::                   How to tagify a file.
* Splitting::                   How to split a file manually.


File: texinfo-ja.info,  Node: Using Info-validate,  Next: Unsplit,  Prev: Running Info-Validate,  Up: Running Info-Validate

`Info-validate'の実行
---------------------

  `Info-validate'を使用するため，調査したいInfoファイルに移動し，以下
を入力してください．

     M-x Info-validate

`Info-validate'コマンドは大文字の`I'が要求されることに注意してくだ
さい．また，`Info-validate'を実行する前にタグ表を作成する必要がある
かもしれません．*Note Tagifying::.

  ファイルが有効な場合，"File appears valid"というメッセージを受け取りま
す．しかし，ノードを指し示さないポインタがある場合，`*problems in info
file*'と呼ばれるバッファにエラーメッセージが表示されます．

  例えば，`Info-validate'は，このマニュアルの最初のノードのみを含むテ
ストファイルで実行されたとします．メッセージの１つは以下のようになります．

     In node "Overview", invalid Next: Texinfo Mode

この意味は，`Overview'と呼ばれるノードに何も指し示さない`Next'ポイ
ンタがあるということを意味します(テストファイルには１つのノードしかない
ので，この場合はそうなります．)．

  さて，我々が`Texinfo Mode'という名のノードをテストケースに加えます
が，このノードの`Previous'を指定しないとします．そのとき我々は以下のよう
なエラーメッセージを得ます．

     In node "Texinfo Mode", should have Previous: Overview

これは，全ての`Next'ポインタは，戻るための(`Next'を示すノードにある)
`Previous'に一致すべきだからです．

  `Info-validate'は，全てのメニュー項目と相互参照が実際にノードを指し
示していることも調査します．

  `Info-validate'はタグ表が必要で，分割されたファイルでは動作しません．
(`texinfo-format-buffer'コマンドは，大きなファイルを自動的に分割し
ます．)大きなファイルで`Info-validate'を使用するため，Infoファイル
が分割されないように，引数を用いて`texinfo-format-buffer'を実行する
必要があります．そして，分割されていないファイルのためタグ表を作成する必
要があります．


File: texinfo-ja.info,  Node: Unsplit,  Next: Tagifying,  Prev: Using Info-validate,  Up: Running Info-Validate

分割されないファイルの作成
--------------------------

  `Info-validate'は，タグ表を持った単一のInfoファイルのでのみ実行可能
です．コマンドは，マスターファイルが分割されたとき生成されたサブファイル
では，間接的に動作しません．(70,000バイトかそれくらい以上の)大きなファイ
ルがある場合，間接的なサブファイルを生成しないような方法で
`texinfo-format-buffer'や`makeinfo-buffer'コマンドを実行する必
要があります．Infoファイルのためのタグ表も作成する必要があります．これを
行った後で`Info-validate'を実行し，悪い参照ノードを探すことが可能に
なります．

  第一段階は分割されないInfoファイルを作成することです．
`texinfo-format-buffer'がTexinfoファイルをより小さなInfoファイルに
分割することを避けるため，`M-x texinfo-format-buffer'コマンドに前置
引数を与えてください．

     C-u M-x texinfo-format-buffer

または，以下のようにします．

     C-u C-c C-e C-b

こうしたとき，Texinfoはファイルを分割せず，そのタグ表を生成しません．


File: texinfo-ja.info,  Node: Tagifying,  Next: Splitting,  Prev: Unsplit,  Up: Running Info-Validate

ファイルのタグ付け
------------------

分割されていないInfoファイルを作成後，そのためのタグ表を作成する必要があ
ります．タグ付けしたいInfoファイルに移動し，以下を入力してください．

     M-x Info-tagify

(`Info-tagify'の大文字の`I'に注意してください．)これで，有効化
が可能なタグ表を持つInfoファイルを作成します．

  第三段階はInfoファイルを確認することです．

     M-x Info-validate

(`Info-validate'の大文字の`I'に注意してください．)簡単にいうと，
ステップは以下のようになります．

     C-u M-x texinfo-format-buffer
     M-x Info-tagify
     M-x Info-validate

  ノード構造を有効にした後，通常の方法で`texinfo-format-buffer'を再実
行し，そしてそれでタグ表を構築しファイルを自動的に分割する，または手動で
タグ表と分割されたファイルを作成することができます．


File: texinfo-ja.info,  Node: Splitting,  Prev: Tagifying,  Up: Running Info-Validate

ファイルを手動で分割
--------------------

  大きなファイルを分割したり，`texinfo-format-buffer'や
`makeinfo-buffer'コマンドで自動的にそれを行ったりすべきです．(一般
的に，書式化コマンドの１つでこの仕事を行います．*Note Creating an Info
File::.)

  分割されたファイルは，間接的なサブファイルと呼ばれています．

  Infoファイルはメモリを節約するため分割されます．小さなファイルでは，
Emacsは情報を保つため大きなバッファを作成しません．

Infoファイルが30ノード以上ある場合，そのためにタグ表も作成すべきです．タ
グ表作成の詳細は，*Note Using Info-validate::.
(また，通常タグ表は，書式
化コマンドで自動的に作成されます．手動で作業をした場合のみ，タグ表を作成
する必要があります．ほとんどの場合，`Info-validate'で作業した大きな
分割されていないファイルでこれを行います．)

タグ付けと分割を行いたいファイルに移動し，２つのコマンドを入力してくださ
い．

     M-x Info-tagify
     M-x Info-split

(`Info'の`I'が大文字であることに注意してください．)

  `Info-split'コマンドを使用するとき，バッファは間接的なサブファイル
を列挙する(小さな)Infoファイルに編集されます．このファイルは，移動した元
ファイルに保存されます．間接的なサブファイルは，元ファイルと同じディレク
トリに書き込まれ，元ファイル名に`-'と数字が追加されたファイル名にな
ります．

プライマリファイルはInfoファイルとして機能しますが，それはタグ表とサブファ
イルのディレクトリだけを含みます．


File: texinfo-ja.info,  Node: Refilling Paragraphs,  Next: Command Syntax,  Prev: Catching Mistakes,  Up: Top

段落の補充
**********

  `@refill'コマンドは補充し，オプションで段落の最初の行を字下げを行
ないます．(1) (*note Refilling
Paragraphs-Footnote-1::)`@refill'コマンドはもはや重要ではありませ
んがかつて必要だったので，我々はそれをここで記述します．多くの古い
Texinfoファイルで見ることになるでしょう．

  補充がない場合，長い@-構成物を含む段落は，フォーマッタが@-コマンドを削
除することで他の行より短くなるものもあるので，書式化後見栄えが悪くなりま
す．以前は，`texinfo-format-region'コマンドや
`texinfo-format-buffer'コマンドは，段落を自動的に補充しませんでした．
`@refill'コマンドを全ての段落の終りに，これらのフォーマッタがそれ
を補充するように書く必要がありました．(TeXと`makeinfo'の両方が，
常に段落を自動的に補充していました．)現在は，全てのInfoフォーマッタは補
充と字下げが必要なそれらの段落を自動的に補充し字下げします．

  `@refill'コマンドは，全ての他の処理が終了した_後_，
`texinfo-format-region'と`texinfo-format-buffer'にInfoファイル
の段落を補充させます．このため，`@*'や`@w{ ... }'を含
む段落では，補充の動作がこれら２つのコマンドに優先されるので，
`@refill'を使用することは不可能です．

  現在，`texinfo-format-region'と`texinfo-format-buffer'コマンド
は，`@refill'を補充が必要なそれぞれの段落に自動的に加えます．
`@*'や`@w{ ...}'を含む段落の終りに`@refill'
を加えないので，それらは補充も字下げもされません．


File: texinfo-ja.info,  Node: Refilling Paragraphs-Footnotes,  Up: Refilling Paragraphs

  (1) おそらくコマンドは，`@refillandindent'コマンド
と呼ばれるべきですが，`@refill'はより短く，名前は字下げが可能にな
る前に選ばれていました．


File: texinfo-ja.info,  Node: Command Syntax,  Next: Obtaining TeX,  Prev: Refilling Paragraphs,  Up: Top

@-コマンドの構文
****************

  文字`@'は，特別なTexinfoコマンドを開始するために使用されます．(そ
れは，プレーンTeXに`\'があるのと同じ意味です．)Texinfoは４つの形
式の@-コマンドがあります．

1. アルファベットでないコマンド．
     これらのコマンドは，@に句読点やアルファベット以外の文字が続いたものから
     成り立ちます．アルファベットでないコマンドはほとんど，常に段落内のテキス
     トの一部で，全く引数をとりません．２文字(@ともう一文字)は，完全にそれ自
     身になります．カッコは続きません．アルファベットでないコマンドは以下のも
     のです．`@.'，`@:'，`@*'，`@SPACE'，
     `@TAB'，`@NL'，`@@'，`@{'，そして `@}'．

2. 引数をとらないアルファベットコマンド．
     これらのコマンドは，@で始まる，単語が続き，左右のカッコが続きます．これ
     らのコマンドは，ドキュメントに特別なシンボルを挿入します．それらに引数は
     必要ありません．例えば，`@dots{}' => `...'， `@equiv{}' =>
     `=='，`@TeX{}' => `TeX'，そして`@bullet{}' => `*'です．

3. カッコ内に引数が必要なアルファベットコマンド．
     これらのコマンドは，@で始まり，文字や単語が続き，カッコ内に引数が続きま
     す．例えば，コマンド`@dfn'は用語の紹介や使用の定義を示します．それ
     は以下のように使用されます．`Texinfoでは，@@-コマンドは
     @dfn{mark-up}コマンドです．'

4. 行全体を占有する，アルファベットコマンド．
     これらのコマンドは行全体を占有します．行を@で開始し，コマンドの名前(単
     語)が続きます．例えば，`@center'や`@cindex'です．引数が必要
     無い場合，単語は行の終りが続きます．引数がある場合，コマンド名とスペース
     で分けられています．カッコは使用しません．

このため，アルファベットコマンドは，異なる引数の構文を持つクラスに分類さ
れます．その名前の外見からコマンドが属するクラスは分かりませんが，コマン
ドの意味は分かります．コマンドがglyphを意味する場合，それはクラス2で引数
はいりません．それが，段落の部分としての他のテキストと一緒に使用されるコ
マンドを意味する場合，コマンドはクラス3でカッコ内に引数が続きます．それ
以外の場合，それはクラス4で，その引数として行の残りを使用します．

クラス3と4のコマンドが異なる構文を持っている目的は，Texinfoファイルを読
み易くし，GNU Emacsの段落と補充コマンドが正確に動作する助けとするためで
す．この規則に１つの例外があります．それは`@refill'コマンドで，そ
れは段落の終りで，最後のピリオドや句読点文字の直後に常に使用されます．
`@refill'は引数をとらず，カッコは要求され_ません_．
`@refill'は，行の最初に現われないので，Emacs 段落コマンドは決して
混乱しません．


File: texinfo-ja.info,  Node: Obtaining TeX,  Next: Copying This Manual,  Prev: Command Syntax,  Up: Top

TeXの入手方法
*************

  TeXは自由に再配布できます．anonymous ftpや物理媒体でUnixシステムのた
めのTeXを入手可能です．核となる材料は，Web2c TeX配布物から構成され
ます(`http://tug.org/web2c')．

  anonymous
ftpで回収するための説明とその他の利用可能な配布物の情報は以下
の通りです．
     `ftp://tug.org/tex/unixtex.ftp'
     `http://tug.org/unixtex.ftp'

  Free Software
Foundationは，Texinfoマニュアルの印刷に適したソースコード
CD-ROMでの核となる配布物を提供します．注文するために以下に連絡してくださ
い．

     Free Software Foundation, Inc.
     59 Temple Place Suite 330
     Boston, MA   02111-1307
     USA
     Telephone: +1-617-542-5942
     Fax: (including Japan) +1-617-542-2652
     Free Dial Fax (in Japan):
           0031-13-2473 (KDD)
           0066-3382-0158 (IDC)
     Electronic mail: `gnu@gnu.org'

  その他多くのTeX配布物が利用可能です．`http://tug.org/'を参照して
ください．


File: texinfo-ja.info,  Node: Copying This Manual,  Next: Command and Variable Index,  Prev: Obtaining TeX,  Up: Top

このマニュアルのコピーについて
******************************

* Menu:

* GNU Free Documentation License::  License for copying this manual.


File: texinfo-ja.info,  Node: GNU Free Documentation License,  Up: Copying This Manual

GNU Free Documentation License
==============================

                        Version 1.1, March 2000
     Copyright (C) 2000 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     written document "free" in the sense of freedom: to assure everyone
     the effective freedom to copy and redistribute it, with or without
     modifying it, either commercially or noncommercially.  Secondarily,
     this License preserves for the author and publisher a way to get
     credit for their work, while not being considered responsible for
     modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a
     notice placed by the copyright holder saying it can be distributed
     under the terms of this License.  The "Document", below, refers to
     any such manual or work.  Any member of the public is a licensee,
     and is addressed as "you".

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter
     section of the Document that deals exclusively with the
     relationship of the publishers or authors of the Document to the
     Document's overall subject (or to related matters) and contains
     nothing that could fall directly within that overall subject.
     (For example, if the Document is in part a textbook of
     mathematics, a Secondary Section may not explain any mathematics.)
     The relationship could be a matter of historical connection with
     the subject or with related matters, or of legal, commercial,
     philosophical, ethical or political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, whose contents can be viewed and edited directly
     and straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup has been designed
     to thwart or discourage subsequent modification by readers is not
     Transparent.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML designed for human modification.
     Opaque formats include PostScript, PDF, proprietary formats that
     can be read and edited only by proprietary word processors, SGML
     or XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than
     100, and the Document's license notice requires Cover Texts, you
     must enclose the copies in covers that carry, clearly and legibly,
     all these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a publicly-accessible
     computer-network location containing a complete Transparent copy
     of the Document, free of added material, which the general
     network-using public has access to download anonymously at no
     charge using public-standard network protocols.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has less than five).

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section entitled "History", and its title, and
          add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. In any section entitled "Acknowledgments" or "Dedications",
          preserve the section's title, and preserve in the section all
          the substance and tone of each of the contributor
          acknowledgments and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section as "Endorsements" or to
          conflict in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections entitled
     "History" in the various original documents, forming one section
     entitled "History"; likewise combine any sections entitled
     "Acknowledgments", and any sections entitled "Dedications".  You
     must delete all sections entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, does not as a whole count as a
     Modified Version of the Document, provided no compilation
     copyright is claimed for the compilation.  Such a compilation is
     called an "aggregate", and this License does not apply to the
     other self-contained works thus compiled with the Document, on
     account of their being thus compiled, if they are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one
     quarter of the entire aggregate, the Document's Cover Texts may be
     placed on covers that surround only the Document within the
     aggregate.  Otherwise they must appear on covers around the whole
     aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License provided that you also include the
     original English version of this License.  In case of a
     disagreement between the translation and the original English
     version of this License, the original English version will prevail.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

ADDENDUM: How to use this License for your documents
----------------------------------------------------

  To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.1
       or any later version published by the Free Software Foundation;
       with the Invariant Sections being LIST THEIR TITLES, with the
       Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

  If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

  If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: texinfo-ja.info,  Node: Command and Variable Index,  Next: Concept Index,  Prev: Copying This Manual,  Up: Top

コマンドと変数の索引
********************

  これは，Emacs Lisp関数に関連して分類された全ての@-コマンドと，いくつか
の変数のリストです．リストを使いやすくするために，コマンドは`@'を
取り除いてリストアップされています．

* Menu:

* ! (end of sentence):                   Ending a Sentence.
* " (umlaut accent):                     Inserting Accents.
* ' (umlaut accent):                     Inserting Accents.
* (newline):                             Multiple Spaces.
* (space):                               Multiple Spaces.
* (tab):                                 Multiple Spaces.
* * (force line break):                  Line Breaks.
* , (cedilla accent):                    Inserting Accents.
* - (discretionary hyphen):              - and hyphenation.
* .  (end of sentence):                  Ending a Sentence.
* <colon> (suppress widening):           Not Ending a Sentence.
* = (macron accent):                     Inserting Accents.
* ? (end of sentence):                   Ending a Sentence.
* @ (literal @):                         Inserting An Atsign.
* \ (literal \ in @math):                math.
* \emergencystretch:                     Overfull hboxes.
* \input (raw TeX startup):              Minimum.
* \mag (raw TeX magnification):          Cropmarks and Magnification.
* ^ (circumflex accent):                 Inserting Accents.
* ` (grave accent):                      Inserting Accents.
* AA:                                    Inserting Accents.
* aa:                                    Inserting Accents.
* acronym:                               acronym.
* ae:                                    Inserting Accents.
* AE:                                    Inserting Accents.
* afourlatex:                            A4 Paper.
* afourpaper:                            A4 Paper.
* afourwide:                             A4 Paper.
* alias:                                 alias.
* anchor:                                anchor.
* appendix:                              unnumbered & appendix.
* appendixsec:                           unnumberedsec appendixsec heading.
* appendixsection:                       unnumberedsec appendixsec heading.
* appendixsubsec:                        unnumberedsubsec appendixsubsec subheading.
* appendixsubsubsec:                     subsubsection.
* apply:                                 Sample Function Definition.
* asis:                                  table.
* author:                                title subtitle author.
* b (bold font):                         Fonts.
* buffer-end:                            Def Cmd Template.
* bullet:                                bullet.
* bye <1>:                               File End.
* bye:                                   Ending a File.
* c (comment):                           Comments.
* cartouche:                             cartouche.
* center:                                titlefont center sp.
* centerchap:                            chapter.
* chapheading:                           majorheading & chapheading.
* chapter:                               chapter.
* cindex:                                Indexing Commands.
* cite:                                  cite.
* code:                                  code.
* columnfractions:                       Multitable Column Widths.
* command:                               command.
* comment:                               Comments.
* contents:                              Contents.
* copying:                               copying.
* copyright <1>:                         copyright symbol.
* copyright:                             copying.
* cropmarks:                             Cropmarks and Magnification.
* defcodeindex:                          New Indices.
* defcv:                                 Abstract Objects.
* deffn:                                 Functions Commands.
* deffnx:                                deffnx.
* defindex:                              New Indices.
* definfoenclose:                        definfoenclose.
* defivar:                               Abstract Objects.
* defmac:                                Functions Commands.
* defmethod:                             Abstract Objects.
* defop:                                 Abstract Objects.
* defopt:                                Variables Commands.
* defspec:                               Functions Commands.
* deftp:                                 Data Types.
* deftypefn:                             Typed Functions.
* deftypefun:                            Typed Functions.
* deftypeivar:                           Abstract Objects.
* deftypeop:                             Abstract Objects.
* deftypevar:                            Typed Variables.
* deftypevr:                             Typed Variables.
* defun:                                 Functions Commands.
* defvar:                                Variables Commands.
* defvr:                                 Variables Commands.
* dfn:                                   dfn.
* dircategory:                           Installing Dir Entries.
* direntry:                              Installing Dir Entries.
* display:                               display.
* dmn:                                   dmn.
* documentdescription:                   documentdescription.
* documentencoding:                      documentencoding.
* documentlanguage:                      documentlanguage.
* dotaccent:                             Inserting Accents.
* dotless:                               Inserting Accents.
* dots:                                  dots.
* email:                                 email.
* emph:                                  emph & strong.
* end <1>:                               Introducing Lists.
* end:                                   Quotations and Examples.
* end titlepage:                         end titlepage.
* enddots:                               dots.
* enumerate:                             enumerate.
* env:                                   env.
* equiv:                                 Equivalence.
* error:                                 Error Glyph.
* evenfooting:                           Custom Headings.
* evenheading:                           Custom Headings.
* everyfooting:                          Custom Headings.
* everyheading:                          Custom Headings.
* example:                               example.
* exampleindent:                         exampleindent.
* exclamdown:                            Inserting Accents.
* exdent:                                exdent.
* expansion:                             expansion.
* file:                                  file.
* filll TeX dimension:                   Copyright.
* finalout:                              Overfull hboxes.
* findex:                                Indexing Commands.
* flushleft:                             flushleft & flushright.
* flushright:                            flushleft & flushright.
* foobar:                                Optional Arguments.
* footnote:                              Footnotes.
* footnotestyle:                         Footnote Styles.
* format:                                format.
* forward-word:                          Def Cmd Template.
* ftable:                                ftable vtable.
* group:                                 group.
* H (Hungarian umlaut accent):           Inserting Accents.
* hbox:                                  Overfull hboxes.
* heading:                               unnumberedsec appendixsec heading.
* headings:                              headings on off.
* headword:                              definfoenclose.
* html:                                  Raw Formatter Commands.
* hyphenation:                           - and hyphenation.
* i (italic font):                       Fonts.
* ifclear:                               ifset ifclear.
* ifhtml <1>:                            Conditional Commands.
* ifhtml:                                Raw Formatter Commands.
* ifinfo:                                Conditional Commands.
* ifnothtml:                             Conditional Not Commands.
* ifnotinfo:                             Conditional Not Commands.
* ifnotplaintext:                        Conditional Not Commands.
* ifnottex:                              Conditional Not Commands.
* ifplaintext:                           Conditional Commands.
* ifset:                                 ifset ifclear.
* iftex:                                 Conditional Commands.
* ignore:                                Comments.
* image:                                 Images.
* include:                               Using Include Files.
* Info-validate:                         Running Info-Validate.
* inforef:                               inforef.
* insertcopying:                         insertcopying.
* isearch-backward:                      deffnx.
* isearch-forward:                       deffnx.
* item <1>:                              table.
* item <2>:                              Multitable Rows.
* item:                                  itemize.
* itemize:                               itemize.
* itemx:                                 itemx.
* kbd:                                   kbd.
* kbdinputstyle:                         kbd.
* key:                                   key.
* kindex:                                Indexing Commands.
* l:                                     Inserting Accents.
* L:                                     Inserting Accents.
* lisp:                                  lisp.
* lowersections:                         Raise/lower sections.
* macro:                                 Defining Macros.
* majorheading:                          majorheading & chapheading.
* makeinfo-buffer:                       makeinfo in Emacs.
* makeinfo-kill-job:                     makeinfo in Emacs.
* makeinfo-recenter-output-buffer:       makeinfo in Emacs.
* makeinfo-region:                       makeinfo in Emacs.
* math:                                  math.
* menu:                                  Menus.
* minus:                                 minus.
* multitable:                            Multi-column Tables.
* need:                                  need.
* next-error:                            makeinfo in Emacs.
* node:                                  node.
* noindent:                              noindent.
* novalidate:                            Format with tex/texindex.
* o:                                     Inserting Accents.
* O:                                     Inserting Accents.
* occur:                                 Using occur.
* occur-mode-goto-occurrence:            Showing the Structure.
* oddfooting:                            Custom Headings.
* oddheading:                            Custom Headings.
* oe:                                    Inserting Accents.
* OE:                                    Inserting Accents.
* option:                                option.
* page:                                  page.
* page, within @titlepage:               titlepage.
* pagesizes:                             pagesizes.
* paragraphindent:                       paragraphindent.
* phoo:                                  definfoenclose.
* pindex:                                Indexing Commands.
* point:                                 Point Glyph.
* pounds:                                pounds.
* print:                                 Print Glyph.
* printindex:                            Printing Indices & Menus.
* pxref:                                 pxref.
* questiondown:                          Inserting Accents.
* quotation:                             quotation.
* r (Roman font):                        Fonts.
* raisesections:                         Raise/lower sections.
* ref:                                   ref.
* refill:                                Refilling Paragraphs.
* result:                                result.
* ringaccent:                            Inserting Accents.
* rmacro:                                Defining Macros.
* samp:                                  samp.
* sc (small caps font):                  Smallcaps.
* section:                               section.
* setchapternewpage:                     setchapternewpage.
* setcontentsaftertitlepage:             Contents.
* setfilename:                           setfilename.
* setshortcontentsaftertitlepage:        Contents.
* settitle:                              settitle.
* shortcontents:                         Contents.
* shorttitlepage:                        titlepage.
* smallbook:                             smallbook.
* smalldisplay <1>:                      small.
* smalldisplay:                          display.
* smallexample:                          small.
* smallformat <1>:                       format.
* smallformat:                           small.
* smalllisp:                             small.
* sp (line spacing):                     sp.
* sp (titlepage line spacing):           titlefont center sp.
* ss:                                    Inserting Accents.
* strong:                                emph & strong.
* subheading:                            unnumberedsubsec appendixsubsec subheading.
* subsection:                            subsection.
* subsubheading:                         subsubsection.
* subsubsection:                         subsubsection.
* subtitle:                              title subtitle author.
* summarycontents:                       Contents.
* syncodeindex:                          syncodeindex.
* synindex:                              synindex.
* t (typewriter font):                   Fonts.
* tab:                                   Multitable Rows.
* table:                                 Two-column Tables.
* tex:                                   Raw Formatter Commands.
* tex (command):                         tex.
* texinfo-all-menus-update:              Updating Commands.
* texinfo-every-node-update:             Updating Commands.
* texinfo-format-buffer <1>:             texinfo-format commands.
* texinfo-format-buffer <2>:             Info Formatting.
* texinfo-format-buffer:                 texinfo-format commands.
* texinfo-format-region <1>:             texinfo-format commands.
* texinfo-format-region <2>:             Info Formatting.
* texinfo-format-region:                 texinfo-format commands.
* texinfo-indent-menu-description:       Other Updating Commands.
* texinfo-insert-@code:                  Inserting.
* texinfo-insert-@dfn:                   Inserting.
* texinfo-insert-@end:                   Inserting.
* texinfo-insert-@example:               Inserting.
* texinfo-insert-@item:                  Inserting.
* texinfo-insert-@kbd:                   Inserting.
* texinfo-insert-@node:                  Inserting.
* texinfo-insert-@noindent:              Inserting.
* texinfo-insert-@samp:                  Inserting.
* texinfo-insert-@table:                 Inserting.
* texinfo-insert-@var:                   Inserting.
* texinfo-insert-braces:                 Inserting.
* texinfo-insert-node-lines:             Other Updating Commands.
* texinfo-make-menu:                     Updating Commands.
* texinfo-master-menu:                   Updating Commands.
* texinfo-multiple-files-update:         texinfo-multiple-files-update.
* texinfo-multiple-files-update (in brief): Other Updating Commands.
* texinfo-sequential-node-update:        Other Updating Commands.
* texinfo-show-structure <1>:            Showing the Structure.
* texinfo-show-structure:                Using texinfo-show-structure.
* texinfo-start-menu-description:        Inserting.
* texinfo-tex-buffer:                    Printing.
* texinfo-tex-print:                     Printing.
* texinfo-tex-region:                    Printing.
* texinfo-update-node:                   Updating Commands.
* thischapter:                           Custom Headings.
* thischaptername:                       Custom Headings.
* thisfile:                              Custom Headings.
* thispage:                              Custom Headings.
* thistitle:                             Custom Headings.
* tieaccent:                             Inserting Accents.
* tindex:                                Indexing Commands.
* title:                                 title subtitle author.
* titlefont:                             titlefont center sp.
* titlepage:                             titlepage.
* today:                                 Custom Headings.
* top:                                   The Top Node.
* top (@-command):                       makeinfo top command.
* u (breve accent):                      Inserting Accents.
* ubaraccent:                            Inserting Accents.
* udotaccent:                            Inserting Accents.
* unmacro:                               Defining Macros.
* unnumbered:                            unnumbered & appendix.
* unnumberedsec:                         unnumberedsec appendixsec heading.
* unnumberedsubsec:                      unnumberedsubsec appendixsubsec subheading.
* unnumberedsubsubsec:                   subsubsection.
* up-list:                               Inserting.
* uref:                                  uref.
* url:                                   url.
* v (check accent):                      Inserting Accents.
* value:                                 set value.
* var:                                   var.
* verb:                                  verb.
* verbatim:                              verbatim.
* verbatiminclude:                       verbatiminclude.
* vindex:                                Indexing Commands.
* vskip TeX vertical skip:               Copyright.
* vtable:                                ftable vtable.
* w (prevent line break):                w.
* xref:                                  xref.
* { (literal {):                         Inserting Braces.
* } (literal }):                         Inserting Braces.
* ~ (tilde accent):                      Inserting Accents.


File: texinfo-ja.info,  Node: Concept Index,  Prev: Command and Variable Index,  Up: Top

概念の索引
**********

* Menu:

* !:                                     Inserting Accents.
* $Id: texinfo-ja.texi,v 1.1 2002/06/24 11:02:43 futoshi Exp $ comment: GNU Sample Texts.
* &#140;:                                Inserting Accents.
* &#156;:                                Inserting Accents.
* (dir) as Up node of Top node:          First Node.
* --commands-in-node-names:              makeinfo options.
* --delete:                              Invoking install-info.
* --dir-file=NAME:                       Invoking install-info.
* --docbook:                             makeinfo options.
* --entry=TEXT:                          Invoking install-info.
* --error-limit=LIMIT:                   makeinfo options.
* --fill-column=WIDTH:                   makeinfo options.
* --footnote-style=STYLE:                makeinfo options.
* --force:                               makeinfo options.
* --help <1>:                            Invoking install-info.
* --help:                                makeinfo options.
* --html:                                makeinfo options.
* --info-dir=DIR:                        Invoking install-info.
* --info-file=FILE:                      Invoking install-info.
* --item=TEXT:                           Invoking install-info.
* --no-headers:                          makeinfo options.
* --no-number-footnotes:                 makeinfo options.
* --no-pointer-validate:                 makeinfo options.
* --no-split:                            makeinfo options.
* --no-validate:                         makeinfo options.
* --no-warn:                             makeinfo options.
* --number-sections:                     makeinfo options.
* --output=FILE:                         makeinfo options.
* --paragraph-indent=INDENT:             makeinfo options.
* --quiet:                               Invoking install-info.
* --reference-limit=LIMIT:               makeinfo options.
* --remove:                              Invoking install-info.
* --section=SEC:                         Invoking install-info.
* --verbose:                             makeinfo options.
* --version <1>:                         Invoking install-info.
* --version:                             makeinfo options.
* --xml:                                 makeinfo options.
* -D DIR:                                Invoking install-info.
* -d NAME:                               Invoking install-info.
* -D VAR:                                makeinfo options.
* -e LIMIT:                              makeinfo options.
* -e TEXT:                               Invoking install-info.
* -F:                                    makeinfo options.
* -f WIDTH:                              makeinfo options.
* -h <1>:                                Invoking install-info.
* -h:                                    makeinfo options.
* -I DIR:                                makeinfo options.
* -i FILE:                               Invoking install-info.
* -o FILE:                               makeinfo options.
* -P DIR:                                makeinfo options.
* -p INDENT:                             makeinfo options.
* -r:                                    Invoking install-info.
* -r LIMIT:                              makeinfo options.
* -s SEC:                                Invoking install-info.
* -s STYLE:                              makeinfo options.
* -V <1>:                                makeinfo options.
* -V:                                    Invoking install-info.
* .cshrc initialization file:            Preparing for TeX.
* .profile initialization file:          Preparing for TeX.
* /l:                                    Inserting Accents.
* /L:                                    Inserting Accents.
* /O:                                    Inserting Accents.
* /o:                                    Inserting Accents.
* <meta> HTML tag, and document description: documentdescription.
* <title> HTML tag:                      settitle.
* <URL convention, not used:             uref.
* ?:                                     Inserting Accents.
* @-command list:                        Command List.
* @-command syntax:                      Command Syntax.
* @-commands:                            Formatting Commands.
* @-commands in @node, limited support:  Pointer Validation.
* @-commands in nodename:                Node Line Requirements.
* @include file sample:                  Sample Include File.
* @menu parts:                           Menu Parts.
* @node line writing:                    Writing a Node.
* @value in @node lines:                 Pointer Validation.
* @w, for blank items:                   itemize.
* \input source line ignored:            setfilename.
* A4 paper, printing on:                 A4 Paper.
* A5 paper, printing on:                 A4 Paper.
* AA:                                    Inserting Accents.
* aa:                                    Inserting Accents.
* Abbreviations for keys:                key.
* Abbreviations, tagging:                acronym.
* Abstract of document:                  documentdescription.
* Accents, inserting:                    Inserting Accents.
* Acronyms, tagging:                     acronym.
* Acute accent:                          Inserting Accents.
* Adding a new Info file:                New Info File.
* AE:                                    Inserting Accents.
* ae:                                    Inserting Accents.
* Aliases, command:                      alias.
* Alphabetical @-command list:           Command List.
* alt attribute for images:              Images.
* alternate text for images:             Images.
* Anchors:                               anchor.
* Another Info directory:                Other Info Directories.
* Apostrophe in nodename:                Node Line Requirements.
* Arguments, repeated and optional:      Optional Arguments.
* ASCII text output:                     makeinfo options.
* Aspect ratio of images:                Images.
* autoexec.bat:                          Other Info Directories.
* automake, and version info:            GNU Sample Texts.
* Automatic pointer creation with makeinfo: makeinfo Pointer Creation.
* Automatically insert nodes, menus:     Updating Nodes and Menus.
* Auxiliary files, avoiding:             Format with tex/texindex.
* B5 paper, printing on:                 pagesizes.
* Backslash in macros:                   Defining Macros.
* Backslash, and macros:                 Invoking Macros.
* Badly referenced nodes:                Running Info-Validate.
* Bastard title page:                    titlepage.
* Batch formatting for Info:             Batch Formatting.
* Beginning a Texinfo file:              Beginning a File.
* Beginning line of a Texinfo file:      First Line.
* Berry, Karl:                           History.
* Big points:                            Images.
* Black rectangle in hardcopy:           Overfull hboxes.
* Blank lines:                           sp.
* Body of a macro:                       Defining Macros.
* Bolio:                                 History.
* Book characteristics, printed:         Printed Books.
* Book, printing small:                  smallbook.
* BoTeX:                                 History.
* Box with rounded corners:              cartouche.
* Box, ugly black in hardcopy:           Overfull hboxes.
* Braces and argument syntax:            Command Syntax.
* Braces, in macro arguments:            Invoking Macros.
* Braces, inserting:                     Braces Atsigns.
* Braces, when to use:                   Formatting Commands.
* Breaks in a line:                      Line Breaks.
* Breve accent:                          Inserting Accents.
* Buffer formatting and printing:        Printing.
* Bugs, reporting:                       Reporting Bugs.
* Bullets, inserting:                    Dots Bullets.
* Case in node name:                     Node Line Requirements.
* Case, not altering in @code:           code.
* Catching errors with Info formatting:  Debugging with Info.
* Catching errors with TeX formatting:   Debugging with TeX.
* Catching mistakes:                     Catching Mistakes.
* Cedilla accent:                        Inserting Accents.
* Centimeters:                           Images.
* Chapter structuring:                   Structuring.
* Chapters, formatting one at a time:    Format with tex/texindex.
* Characteristics, printed books or manuals: Printed Books.
* Characters, invalid in node name:      Node Line Requirements.
* Chassell, Robert J.:                   History.
* Check accent:                          Inserting Accents.
* Checking for badly referenced nodes:   Running Info-Validate.
* Checklist for bug reports:             Reporting Bugs.
* Ciceros:                               Images.
* Circumflex accent:                     Inserting Accents.
* code, arg to @kbdinputstyle:           kbd.
* Colon in nodename:                     Node Line Requirements.
* colon, last in INFOPATH:               Other Info Directories.
* Column widths, defining for multitables: Multitable Column Widths.
* Combining indices:                     Combining Indices.
* Comma in nodename:                     Node Line Requirements.
* Comma, in macro arguments:             Invoking Macros.
* Command aliases:                       alias.
* Command definitions:                   Sample Function Definition.
* Command names, indicating:             command.
* Command syntax:                        Command Syntax.
* Commands to insert special characters: Braces Atsigns.
* Commands using raw HTML:               Raw Formatter Commands.
* Commands using raw TeX:                Raw Formatter Commands.
* Commands, inserting them:              Inserting.
* Comments:                              Comments.
* Compile command for formatting:        Compile-Command.
* Compressed files, reading:             Invoking install-info.
* Conditionally visible text:            Conditionals.
* Conditions for copying Texinfo:        Copying Conditions.
* Contents, after title page:            Contents.
* Contents, Table of:                    Contents.
* Contents-like outline of file structure: Showing the Structure.
* Conventions for writing definitions:   Def Cmd Conventions.
* Conventions, syntactic:                Conventions.
* Conversion, from Docbook to Texinfo:   Using Texinfo.
* Copying conditions:                    Copying Conditions.
* Copying Permissions:                   Document Permissions.
* Copying software:                      Software Copying Permissions.
* Copying text, including:               insertcopying.
* Copyright owner for FSF works:         copying.
* Copyright page:                        Copyright.
* Copyright page, for plain text:        Titlepage & Copyright Page.
* Copyright word, always in English:     copying.
* Correcting mistakes:                   Catching Mistakes.
* Create nodes, menus automatically:     Updating Nodes and Menus.
* Creating an Info file:                 Creating an Info File.
* Creating an unsplit file:              Unsplit.
* Creating index entries:                Indexing Commands.
* Creating pointers with makeinfo:       makeinfo Pointer Creation.
* Cropmarks for printing:                Cropmarks and Magnification.
* Cross reference parts:                 Cross Reference Parts.
* Cross references:                      Cross References.
* Cross references using @inforef:       inforef.
* Cross references using @pxref:         pxref.
* Cross references using @ref:           ref.
* Cross references using @xref:          xref.
* Cross-reference targets, arbitrary:    anchor.
* Custom page sizes:                     pagesizes.
* Customize Emacs package (Development/Docs/Texinfo): Texinfo Mode Printing.
* Customized highlighting:               definfoenclose.
* Customizing of TeX for Texinfo:        Preparing for TeX.
* CVS $Id: texinfo-ja.texi,v 1.1 2002/06/24 11:02:43 futoshi Exp $, in Texinfo: GNU Sample Texts.
* Debugging the Texinfo structure:       Catching Mistakes.
* Debugging with Info formatting:        Debugging with Info.
* Debugging with TeX formatting:         Debugging with TeX.
* Defining indexing entries:             Indexing Commands.
* Defining macros:                       Defining Macros.
* Defining new indices:                  New Indices.
* Defining new Texinfo commands:         Defining New Texinfo Commands.
* Definition commands:                   Definition Commands.
* Definition conventions:                Def Cmd Conventions.
* Definition template:                   Def Cmd Template.
* Definitions grouped together:          deffnx.
* Delimiter character, for verbatim:     verb.
* Depth of text area:                    pagesizes.
* Description for menu, start:           Inserting.
* Description of document:               documentdescription.
* Details of macro usage:                Macro Details.
* Dido^t points:                         Images.
* Different cross reference commands:    Cross Reference Commands.
* Dimension formatting:                  dmn.
* Dimensions and image sizes:            Images.
* dir directory for Info installation:   Installing an Info File.
* dir file listing:                      New Info File.
* dir file, creating your own:           Other Info Directories.
* dir files and Info directories:        Other Info Directories.
* Dir files, compressed:                 Invoking install-info.
* dir, created by install-info:          Invoking install-info.
* Display formatting:                    display.
* Displayed equations:                   math.
* distinct, arg to @kbdinputstyle:       kbd.
* Distorting images:                     Images.
* Distribution:                          Software Copying Permissions.
* Docbook, converting to Texinfo:        Using Texinfo.
* Document description:                  documentdescription.
* Document input encoding:               documentencoding.
* Document language, declaring:          documentlanguage.
* Document Permissions:                  Document Permissions.
* Dot accent:                            Inserting Accents.
* Dotless i, j:                          Inserting Accents.
* Dots, inserting <1>:                   dots.
* Dots, inserting:                       Dots Bullets.
* Double-colon menu entries:             Less Cluttered Menu Entry.
* Dumping a .fmt file:                   Preparing for TeX.
* DVI file:                              Format with tex/texindex.
* Ellipsis, inserting:                   Dots Bullets.
* em-dash:                               minus.
* Emacs:                                 Texinfo Mode.
* Emacs shell, format, print from:       Within Emacs.
* Emphasizing text:                      Emphasis.
* Emphasizing text, font for:            emph & strong.
* Encoding, declaring:                   documentencoding.
* End node footnote style:               Footnote Styles.
* End of header line:                    End of Header.
* End titlepage starts headings:         end titlepage.
* Ending a Sentence:                     Ending a Sentence.
* Ending a Texinfo file:                 Ending a File.
* Entries for an index:                  Indexing Commands.
* Entries, making index:                 Index Entries.
* Enumeration:                           enumerate.
* Environment indentation:               exampleindent.
* epsf.tex:                              Images.
* epsf.tex, installing:                  Preparing for TeX.
* Equations, displayed:                  math.
* Equivalence, indicating it:            Equivalence.
* Error message, indicating it:          Error Glyph.
* Errors, parsing:                       makeinfo in Emacs.
* Es-zet:                                Inserting Accents.
* European A4 paper:                     A4 Paper.
* Evaluation glyph:                      result.
* Example beginning of Texinfo file:     Sample Beginning.
* Example indentation:                   exampleindent.
* Example menu:                          Menu Example.
* example, arg to @kbdinputstyle:        kbd.
* Examples in smaller fonts:             small.
* Examples, formatting them:             example.
* Examples, glyphs for:                  Glyphs.
* Expanding macros:                      Invoking Macros.
* Expansion, indicating it:              expansion.
* Expressions in a program, indicating:  code.
* F.B.I., as acronym:                    acronym.
* FDL, GNU Free Documentation License:   GNU Free Documentation License.
* File beginning:                        Beginning a File.
* File ending:                           Ending a File.
* File name collision:                   setfilename.
* File section structure, showing it:    Showing the Structure.
* Filling paragraphs:                    Refilling Paragraphs.
* Final output:                          Overfull hboxes.
* Finding badly referenced nodes:        Running Info-Validate.
* Fine-tuning, and hyphenation:          - and hyphenation.
* First line of a Texinfo file:          First Line.
* First node:                            First Node.
* Floating accents, inserting:           Inserting Accents.
* Flooding:                              pxref.
* Fonts for indices:                     syncodeindex.
* Fonts for printing, not for Info:      Fonts.
* Footings:                              Headings.
* Footnotes:                             Footnotes.
* Format a dimension:                    dmn.
* Format and print hardcopy:             Hardcopy.
* Format and print in Texinfo mode:      Texinfo Mode Printing.
* Format file, dumping:                  Preparing for TeX.
* Format with the compile command:       Compile-Command.
* Format, print from Emacs shell:        Within Emacs.
* Formats for images:                    Images.
* Formatting a file for Info:            Creating an Info File.
* Formatting commands:                   Formatting Commands.
* Formatting examples:                   example.
* Formatting for Info:                   Info Formatting.
* Formatting for printing:               Printing.
* Formatting headings and footings:      Headings.
* Formatting requirements:               Requirements Summary.
* Formatting with tex and texindex:      Format with tex/texindex.
* Formulas, mathematical:                math.
* Fox, Brian:                            History.
* Frequently used commands, inserting:   Inserting.
* Full texts, GNU:                       GNU Sample Texts.
* Function definitions:                  Sample Function Definition.
* General syntactic conventions:         Conventions.
* Generating a Table of Contents:        Contents.
* Generating menus with indices:         Printing Indices & Menus.
* Generating plain text files:           makeinfo options.
* German S:                              Inserting Accents.
* GIF, unsupported due to patents:       Images.
* Global Document Commands:              Global Document Commands.
* Globbing:                              Format with tex/texindex.
* Glyphs:                                Glyphs.
* GNU Emacs:                             Texinfo Mode.
* GNU Emacs shell, format, print from:   Within Emacs.
* GNU sample texts:                      GNU Sample Texts.
* Going to other Info files' nodes:      Other Info Files.
* Grave accent:                          Inserting Accents.
* Group (hold text together vertically): group.
* Grouping two definitions together:     deffnx.
* Hardcopy, printing it:                 Hardcopy.
* hboxes, overfull:                      Overfull hboxes.
* Header for Texinfo files:              Texinfo File Header.
* Header of a Texinfo file:              First Line.
* Headings:                              Headings.
* Headings, page, begin to appear:       end titlepage.
* Height of images:                      Images.
* Height of text area:                   pagesizes.
* help2man:                              Using Texinfo.
* Highlighting text:                     Indicating.
* Highlighting, customized:              definfoenclose.
* Hints:                                 Tips.
* History of Texinfo:                    History.
* Holding text together vertically:      group.
* href, producing HTML:                  uref.
* HTML:                                  makeinfo html.
* HTML commands, using ordinary:         Raw Formatter Commands.
* http-equiv, and charset:               documentencoding.
* Hungarian umlaut accent:               Inserting Accents.
* Hurricanes:                            ref.
* hyphen:                                minus.
* Hyphenation patterns, language-dependent: documentlanguage.
* Hyphenation, helping TeX do:           - and hyphenation.
* Hyphenation, preventing:               w.
* i:                                     Inserting Accents.
* If text conditionally visible:         Conditionals.
* Ignored before @setfilename:           setfilename.
* Ignored text:                          Comments.
* Image formats:                         Images.
* Images, inserting:                     Images.
* Inches:                                Images.
* Include file requirements:             Include File Requirements.
* Include file sample:                   Sample Include File.
* Include files:                         Include Files.
* Include files, and section levels:     Raise/lower sections.
* Including a file verbatim:             verbatiminclude.
* Including permissions text:            insertcopying.
* Indentation undoing:                   exdent.
* Indenting environments:                exampleindent.
* Indenting paragraphs, control of:      paragraphindent.
* Index entries:                         Indexing Commands.
* Index entries, making:                 Index Entries.
* Index entry writing:                   Indexing Commands.
* Index file names:                      Format with tex/texindex.
* Index font types:                      Indexing Commands.
* Indexing commands, predefined:         Indexing Commands.
* Indexing table entries automatically:  ftable vtable.
* Indicating commands, definitions, etc.: Indicating.
* Indicating evaluation:                 result.
* Indices:                               Indices.
* Indices, combining them:               Combining Indices.
* Indices, defining new:                 New Indices.
* Indices, printing and menus:           Printing Indices & Menus.
* Indices, sorting:                      Hardcopy.
* Indices, two letter names:             syncodeindex.
* Indirect subfiles:                     Tag and Split Files.
* Info batch formatting:                 Batch Formatting.
* Info file installation:                Installing an Info File.
* Info file name, choosing:              setfilename.
* Info file, listing a new:              New Info File.
* Info file, splitting manually:         Splitting.
* Info files:                            Info Files.
* Info formatting:                       Info Formatting.
* Info installed in another directory:   Other Info Directories.
* Info validating a large file:          Using Info-validate.
* Info, creating an online file:         Creating an Info File.
* Info-directory-list:                   Other Info Directories.
* Info; other files' nodes:              Other Info Files.
* INFOPATH:                              Other Info Directories.
* Initialization file for TeX input:     Preparing for TeX.
* Input encoding, declaring:             documentencoding.
* Insert nodes, menus automatically:     Updating Nodes and Menus.
* Inserting @, braces:                   Braces Atsigns.
* Inserting accents:                     Inserting Accents.
* Inserting dots <1>:                    Dots Bullets.
* Inserting dots:                        dots.
* Inserting ellipsis:                    Dots Bullets.
* Inserting frequently used commands:    Inserting.
* Inserting space:                       Inserting Space.
* Inserting special characters and symbols: Insertions.
* INSTALL file, generating:              makeinfo options.
* install-info:                          Invoking install-info.
* Installing an Info file:               Installing an Info File.
* Installing Info in another directory:  Other Info Directories.
* Internationalization:                  Internationalization.
* Introduction to Texinfo:               Using Texinfo.
* Introduction, as part of file:         Software Copying Permissions.
* Invalid characters in node names:      Node Line Requirements.
* Invoking macros:                       Invoking Macros.
* ISO 639 codes:                         documentlanguage.
* Itemization:                           itemize.
* j:                                     Inserting Accents.
* JPG image format:                      Images.
* Keyboard input:                        kbd.
* Keys, recommended names:               key.
* Keywords, indicating:                  code.
* Knuth, Donald:                         Printed Books.
* Language codes:                        documentlanguage.
* Language, declaring:                   documentlanguage.
* Larger or smaller pages:               Cropmarks and Magnification.
* Legal paper, printing on:              pagesizes.
* Length of file names:                  setfilename.
* Less cluttered menu entry:             Less Cluttered Menu Entry.
* License agreement:                     Software Copying Permissions.
* Line breaks <1>:                       Breaks.
* Line breaks:                           Line Breaks.
* Line breaks, preventing:               w.
* Line length, column widths as fraction of: Multitable Column Widths.
* Line spacing:                          sp.
* Lisp example:                          lisp.
* Lisp examples in smaller fonts:        small.
* List of  @-commands:                   Command List.
* Listing a new Info file:               New Info File.
* Lists and tables, making:              Lists and Tables.
* Local variables:                       Compile-Command.
* Location of menus:                     Menu Location.
* Looking for badly referenced nodes:    Running Info-Validate.
* lpr (DVI print command):               Print with lpr.
* lpr-d, replacements on MS-DOS/MS-Windows: Print with lpr.
* Macro definitions <1>:                 Defining Macros.
* Macro definitions:                     Sample Function Definition.
* Macro details:                         Macro Details.
* Macro invocation:                      Invoking Macros.
* Macron accent:                         Inserting Accents.
* Macros:                                Defining New Texinfo Commands.
* Macros in definition commands:         Def Cmd Template.
* Macros, undefining:                    Defining Macros.
* Magnified printing:                    Cropmarks and Magnification.
* mailto link:                           email.
* makeinfo:                              Using Texinfo.
* makeinfo inside Emacs:                 makeinfo in Emacs.
* makeinfo options:                      makeinfo options.
* Making a printed manual:               Hardcopy.
* Making a tag table automatically:      Tag and Split Files.
* Making a tag table manually:           Unsplit.
* Making cross references:               Cross References.
* Making line and page breaks:           Breaks.
* Making lists and tables:               Lists and Tables.
* Man page output, not supported:        Using Texinfo.
* Man page, reference to:                uref.
* Manual characteristics, printed:       Printed Books.
* Margins on page, not controllable:     pagesizes.
* Marking text within a paragraph:       Marking Text.
* Marking words and phrases:             Marking Text.
* Master menu:                           Master Menu Parts.
* Mathematical expressions <1>:          Raw Formatter Commands.
* Mathematical expressions:              math.
* Menu description, start:               Inserting.
* Menu entries with two colons:          Less Cluttered Menu Entry.
* Menu example:                          Menu Example.
* Menu location:                         Menu Location.
* Menu parts:                            Menu Parts.
* Menu writing:                          Writing a Menu.
* Menu, master:                          Master Menu Parts.
* Menus:                                 Menus.
* Menus generated with indices:          Printing Indices & Menus.
* Menus, omitting:                       makeinfo options.
* meta HTML tag, and charset:            documentencoding.
* META key:                              key.
* Meta-syntactic chars for arguments:    Optional Arguments.
* Millimeters:                           Images.
* Minimal requirements for formatting:   Requirements Summary.
* Minimal Texinfo file (requirements):   Minimum.
* Mistakes, catching:                    Catching Mistakes.
* Mode, using Texinfo:                   Texinfo Mode.
* Multiple spaces:                       Multiple Spaces.
* Multitable column widths:              Multitable Column Widths.
* Multitable rows:                       Multitable Rows.
* Must have in Texinfo file:             Minimum.
* Mutually recursive macros:             Defining Macros.
* Names for indices:                     syncodeindex.
* Names of index files:                  Format with tex/texindex.
* Names recommended for keys:            key.
* Naming a `Top' Node in references:     Top Node Naming.
* NASA, as acronym:                      acronym.
* Navigation links, omitting:            makeinfo options.
* Need space at page bottom:             need.
* New index defining:                    New Indices.
* New Info file, listing it in dir file: New Info File.
* New Texinfo commands, defining:        Defining New Texinfo Commands.
* Next node of Top node:                 First Node.
* Node line requirements:                Node Line Requirements.
* Node line writing:                     Writing a Node.
* Node name must be unique:              Node Line Requirements.
* Node name, should not contain @-commands: Node Line Requirements.
* Node names, choosing:                  Node Names.
* Node separators, omitting:             makeinfo options.
* Node, `Top':                           The Top Node.
* Node, defined:                         node.
* Nodes for menus are short:             Menu Location.
* Nodes in other Info files:             Other Info Files.
* Nodes, catching mistakes:              Catching Mistakes.
* Nodes, checking for badly referenced:  Running Info-Validate.
* Non-breakable space:                   w.
* Not ending a sentence:                 Not Ending a Sentence.
* O'Dea, Brendan:                        Using Texinfo.
* Obtaining TeX:                         Obtaining TeX.
* Occurrences, listing with @occur:      Using occur.
* Optional and repeated arguments:       Optional Arguments.
* Options for makeinfo:                  makeinfo options.
* Ordinary HTML commands, using:         Raw Formatter Commands.
* Ordinary TeX commands, using:          Raw Formatter Commands.
* Other Info files' nodes:               Other Info Files.
* Outline of file structure, showing it: Showing the Structure.
* Output file splitting:                 makeinfo options.
* Output formats, supporting more:       Using Texinfo.
* Overfull hboxes:                       Overfull hboxes.
* Overview of Texinfo:                   Overview.
* Page breaks <1>:                       page.
* Page breaks:                           Breaks.
* Page delimiter in Texinfo mode:        Showing the Structure.
* Page headings:                         Headings.
* Page numbering:                        Headings.
* Page sizes for books:                  smallbook.
* Page sizes, customized:                pagesizes.
* page-delimiter:                        Showing the Structure.
* Pages, starting odd:                   setchapternewpage.
* Paper size, A4:                        A4 Paper.
* Paragraph indentation control:         paragraphindent.
* Paragraph, marking text within:        Marking Text.
* Paragraphs, filling:                   Refilling Paragraphs.
* Parameters to macros:                  Defining Macros.
* Parentheses in nodename:               Node Line Requirements.
* Parsing errors:                        makeinfo in Emacs.
* Part of file formatting and printing:  Printing.
* Parts of a cross reference:            Cross Reference Parts.
* Parts of a master menu:                Master Menu Parts.
* Parts of a menu:                       Menu Parts.
* Patches, contributing:                 Reporting Bugs.
* PDF output:                            PDF Output.
* pdfcolor.tex, installing:              Preparing for TeX.
* pdftex:                                PDF Output.
* pdftex, and images:                    Images.
* Period in nodename:                    Node Line Requirements.
* Periods, inserting:                    Not Ending a Sentence.
* Permissions text, including:           insertcopying.
* Permissions, printed:                  Copyright.
* Picas:                                 Images.
* Pictures, inserting:                   Images.
* Pinard, Franc,ois:                     History.
* plain TeX:                             Raw Formatter Commands.
* Plain text output:                     makeinfo options.
* PNG image format:                      Images.
* Point, indicating in a buffer:         Point Glyph.
* Pointer creation with makeinfo:        makeinfo Pointer Creation.
* Pointer validation with makeinfo:      Pointer Validation.
* Pointer validation, suppressing <1>:   makeinfo options.
* Pointer validation, suppressing:       Format with tex/texindex.
* Points (dimension):                    Images.
* Predefined indexing commands:          Indexing Commands.
* Predefined names for indices:          syncodeindex.
* Preparing for TeX:                     Preparing for TeX.
* Preventing line and page breaks:       Breaks.
* Previous node of Top node:             First Node.
* Print and format in Texinfo mode:      Texinfo Mode Printing.
* Print, format from Emacs shell:        Within Emacs.
* Printed book and manual characteristics: Printed Books.
* Printed output, indicating it:         Print Glyph.
* Printed permissions:                   Copyright.
* Printing a region or buffer:           Printing.
* Printing an index:                     Printing Indices & Menus.
* Printing cropmarks:                    Cropmarks and Magnification.
* Printing DVI files, on MS-DOS/MS-Windows: Print with lpr.
* Printing hardcopy:                     Hardcopy.
* Problems, catching:                    Catching Mistakes.
* Program names, indicating:             command.
* Prototype row, column widths defined by: Multitable Column Widths.
* Quotations:                            quotation.
* ragged left:                           flushleft & flushright.
* ragged right:                          flushleft & flushright.
* Raising and lowering sections:         Raise/lower sections.
* Raw formatter commands:                Raw Formatter Commands.
* RCS $Id: texinfo-ja.texi,v 1.1 2002/06/24 11:02:43 futoshi Exp $, in Texinfo: GNU Sample Texts.
* Recommended names for keys:            key.
* Rectangle, black in hardcopy:          Overfull hboxes.
* Recursion, mutual:                     Defining Macros.
* Recursive macro invocations:           Defining Macros.
* Reference to @-commands:               Command List.
* References:                            Cross References.
* References using @inforef:             inforef.
* References using @pxref:               pxref.
* References using @ref:                 ref.
* References using @xref:                xref.
* Referring to other Info files:         Other Info Files.
* Refilling paragraphs:                  Refilling Paragraphs.
* Region formatting and printing:        Printing.
* Region printing in Texinfo mode:       Texinfo Mode Printing.
* Reid, Brian:                           History.
* Repeated and optional arguments:       Optional Arguments.
* Reporting bugs:                        Reporting Bugs.
* Required in Texinfo file:              Minimum.
* Requirements for formatting:           Requirements Summary.
* Requirements for include files:        Include File Requirements.
* Requirements for updating commands:    Updating Requirements.
* Reserved words, indicating:            code.
* Restrictions on node names:            Node Line Requirements.
* Result of an expression:               result.
* ridt.eps:                              Images.
* Ring accent:                           Inserting Accents.
* Rounded rectangles, around examples:   cartouche.
* Rows, of a multitable:                 Multitable Rows.
* Running an Info formatter:             Info Formatting.
* Running Info-validate:                 Using Info-validate.
* Running macros:                        Invoking Macros.
* Running makeinfo in Emacs:             makeinfo in Emacs.
* Sample @include file:                  Sample Include File.
* Sample function definition:            Sample Function Definition.
* Sample Texinfo file, no comments:      Short Sample Texinfo File.
* Sample Texinfo file, with comments:    Short Sample.
* Sample Texinfo files:                  Sample Texinfo Files.
* Sample texts, GNU:                     GNU Sample Texts.
* Scaled points:                         Images.
* Schwab, Andreas:                       History.
* Scribe:                                History.
* Sea surges:                            ref.
* Section structure of a file, showing it: Showing the Structure.
* Sections, raising and lowering:        Raise/lower sections.
* Sentence ending punctuation:           Ending a Sentence.
* Sentence non-ending punctuation:       Not Ending a Sentence.
* Separate footnote style:               Footnote Styles.
* SGML-tools output format:              Using Texinfo.
* Sharp S:                               Inserting Accents.
* Shell formatting with tex and texindex: Format with tex/texindex.
* Shell printing, on MS-DOS/MS-Windows:  Print with lpr.
* Shell, format, print from:             Within Emacs.
* Shell, running makeinfo in:            makeinfo in Emacs.
* Short nodes for menus:                 Menu Location.
* Short table of contents:               Contents.
* Showing the section structure of a file: Showing the Structure.
* Showing the structure of a file:       Using texinfo-show-structure.
* shrubbery:                             ifset ifclear.
* Site-wide Texinfo configuration file:  Preparing for TeX.
* Size of printed book:                  smallbook.
* slanted typewriter font, for @kbd:     kbd.
* Small book size:                       smallbook.
* Small caps font:                       Smallcaps.
* Small examples:                        small.
* Software copying permissions:          Software Copying Permissions.
* Sorting indices:                       Hardcopy.
* Source file:                           Using Texinfo.
* Space, inserting horizontal:           Multiple Spaces.
* Space, inserting vertical:             sp.
* Spaces in macros:                      Defining Macros.
* Spaces, in menus:                      Writing a Menu.
* Spacing, inserting:                    Inserting Space.
* Special characters, commands to insert: Braces Atsigns.
* Special insertions:                    Insertions.
* Special typesetting commands:          Dots Bullets.
* Specifying index entries:              Indexing Commands.
* Splitting an Info file manually:       Splitting.
* Splitting of output files:             makeinfo options.
* ss:                                    Inserting Accents.
* Stallman, Richard M.:                  History.
* Start of header line:                  Start of Header.
* Starting chapters:                     setchapternewpage.
* Structure of a file, showing it:       Showing the Structure.
* Structure, catching mistakes in:       Catching Mistakes.
* Structuring of chapters:               Structuring.
* Subsection-like commands:              unnumberedsubsec appendixsubsec subheading.
* Subsub commands:                       subsubsection.
* Suggestions for Texinfo, making:       Reporting Bugs.
* Summary of document:                   documentdescription.
* Syntactic conventions:                 Conventions.
* Syntactic tokens, indicating:          code.
* Syntax, of @-commands:                 Command Syntax.
* Syntax, optional & repeated arguments: Optional Arguments.
* Table of contents, after title page:   Contents.
* Tables and lists, making:              Lists and Tables.
* Tables with indexes:                   ftable vtable.
* Tables, making multi-column:           Multi-column Tables.
* Tables, making two-column:             Two-column Tables.
* Tabs; don't use!:                      Conventions.
* Tag table, making automatically:       Tag and Split Files.
* Tag table, making manually:            Unsplit.
* Targets for cross-references, arbitrary: anchor.
* Template for a definition:             Def Cmd Template.
* TeX commands, using ordinary:          Raw Formatter Commands.
* TeX index sorting:                     Hardcopy.
* TeX input initialization:              Preparing for TeX.
* TeX, how to obtain:                    Obtaining TeX.
* texi2dvi:                              Format with tex/texindex.
* texi2dvi (shell script):               Format with texi2dvi.
* texi2roff, unsupported software:       Printed Books.
* texindex <1>:                          Hardcopy.
* texindex:                              Format with tex/texindex.
* Texinfo commands, defining new:        Defining New Texinfo Commands.
* Texinfo file beginning:                Beginning a File.
* Texinfo file ending:                   Ending a File.
* Texinfo file header:                   Texinfo File Header.
* Texinfo file minimum:                  Minimum.
* Texinfo file section structure, showing it: Showing the Structure.
* Texinfo history:                       History.
* Texinfo mode:                          Texinfo Mode.
* Texinfo overview:                      Overview.
* Texinfo printed book characteristics:  Printed Books.
* Texinfo requires @setfilename:         setfilename.
* Texinfo, introduction to:              Using Texinfo.
* texinfo.cnf:                           setfilename.
* texinfo.cnf installation:              Preparing for TeX.
* texinfo.tex, installing:               Preparing for TeX.
* TEXINPUTS:                             Preparing for TeX.
* TEXINPUTS environment variable:        Preparing for TeX.
* Text width and height:                 pagesizes.
* Text, conditionally visible:           Conditionals.
* Text, marking up:                      Marking Text.
* Thin space between number, dimension:  dmn.
* Tie-after accent:                      Inserting Accents.
* Tied space:                            w.
* Tilde accent:                          Inserting Accents.
* Tips:                                  Tips.
* Title page:                            titlepage.
* Title page, bastard:                   titlepage.
* Title page, for plain text:            Titlepage & Copyright Page.
* Titlepage end starts headings:         end titlepage.
* Top node:                              The Top Node.
* Top node example:                      Top Node Example.
* Top node is first:                     First Node.
* Top node naming for references:        Top Node Naming.
* Tree structuring:                      Tree Structuring.
* Two letter names for indices:          syncodeindex.
* Two named items for @table:            itemx.
* Two or More `First' Lines:             deffnx.
* Two part menu entry:                   Less Cluttered Menu Entry.
* txi-CC.tex:                            documentlanguage.
* Typesetting commands for dots, etc.:   Dots Bullets.
* Ugly black rectangles in hardcopy:     Overfull hboxes.
* Umlaut accent:                         Inserting Accents.
* Unbreakable space:                     w.
* Uncluttered menu entry:                Less Cluttered Menu Entry.
* Undefining macros:                     Defining Macros.
* Underbar accent:                       Inserting Accents.
* Underdot accent:                       Inserting Accents.
* Uniform resource locator, indicating:  url.
* Uniform resource locator, referring to: uref.
* Unique nodename requirement:           Node Line Requirements.
* Unprocessed text:                      Comments.
* Unsplit file creation:                 Unsplit.
* Up node of Top node:                   First Node.
* Updating nodes and menus:              Updating Nodes and Menus.
* Updating Requirements:                 Updating Requirements.
* URI syntax for Info:                   Info Files.
* URL, indicating:                       url.
* URL, referring to:                     uref.
* Usage tips:                            Tips.
* user input:                            kbd.
* User options, marking:                 Variables Commands.
* User-defined Texinfo commands:         Defining New Texinfo Commands.
* Using Texinfo in general:              Using Texinfo.
* Validating a large file:               Using Info-validate.
* Validation of pointers:                Pointer Validation.
* Value of an expression, indicating:    result.
* Verbatim environment:                  verbatim.
* Verbatim in-line text:                 verb.
* Verbatim, include file:                verbatiminclude.
* version number, finding:               Invoking install-info.
* Vertically holding text together:      group.
* Visibility of conditional text:        Conditionals.
* Weinberg, Zack:                        History.
* Weisshaus, Melissa:                    History.
* White space, excessive:                Breaks.
* Whitespace in macros:                  Defining Macros.
* Whitespace, inserting:                 Multiple Spaces.
* Width of images:                       Images.
* Width of text area:                    pagesizes.
* Widths, defining multitable column:    Multitable Column Widths.
* Wildcards:                             Format with tex/texindex.
* Words and phrases, marking them:       Marking Text.
* Writing a menu:                        Writing a Menu.
* Writing an @node line:                 Writing a Node.
* Writing index entries:                 Indexing Commands.
* XPM image format:                      Images.
* Years, in copyright line:              copying.
* Zaretskii, Eli:                        History.
* Zuhn, David D.:                        History.



Tag table:
Node: Top1411
Node: Copying Conditions24419
Node: Overview25566
Node: Overview-Footnotes26672
Node: Reporting Bugs26972
Node: Using Texinfo27850
Node: Info Files30389
Node: Info Files-Footnotes32685
Node: Printed Books32849
Node: Printed Books-Footnotes34502
Node: Formatting Commands34791
Node: Formatting Commands-Footnotes36436
Node: Conventions36833
Node: Conventions-Footnotes38426
Node: Comments38529
Node: Minimum39431
Node: Six Parts40973
Node: Short Sample41981
Node: Short Sample-Footnotes44992
Node: History45105
Node: Texinfo Mode46375
Node: Texinfo Mode Overview47449
Node: Emacs Editing47948
Node: Inserting49127
Node: Showing the Structure51703
Node: Updating Nodes and Menus53145
Node: Updating Commands53964
Node: Updating Requirements57550
Node: Other Updating Commands59071
Node: Info Formatting61056
Node: Printing61986
Node: Texinfo Mode Summary63549
Node: Beginning a File66988
Node: Sample Beginning67827
Node: Texinfo File Header69346
Node: First Line70480
Node: Start of Header71161
Node: setfilename71868
Node: settitle73292
Node: End of Header74560
Node: Document Permissions74781
Node: copying75253
Node: insertcopying76659
Node: Titlepage & Copyright Page77558
Node: titlepage78861
Node: titlepage-Footnotes80273
Node: titlefont center sp80490
Node: title subtitle author81473
Node: Copyright83146
Node: end titlepage84125
Node: headings on off85068
Node: The Top Node86367
Node: Top Node Example87180
Node: Master Menu Parts87543
Node: Global Document Commands88774
Node: documentdescription89331
Node: setchapternewpage89949
Node: paragraphindent91530
Node: exampleindent92323
Node: Software Copying Permissions92998
Node: Ending a File93640
Node: Printing Indices & Menus94309
Node: Contents95668
Node: File End97550
Node: Structuring97994
Node: Tree Structuring99123
Node: Structuring Command Types100277
Node: makeinfo top101806
Node: chapter102327
Node: unnumbered & appendix102954
Node: majorheading & chapheading103478
Node: section104013
Node: unnumberedsec appendixsec heading104585
Node: subsection105282
Node: unnumberedsubsec appendixsubsec subheading105750
Node: subsubsection106369
Node: Raise/lower sections107434
Node: Nodes108875
Node: Two Paths109649
Node: Node Menu Illustration110304
Node: node113000
Node: Node Names114684
Node: Writing a Node115403
Node: Node Line Tips116548
Node: Node Line Requirements117004
Node: First Node118404
Node: makeinfo top command119462
Node: makeinfo Pointer Creation120253
Node: anchor121085
Node: Menus121982
Node: Menus-Footnotes122830
Node: Menu Location123047
Node: Writing a Menu124084
Node: Menu Parts124805
Node: Less Cluttered Menu Entry125441
Node: Menu Example125868
Node: Other Info Files127157
Node: Cross References128504
Node: References129353
Node: Cross Reference Commands130326
Node: Cross Reference Commands-Footnotes131031
Node: Cross Reference Parts131229
Node: xref132945
Node: Reference Syntax133543
Node: Reference Syntax-Footnotes134602
Node: One Argument134749
Node: Two Arguments135481
Node: Three Arguments136290
Node: Four and Five Arguments137904
Node: Top Node Naming139674
Node: ref140385
Node: ref-Footnotes141395
Node: pxref141498
Node: inforef142962
Node: uref143973
Node: Marking Text145525
Node: Indicating145977
Node: Useful Highlighting147584
Node: code148627
Node: kbd150437
Node: key151651
Node: samp152552
Node: verb153513
Node: var154156
Node: env155431
Node: file155828
Node: command156300
Node: option156803
Node: dfn157227
Node: cite157749
Node: acronym158053
Node: url158406
Node: email158925
Node: Emphasis159541
Node: emph & strong160116
Node: Smallcaps160869
Node: Fonts161851
Node: Quotations and Examples162558
Node: Block Enclosing Commands163768
Node: quotation165153
Node: example165824
Node: verbatim166971
Node: verbatiminclude168327
Node: lisp168728
Node: lisp-Footnotes169214
Node: small169334
Node: display170266
Node: format170800
Node: exdent171237
Node: flushleft & flushright171946
Node: noindent172875
Node: cartouche173801
Node: Lists and Tables174280
Node: Introducing Lists174837
Node: itemize175730
Node: enumerate177190
Node: Two-column Tables178678
Node: table179212
Node: ftable vtable180583
Node: itemx181167
Node: Multi-column Tables181765
Node: Multitable Column Widths182230
Node: Multitable Rows183146
Node: Indices184698
Node: Indices-Footnotes185506
Node: Index Entries185603
Node: Predefined Indices186208
Node: Indexing Commands186907
Node: Combining Indices189014
Node: syncodeindex189820
Node: synindex190763
Node: New Indices191096
Node: Insertions192322
Node: Braces Atsigns193437
Node: Inserting An Atsign193829
Node: Inserting Braces194043
Node: Inserting Space194284
Node: Not Ending a Sentence194710
Node: Ending a Sentence195465
Node: Multiple Spaces196167
Node: dmn196937
Node: Inserting Accents197703
Node: Dots Bullets199099
Node: dots199606
Node: bullet199948
Node: TeX and copyright200230
Node: tex200604
Node: copyright symbol200881
Node: pounds201104
Node: minus201366
Node: math201945
Node: Glyphs202749
Node: Glyphs Summary203560
Node: result204027
Node: expansion204379
Node: Print Glyph205058
Node: Error Glyph205653
Node: Equivalence206303
Node: Point Glyph206810
Node: Footnotes207960
Node: Footnotes-Footnotes208282
Node: Footnote Commands208501
Node: Footnote Commands-Footnotes209441
Node: Footnote Styles209545
Node: Images211137
Node: Breaks212951
Node: Break Commands214002
Node: Line Breaks214579
Node: - and hyphenation215179
Node: w216046
Node: sp216489
Node: page216759
Node: group217030
Node: need218028
Node: Definition Commands218454
Node: Def Cmd Template219454
Node: Optional Arguments221414
Node: deffnx222336
Node: Def Cmds in Detail223030
Node: Functions Commands223856
Node: Variables Commands225813
Node: Typed Functions227223
Node: Typed Variables229534
Node: Abstract Objects230910
Node: Data Types234608
Node: Def Cmd Conventions235426
Node: Sample Function Definition235754
Node: Conditionals237829
Node: Conditional Commands238720
Node: Conditional Not Commands239730
Node: Raw Formatter Commands240542
Node: set clear value241640
Node: set value242537
Node: ifset ifclear243671
Node: value Example245018
Node: Internationalization246670
Node: documentlanguage247075
Node: documentencoding250835
Node: Defining New Texinfo Commands251300
Node: Defining Macros252201
Node: Invoking Macros253511
Node: Macro Details254733
Node: alias255735
Node: definfoenclose256411
Node: Hardcopy258103
Node: Use TeX259792
Node: Format with tex/texindex260229
Node: Format with texi2dvi262884
Node: Print with lpr263897
Node: Within Emacs265386
Node: Texinfo Mode Printing266002
Node: Compile-Command268803
Node: Requirements Summary269429
Node: Preparing for TeX270344
Node: Preparing for TeX-Footnotes272647
Node: Overfull hboxes272795
Node: smallbook274011
Node: A4 Paper274731
Node: pagesizes275402
Node: Cropmarks and Magnification276208
Node: PDF Output277359
Node: Creating and Installing Info Files278249
Node: Creating an Info File278554
Node: makeinfo advantages279736
Node: Invoking makeinfo280360
Node: makeinfo options280862
Node: Pointer Validation285591
Node: makeinfo in Emacs287514
Node: texinfo-format commands289353
Node: Batch Formatting290234
Node: Tag and Split Files291132
Node: makeinfo html293270
Node: Installing an Info File294746
Node: Directory File295504
Node: New Info File296778
Node: New Info File-Footnotes297492
Node: Other Info Directories297626
Node: Other Info Directories-Footnotes300498
Node: Installing Dir Entries300704
Node: Invoking install-info302360
Node: Command List304183
Node: Tips333605
Node: Tips-Footnotes340579
Node: Sample Texinfo Files340669
Node: Short Sample Texinfo File340970
Node: GNU Sample Texts342502
Node: Include Files346738
Node: Using Include Files347634
Node: texinfo-multiple-files-update348815
Node: Include File Requirements350360
Node: Sample Include File351180
Node: Include Files Evolution352519
Node: Headings353669
Node: Headings Introduced354197
Node: Heading Format355105
Node: Heading Format-Footnotes356634
Node: Heading Choice356748
Node: Custom Headings357596
Node: Catching Mistakes360067
Node: makeinfo Preferred360972
Node: Debugging with Info361568
Node: Debugging with TeX363764
Node: Using texinfo-show-structure366571
Node: Using occur368720
Node: Running Info-Validate369643
Node: Using Info-validate370454
Node: Unsplit371694
Node: Tagifying372403
Node: Splitting373010
Node: Refilling Paragraphs373907
Node: Refilling Paragraphs-Footnotes374859
Node: Command Syntax375041
Node: Obtaining TeX376569
Node: Copying This Manual377402
Node: GNU Free Documentation License377649
Node: Command and Variable Index397516
Node: Concept Index415651

End tag table
