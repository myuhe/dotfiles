Info file: textutils-ja.info,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `textutils-ja.texi'
using `texinfmt.el' version 2.38 of 3 July 1998.






START-INFO-DIR-ENTRY
* Text utilities(ja): (textutils-ja).           GNU text utilities.
* cat(ja): (textutils-ja)cat invocation.        Concatenate and write files.
* cksum(ja): (textutils-ja)cksum invocation.    Print POSIX CRC checksum.
* comm(ja): (textutils-ja)comm invocation.      Compare sorted files by line.
* csplit(ja): (textutils-ja)csplit invocation.  Split by context.
* cut(ja): (textutils-ja)cut invocation.        Print selected parts of lines.
* expand(ja): (textutils-ja)expand invocation.  Convert tabs to spaces.
* fmt(ja): (textutils-ja)fmt invocation.        Reformat paragraph text.
* fold(ja): (textutils-ja)fold invocation.      Wrap long input lines.
* head(ja): (textutils-ja)head invocation.      Output the first part of files.
* join(ja): (textutils-ja)join invocation.      Join lines on a common field.
* md5sum(ja): (textutils-ja)md5sum invocation.  Print or check message-digests.
* nl(ja): (textutils-ja)nl invocation.          Number lines and write files.
* od(ja): (textutils-ja)od invocation.          Dump files in octal, etc.
* paste(ja): (textutils-ja)paste invocation.    Merge lines of files.
* pr(ja): (textutils-ja)pr invocation.          Paginate or columnate files.
* ptx(ja): (textutils-ja)ptx invocation.        Produce permuted indexes.
* sort(ja): (textutils-ja)sort invocation.      Sort text files.
* split(ja): (textutils-ja)split invocation.    Split into fixed-size pieces.
* sum(ja): (textutils-ja)sum invocation.        Print traditional checksum.
* tac(ja): (textutils-ja)tac invocation.        Reverse files.
* tail(ja): (textutils-ja)tail invocation.      Output the last part of files.
* tsort(ja): (textutils-ja)tsort invocation.    Topological sort.
* tr(ja): (textutils-ja)tr invocation.          Translate characters.
* unexpand(ja): (textutils-ja)unexpand invocation.  Convert spaces to tabs.
* uniq(ja): (textutils-ja)uniq invocation.      Uniquify files.
* wc(ja): (textutils-ja)wc invocation.          Byte, word, and line counts.
END-INFO-DIR-ENTRY

This file documents the GNU text utilities.

Copyright (C) 1994, 95, 96 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.





File: textutils-ja.info, Node: ptx invocation, Prev: tsort invocation, Up: Operating on sorted files

`ptx': 並べ替えた索引の生成
===========================


`ptx'は，テキストファイルを読み込み，その内容のそれぞれのキーワードを
用いて，並べ替えられた索引を本来は生成します．呼び出しの形態は以下の1 
つです．

     ptx [OPTION ...] [FILE ...]
     ptx -G [OPTION ...] [INPUT [OUTPUT]]

`-G'(または同等の: `--traditional')オプションは，全てのGNU拡張を利用不
可にし，伝統的なモードに切替え，そのため，いくつかの制限と，プログラム
のオプションデフォルト値を変更します．`-G'が指定されていない場合，GNU
拡張は常に利用可能です．`ptx'のGNU拡張は，このドキュメントに適切に文章
化されています．完全なリストは，*Note Compatibility in ptx::.

個別のオプションは，以下のセクションで説明されます．

GNU拡張が利用可能なとき，ゼロ，1つまたは複数のFILEが，オプションの後に
あります．FILEが無い場合，プログラムは標準入力から読み込みます．1つま
たは複数FILEある場合，全ての入力ファイルが連結されているかのように，そ
の回で全て読み込まれる入力ファイル名を与えます．しかし，それぞれのファ
イルの間に完全に文脈の終りが有り，自動的な参照が要求されるとき，ファイ
ル名と行番号は，入力ファイルの個別のテキストを参照します．全ての場合で，
プログラムは並べ替えられた索引を標準出力に書き出します．

GNU拡張が利用可能で*ない*とき，すなわち，伝統的なモードでプログラムが
動作しているとき，ゼロ，1つまたは2つのパラメータがオプションの後にあり
ます．パラメータが無い場合，プログラムは標準入力を読み込み，標準出力に
並べ替えた索引を生成します．1つのパラメータのみの場合，それは標準入力
の代わりに読み込まれるテキストINPUTを指名します．2つのパラメータが与え
られた場合，それらはそれぞれ，読み込まれるINPUTファイル名と，生成する
OUTPUTファイル名を与えます．この場合，2番目のパラメータとして与えられ
るファイルの内容が壊れることに*十分注意して*ください．この動作は，出力
パラメータを妨げるGNU標準がオプションで導入されたのではないので，
System V `ptx'互換のみにより規定されています．

*あらゆる*ファイルは，オプション値や入力テキストファイルとして指名され，
単一のダッシュ`-'は使用でき，その場合標準入力と考えられます．しかし，
プログラムの呼び出しに1回以上，この慣習を使用する意味はありません．

* Menu:

* General options in ptx::      Options which affect general program behaviour.
* Charset selection in ptx::    Underlying character set considerations.
* Input processing in ptx::     Input fields, contexts, and keyword selection.
* Output formatting in ptx::    Types of output format, and sizing the fields.
* Compatibility in ptx::




File: textutils-ja.info, Node: General options in ptx, Next: Charset selection in ptx, Prev: ptx invocation, Up: ptx invocation

一般的なオプション
------------------


`-C'
`--copyright'
     著作権とコピー条件の短いメモを出力し，それ以上何も処理せず終了し
     ます．

`-G'
`--traditional'
     既に拡張されているので，このオプションは，`ptx'に対する全てのGNU
     拡張を利用不可にし，伝統的なモードに切替えます．

`--help'
     短いヘルプを標準出力に出力し，それ以上何も処理せず終了します．

`--version'
     プログラムのバージョンを標準出力に出力し，それ以上何も処理せずに
     終了します．




File: textutils-ja.info, Node: Charset selection in ptx, Next: Input processing in ptx, Prev: General options in ptx, Up: ptx invocation

文字セットの選択
----------------

現在セットアップされているので，プログラムは，入力ファイルが8ビットISO
8859-1コードを使用して符号化されていると考え，Latin-1文字セットだとい
うことも分かりますが，それは，MS-DOSでコンパイル*されていない場合*で，
その場合はIBM-PCの文字セットを使用します．(GNU `ptx'は，より小さい
MS-DOSマシンで働く方法を知りません．) 7-bit ASCIIに比べて，文字である
文字セットは異なっていて，この事実は正規表現の一致の動作を変更します．
そのため，キーワードに対するデフォルトの正規表現で，外国や発音記号の文
字が可能となります．しかし，キーワードのソートはそのままです．それは，
全く盲目的に基礎的な文字セットの順序に従います．


`-f'
`--ignore-case'
     ソートに対し，小文字を大文字にまとめます．




File: textutils-ja.info, Node: Input processing in ptx, Next: Output formatting in ptx, Prev: Charset selection in ptx, Up: ptx invocation

単語の選択と入力の処理
----------------------


`-b FILE'
`--break-file=FILE'

     このオプションは，単語を生成する文字の記述方法(`-W')の代替物を提
     供します．それは，単語の部分にならない文字のリストを含むファイル
     名を導入し，このファイルは"ブレークファイル"と呼ばれます．ブレー
     クファイルの一部でないあらゆる文字は単語の要素です．`-b'と`-W'を
     両方指定した場合，`-W'が優先され`-b'は無視されます．

     GNU拡張が利用可能な場合，改行をブレーク文字とすることを避ける唯一
     の方法で，ファイルの終りにさえ改行が全く無いファイルに，全てのブ
     レーク文字を書くことでできます．GNU拡張が利用不可能な場合，スペー
     ス，タブ，改行は，ブレークファイルの含まれている場合でさえ，常に
     ブレーク文字と考えます．

`-i FILE'
`--ignore-file=FILE'

     このオプションで関連付けられたファイルは，用語索引の出力でキーワー
     ドとされない単語のリストを含みます．それは"無視ファイル"と呼ばれ
     ます．ファイルは，正確にそれぞれの行に1単語を含みます．単語を分け
     る行の終りは，`-S'オプションの値を適用されません．

     このオプションが指定されない場合，デフォルトの無視ファイルは`ptx'
     が使用され，インストール時に変更されていない場合，通常は
     `/usr/local/lib/eign'で見つかります．デフォルトの無視ファイルの影
     響を無くしたい場合，代わりに`/dev/null'を指定してください．

`-o FILE'
`--only-file=FILE'

     このオプションで関連付けられたファイルは，用語索引の出力に維持さ
     れる単語のリストを含み，このファイルで述べれいないあらゆる単語は
     無視されます．ファイルは"オンリーファイル"と呼ばれています．ファ
     イルは，正確にそれぞれの行に1単語を含みます．単語を分ける行の終り
     は，`-S'オプションの値を適用されません．

     オンリーファイルにデフォルトはありません．オンリーファイルと無視
     ファイルの両方にある場合，オンリーファイルで与えられ，無視ファイ
     ルで与えられない単語のみキーワードに適用されます．

`-r'
`--references'

     それぞれの入力行で，空白文字でない前置された並びは，生成され並べ
     替えされた索引の，この入力行を識別する目的を持つ参照として受け入
     れます．参照生成に関するより多くの情報は，*Note Output formatting
     in ptx::.  このオプションの使用で，オプション`-S'に対するデフォル
     ト値を変更します．

     このオプションの使用で，プログラムは出力の文脈からの参照の削除の
     試みが非常に難しくなりますが，文脈の終りが正確に改行で終る*とき*，
     そうすることに成功します．オプション`-r'が`-S'デフォルト値ととも
     に使用された場合や，GNU拡張が利用不可能なとき，この条件は常に満た
     され，参照は完全に出力文脈から除外されます．

`-S REGEXP'
`--sentence-regexp=REGEXP'

     このオプションは，行末や文の終りを記述する正規表現を選択します．
     実際，この正規表現の効果以外に，行末や文の終わりのには他の区別が
     あり，入力行の境界は，このオプションの外で特別な重要性はありませ
     ん．デフォルトで，GNU拡張が使用可能なときや，`-r'オプションが使用
     されていない場合，文の終りが使用されます．この場合，正確なREGEXは
     GNU emacsから取り込まれます．

          [.?!][]\"')}]*\\($\\|\t\\|  \\)[ \t\n]*

     GNU拡張が使用不可能なときや，`-r'オプションが使用されている場合は，
     常に行の終りが使用され，この場合デフォルトのREGEXPは以下のように
     なります．

          \n

     空のREGEXPの使用は，行末と文の終りの認識を完全に不可能にすること
     と同等です．この場合，ファイル全体が単一の大きな行や文と考えられ
     ます．ユーザは，オプション`-F ""'を通じて，全ての切り詰めフラグの
     生成を，不許可にしたい場合もあります．*Note Syntax of Regular
     Expressions: (emacs)Regexps.

     キーワードが入力行や文の最初で発生したとき，出力文脈の行の最初に
     利用されない領域を作成することが良くあります．キーワードが入力行
     や文の終り近くで発生したとき，出力文脈の行の終りに利用されない領
     域を作成することが良くあります．プログラムは，その中の文脈の周り
     を包むことで，それらの領域を補充しようとします．入力行や文の頭は，
     出力行の右の利用されていない行を補充するために使用されます．

     ユーザの利便性の問題として，C言語で見つかる，多くの通常のバックス
     ラッシュされたエスケープ・シーケンスは認識され，`ptx'自身によって
     対応する文字に変換されます．

`-W REGEXP'
`--word-regexp=REGEXP'

     このオプションは，それぞれのキーワードを記述している正規表現を選
     択します．デフォルトで，GNU拡張が利用可能な場合，単語は文字の並び
     です．使用されるREGEXPは`\w+'です．GNU拡張が利用不可能な場合，単
     語はデフォルトで，スペース，タブ，または改行で終るあらゆるもので
     す．使用されるREGEXPは`[^ \t\n]+'です．

     空のREGEXPは，このオプションを使用しないのと同等で，デフォルト動
     作になります．*Note Syntax of Regular Expressions:
     (emacs)Regexps.

     ユーザの利便性の問題として，C言語で見つかる，多くの通常のバックス
     ラッシュされたエスケープ・シーケンスは認識され，`ptx'自身によって
     対応する文字に変換されます．





File: textutils-ja.info, Node: Output formatting in ptx, Next: Compatibility in ptx, Prev: Input processing in ptx, Up: ptx invocation

出力の書式
----------

出力書式は，主に`-O'と`-T'オプションで制御され，それは以下の表で記述さ
れています．`-O'も`-T'も選択されていないときで，GNU拡張が利用可能な場
合，プログラムは dumb 端末に適した出力書式を選択します．それぞれのキー
ワードの発生は，出力を行の中心にし，周りをその左右の文脈で囲います．そ
れぞれのフィールドは適切に正当化されるので，用語索引の出力は容易に観察
できます．特別な特徴として，自動的な参照がオプション`-A' で指定されて
いて，左の文脈の前に出力されている，すなわち，オプション`-R'が選択され
て*いない*場合，コロンが参照の後に追加されます．これは，GNU Emacsが
`next-error'を処理することでうまく作用します．このデフォルト出力書式で
は，改行やタブのようなそれぞれの空白文字は，正確に1つのスペースに単に
変換され，連続したスペースの圧縮は特に試みません．これは将来変更される
かも知れません．これらの空白文字以外の，256文字の基本セットの全ての他
の文字は逐語的に転送されます．

出力書式は，以下のオプションで更に制御されます．


`-g NUMBER'
`--gap-size=NUMBER'

     出力行のフィールド間の最小の空白の隙間を選択します．

`-w NUMBER'
`--width=NUMBER'

     それぞれの最終行の出力最大幅を選択します．参照が使用される場合，
     `-R'オプションの値に依存して，それらは出力最大幅に含められたり省
     かれたりします．これらのオプションが選択されていない場合，すなわ
     ち，参照が左の文脈の前に出力されるとき，出力最大幅は全ての参照の
     最大長まで考慮に入れられます．このオプションが選択された場合，す
     なわち，参照が右の文脈の後に出力されるとき，出力最大幅は参照が使
     用するスペースの量も，前にある隙間も考慮に入れられません．

`-A'
`--auto-reference'

     自動的な参照を選択します．それぞれの入力行は，ファイル名と間に単
     一のコロンを用いた行の序数で作成された自動的な参照を持ちます．し
     かし，標準入力が読み込まれているときは，ファイル名は空です．`-A'
     と`-r'の両方が選択された場合，入力参照は読み込まれスキップされま
     すが，自動的な参照は出力時に利用され，それは入力参照に優先します．

`-R'
`--right-side-refs'

     デフォルト出力書式で，オプション`-R'が使用されていないとき，オプ
     ション`-r'や`-A'の影響で生成されるあらゆる参照は，右の文脈の後に，
     出力行の右端に与えられます．デフォルト出力書式で，オプション`-R'
     が指定された場合，参照は，左の文脈の前に，それぞれの出力行の始め
     に代わりに与えられます．それ以外のあらゆる出力書式に対し，`-R'が
     選択されたときは常に，参照の幅が`-w'で与えられた全体の出力幅に含
     まれ*ない* という事実以外，オプション`-R'はほとんど無視されます．

     GNU拡張が利用不可能なときは，常にこのオプションは自動的に選択され
     ます．

`-F STRING'
`--flac-truncation=STRING'

     このオプションは，文字列STRINGの使用が報告された出力での，あらゆ
     る切り詰めを要求します．ほとんどの出力フィールドは，オプション
     `-S'が選択されたのと同様に，現在の行や現在の文の始めや終りに向かっ
     て，理論的に展開されます．しかし，許可される出力行幅の最大値は存
     在し，オプション`-w'で変更でき，それは様々な出力フィールドに対し
     スペースで更に分割されます．現在の行に適するよう，その行の最初や
     終りまで拡張することができないため，フィールドが切り詰める必要が
     あるとき，切り詰めが発生します．デフォルトで，使用される文字列は
     単一のスラッシュで，`-F /'のようになります．

     STRINGは1文字以上が可能で，`-F ...'のようになります．また，STRING
     が空(`-F ""')となる特定の場合，切り詰めフラグは利用不可能で，切り
     詰めマークはこの場合現われません．

     ユーザの利便性の問題として，多くの通常の，C言語で見つかる，バック
     スペースされたエスケープ・シーケンスは認識され，`ptx'自身によって，
     対応する文字に変換されます．

`-M STRING'
`--macro-name=STRING'

     `nroff'，`troff'やTeXに適した出力を生成している間，`xx'の代わりに，
     使用する他のSTRINGを選択します．

`-O'
`--format=roff'

     `nroff'や`troff'の処理に適した出力書式を選択します．それぞれの出
     力行は以下のようになります．

          .xx "TAIL" "BEFORE" "KEYWORD_AND_AFTER" "HEAD" "REF"

     それで，出力の植字を処理するための，`.xx' roffマクロを書くことが
     可能になります．GNU拡張が利用不可能な場合，これはデフォルト出力で
     す．オプション`-M'は，`xx'を他のマクロ名に変更するために利用可能
     です．

     この出力形式で，改行やタブのようなそれぞれの表示不可能な文字は，
     連続したスペースを圧縮するという特別な試みを行わず，正確に1つのス
     ペースに単に変換されます．それぞれの引用文字：`"'は2重になるので，
     `nroff'や`troff'で正しく処理されます．

`-T'
`--format=tex'

     TeXでの処理に適した出力書式を選択します．それぞれの出力行は以下の
     ようになります．

          \xx {TAIL}{BEFORE}{KEYWORD}{AFTER}{HEAD}{REF}

     それで，出力の植字の処理するための`\xx'定義を書くことが可能になり
     ます．参照が生成されないとき，すなはち，オプション`-A'もオプショ
     ン`-r'も選択されていないとき，それぞれの`\xx'の最後のパラメータが
     抑制されることに注意してください．オプション`-M'は，`xx'を他のマ
     クロ名に変更するために利用可能です．

     この出力書式では，`$'，`%'，`&'，`#'そして`_'のような，いくつかの
     特殊文字は，自動的にバックスラッシュで保護されます．弓カッコの`{'，
     `}'もバックスラッシュで保護されますが，数学モードを強制するドル記
     号の組でも囲まれます．バックスラッシュ自身は`\backslash{}'の並び
     を生成します．曲折アクセント記号とティルデ分音記号は，`^\{ }'と
     `~\{ }'の並びをそれぞれ生成します．その他の基礎となる文字セットの
     分音文字は，適切なTeXの並びを可能な限り生成します．改行とタブのよ
     うなその他の表示不可能な文字と，ASCIIではない全ての他の文字は，連
     続したスペースを圧縮するという特別な試みを行わず，1 つのスペース
     に単に変換されます．これらの特殊文字をTeXで処理する改善方法を知ら
     せてください．





File: textutils-ja.info, Node: Compatibility in ptx, Prev: Output formatting in ptx, Up: ptx invocation

`ptx'のGNU拡張
--------------

この`ptx'のバージョンには，System V `ptx'には存在しないいくつかの特徴
があります．これらの拡張された特徴は，他のコマンドラインオプションで優
先されない場合，`-G'コマンドラインオプションを使用して抑制されます．
GNU拡張には，優先で元に戻すことができないものがあり，そのため，GNU拡張
を気にする場合，簡単な規則で`-G'を避けるはずです．ここに，このプログラ
ムとSystem V `ptx'の間の違いがあります．


   * このプログラムは，一度に多くの入力ファイルを読むことが可能で，そ
     れは常に，用語索引の結果を標準出力に書き出します．一方，System V
     `ptx'は，1つのみファイルを読み込み，結果を標準出力に書き出すか，2
     番目のFILEパラメータがコマンドで与えられている場合は，そのFILEに
     書き出します．

     オプションで導入されない出力パラメータがあるということは，GNUがで
     きる限り避ける全く危険な操作です．そのため，GNUとSystem Vの間の移
     植性のある`ptx'を使用するため，単一の入力ファイルで常に使用するこ
     とに注意を払い，常に標準出力で結果を期待するべきです．配置するも
     のが`-G'を受け入れる`ptx'がインストールされていることが分かった場
     合，`ptx'を使用した製品での`ptx'の呼び出しで，`-G'オプションを自
     動的に配置したいと思うかもしれません．

   * System V `ptx'でのみ利用可能なオプションは，`-b'，`-f'，`-g'，
     `-i'，`-o'，`-r'，`-t'と`-w'です．全ての他のオプションはGNU拡張で，
     この列挙では繰り返しません．さらに，GNU拡張が利用可能なとき，わず
     かに意味が異なるオプションもあり，以下で記述します．

   * デフォルトで，用語索引出力は`troff'や`nroff'に対して書式化されま
     せん．それはむしろ，dumb端末に対する出力です．`troff'や`nroff'の
     出力は，オプション`-O'を通じて選択可能です．

   * `-R'オプションが選択されない場合，最大の参照幅は出力行幅全体から
     引いたものになります．GNU拡張が利用不可能な場合，参照の幅は出力行
     の幅の計算で考慮されません．

   * `NUL'を含む256文字全ては，たとえGNU拡張が利用不可能な場合でも，常
     に入力ファイルから読み込まれ，不利な効果もなく処理されます．しか
     し，System V `ptx'は8ビット文字を受け入れず，いくつかの制御文字は
     削除され，チルダ`~'は処分されます．

   * 入力行の長さは，GNU拡張が利用できない場合でさえ，利用可能なメモリ
     でのみ制限されます．しかしSystem V `ptx'は，それぞれの行の最初の
     200文字のみ処理します．

   * ブレーク(noord)文字は，全ての基礎となる文字セット以外，分音記号の
     有無によらず，全ての文字をデフォルトとします．GNU拡張が利用不可能
     なとき，ブレーク文字は，スペース，タブと改行のみをデフォルトとし
     ます．

   * プログラムは，出力行の幅でより良いものを使用します．GNU拡張が利用
     不可能な場合，プログラムは，代わりにSystem V `ptx'を模倣しようと
     しますが，このプログラムが完全に再現していない，わずかな配置不備
     もまだあります．

   * ユーザは，IgnoreファイルとOnlyファイルの両方を指定できます．これ
     は，System V `ptx'では許可されません．





File: textutils-ja.info, Node: Operating on fields within a line, Next: Operating on characters, Prev: Operating on sorted files, Up: Top

行のフィールドの処理
********************

* Menu:

* cut invocation::              Print selected parts of lines.
* paste invocation::            Merge lines of files.
* join invocation::             Join lines on a common field.




File: textutils-ja.info, Node: cut invocation, Next: paste invocation, Prev: Operating on fields within a line, Up: Operating on fields within a line

`cut': 行の選択した部分の出力
=============================

`cut'は，それぞれの入力ファイルや，ファイルが与えられない場合や`-'のファ
イル名に対しては標準入力の，それぞれの行の選択された部分を標準出力に書
き出します．概要です．

     cut [OPTION]... [FILE]...

以下の表で，BYTE-LIST，CHARACTER-LISTと，FIELD-LISTは，1つ以上の数字ま
たはカンマで分けられた(ダッシュで分けられた2つの数字の)範囲です．バイ
ト，文字と，フィールドは，1で始まる番号がつきます．不完全な範囲を与え
ることができます．`-M'は`1-M'を意味します．`N-'は，`N'から行末やフィー
ルドの終りまでを意味します．

このプログラムは以下のオプションも受け入れます．*Note Common
options::,も参照してください．


`-b BYTE-LIST'
`--bytes=BYTE-LIST'
     BYTE-LISTでリストアップされた位置にあるバイトのみを出力します．タ
     ブとバックスペースは他の文字と同様に扱われます．それらは1バイト使
     用します．

`-c CHARACTER-LIST'
`--characters=CHARACTER-LIST'
     CHARACTER-LISTにリストアップされた位置にある文字のみを出力します．
     現在は`-b'と同じですが，国際化はそれを変更する可能性があります．
     タブとバックスペースは他の文字と同様に扱われます．それらは1バイト
     使用します．

`-f FIELD-LIST'
`--fields=FIELD-LIST'
     FIELD-LISTにリストアップされたフィールドのみを出力します．デフォ
     ルトで，フィールドはTAB文字で分けられています．

`-d INPUT_DELIM_BYTE'
`--delimiter=INPUT_DELIM_BYTE'
     `-f'に対し，フィールドは，INPUT_DELIM_BYTEの最初の文字により，入
     力で分けられます(デフォルトはTABです)．

`-n'
     マルチバイトの文字を分けません(現在何もしません)．

`-s'
`--only-delimited'
     `-f'に対し，フィールド分離文字を含まない列を出力しません．

`--output-delimiter=OUTPUT_DELIM_STRING'
     `-f'に対し，出力フィールドは，OUTPUT_DELIM_STRINGで分けられます．
     デフォルトは入力分離文字を使用します．





File: textutils-ja.info, Node: paste invocation, Next: join invocation, Prev: cut invocation, Up: Operating on fields within a line

`paste': ファイルの行を統合します
=================================


`paste'は，与えられたそれぞれファイルの連続して対応している行から成り
立つ行を標準出力に書き出し，それはTAB文字で分けられています．`-' のファ
イル名や，入力ファイルが与えられない場合，標準入力が使用されます．

概要です．

     paste [OPTION]... [FILE]...

プログラムは以下のオプションを受け入れます．*Note Common options::,も
参照してください．


`-s'
`--serial'
     それぞれのファイルから1行ではなく，1度に1つのファイルの行をペース
     トします．

`-d DELIM-LIST'
`--delimiters DELIM-LIST'
     統合される行の分離のTABの代わりに，DELIM-LISTの文字を順番に使用し
     ます．DELIM-LISTが使い尽くされたとき，その最初で再び開始します．





File: textutils-ja.info, Node: join invocation, Prev: paste invocation, Up: Operating on fields within a line

`join': 共通のフィールドで行を結合
==================================


`join'は，同一の結合したフィールドを持つそれぞれの入力行の組の行を標準
出力に書き出します．概要です．

     join [OPTION]... FILE1 FILE2

FILE1またはFILE2は(両方ではなく)`-'が可能で，標準入力を意味します．
FILE1とFILE2は，結合したフィールド上で増加している，原文通りの順番で既
に保存されているべきで，それは，`LC_COLLATE'ロケールで指定された，対照
の順序を使用します．`-t'オプションが与えられていない場合，入力は，
`sort -b'で，結合フィールドの最初の空白を無視して保存されているべきで
す．`--ignore-case'オプションが与えられた場合，行は`sort -f'で，結合
フィールドの文字の大文字小文字に関係なくソートされているべきです．

デフォルトは，以下の通りです．結合フィールドは，それぞれの行の最初の
フィールドです．入力のフィールドは，1つ以上の空白で分かれていて，行の
前の空白は無視されます．出力のフィールドはスペースで分けられています．
それぞれの出力行は，結合フィールド，FILE1からの残りのフィールド，それ
から，FILE2の残りのフィールドから成り立ちます．

プログラムは，以下のオプションを受け入れます．*Note Common options::,
も参照してください．


`-a FILE-NUMBER'
     ファイルFILE-NUMBER (`1'または`2'のいずれか)で組になっていないそ
     れぞれの行に対し，1行を通常の出力に追加して出力します．

`-e STRING'
     入力で欠けているこれらの出力フィールドを，STRINGで置換します．

`-i'
`--ignore-case'
     キーを比較するとき，大文字小文字の違いを無視します．このオプショ
     ンを用いた場合，入力ファイルの行は同じ方法でソートされている必要
     があります．この順序を生成するために，`sort -f'を使用してください．

`-1 FIELD'
`-j1 FIELD'
     ファイル1のフィールドFIELD (正の整数)で結合します．

`-2 FIELD'
`-j2 FIELD'
     ファイル2のフィールドFIELD (正の整数)で結合します．

`-j FIELD'
     `-1 FIELD -2 FIELD'と同じです．

`-o FIELD-LIST...'
     FIELD-LISTの書式に従い，それぞれの出力行を生成します．FIELD-LIST
     のそれぞれの要素は，単一文字`0'，または，ファイル番号のMが`1'また
     は`2'で，Nが正のフィールド番号となるM.Nの形式になります．

     `0'のフィールド指定は，結合フィールドを示します．ほとんどの場合，
     `0'フィールドの指定の機能は，対応する結合フィールドとなる，明示的
     なM.Nを用いて再現できます．しかし，(`-a'または`-v'オプションを用
     いて)組にならない行を出力するとき，両方のファイルで組にならない行
     がある場合，FIELD-LISTでM.Nを用いて結合フィールドを指定する方法は
     ありません．`join'にその機能を与えるため，POSIXは`0'フィールド指
     定の表記を考え出しました．

     FIELD-LISTの要素は，カンマまたは空白で分けられています．複数の
     FIELD-LIST引数で，単一の`-o'オプションの後に与えることができます．
     `-o'で与えられる全てのリストの値は，一緒に連結されます．全ての出
     力行は--`-a'や`-v'オプションで出力されるものを含め--指定された
     FIELD-LISTを適用されます．

`-t CHAR'
     文字CHARを入出力のフィールドセパレータとして使用します．

`-v FILE-NUMBER'
     通常の出力の代わりに，ファイルFILE-NUMBER (1または2)の組にならな
     いそれぞれの行に対し，1行を出力します．


更に，GNU `join'が1つの引数で呼び出された場合，オプション`--help'と
`--version'は認識されます．*Note Common options::.



File: textutils-ja.info, Node: Operating on characters, Next: Opening the software toolbox, Prev: Operating on fields within a line, Up: Top

文字の処理
**********


このコマンドは，個別に文字を処理します．

* Menu:

* tr invocation::               Translate, squeeze, and/or delete characters.
* expand invocation::           Convert tabs to spaces.
* unexpand invocation::         Convert spaces to tabs.




File: textutils-ja.info, Node: tr invocation, Next: expand invocation, Prev: Operating on characters, Up: Operating on characters

`tr': 文字の変換，圧縮，そして/または，削除
===========================================


概要です．

     tr [OPTION]... SET1 [SET2]

`tr'は標準入力を標準出力にコピーし，そのとき以下の処理の一つを実行しま
す．

   * 変換と，追加で結果の繰り返し文字の圧縮．
   * 繰り返し文字の圧縮．
   * 文字の削除．
   * 文字の削除後，結果から繰り返し文字の圧縮．

SET1と(与えられている場合)SET2引数は，文字の順序を持つ文字を定義し，以
下のSET1とSET2を参照します．これらの設定は，`tr'が処理する入力文字です．
`--complement' (`-c')オプションは，SET1をその補語(SET1にない全ての文字)
に置換します．

* Menu:

* Character sets::              Specifying sets of characters.
* Translating::                 Changing one characters to another.
* Squeezing::                   Squeezing repeats and deleting.
* Warnings in tr::              Warning messages.




File: textutils-ja.info, Node: Character sets, Next: Translating, Prev: tr invocation, Up: tr invocation

文字セットの指定
----------------


SET1とSET2の引数の書式は，正規表現の書式に似ています．しかし正規表現で
はなく，文字のリストのみです．これらの文字列のほとんどの文字は単にその
文字自身を表すが，利便性のため，文字列には以下でリストアップされた速記
を含むことができます．そのうち，以下で注意するSET1またはSET2のみでしか
利用できないものもあります．


バックスラッシュエスケープ


     以下でリストアップされていない，文字が続くバックスラッシュは，エ
     ラーメッセージを発生します．

     `\a'
          Control-G.
     `\b'
          Control-H.
     `\f'
          Control-L.
     `\n'
          Control-J.
     `\r'
          Control-M.
     `\t'
          Control-I.
     `\v'
          Control-K.
     `\OOO'
          OOOで与えられる値の文字で，1から3桁までの8進数．
     `\\'
          バックスラッシュ．

範囲


     表記方法の`M-N'は，MからNまで昇順に，全ての文字に展開されます．M
     は，対照でNの前であるべきです．そうでない場合，結果としてエラーと
     なります．例としては，`0-9'は`0123456789'と同じです．GNU `tr'は，
     範囲を囲む角括弧を使用するSystem V 構文をサポートしませんが，その
     書式で指定された変換は，SET1のカッコがSET2のカッコと同じように対
     応する限り働きます．

繰り返される文字

     SET2での`[C*N]'の表記は，文字CのN個のコピーに展開されます．このた
     め，`[y*6]'は`yyyyyy'と同じです．SET2での`[C*]'の表記は，SET2を
     SET1と同じ長さにするのに必要なだけ，Cの多くのコピーに展開されます．
     Nが`0'で始まる場合は8進数に，それ以外では10進数に解釈されます．

文字クラス

     `[:CLASS:]'の表記は，(あらかじめ定義された)クラスCLASS にある全て
     の文字に展開されます．文字は，特定の順序で展開されませんが，
     `upper'と`lower'クラスは，昇順に展開されます．`--delete' (`-d')と
     `--squeeze-repeats' (`-s')オプションが両方与えられた場合，あらゆ
     る文字クラスはSET2で使用されるはずです．それ以外の場合，文字クラ
     ス`lower'と`upper'は，SET2に適用され，そしてそれは，対応する(それ
     ぞれ`upper'と`lower'の)文字クラスはSET1の位置に関連して同じものが
     指定されている場合のみです．こうすることで，大文字小文字の変換を
     指定します．クラス名は以下で与えられます．無効なクラス名が与えら
     れた場合，結果としてエラーとなります．

     `alnum'
          文字と数字．
     `alpha'
          文字．
     `blank'
          水平方向の空白．
     `cntrl'
          コントロール文字．
     `digit'
          数字．
     `graph'
          スペースを含まない，印刷可能な文字．
     `lower'
          小文字．
     `print'
          スペースを含む，印刷可能な文字．
     `punct'
          句読点文字．
     `space'
          水平垂直の空白．
     `upper'
          大文字．
     `xdigit'
          16進数の数字．

等価なクラス

     構文`[=C=]'は，Cと等価な文字の全てに，特定の順序を持たずに展開さ
     れます．等価なクラスは，英語以外のアルファベットをサポートする目
     的で，比較的最近発明されました．しかし，それらの定義や内容を決定
     する標準的な方法はなさそうです．それゆえ，GNU `tr'では，完全には
     実装されていません．それぞれの文字の等価クラスは，その文字からの
     み構成されていて，特定の利用価値はありません．





File: textutils-ja.info, Node: Translating, Next: Squeezing, Prev: Character sets, Up: tr invocation

変換
----


SET1とSET2の両方が与えられ，`--delete' (`-d')オプションが与えられてい
ない場合，`tr'は変換を実行します．`tr'は，SET1にある入力のぞれぞれの文
字を，対応するSET2の文字に変換します．SET1に無い文字は，そのまま変換さ
れず通過します．SET1の文字が1回以上現われ，SET2の対応する文字が全て同
じではない場合，最後の1つのみ使用されます．例えば，以下の2つのコマンド
は等価です．

     tr aaa xyz
     tr a z

`tr'の一般的な使用法は，小文字を大文字に変換することです．これは多くの
方法で行うことができます．その3つを以下に書きます．

     tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
     tr a-z A-Z
     tr '[:lower:]' '[:upper:]'

`tr'が変換を実行しているとき，SET1とSET2は，通常同じ長さです．SET1が
SET2より短い場合，SET2の終りの余分な文字は無視されます．

一方，SET1をSET2より大きくすることは移植性がありません．POSIX.2は，そ
の結果は未定義だと述べています．この場合，BSD `tr'は，SET2をSET2の最後
文字で必要なだけ繰り返すことでSET1の長さに引き延ばします．System V
`tr'は，SET1をSET2の長さに切り詰めます．

デフォルトで，GNU `tr'はBSD `tr'のようにこの状態を扱います．
`--truncate-set1' (`-t')オプションが与えられた場合，GNU `tr'はSystem V
`tr'のようにこの状態を扱います．このオプションは，変換以外の処理では無
視されます．

この場合，System V `tr'のように動作させると，比較的一般的なBSDの表現は
壊れます．

     tr -cs A-Za-z0-9 '\012'

それは，全ての英数字を改行に変換する代わりに，(SET1の補語の最初の要素)
ゼロバイトのみ変換されるためです．



File: textutils-ja.info, Node: Squeezing, Next: Warnings in tr, Prev: Translating, Up: tr invocation

繰り返しの圧縮と削除
--------------------


`--delete' (`-d')オプションのみ与えられたとき，`tr'は，SET1にあるあら
ゆる入力文字を削除します．

`--squeeze-repeats' (`-s')オプションのみ与えられたとき，`tr'は，SET1に
ある，それぞれの入力の繰り返される文字の並びを，その文字の単一の発生
(訳注：1つの文字)に置換します．

`--delete'と`--squeeze-repeats'の両方が与えられた場合，`tr'は，最初に
SET1を用いて削除を実行し，SET2を用いて残りの文字から繰り返しを圧縮しま
す．

`--squeeze-repeats'オプションは，変換時にも利用でき，その場合，`tr'は，
最初に変換を実行し，SET2を用いて残りの文字から繰り返しを圧縮します．

ここに，オプションの様々な組合せの表現例をいくつかあげます．


   * 全てのゼロバイトを削除．
          tr -d '\000'

   * 全ての単語を独自の行にします．これは，全ての非英数文字を改行に変
     換し，繰り返される改行となるそれぞれの文字列を単一の改行に圧縮し
     ます．
          tr -cs 'a-zA-Z0-9' '[\n*]'

   * 繰り返される改行のそれぞれの並びを，単一の改行に変換します．
          tr -s '\n'

   * ドキュメントで単語の2重の出現を見付けます．例えば，人々は，改行で
     分かれている複製された単語で，"the the"と書くこともよくあります．
     以下のbourneシェルスクリプトは，最初に句読点と空白文字の並びを単
     一の改行文字に変換する動作を行います．それはそれぞれの"単語"を単
     独行に書きます．次にそれは，全ての大文字を小文字に置き換え，最後
     に，複製が隣接している単語のみを出力するために，`uniq'を`-d'オプ
     ションで実行します．

          #!/bin/sh
          cat "$@" \
            | tr -s '[:punct:][:blank:]' '\n' \
            | tr '[:upper:]' '[:lower:]' \
            | uniq -d





File: textutils-ja.info, Node: Warnings in tr, Prev: Squeezing, Up: tr invocation

警告メッセージ
--------------

環境変数`POSIXLY_CORRECT'を設定すると，POSIX.2を厳密に遵守するため，以
下の警告とエラーのメッセージをオフにします．それ以外の場合，以下の診断
が発生されます．


  1. `--delete'オプションが与えられているが，`--squeeze-repeats'が与え
     られておらず，SET2が与えられているとき，GNU `tr'は，SET2が使用さ
     れないため，デフォルトで使用方法のメッセージを出力し終了します．
     POSIX指定は，この場合SET2は無視されるはずだと述べています．黙って
     引数を無視するのは悪い考えです．

  2. 曖昧な8進数のエスケープが与えられたときです．例えば`\400'は，8進
     数の400の値が単一バイトに適さないので，実際には`0'が後置された
     `\40'になります．


GNU `tr'は，BSDやSystem Vとの完全な互換性を提供しません．例えば，POSIX
の概念`[:alpha:]'，`[=c=]'と，`[c*10]'の解釈を利用不可にすることはでき
ません．また，GNU `tr'は，ゼロバイトを保護する方法を提供できない伝統的
なUnixバージョンと異なり，ゼロバイトを自動的に削除できません．




File: textutils-ja.info, Node: expand invocation, Next: unexpand invocation, Prev: tr invocation, Up: Operating on characters

`expand': タブをスペースに変換
==============================


`expand'は，与えられたそれぞれのFILE，または，与えられない場合や`-'の
FILEの場合は標準入力の内容を，タブ文字を適切な数のスペースに変換して，
標準出力に書き出します．概要です．

     expand [OPTION]... [FILE]...

デフォルトで，`expand'は全てのタブをスペースに変換します．それは全ての
出力でバックスペース文字を維持します．それらはタブ計算に対し，列の数を
減少させます．デフォルトの動作は`-8'(タブをそれぞれ8列に設定する) と同
じです．

プログラムは，以下のオプションを受け入れます．*Note Common options::,
も参照してください．


`-TAB1[,TAB2]...'
`-t TAB1[,TAB2]...'
`--tabs=TAB1[,TAB2]...'
     1つのタブストップのみ与えられた場合，タブをTAB1個の別々のスペース
     (デフォルトで8)に設定します．それ以外の場合，タブをTAB1，TAB2，...
     (0から番号付けされる)列に設定し，与えられた最後のタブストップ以降
     のあらゆるタブを単一のスペースで置換します．タブストップが`-t'や
     `--tabs'オプションで指定された場合，それらは空白およびカンマで分
     けられます．

`-i'
`--initial'
     それぞれの行の最初のタブ(前にあるものが全て非スペース文字や非タブ
     文字となるもの)をスペースに変換します．





File: textutils-ja.info, Node: unexpand invocation, Prev: expand invocation, Up: Operating on characters

`unexpand': スペースをタブに変換する
====================================


`unexpand'は，与えられたそれぞれのFILE，または与えられない場合や`-'の
FILEに対しては標準入力の内容を，2つ以上のスペースやタブ文字の文字列を，
必要とされる多くのスペースと同等の，続けることが可能な多くのタブに変換
しながら，内容を標準出力に書き出します．概要です．

     unexpand [OPTION]... [FILE]...

デフォルトで，`unexpand'は，最初のスペースとタブ(前にあるものが全て非
スペース文字や非タブ文字となるもの)のみを，ぞれぞれの行で変換します．
それは，出力でバックスペース文字を維持します．タブの計算に対し，列の数
を少なくします．デフォルトで，タブは8列毎に設定されます．

プログラムは以下のオプションを受け入れます．*Note Common options::,も
参照してください．


`-TAB1[,TAB2]...'
`-t TAB1[,TAB2]...'
`--tabs=TAB1[,TAB2]...'
     1つのタブストップのみ与えられた場合，タブを，デフォルトの8の代わ
     りに，それぞれTAB1スペースに設定します．それ以外の場合，タブを
     TAB1列，TAB2列，... (0から番号付けされる)に設定し，与えられたタブ
     ストップ以降のスペースタブは，変更されずに残ります．タブストップ
     が`-t'や`--tabs'オプションで指定された場合，それらは空白とカンマ
     で分けられます．オプションは暗黙に`-a'オプションを指定します．

`-a'
`--all'
     最初のものだけでなく，全ての2つ以上のスペースやタブをタブに変換し
     ます．




File: textutils-ja.info, Node: Opening the software toolbox, Next: Index, Prev: Operating on characters, Up: Top

ソフトウェア・ツールボックスを開く(Opening the software toolbox)
****************************************************************

この章はもともと`Linux Journal'，volume 1，number 2の`What's GNU?'で記
載されました．それは，Arnold Robbinsによって書かれました．

* Menu:

* Toolbox introduction::        Toolbox introduction
* I/O redirection::             I/O redirection
* The who command::             The `who' command
* The cut command::             The `cut' command
* The sort command::            The `sort' command
* The uniq command::            The `uniq' command
* Putting the tools together::  Putting the tools together




File: textutils-ja.info, Node: Toolbox introduction, Next: I/O redirection, Prev: Opening the software toolbox, Up: Opening the software toolbox

ツールボックスの紹介
====================

今月のコラムは，GNUプロジェクトの周辺に関連するもので，そこでは，Linux
システム上のGNUツールのいくつかと，それらの使われ方を記述します．それ
は正に，プログラム開発と使用方法の"ソフトウェアツール"の哲学です．

ソフトウェアツールの哲学は，初期設計と(LinuxとGNUが本質的に複製してい
る) Unixの開発では，重要で不可欠な概念でした．不幸にも，インターネット
ワーキングと派手なGUIの現在の出版では，それは王道からそれてしまってい
るように感じられます．それは強力な多くの種類の問題を解決するための精神
的なモデルを提供するので残念です．

多くの人は，ズボンのポケット(またはハンドバッグ)に，スイスのアーミーナ
イフを持ち運んでいます．スイスのアーミーナイフは有用なハンディーツール
です．それはいくつかのナイフの刃，ネジ回し，毛抜き，楊子，爪やすり，栓
抜き，そしておそらくその他のいくつかがあります．毎日の，単純な汎用のツー
ルが必要な小さな様々な仕事でおあつらえ向きです．

一方，経験豊富な大工は，スイスのアーミーナイフを使用して家を建てません．
その代わりに，専門的な道具--のこぎり，かなづち，ネジ回し，かんな等がぎっ
しり詰まった道具箱を持っています．そして，それぞれの道具を使用する時と
場所を知っています．ネジ回しを扱いながら，釘を打っているところを見たこ
とはないでしょう．

ベル研究所のUnix開発者は，全て専門的なプログラマと訓練されたコンピュー
タ科学者です．彼らは，1つのプログラムのみを利用するため，1つで全てに適
するプログラムをユーザに提示する一方，そのようなプログラムは以下のよう
になることが分かりました．

  a. 書くのが難しい．

  b. 管理とデバックが難しい．

  c. 新しい状況に対し拡張が難しい．

その代わりに，プログラムは専門的なツールであるべきだと感じました．要す
るに，それぞれのプログラムは，"1つのことを上手にすべきである"というこ
とです．それ以上でも以下でもありません．そのようなプログラムは，設計，
作成がより単純で，正しいものを得られます--ただ1つのことをするだけです．

更に彼らは，良いマシンでプログラムを一緒にハックするため，全体は部分の
集合より偉大なことに気付きました．いくつかの特別な目的のプログラムを組
み合わせることで，プログラムが設計された目的には無い特定の仕事を達成し
たり，特定目的のプログラムを書く必要がある場合，より速く簡単にそれを達
成したりできました．我々は，このコラムでこれ以上の，いくつかの(古い)例
を見ます．(重要な追加点は，まだいくつかのアプリケーションがツールボッ
クスに無い場合，必要があれば回り道して，最初に必要なソフトウェアツール
を構築することです．)



File: textutils-ja.info, Node: I/O redirection, Next: The who command, Prev: Toolbox introduction, Up: Opening the software toolbox

I/O リダイレクション
====================

希望としては，皆さんが，"標準入力"，"標準出力"，そして"標準エラー出力" 
の特定の概念で，シェルのI/Oリダイレクションの基本に慣れています．要す
るに，"標準入力"はデータソースで，データがやってくるところです．データ
ソースが，ディスクファイル，キーボード，磁気テープやパンチカードかどう
か，プログラムは知る必要も注意する必要もありません．同様に，"標準出力" 
はデータシンクで，データが出て行くところです．プログラムはその場所を知
る必要も注意する必要もありません．標準入力を読み込み，データに何かを行
い，それを送り続けるプログラムは，"フィルタ"と呼ばれ，それは水のパイプ
ラインでのフィルタに似ているためです．

Unixシェルを用いた場合，データパイプラインを設定することは非常に簡単で
す．

     program_to_create_data | filter1 | .... | filterN > final.pretty.data

我々は生データを作ることから始めます．それぞれのフィルタは，それがパイ
プラインから出てくるまで，いくつかの連続した変換をデータに適用し，それ
は望ましい形式です．

これは素晴らしく，標準入力と標準出力に適しています．標準エラー出力は，
動作中どこに行きますか?  まあ，上記のパイプライン`filter1'について考え
て見てください．データでエラーが発生した場合，何が生じるのでしょう? 
エラーメッセージを標準出力に書き出す場合，それは`filter2'の入力のパイ
プラインの下に隠れ，ユーザーはおそらく見ることはありません．そのため，
プログラムはユーザに注意を促すため，エラーメッセージを送ることが可能な
場所が必要です．これは標準エラー出力で，画面から離れているプログラムの
標準出力をリダイレクトしてさえ，それは通常コンソールやウィンドウに連結
しています．

フィルタプログラムが一緒に動作するため，データの書式は合意されている必
要があります．最も簡単で最も容易な書式は，単なるテキストの行です．通常，
Unixデータファイルは，慣習でUnixの文献で"改行"と呼ばれる，ASCII LF
(Line Feed)文字で分けられた行を用いた，単なるバイトのストリームです．
(これは，Cプログラマの場合は`'\n''です．)これは全ての伝統的なフィルタ
プログラムで用いられる書式です．(多くのより早期のオペレーティングシス
テムは，バイナリデータを管理するため，手の込んだファシリティと特別な目
的を持つプログラムがありました．Unixは常にそのようなことから身をかわし
ていて，哲学の下では，テキストエディタでデータを見たり編集したりするこ
とを単純に可能にする，最も簡単な方法です．)

OK，十分紹介しました．いくつかの道具をひと目見て，それから，興味深い方
法でそれらを一緒に束ねる方法を見ましょう．以下の議論では，これらの興味
あるコマンドラインオプションを紹介するだけです．常に行うように，完全な
話とするために，システムドキュメントを再点検してください．



File: textutils-ja.info, Node: The who command, Next: The cut command, Prev: I/O redirection, Up: Opening the software toolbox

`who'コマンド
=============

最初のプログラムは`who'コマンドです．単独では，それは現在ログインして
いるユーザのリストを生成します．私はシングルユーザシステムでこれを書い
ていますが，我々は複数の人々がログインしているふりをします．

     $ who
     arnold   console Jan 22 19:57
     miriam   ttyp0   Jan 23 14:19(:0.0)
     bill     ttyp1   Jan 21 09:32(:0.0)
     arnold   ttyp2   Jan 23 20:48(:0.0)

ここで，`$'は通常のシェルプロンプトで，そこで私は`who'と入力しました．
3人ログインしていて，私は2回ログインしてます．伝統的なUnixシステムでは，
ユーザ名は8文字以上の長さはありません．このわずかな平凡なビットは後で
有用になります．`who'の出力は良いのですが，データは余り面白くありませ
ん．



File: textutils-ja.info, Node: The cut command, Next: The sort command, Prev: The who command, Up: Opening the software toolbox

`cut'コマンド
=============

次に我々が見るプログラムは`cut'コマンドです．このプログラムは，入力デー
タの列やフィールドを切り取ります．例えば，我々はそれを用いて，
`/etc/passwd'ファイルからログイン名とフルネームのみを出力させることが
できます．`/etc/passwd'ファイルは，7つのフィールドがあり，コロンで分か
れています．

     arnold:xyzzy:2076:10:Arnold D. Robbins:/home/arnold:/bin/ksh

1番目と5番目のフィールドを得るため，以下のように`cut'を使用します．

     $ cut -d: -f1,5 /etc/passwd
     root:Operator
     ...
     arnold:Arnold D. Robbins
     miriam:Miriam A. Robbins
     ...

`-c'オプションを用いた場合，`cut'は，入力行の指定した文字(例えば，列)
を切り出します．このコマンドは，データのフィルタリングに役立ちそうです．



File: textutils-ja.info, Node: The sort command, Next: The uniq command, Prev: The cut command, Up: Opening the software toolbox

`sort'コマンド
==============

次に見るのは`sort'コマンドです．これはUnix形式のシステムで最も強力なコ
マンドの1つです．自分で良く利用していると思うのは，おしゃれなデータの
配管を設定している時です．`sort'コマンドは，コマンドラインで指名された
それぞれのファイルを読み込みソートします．それはソートされたデータを統
合し，標準出力に書き出します．それはファイルがコマンドラインで与えられ
ない場合，標準入力から読み込みます(このため，フィルタになります)．ソー
トは，順序を正しくするとき文字を基本としたり，ユーザが供給する基準の順
番を基本としたりします．



File: textutils-ja.info, Node: The uniq command, Next: Putting the tools together, Prev: The sort command, Up: Opening the software toolbox

`uniq'コマンド
==============

(少なくとも今のところ)最後に，我々は`uniq'プログラムを見ます．データを
ソートするとき，重複行，すなわち同一行でよく終ります．通常，それぞれの
行に1つのインスタンスが必要です．これは`uniq'を用いる場所です．`uniq'
はその標準入力から読み込み，それはソートされてることを期待します．それ
は重複行の1つのコピーのみを出力します．それにはいくつかのオプションが
あります．後に，我々は`-c'オプションを使用し，それはそれぞれユニークな
行を出力し，入力で行が発生した回数の数えたものを前置します．



File: textutils-ja.info, Node: Putting the tools together, Prev: The uniq command, Up: Opening the software toolbox

ツールの統合
============

さて，これが多数のユーザがログインしている大きなBBSシステムだと考えま
しょう．管理者はシスオペに，ログインしているユーザのソートされたリスト
を生成するプログラムを書かせたいとします．更に，ユーザが複数回ログイン
していても，彼または彼女の名前を出力に1度しか表示させないものとします．

シスオペはシステムドキュメントを持って席に付き，これを行うCプログラム
を書いたはずです．それはおそらく，200行のコードを書いて，テストして，
デバッグするため，2時間かけているでしょう．しかし，ソフトウェアツール
ボックスを知っている場合，シスオペは代わりに，ログインしているユーザの
リストを生成することから始めることができます．

     $ who | cut -c1-8
     arnold
     miriam
     bill
     arnold

次に，リストをソートします．

     $ who | cut -c1-8 | sort
     arnold
     arnold
     bill
     miriam

終りに，重複を取り除くため，ソートされたリストを`uniq'に通します．

     $ who | cut -c1-8 | sort | uniq
     arnold
     bill
     miriam

`sort'コマンドには，実際は，`uniq'を行う`-u'オプションがあります．しか
し，`uniq'は，`sort -u'で代用できない他のユーザのためです．

シスオペは，このパイプラインをシェルスクリプトに置き，システムの全ての
ユーザが利用可能にしました．

     # cat > /usr/local/bin/listusers
     who | cut -c1-8 | sort | uniq
     ^D
     # chmod +x /usr/local/bin/listusers

ここで注意すべき主な点が4つあります．最初に，4つのプログラムのみのコマ
ンドラインで，シスオペは仕事に費す2時間を節約することができました．さ
らに，シェルパイプラインはCプログラムが行うのと同じ効果があり，それは
プログラマの時間に関してはるかに効果的です．人々の時間はコンピュータの
時間よりもはるかに高価で，現在の"全てのことをする十分な時間が無い"社会
では，プログラマの時間の2時間を節約することは，並々ならぬ目ざましい成
果です．

2番目に，ツールの*組み合わせ*で，個別のプログラマの著者が想像していな
かった特定の目的の仕事をすることが可能だということを強調することも重要
です．

3番目に，我々がここで行ったように，ステージ内ででパイプラインを組み上
げることも価値があります．これで，パイプラインのそれぞれのステージでの
データを見ることが可能になり，それは，これらのツールを全く正しく使用し
ていることの確信を得る助けになります．

最後に，シェルスクリプトでパイプラインを組み上げることで，他のユーザが
そのコマンドを使用することができ，それらを設定したおしゃれな配管を覚え
る必要がありません．それを実行する方法という意味では，シェルスクリプト
とコンパイルされたプログラムは区別できません．

ここまでの準備運動の後で，我々は2つの追加のより複雑なパイプラインを見
ます．そのため，我々が2つのツールをさらに紹介する必要があります．

最初は`tr'コマンドで，それは"transliterate(変換)"を意味します．`tr'コ
マンドは，文字対文字を基本に，文字を変換する作用があります．通常，それ
は大文字を小文字に割り当てることに使用されます．

     $ echo ThIs ExAmPlE HaS MIXED case! | tr '[A-Z]' '[a-z]'
     this example has mixed case!

重要ないくつかのオプションがあります．

`-c'
     リストアップされた文字の補集合で動作し，すなわち，与えられた集合
     に無い文字に適応した処理です．

`-d'
     出力から最初のセットの文字を削除します．

`-s'
     出力で繰り返される文字を1文字に圧縮します．

我々は，一度に3つの全てのオプションを使用します．

我々が見る，もう1つのコマンドは`comm'です．`comm'コマンドは，2 つのソー
トされた入力ファイルを入力データとし，ファイルの行を3列に出力します．
出力列は最初のファイルのユニークなデータ行．2番目のファイルのユニーク
なデータ行，そして，両方に共通なデータ行です．`-1'，`-2'と`-3'のコマン
ドラインオプションは，対応する列を削除します．(これは直観的ではなく，
慣れるのに少しかかります．)例えば，以下のようにします．

     $ cat f1
     11111
     22222
     33333
     44444
     $ cat f2
     00000
     22222
     33333
     55555
     $ comm f1 f2
             00000
     11111
                     22222
                     33333
     44444
             55555

ファイル名としての単一のダッシュは，通常のファイルの代わりに標準入力か
ら読みとるよう，`comm'に伝えます．

さて，我々はおしゃれなパイプラインを構築する準備ができました．最初の応
用は，単語の頻度カウンタです．これは，著者が特定の単語を過度に使用して
いるかどうかを決定する助けとなります．

最初のステップは，入力ファイルの全ての文字の大文字小文字をどちらか1つ
に変換することです．"The"と"the"は数えているときは同じ単語です．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | ...

次のステップは，句読点をを取り除くことです．引用された単語と引用されて
いない単語は，同一に扱われるべきです．句読点を片付ける最も簡単な方法で
す．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' | ...

2番目の`tr'コマンドは，リストアップされた文字の補集合を処理し，それは
全ての文字，数字，アンダースコアと空白です．`\012'は改行を表現します．
それはそのまま残す必要があります．(ASCIIタブ文字も，生成されたスクリプ
トでは追加として含まれるべきです．)

この時点で，我々は，空白スペースで分けられた単語からなるデータを持って
います．単語は英数文字(とアンダースコア)のみ含みます．次のステップは，
1行に1単語となるように，データを別々に分けます．これは数える処理をより
容易にするためで，まもなく見ることができます．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | ...

このコマンドは空白を改行に切替えます．`-s'オプションは，出力の複数の改
行文字を1つに圧縮します．これは空白行を避けたいとき助かります．(`>'は
シェルの"2番目のプロンプト"を意味します．これは，全てのコマンドを入力
し終えていないことに注意させるとき，シェルが出力するものです．)

我々は今，1行に1単語で，句読点が無く，全て大文字小文字どちらかだけのデー
タを持っています．我々はそれぞれの単語を数える準備ができました．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | sort | uniq -c | ...

この時点で，データは以下のようになります．

       60 a
        2 able
        6 about
        1 above
        2 accomplish
        1 acquire
        1 actually
        2 additional

出力は単語でソートされていて，総数ではありません!  我々が欲しいのは，
最も頻繁に使用される最初のものです．幸い，これは簡単に達成でき，2つの
`sort'オプションの助けを借ります．

`-n'
     文字ではなく，数字のソートを行います．

`-r'
     ソートされた順序を反転します．

最終的なパイプラインはこのようになります．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | sort | uniq -c | sort -nr
      156 the
       60 a
       58 to
       51 of
       51 and
      ...

やれやれ!  それは大量の要約です．まだ同じ原則は適用されます．6つのコマ
ンド2行で(本当は利便性のため長いものを分けたものです)，我々は興味深く
便利なことを行うプログラムを作成し，それは，Cプログラムで同じことをす
るものを書くよりはるかに短い時間でした．

上記のパイプラインへのちょっとした変更で，単純なスペルチェッカーを与え
ることができます．単語を正しく綴っているかどうかを決定するために行う必
要があることは，辞書で調べることです．それが無い場合，可能性としては綴
りが正しくないということです．そのため，我々は辞書が必要です．
Slackware Linux 配布物を持っている場合，ファイル
`/usr/lib/ispell/ispell.words'があり，それはソートされていて，38,400語
の辞書です．

さて，我々のファイルと辞書をいかにして比較するのでしょう?  以前に我々
は，ソートされた，1行に1単語の単語リストを生成しました．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | sort -u | ...

さて，必要なことは辞書に*無い*単語リストです．ここが，`comm'コマンドを
用いる場所です．

     $ tr '[A-Z]' '[a-z]' < whats.gnu | tr -cd '[A-Za-z0-9_ \012]' |
     > tr -s '[ ]' '\012' | sort -u |
     > comm -23 - /usr/lib/ispell/ispell.words

`-2'と`-3'オプションは，辞書(2番目のファイル)のみにある行と，両方のファ
イルにある行を削除します．最初のファイル(我々の単語ストリームの標準入
力)のみにある行は，辞書にはありません．これらは綴りエラーに対する好ま
しい候補です．このパイプラインは，Unixでのスペルチェッカー製品として，
最初に発生しました．

ちょっと記述する価値のある，その他のツールもあります．

`grep'
     正規表現に一致するテキストをファイルで検索します．

`egrep'
     `grep'に似ていますが，より強力な正規表現を用います．

`wc'
     行，単語，文字を数えます．

`tee'
     データパイプに対するT部品で，データをファイルと標準出力にコピーし
     ます．

`sed'
     ストリームエディタで，より進んだツールです．

`awk'
     データ操作言語で，もう1つのより進んだツールです．

ソフトウェアツールの哲学は，以下の短い助言も含んでいます．"難しい部分
は他人にさせろ"．これは，必要なほとんどのものは与えられるものであり，
必要な形式にするまでの方法が残っていることを意味します．

要約します．

  1. それぞれのプログラムは，1つのことでうまく働きます．それ以上でもそ
     れ以下でもありません．

  2. 適切な配管でプログラムを組み合わせることで，全体として部分の総和
     以上の結果を導きます．それは，著者が想像していなかったプログラム
     の新しい使用法も導きます．

  3. プログラムは，決して余分なヘッダや末尾のデータを出力すべきではな
     く，それはこれらがパイプラインを壊してしまうものを送るはずだから
     です．(この点は以前に記述していません．)

  4. 難しいことは，他人にさせましょう．

  5. ツールボックスを理解してください!  それぞれのプログラムを適切に使
     用してください．適切なツールが無い場合，それを構築してください．

ここで書いている我々が議論してきた全てのプログラムは，
`/pub/gnu/textutils-1.9.tar.gz'として，`prep.ai.mit.edu'からの匿名
`ftp'で利用可能です． (1) (*Note Putting the tools
together-Footnotes::)

私がこのコラムで表現したものに新しいものはありません．ソフトウェアツー
ルの哲学は，最初に，Brian KernighanとP.J. Plaugerによる`Software
Tools'の本(Addison-Wesley, ISBN 0-201-03669-X)で紹介されました．この本
は，ソフトウェアツールの書き方と使用法を表しています．それは1976年に書
かれ，`ratfor' (RATional FORtran)という名のFORTRANに対するプリプロセッ
サを使用しています．当時，Cは現在ほどubiquitousではなく，FORTRANはそう
でした．最後の章で，`ratfor'をFORTRANにするプロセッサを提示していて，
`ratfor'で書かれています．`ratfor'はCに非常に似ています．Cを知っている
場合，コードを追いかけるのに問題ないでしょう．

1981年に本は更新され，`Software Tools in Pascal' (Addison-Wesley, ISBN
0-201-10342-7)として利用可能になりました．両方の本は印刷されていて，プ
ログラマにとっては読む価値があります．それらは，確かにプログラミングを
見る方法で，主な変化をなし得ました．

初めに，両方の本のプログラムはAddison-Wesleyから(9トラックテープで)利
用可能でした．不幸にも，これはもはや利用できず，Internetの周辺でコピー
があるかも知れません．何年もの間，活発なSoftware Tools Users Groupがあ
り，そのメンバーは元の`ratfor'プログラムを，FORTRANコンピュータを持つ
全てのコンピュータに本質的に移植しました．グループの人気は，Unixが大学
を越えて広がり始めたので，80年代半ばで衰えました．

GNUコードとその他のUnixプログラムのクローンの現在の増殖で，これらのプ
ログラムは，現在ほとんど注目されません．現在のCのバージョンはより効果
的で，これらのプログラムが行うより多くのことを行います．にもかかわらず，
良いプログラミングスタイルの博覧会と，still-valuableの哲学に対する福音
として，これらの本は比べるものが無く，私は高く推薦します．

謝辞：私はこのコラムのレビューに対し，ベル研究所のBrian Kernighanと，
オリジナルのソフトウェアToolsmithに深く感謝したいと思います．


File: textutils-ja.info  Node: Putting the tools together-Footnotes, Up: Putting the tools together

(1) Version 1.9が，このコラムを書いているときの現在のものです．現在の
バージョンは，近くのGNUアーカイブを調査してください．主なGNU FTPサイト
は，現在`ftp.gnu.org'です．



File: textutils-ja.info, Node: Index, Prev: Opening the software toolbox, Up: Top

索引
****


* Menu:

* -1:                           comm invocation.        20.
* -1:                           join invocation.        50.
* 128-bit checksum:             md5sum invocation.      5.
* 16-bit checksum:              sum invocation.         5.
* -2:                           comm invocation.        20.
* -2:                           join invocation.        56.
* -3:                           comm invocation.        20.
* -A:                           cat invocation.         19.
* -A:                           od invocation.          25.
* ASCII dump of files:          od invocation.          5.
* -B:                           cat invocation.         25.
* BSD `sum':                    sum invocation.         26.
* BSD `tail':                   tail invocation.        18.
* -C:                           split invocation.       42.
* -COLUMN:                      pr invocation.          69.
* -COUNT:                       head invocation.        27.
* +COUNT:                       tail invocation.        41.
* -COUNT:                       tail invocation.        41.
* CRC checksum:                 cksum invocation.       5.
* -D:                           uniq invocation.        67.
* -E:                           cat invocation.         55.
* -F:                           pr invocation.          116.
* +FIRST_PAGE[:LAST_PAGE]:      pr invocation.          57.
* -J:                           pr invocation.          143.
* Knuth, Donald E.:             fmt invocation.         18.
* -L:                           wc invocation.          63.
* LC_COLLATE:                   comm invocation.        11.
* LC_COLLATE:                   join invocation.        11.
* LC_COLLATE:                   sort invocation.        29.
* LC_CTYPE:                     sort invocation.        58.
* LC_NUMERIC:                   sort invocation.        111.
* LC_TIME:                      sort invocation.        104.
* -M:                           sort invocation.        104.
* -N:                           od invocation.          55.
* -N:                           pr invocation.          196.
* -N:                           uniq invocation.        31.
* +N:                           uniq invocation.        41.
* POSIX.2:                      Introduction.           10.
* POSIXLY_CORRECT:              Warnings in tr.         5.
* Plass, Michael F.:            fmt invocation.         18.
* -S:                           pr invocation.          230.
* System V `sum':               sum invocation.         34.
* -T:                           cat invocation.         81.
* -T:                           pr invocation.          257.
* -TAB:                         expand invocation.      27.
* -TAB:                         unexpand invocation.    28.
* TMPDIR:                       sort invocation.        54.
* -W:                           pr invocation.          281.
* -WIDTH:                       fmt invocation.         67.
* -a:                           join invocation.        31.
* -a:                           od invocation.          133.
* -a:                           pr invocation.          84.
* -a:                           unexpand invocation.    39.
* across columns:               pr invocation.          84.
* --across:                     pr invocation.          84.
* --address-radix:              od invocation.          25.
* all duplicate lines, outputting: uniq invocation.     67.
* --all-repeated:               uniq invocation.        67.
* --all:                        unexpand invocation.    39.
* alnum:                        Character sets.         74.
* alpha:                        Character sets.         77.
* -b:                           cat invocation.         43.
* -b:                           csplit invocation.      67.
* -b:                           cut invocation.         25.
* -b:                           fold invocation.        26.
* -b:                           md5sum invocation.      27.
* -b:                           nl invocation.          50.
* -b:                           od invocation.          137.
* -b:                           sort invocation.        68.
* -b:                           split invocation.       35.
* -b:                           tac invocation.         24.
* backslash escapes:            Character sets.         16.
* --before:                     tac invocation.         24.
* binary and text I/O in cat:   cat invocation.         25.
* --binary:                     cat invocation.         25.
* binary input files:           md5sum invocation.      27.
* --binary:                     md5sum invocation.      27.
* blank:                        Character sets.         80.
* blank lines, numbering:       nl invocation.          99.
* blanks, ignoring leading:     sort invocation.        68.
* body, numbering:              nl invocation.          17.
* --body-numbering:             nl invocation.          50.
* bugs, reporting:              Introduction.           12.
* byte count:                   wc invocation.          5.
* --bytes:                      cut invocation.         25.
* --bytes:                      fold invocation.        26.
* --bytes:                      head invocation.        35.
* --bytes:                      split invocation.       35.
* --bytes:                      tail invocation.        49.
* --bytes:                      wc invocation.          45.
* -c:                           cut invocation.         33.
* -c:                           fmt invocation.         35.
* -c:                           head invocation.        35.
* -c:                           od invocation.          141.
* -c:                           pr invocation.          92.
* -c:                           sort invocation.        19.
* -c:                           tail invocation.        49.
* -c:                           uniq invocation.        49.
* -c:                           wc invocation.          45.
* case folding:                 sort invocation.        77.
* cat:                          cat invocation.         5.
* characters classes:           Character sets.         60.
* --characters:                 cut invocation.         33.
* --chars:                      wc invocation.          45.
* --check-chars:                uniq invocation.        82.
* checking for sortedness:      sort invocation.        19.
* checksum, 128-bit:            md5sum invocation.      5.
* checksum, 16-bit:             sum invocation.         5.
* cksum:                        cksum invocation.       5.
* cntrl:                        Character sets.         83.
* --columns:                    pr invocation.          69.
* comm:                         comm invocation.        5.
* common field, joining on:     join invocation.        5.
* common lines:                 comm invocation.        16.
* common options:               Common options.         5.
* comparing sorted files:       comm invocation.        5.
* concatenate and write files:  cat invocation.         5.
* context splitting:            csplit invocation.      5.
* converting tabs to spaces:    expand invocation.      5.
* copying files:                cat invocation.         5.
* --count:                      uniq invocation.        49.
* crown margin:                 fmt invocation.         35.
* --crown-margin:               fmt invocation.         35.
* csplit:                       csplit invocation.      5.
* cut:                          cut invocation.         5.
* cyclic redundancy check:      cksum invocation.       5.
* -d:                           cut invocation.         49.
* -d:                           nl invocation.          72.
* -d:                           od invocation.          146.
* -d:                           paste invocation.       29.
* -d:                           pr invocation.          100.
* -d:                           sort invocation.        72.
* -d:                           uniq invocation.        61.
* deleting characters:          Squeezing.              5.
* --delimiter:                  cut invocation.         49.
* --delimiters:                 paste invocation.       29.
* descriptor follow option:     tail invocation.        56.
* differing lines:              comm invocation.        16.
* digit:                        Character sets.         86.
* --digits:                     csplit invocation.      82.
* --double-space:               pr invocation.          100.
* double spacing:               pr invocation.          100.
* down columns:                 pr invocation.          69.
* duplicate lines, outputting:  uniq invocation.        61.
* -e:                           cat invocation.         49.
* -e:                           join invocation.        36.
* -e:                           pr invocation.          106.
* --elide-empty-files:          csplit invocation.      95.
* empty lines, numbering:       nl invocation.          99.
* entire files, output of:      Output of entire files.  5.
* equivalence classes:          Character sets.         99.
* expand:                       expand invocation.      5.
* --expand-tabs:                pr invocation.          106.
* -f:                           csplit invocation.      61.
* -f:                           cut invocation.         42.
* -f:                           nl invocation.          81.
* -f:                           od invocation.          150.
* -f:                           pr invocation.          116.
* -f:                           sort invocation.        77.
* -f:                           tail invocation.        56.
* -f:                           uniq invocation.        31.
* field separator character:    sort invocation.        136.
* --fields:                     cut invocation.         42.
* file contents, dumping unambiguously: od invocation.  5.
* file offset radix:            od invocation.          25.
* fingerprint, 128-bit:         md5sum invocation.      5.
* --first-line-number:          pr invocation.          196.
* first part of files, outputting: head invocation.     5.
* fmt:                          fmt invocation.         5.
* fold:                         fold invocation.        5.
* folding long input lines:     fold invocation.        5.
* --follow:                     tail invocation.        56.
* --footer-numbering:           nl invocation.          81.
* footers, numbering:           nl invocation.          17.
* --form-feed:                  pr invocation.          116.
* --format:                     od invocation.          70.
* formatting file contents:     Formatting file contents.  5.
* -g:                           sort invocation.        82.
* general numeric sort:         sort invocation.        82.
* graph:                        Character sets.         89.
* growing files:                tail invocation.        56.
* -h:                           nl invocation.          87.
* -h:                           od invocation.          154.
* -h:                           pr invocation.          124.
* head:                         head invocation.        5.
* --header-numbering:           nl invocation.          87.
* --header:                     pr invocation.          124.
* headers, numbering:           nl invocation.          17.
* --help:                       Common options.         18.
* help, online:                 Common options.         18.
* hex dump of files:            od invocation.          5.
* -i:                           expand invocation.      38.
* -i:                           join invocation.        42.
* -i:                           nl invocation.          93.
* -i:                           od invocation.          158.
* -i:                           pr invocation.          135.
* -i:                           sort invocation.        100.
* -i:                           uniq invocation.        55.
* --ignore-case:                join invocation.        42.
* --ignore-case:                uniq invocation.        55.
* --indent:                     pr invocation.          203.
* indenting lines:              pr invocation.          203.
* --initial:                    expand invocation.      38.
* initial part of files, outputting: head invocation.   5.
* initial tabs, converting:     expand invocation.      38.
* input tabs:                   pr invocation.          106.
* introduction:                 Introduction.           5.
* -j:                           od invocation.          46.
* -j1:                          join invocation.        50.
* -j2:                          join invocation.        56.
* --join-blank-lines:           nl invocation.          99.
* join:                         join invocation.        5.
* --join-lines:                 pr invocation.          143.
* -k:                           csplit invocation.      89.
* -k:                           sort invocation.        151.
* --keep-files:                 csplit invocation.      89.
* -l:                           nl invocation.          99.
* -l:                           od invocation.          162.
* -l:                           pr invocation.          154.
* -l:                           split invocation.       29.
* -l:                           wc invocation.          57.
* last part of files, outputting: tail invocation.      5.
* left margin:                  pr invocation.          203.
* --length:                     pr invocation.          154.
* line-breaking:                fmt invocation.         18.
* line-by-line comparison:      comm invocation.        5.
* --line-bytes:                 split invocation.       42.
* line count:                   wc invocation.          5.
* line numbering:               nl invocation.          5.
* --lines:                      head invocation.        42.
* --lines:                      split invocation.       29.
* --lines:                      tail invocation.        142.
* --lines:                      wc invocation.          57.
* ln format for `nl':           nl invocation.          112.
* logical pages, numbering on:  nl invocation.          12.
* lower:                        Character sets.         92.
* -m:                           pr invocation.          163.
* -m:                           sort invocation.        25.
* --max-consecutive-size-changes: tail invocation.      119.
* --max-line-length:            wc invocation.          63.
* --max-unchanged-stats:        tail invocation.        129.
* md5sum:                       md5sum invocation.      5.
* --merge:                      pr invocation.          163.
* merging files in parallel:    pr invocation.          5.
* merging files:                paste invocation.       5.
* merging sorted files:         sort invocation.        25.
* message-digest, 128-bit:      md5sum invocation.      5.
* months, sorting by:           sort invocation.        104.
* multicolumn output, generating: pr invocation.        5.
* -n:                           cat invocation.         62.
* -n:                           csplit invocation.      82.
* -n:                           cut invocation.         54.
* -n:                           head invocation.        42.
* -n:                           nl invocation.          108.
* -n:                           pr invocation.          176.
* -n:                           sort invocation.        111.
* -n:                           tail invocation.        142.
* name follow option:           tail invocation.        56.
* nl:                           nl invocation.          5.
* --no-file-warnings:           pr invocation.          212.
* --no-renumber:                nl invocation.          123.
* --number:                     cat invocation.         62.
* --number-format:              nl invocation.          108.
* --number-lines:               pr invocation.          176.
* --number-nonblank:            cat invocation.         43.
* --number-separator:           nl invocation.          129.
* --number-width:               nl invocation.          143.
* numbering lines:              nl invocation.          5.
* numeric sort:                 sort invocation.        111.
* -o:                           od invocation.          166.
* -o:                           pr invocation.          203.
* -o:                           sort invocation.        130.
* octal dump of files:          od invocation.          5.
* od:                           od invocation.          5.
* --omit-header:                pr invocation.          245.
* --omit-pagination:            pr invocation.          257.
* --only-delimited:             cut invocation.         60.
* operating on characters:      Operating on characters.  5.
* operating on sorted files:    Operating on sorted files.  5.
* --output-delimiter:           cut invocation.         64.
* --output-duplicates:          od invocation.          126.
* output file name prefix:      csplit invocation.      61.
* output file name prefix:      split invocation.       14.
* output file name suffix:      csplit invocation.      67.
* output of entire files:       Output of entire files.  5.
* output of parts of files:     Output of parts of files.  5.
* output tabs:                  pr invocation.          135.
* --output-tabs:                pr invocation.          135.
* overwriting of input, allowed: sort invocation.       130.
* -p:                           nl invocation.          123.
* --page-increment:             nl invocation.          93.
* --page_width:                 pr invocation.          281.
* --pages:                      pr invocation.          57.
* paragraphs, reformatting:     fmt invocation.         5.
* parts of files, output of:    Output of parts of files.  5.
* paste:                        paste invocation.       5.
* phone directory order:        sort invocation.        72.
* --pid:                        tail invocation.        104.
* pieces, splitting a file into: split invocation.      5.
* pr:                           pr invocation.          5.
* --prefix:                     csplit invocation.      61.
* print:                        Character sets.         95.
* printing, preparing files for: pr invocation.         5.
* ptx:                          ptx invocation.         5.
* punct:                        Character sets.         98.
* -q:                           csplit invocation.      109.
* -q:                           head invocation.        50.
* -q:                           tail invocation.        150.
* --quiet:                      csplit invocation.      109.
* --quiet:                      head invocation.        50.
* --quiet:                      tail invocation.        150.
* -r:                           pr invocation.          212.
* -r:                           sort invocation.        131.
* -r:                           sum invocation.         26.
* -r:                           tac invocation.         30.
* radix for file offsets:       od invocation.          25.
* ranges:                       Character sets.         42.
* --read-bytes:                 od invocation.          55.
* reformatting paragraph text:  fmt invocation.         5.
* --regex:                      tac invocation.         30.
* repeated characters:          Character sets.         52.
* --repeated:                   uniq invocation.        61.
* --retry:                      tail invocation.        91.
* reverse sorting:              sort invocation.        131.
* reversing files:              tac invocation.         5.
* rn format for `nl':           nl invocation.          116.
* rz format for `nl':           nl invocation.          120.
* -s:                           cat invocation.         69.
* -s:                           csplit invocation.      109.
* -s:                           cut invocation.         60.
* -s:                           fmt invocation.         50.
* -s:                           fold invocation.        33.
* -s:                           nl invocation.          129.
* -s:                           od invocation.          62.
* -s:                           paste invocation.       22.
* -s:                           pr invocation.          219.
* -s:                           sum invocation.         34.
* -s:                           tac invocation.         39.
* -s:                           uniq invocation.        41.
* screen columns:               fold invocation.        14.
* --section-delimiter:          nl invocation.          72.
* section delimiters of pages:  nl invocation.          72.
* sentences and line-breaking:  fmt invocation.         18.
* --sep-string:                 pr invocation.          230.
* --separator:                  pr invocation.          219.
* --separator:                  tac invocation.         39.
* --serial:                     paste invocation.       22.
* --show-all:                   cat invocation.         19.
* --show-control-chars:         pr invocation.          92.
* --show-ends:                  cat invocation.         55.
* --show-nonprinting:           cat invocation.         91.
* --show-nonprinting:           pr invocation.          264.
* --show-tabs:                  cat invocation.         81.
* --silent:                     csplit invocation.      109.
* --silent:                     head invocation.        50.
* --silent:                     tail invocation.        150.
* --skip-bytes:                 od invocation.          46.
* --skip-chars:                 uniq invocation.        41.
* --skip-fields:                uniq invocation.        31.
* --sleep-interval:             tail invocation.        98.
* sort field:                   sort invocation.        151.
* sort:                         sort invocation.        5.
* sort zero-terminated lines:   sort invocation.        160.
* sorted files, operations on:  Operating on sorted files.  5.
* sorting files:                sort invocation.        5.
* space:                        Character sets.         101.
* --spaces:                     fold invocation.        33.
* specifying sets of characters: Character sets.        5.
* --split-only:                 fmt invocation.         50.
* split:                        split invocation.       5.
* splitting a file into pieces by context: csplit invocation.  5.
* splitting a file into pieces: split invocation.       5.
* --squeeze-blank:              cat invocation.         69.
* squeezing blank lines:        cat invocation.         69.
* squeezing repeat characters:  Squeezing.              5.
* --starting-line-number:       nl invocation.          136.
* --status:                     md5sum invocation.      58.
* string constants, outputting: od invocation.          62.
* --strings:                    od invocation.          62.
* --suffix:                     csplit invocation.      67.
* sum:                          sum invocation.         5.
* summarizing files:            Summarizing files.      5.
* --sysv:                       sum invocation.         34.
* -t:                           cat invocation.         75.
* -t:                           expand invocation.      27.
* -t:                           fmt invocation.         42.
* -t:                           md5sum invocation.      70.
* -t:                           od invocation.          70.
* -t:                           pr invocation.          245.
* -t:                           sort invocation.        136.
* -t:                           unexpand invocation.    28.
* --tabs:                       expand invocation.      27.
* tabs to spaces, converting:   expand invocation.      5.
* --tabs:                       unexpand invocation.    28.
* tabstops, setting:            expand invocation.      27.
* tac:                          tac invocation.         5.
* --tagged-paragraph:           fmt invocation.         42.
* tagged paragraphs:            fmt invocation.         42.
* tail:                         tail invocation.        5.
* telephone directory order:    sort invocation.        72.
* text input files:             md5sum invocation.      70.
* --text:                       md5sum invocation.      70.
* text, reformatting:           fmt invocation.         5.
* text utilities:               Top.                    5.
* topological sort:             tsort invocation.       5.
* total counts:                 wc invocation.          11.
* tr:                           tr invocation.          5.
* --traditional:                od invocation.          176.
* translating characters:       Translating.            5.
* tsort:                        tsort invocation.       5.
* type size:                    od invocation.          98.
* -u:                           cat invocation.         85.
* -u:                           fmt invocation.         58.
* -u:                           sort invocation.        145.
* -u:                           uniq invocation.        76.
* unexpand:                     unexpand invocation.    5.
* --uniform-spacing:            fmt invocation.         58.
* uniq:                         uniq invocation.        5.
* unique lines, outputting:     uniq invocation.        76.
* --unique:                     uniq invocation.        76.
* uniquify files:               uniq invocation.        5.
* uniquifying output:           sort invocation.        145.
* unprintable characters, ignoring: sort invocation.    100.
* upper:                        Character sets.         104.
* utilities for text handling:  Top.                    5.
* -v:                           cat invocation.         91.
* -v:                           head invocation.        56.
* -v:                           nl invocation.          136.
* -v:                           od invocation.          126.
* -v:                           pr invocation.          264.
* -v:                           tail invocation.        156.
* --verbose:                    head invocation.        56.
* --verbose:                    split invocation.       50.
* --verbose:                    tail invocation.        156.
* verifying MD5 checksums:      md5sum invocation.      58.
* verifying MD5 checksums:      md5sum invocation.      77.
* --version:                    Common options.         23.
* version number, finding:      Common options.         23.
* -w:                           fmt invocation.         67.
* -w:                           fold invocation.        41.
* -w:                           md5sum invocation.      77.
* -w:                           nl invocation.          143.
* -w:                           od invocation.          134.
* -w:                           pr invocation.          270.
* -w:                           uniq invocation.        82.
* -w:                           wc invocation.          51.
* --warn:                       md5sum invocation.      77.
* wc:                           wc invocation.          5.
* --width:                      fmt invocation.         67.
* --width:                      fold invocation.        41.
* --width:                      od invocation.          134.
* --width:                      pr invocation.          270.
* word count:                   wc invocation.          5.
* --words:                      wc invocation.          51.
* wrapping long input lines:    fold invocation.        5.
* -x:                           od invocation.          170.
* xdigit:                       Character sets.         107.
* -z:                           csplit invocation.      95.
* -z:                           sort invocation.        160.


